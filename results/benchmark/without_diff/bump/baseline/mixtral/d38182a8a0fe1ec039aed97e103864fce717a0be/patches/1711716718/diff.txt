2a3
>     Set<Authentication.User> users = Stream.of(TestAuthentication.ALICE, TestAuthentication.BOB).collect(Collectors.toSet());
7,12c8,13
<                     token -> CompletableFuture.completedFuture(
<                         Stream.of(TestAuthentication.ALICE, TestAuthentication.BOB)
<                             .filter(user -> token.equals(token(user)))
<                             .map(user -> new Authentication.User(user.name()))
<                             .findFirst()
<                     ),
---
>             token -> {
>               Optional<Authentication.User> user = users.stream()
>                   .filter(u -> token.equals(token(u)))
>                   .findFirst();
>               return CompletableFuture.completedFuture(user.map(Authentication.User::name).orElse(null));
>             },
