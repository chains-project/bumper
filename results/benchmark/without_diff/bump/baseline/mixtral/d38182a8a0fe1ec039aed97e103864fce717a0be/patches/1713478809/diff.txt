0a1,16
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.equalTo;
> import java.util.concurrent.CompletableFuture;
> import java.util.concurrent.Executor;
> import java.util.function.BiFunction;
> import java.util.function.Function;
> import org.eclipse.jetty.http.HttpFields;
> import org.eclipse.jetty.http.HttpVersion;
> import org.eclipse.jetty.http.HttpURI;
> import org.eclipse.jetty.http.HttpVersion.HttpVersionMethod;
> import org.eclipse.jetty.server.Request;
> import org.eclipse.jetty.server.Response;
> import org.eclipse.jetty.util.Callback;
> import io.reactivex.Flowable;
> import io.reactivex.functions.Consumer;
> 
21c37,44
<                     return StandardRs.OK;
---
>                 return new Response.FixedLengthContentProvider(
>                     new Response.FixedLengthContentProvider.StreamContentProvider(
>                         Flowable.never(),
>                         0
>                     ),
>                     HttpVersion.HTTP_1_1,
>                     Response.SC_OK
>                 );
41c64,138
<         ).response(line, Headers.EMPTY, Content.EMPTY).send(
---
>     ).response(new Request.Caller() {
>             @Override
>             public long getId() {
>                 return 0;
>             }
> 
>             @Override
>             public Request getRequest() {
>                 return null;
>             }
> 
>             @Override
>             public HttpURI getHttpURI() {
>                 return null;
>             }
> 
>             @Override
>             public HttpVersionMethod getMethod() {
>                 return null;
>             }
> 
>             @Override
>             public String getHeader(String name) {
>                 return null;
>             }
> 
>             @Override
>             public HttpFields getHeaders() {
>                 return null;
>             }
> 
>             @Override
>             public Consumer<Void> onAbort() {
>                 return null;
>             }
> 
>             @Override
>             public void setHandled(boolean handled) {
>             }
> 
>             @Override
>             public void setDispatched(boolean dispatched) {
>             }
> 
>             @Override
>             public void abort() {
>             }
> 
>             @Override
>             public void abort(int code, String message) {
>             }
> 
>             @Override
>             public void abort(int code) {
>             }
> 
>             @Override
>             public void abort(Throwable failure) {
>             }
> 
>             @Override
>             public Callback onComplete() {
>                 return null;
>             }
> 
>             @Override
>             public Executor getExecutor() {
>                 return null;
>             }
>         },
>         line,
>         HttpVersion.HTTP_1_1,
>         Headers.EMPTY,
>         Content.EMPTY
>     ).send(
44c141
<         MatcherAssert.assertThat(
---
>     assertThat(
47c144
<             new IsEqual<>(line)
---
>         equalTo(line)
49c146
<         MatcherAssert.assertThat(
---
>     assertThat(
52c149
<             new IsEqual<>(action)
---
>         equalTo(action)
