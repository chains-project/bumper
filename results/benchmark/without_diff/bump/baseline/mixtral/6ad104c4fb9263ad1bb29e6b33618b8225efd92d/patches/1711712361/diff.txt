1c1,39
< import statements;
\ No newline at end of file
---
> import javax.crypto.Cipher;
> import javax.crypto.spec.IvParameterSpec;
> import javax.crypto.spec.SecretKeySpec;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.security.GeneralSecurityException;
> import java.util.Arrays;
> import java.util.Base64;
> 
> class ChachaDecoder {
>     private static final String CHACHA_ALGORITHM = "ChaCha20-Poly1305";
>     private static final int CHACHA_NONCE_SIZE = 12;
>     private static final int CHACHA_TAG_SIZE = 16;
>     private static final int CHACHA_BLOCK_SIZE = 64;
> 
>     Cipher cipher;
> 
>     ChachaDecoder() throws GeneralSecurityException {
>         cipher = Cipher.getInstance(CHACHA_ALGORITHM);
>     }
> 
>     byte[] decode(String encodedMessage) throws Exception {
>         byte[] message = Base64.getDecoder().decode(encodedMessage);
>         byte[] nonce = Arrays.copyOfRange(message, 0, CHACHA_NONCE_SIZE);
>         byte[] ciphertext = Arrays.copyOfRange(message, CHACHA_NONCE_SIZE, message.length - CHACHA_TAG_SIZE);
>         byte[] tag = Arrays.copyOfRange(message, message.length - CHACHA_TAG_SIZE, message.length);
> 
>         SecretKeySpec keySpec = new SecretKeySpec(
>                 "my-secret-key-1234567890123456".getBytes(StandardCharsets.UTF_8), "AES");
>         IvParameterSpec ivSpec = new IvParameterSpec(nonce);
> 
>         cipher.init(Cipher.DECRYPT_MODE, keySpec, ivSpec);
>         cipher.update(ciphertext);
> 
>         byte[] decrypted = cipher.doFinal(tag);
> 
>         return decrypted;
>     }
> }
\ No newline at end of file
