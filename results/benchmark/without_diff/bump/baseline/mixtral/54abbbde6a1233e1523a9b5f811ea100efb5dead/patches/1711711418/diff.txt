1,2c1,25
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
---
> import com.google.common.io.TeeInputStream;
> import com.jcabi.ssh.JSchException;
> import com.jcabi.ssh.Session;
> import com.jcabi.ssh.Ssh;
> import com.jcabi.ssh.io.LengthOf;
> import com.jcabi.ssh.io.Unchecked;
> import java.io.File;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.io.OutputStream;
> import java.nio.charset.StandardCharsets;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.StandardOpenOption;
> import java.security.KeyPair;
> import java.security.interfaces.RSAPrivateKey;
> import java.security.interfaces.RSAPublicKey;
> import java.util.Base64;
> import java.util.concurrent.TimeUnit;
> import javax.annotation.Nullable;
> import org.apache.commons.io.input.TeeInputStream;
> import org.apache.sshd.client.keyverifier.KeyVerifier;
> import org.eclipse.jgit.util.FS;
> import org.junit.rules.TemporaryFolder;
> 
11,14c34,44
<         final File file = File.createTempFile("jcabi-ssh", ".key");
<         try {
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
---
>     TemporaryFolder temporaryFolder = new TemporaryFolder();
>     temporaryFolder.create();
>     File file = temporaryFolder.newFile("jcabi-ssh.key");
>     try (OutputStream outputStream = new FileOutputStream(file)) {
>         KeyPair keyPair = generateRSAKeyPair();
>         RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();
>         RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();
>         String publicKeyBase64 = Base64.getEncoder().encodeToString(publicKey.getEncoded());
>         String privateKeyBase64 = Base64.getEncoder().encodeToString(privateKey.getEncoded());
>         outputStream.write(publicKeyBase64.getBytes(StandardCharsets.UTF_8));
>         try (TeeInputStream teeInputStream = new TeeInputStream(
21c51
<                         file
---
>                         outputStream
24,34c54,58
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
<             if (this.passphrase == null) {
<                 jsch.addIdentity(file.getAbsolutePath());
<             } else {
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
---
>             ).value(),
>             outputStream
>         )) {
>             Ssh ssh = new Ssh(publicKeyBase64, privateKeyBase64);
>             return ssh.session();
36,43c60
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
<             );
<             return this.session(jsch);
<         } catch (final JSchException ex) {
---
>     } catch (JSchException ex) {
46c63,73
<             Files.deleteIfExists(file.toPath());
---
>         temporaryFolder.delete();
>     }
> }
> 
> private KeyPair generateRSAKeyPair() {
>     try {
>         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");
>         keyPairGenerator.initialize(2048);
>         return keyPairGenerator.generateKeyPair();
>     } catch (Exception ex) {
>         throw new RuntimeException(ex);
