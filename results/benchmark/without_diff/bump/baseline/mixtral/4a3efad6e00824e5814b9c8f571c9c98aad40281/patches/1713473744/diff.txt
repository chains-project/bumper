1c1,91
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.pades.PadesCertificationLevel;
> import eu.europa.esig.dss.pades.PadesSigner;
> import eu.europa.esig.dss.pades.PdfBoxUtils;
> import eu.europa.esig.dss.pades.PdfPadesSigner;
> import eu.europa.esig.dss.pades.PdfSignatureParameters;
> import eu.europa.esig.dss.pades.PdfSigningCertificateSource;
> import eu.europa.esig.dss.pades.PdfSigningCertificateValidator;
> import eu.europa.esig.dss.pades.PdfSignaturePolicy;
> import eu.europa.esig.dss.pades.PdfSignatureService;
> import eu.europa.esig.dss.pades.PdfSignerProperties;
> import eu.europa.esig.dss.pades.factory.PdfSignerFactory;
> import eu.europa.esig.dss.pades.validation.PdfDocumentValidator;
> import eu.europa.esig.dss.pades.validation.PdfSignatureValidationContext;
> import eu.europa.esig.dss.pades.validation.PdfSignatureValidationResult;
> import eu.europa.esig.dss.pades.validation.reports.PdfSignatureValidationReport;
> import eu.europa.esig.dss.signature.Document;
> import eu.europa.esig.dss.signature.DocumentSignatureService;
> import eu.europa.esig.dss.signature.SignatureValue;
> import eu.europa.esig.dss.token.Pkcs12KeyStore;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.CertificateVerifier;
> import eu.europa.esig.dss.validation.TokenVerifier;
> import eu.europa.esig.dss.validation.reports.Reports;
> 
> // ...
> 
> @Override
> public byte[] signPdf(InputStream inputStream, String certificateAlias, String password, String destination) throws Exception {
>     // ...
> 
>     // Create a PdfSignerProperties object
>     PdfSignerProperties properties = new PdfSignerProperties();
> 
>     // Configure the signature appearance
>     properties.setSignatureAppearance(signatureAppearance);
> 
>     // Create a PdfSignerFactory object
>     PdfSignerFactory signerFactory = new PdfSignerFactory(properties);
> 
>     // Create a PadesSigner object
>     PadesSigner signer = signerFactory.newPadesSigner(certificateSource, password);
> 
>     // Create a PdfSignatureService object
>     PdfSignatureService signatureService = new PdfSignatureService();
> 
>     // Create a PdfSignatureParameters object
>     PdfSignatureParameters parameters = new PdfSignatureParameters();
> 
>     // Configure the signature policy
>     parameters.setSignaturePolicy(signaturePolicy);
> 
>     // Configure the signature validation context
>     parameters.setSignatureValidationContext(signatureValidationContext);
> 
>     // Configure the signature validation report
>     parameters.setSignatureValidationReport(signatureValidationReport);
> 
>     // Configure the signature validation result
>     parameters.setSignatureValidationResult(signatureValidationResult);
> 
>     // Configure the signature validation context
>     parameters.setSignatureValidationContext(signatureValidationContext);
> 
>     // Configure the signature validation report
>     parameters.setSignatureValidationReport(signatureValidationReport);
> 
>     // Configure the signature validation result
>     parameters.setSignatureValidationResult(signatureValidationResult);
> 
>     // Configure the document signature service
>     signatureService.setDocumentSignatureService(documentSignatureService);
> 
>     // Configure the signature
>     signer.setSignatureService(signatureService);
> 
>     // Configure the signature validation context
>     signer.setSignatureValidationContext(signatureValidationContext);
> 
>     // Configure the signature validation report
>     signer.setSignatureValidationReport(signatureValidationReport);
> 
>     // Configure the signature validation result
>     signer.setSignatureValidationResult(signatureValidationResult);
> 
>     // Sign the PDF document
>     try (InputStream signedPdfStream = signer.sign(inputStream, destination)) {
>         // ...
>     }
> 
>     // ...
> }
\ No newline at end of file
