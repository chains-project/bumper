++ public java.util.Set org.pitest.bytecode.analysis.ClassTree.codeLineNumbers()
++ public bool org.pitest.bytecode.analysis.ClassTree.isAbstract()
++ public bool org.pitest.bytecode.analysis.ClassTree.isInterface()
++ public bool org.pitest.bytecode.analysis.ClassTree.isSynthetic()
++ public int org.pitest.bytecode.analysis.ClassTree.numberOfCodeLines()
++ public org.pitest.bytecode.analysis.ClassTree org.pitest.bytecode.analysis.ClassTree.rename(org.pitest.classinfo.ClassName)
++ public ClassIdentifier org.pitest.classinfo.ClassIdentifier(long,org.pitest.classinfo.ClassName)
++ public bool org.pitest.classinfo.ClassIdentifier.equals(java.lang.Object)
++ public J org.pitest.classinfo.ClassIdentifier.getHash()
++ public org.pitest.classinfo.ClassName org.pitest.classinfo.ClassIdentifier.getName()
++ public int org.pitest.classinfo.ClassIdentifier.hashCode()
++ public ClassInfo org.pitest.classinfo.ClassInfo(org.pitest.classinfo.ClassPointer,org.pitest.classinfo.ClassPointer,org.pitest.classinfo.ClassInfoBuilder)
++ public bool org.pitest.classinfo.ClassInfo.descendsFrom(java.lang.Class)
++ public java.math.BigInteger org.pitest.classinfo.ClassInfo.getDeepHash()
++ public java.math.BigInteger org.pitest.classinfo.ClassInfo.getHash()
++ public org.pitest.classinfo.HierarchicalClassId org.pitest.classinfo.ClassInfo.getHierarchicalId()
++ public org.pitest.classinfo.ClassIdentifier org.pitest.classinfo.ClassInfo.getId()
++ public org.pitest.classinfo.ClassName org.pitest.classinfo.ClassInfo.getName()
++ public java.util.Optional org.pitest.classinfo.ClassInfo.getOuterClass()
++ public java.util.Optional org.pitest.classinfo.ClassInfo.getSuperClass()
++ public java.lang.String org.pitest.classinfo.ClassInfo.toString()
++ public static org.pitest.classinfo.ClassInfoBuilder org.pitest.classinfo.ClassInfoVisitor.getClassInfo(org.pitest.classinfo.ClassName,byte[],long)
++ public void org.pitest.classinfo.ClassInfoVisitor.visit(int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
++ public void org.pitest.classinfo.ClassInfoVisitor.visitInnerClass(java.lang.String,java.lang.String,java.lang.String,int)
++ public org.objectweb.asm.MethodVisitor org.pitest.classinfo.ClassInfoVisitor.visitMethod(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
++ public org.objectweb.asm.MethodVisitor org.pitest.classinfo.ClassInfoVisitor.visitMethodIfRequired(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String[])
++ public void org.pitest.classinfo.ClassInfoVisitor.visitOuterClass(java.lang.String,java.lang.String,java.lang.String)
++ public void org.pitest.classinfo.ClassInfoVisitor.visitSource(java.lang.String,java.lang.String)
++ public HierarchicalClassId org.pitest.classinfo.HierarchicalClassId(long,org.pitest.classinfo.ClassName,java.lang.String)
++ public HierarchicalClassId org.pitest.classinfo.HierarchicalClassId(org.pitest.classinfo.ClassIdentifier,java.lang.String)
++ public HierarchicalClassId org.pitest.classinfo.HierarchicalClassId(org.pitest.classinfo.ClassIdentifier,java.math.BigInteger)
++ public bool org.pitest.classinfo.HierarchicalClassId.equals(java.lang.Object)
++ public java.lang.String org.pitest.classinfo.HierarchicalClassId.getHierarchicalHash()
++ public org.pitest.classinfo.ClassIdentifier org.pitest.classinfo.HierarchicalClassId.getId()
++ public org.pitest.classinfo.ClassName org.pitest.classinfo.HierarchicalClassId.getName()
++ public int org.pitest.classinfo.HierarchicalClassId.hashCode()
++ public java.lang.String org.pitest.classinfo.HierarchicalClassId.toString()
++ public java.util.stream.Stream org.pitest.classpath.CodeSource.codeTrees()
-- public java.util.Collection org.pitest.classpath.CodeSource.getCode()
-- public java.util.List org.pitest.classpath.CodeSource.getTests()
++ public java.util.stream.Stream org.pitest.classpath.CodeSource.testTrees()
++ public ProjectClassPaths org.pitest.classpath.ProjectClassPaths(org.pitest.classpath.ClassPath,org.pitest.classpath.ClassFilter,org.pitest.classpath.PathFilter)
++ public java.util.Collection org.pitest.classpath.ProjectClassPaths.code()
++ public org.pitest.classpath.ClassPath org.pitest.classpath.ProjectClassPaths.getClassPath()
++ public org.pitest.classpath.ClassFilter org.pitest.classpath.ProjectClassPaths.getFilter()
++ public java.util.Collection org.pitest.classpath.ProjectClassPaths.test()
++ public ClassLines org.pitest.coverage.ClassLines(org.pitest.classinfo.ClassName,java.util.Set)
++ public bool org.pitest.coverage.ClassLines.equals(java.lang.Object)
++ public static org.pitest.coverage.ClassLines org.pitest.coverage.ClassLines.fromTree(org.pitest.bytecode.analysis.ClassTree)
++ public int org.pitest.coverage.ClassLines.getNumberOfCodeLines()
++ public int org.pitest.coverage.ClassLines.hashCode()
++ public bool org.pitest.coverage.ClassLines.isCodeLine(int)
++ public org.pitest.classinfo.ClassName org.pitest.coverage.ClassLines.name()
-- public java.util.Collection org.pitest.coverage.CoverageData.getClassInfo(java.util.Collection)
++ public java.util.Optional org.pitest.coverage.CoverageData.getCoveredLinesForClass(org.pitest.classinfo.ClassName)
-- public java.util.Collection org.pitest.coverage.LegacyClassCoverage.getClassInfo(java.util.Collection)
++ public java.util.Optional org.pitest.coverage.LegacyClassCoverage.getCoveredLinesForClass(org.pitest.classinfo.ClassName)
-- public java.util.Collection org.pitest.coverage.NoCoverage.getClassInfo(java.util.Collection)
++ public java.util.Optional org.pitest.coverage.NoCoverage.getCoveredLinesForClass(org.pitest.classinfo.ClassName)
-- public abstract java.util.Collection org.pitest.coverage.ReportCoverage.getClassInfo(java.util.Collection)
++ public abstract java.util.Optional org.pitest.coverage.ReportCoverage.getCoveredLinesForClass(org.pitest.classinfo.ClassName)
++ public FirstLineInterceptorFactory org.pitest.mutationtest.build.intercept.exclude.FirstLineInterceptorFactory()
++ public org.pitest.mutationtest.build.MutationInterceptor org.pitest.mutationtest.build.intercept.exclude.FirstLineInterceptorFactory.createInterceptor(org.pitest.mutationtest.build.InterceptorParameters)
++ public java.lang.String org.pitest.mutationtest.build.intercept.exclude.FirstLineInterceptorFactory.description()
++ public org.pitest.plugin.Feature org.pitest.mutationtest.build.intercept.exclude.FirstLineInterceptorFactory.provides()
++ public GroovyFilter org.pitest.mutationtest.build.intercept.groovy.GroovyFilter()
++ public void org.pitest.mutationtest.build.intercept.groovy.GroovyFilter.begin(org.pitest.bytecode.analysis.ClassTree)
++ public void org.pitest.mutationtest.build.intercept.groovy.GroovyFilter.end()
++ public java.util.Collection org.pitest.mutationtest.build.intercept.groovy.GroovyFilter.intercept(java.util.Collection,org.pitest.mutationtest.engine.Mutater)
++ public org.pitest.mutationtest.build.InterceptorType org.pitest.mutationtest.build.intercept.groovy.GroovyFilter.type()
++ public GroovyFilterFactory org.pitest.mutationtest.build.intercept.groovy.GroovyFilterFactory()
++ public org.pitest.mutationtest.build.MutationInterceptor org.pitest.mutationtest.build.intercept.groovy.GroovyFilterFactory.createInterceptor(org.pitest.mutationtest.build.InterceptorParameters)
++ public java.lang.String org.pitest.mutationtest.build.intercept.groovy.GroovyFilterFactory.description()
++ public org.pitest.plugin.Feature org.pitest.mutationtest.build.intercept.groovy.GroovyFilterFactory.provides()
-- public EnumConstructorFilter org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilter()
-- public void org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilter.begin(org.pitest.bytecode.analysis.ClassTree)
-- public void org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilter.end()
-- public java.util.Collection org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilter.intercept(java.util.Collection,org.pitest.mutationtest.engine.Mutater)
-- public org.pitest.mutationtest.build.InterceptorType org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilter.type()
-- public EnumConstructorFilterFactory org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilterFactory()
-- public org.pitest.mutationtest.build.MutationInterceptor org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilterFactory.createInterceptor(org.pitest.mutationtest.build.InterceptorParameters)
-- public java.lang.String org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilterFactory.description()
-- public org.pitest.plugin.Feature org.pitest.mutationtest.build.intercept.javafeatures.EnumConstructorFilterFactory.provides()
++ public EnumFilter org.pitest.mutationtest.build.intercept.javafeatures.EnumFilter()
++ public void org.pitest.mutationtest.build.intercept.javafeatures.EnumFilter.begin(org.pitest.bytecode.analysis.ClassTree)
++ public void org.pitest.mutationtest.build.intercept.javafeatures.EnumFilter.end()
++ public java.util.Collection org.pitest.mutationtest.build.intercept.javafeatures.EnumFilter.intercept(java.util.Collection,org.pitest.mutationtest.engine.Mutater)
++ public org.pitest.mutationtest.build.InterceptorType org.pitest.mutationtest.build.intercept.javafeatures.EnumFilter.type()
++ public EnumFilterFactory org.pitest.mutationtest.build.intercept.javafeatures.EnumFilterFactory()
++ public org.pitest.mutationtest.build.MutationInterceptor org.pitest.mutationtest.build.intercept.javafeatures.EnumFilterFactory.createInterceptor(org.pitest.mutationtest.build.InterceptorParameters)
++ public java.lang.String org.pitest.mutationtest.build.intercept.javafeatures.EnumFilterFactory.description()
++ public org.pitest.plugin.Feature org.pitest.mutationtest.build.intercept.javafeatures.EnumFilterFactory.provides()
++ public java.util.List org.pitest.mutationtest.config.PluginServices.findVerifiers()
++ public org.pitest.mutationtest.verify.BuildVerifierFactory org.pitest.mutationtest.config.SettingsFactory.createVerifier()
-- public CombinedStatistics org.pitest.mutationtest.tooling.CombinedStatistics(org.pitest.mutationtest.statistics.MutationStatistics,org.pitest.coverage.CoverageSummary)
++ public CombinedStatistics org.pitest.mutationtest.tooling.CombinedStatistics(org.pitest.mutationtest.statistics.MutationStatistics,org.pitest.coverage.CoverageSummary,java.util.List)
++ public java.util.List org.pitest.mutationtest.tooling.CombinedStatistics.getIssues()
-- public MutationStrategies org.pitest.mutationtest.tooling.MutationStrategies(org.pitest.mutationtest.MutationEngineFactory,org.pitest.mutationtest.HistoryStore,org.pitest.coverage.CoverageGenerator,org.pitest.mutationtest.MutationResultListenerFactory,org.pitest.util.ResultOutputStrategy)
++ public abstract java.util.List org.pitest.mutationtest.verify.BuildVerifier.verify()
-- public abstract void org.pitest.mutationtest.verify.BuildVerifier.verify(org.pitest.classpath.CodeSource)
++ public abstract org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.BuildVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public CompoundBuildVerifierFactory org.pitest.mutationtest.verify.CompoundBuildVerifierFactory(java.util.List)
++ public org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.CompoundBuildVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public java.lang.String org.pitest.mutationtest.verify.CompoundBuildVerifierFactory.description()
-- public DefaultBuildVerifier org.pitest.mutationtest.verify.DefaultBuildVerifier()
++ public DefaultBuildVerifier org.pitest.mutationtest.verify.DefaultBuildVerifier(org.pitest.classpath.CodeSource)
++ public java.util.List org.pitest.mutationtest.verify.DefaultBuildVerifier.verify()
-- public void org.pitest.mutationtest.verify.DefaultBuildVerifier.verify(org.pitest.classpath.CodeSource)
++ public DefaultBuildVerifierFactory org.pitest.mutationtest.verify.DefaultBuildVerifierFactory()
++ public org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.DefaultBuildVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public java.lang.String org.pitest.mutationtest.verify.DefaultBuildVerifierFactory.description()
++ public KotlinVerifierFactory org.pitest.mutationtest.verify.KotlinVerifierFactory()
++ public org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.KotlinVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public java.lang.String org.pitest.mutationtest.verify.KotlinVerifierFactory.description()
++ public MissingJUnit5PluginVerifierFactory org.pitest.mutationtest.verify.MissingJUnit5PluginVerifierFactory()
++ public org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.MissingJUnit5PluginVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public java.lang.String org.pitest.mutationtest.verify.MissingJUnit5PluginVerifierFactory.description()
++ public MissingTestNGPluginVerifierFactory org.pitest.mutationtest.verify.MissingTestNGPluginVerifierFactory()
++ public org.pitest.mutationtest.verify.BuildVerifier org.pitest.mutationtest.verify.MissingTestNGPluginVerifierFactory.create(org.pitest.classpath.CodeSource)
++ public java.lang.String org.pitest.mutationtest.verify.MissingTestNGPluginVerifierFactory.description()
++ public NoVerification org.pitest.mutationtest.verify.NoVerification()
++ public java.util.List org.pitest.mutationtest.verify.NoVerification.verify()