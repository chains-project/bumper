@Test
void testScope() {
    final String line = "GET /resource.txt HTTP/1.1";
    final String action = "foo:bar:baz";
    final AtomicReference<String> caction = new AtomicReference<>();
    final AtomicReference<String> cline = new AtomicReference<>();
    new AuthScopeSlice(
        new Slice() {
            @Override
            public Response response(
                final String line,
                final Iterable<Map.Entry<String, String>> headers,
                final Publisher<ByteBuffer> body
            ) {
                cline.set(line);
                return new SliceSimple(
                    new RsFull(
                        RsStatus.OK, 
                        new Headers.From(new Authorization.Basic("alice", action)), 
                        new Content.From(action.getBytes())
                    )
                ).response(line, headers, body);
            }
        },
        (headers, rline) -> CompletableFuture.completedFuture(
            new AuthScheme.Result() {
                @Override
                public Optional<Authentication.User> user() {
                    return Optional.of(new Authentication.User("alice"));
                }

                @Override
                public String challenge() {
                    return "";
                }
            }
        ),
        (user, act) -> {
            caction.set(act);
            return true;
        }
    ).response(line, Headers.EMPTY, Content.EMPTY).send(
        (status, headers, body) -> CompletableFuture.allOf()
    ).toCompletableFuture().join();
    MatcherAssert.assertThat(
        "Request line passed to slice",
        cline.get(),
        new IsEqual<>(line)
    );
    MatcherAssert.assertThat(
        "Scope passed as action to permissions",
        caction.get(),
        new IsEqual<>(action)
    );
}