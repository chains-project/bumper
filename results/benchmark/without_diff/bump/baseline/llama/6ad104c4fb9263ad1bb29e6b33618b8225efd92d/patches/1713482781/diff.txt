1c1,46
< import org.bouncycastle.crypto.tls.TlsFatalAlert;
\ No newline at end of file
---
> import org.bouncycastle.crypto.engines.ChaChaEngine;
> import org.bouncycastle.crypto.modes.ChaCha20Poly1305;
> import org.bouncycastle.crypto.paddings.PaddingException;
> import org.bouncycastle.crypto.params.KeyParameter;
> import org.bouncycastle.crypto.params.ParametersWithIV;
> 
> import java.io.IOException;
> import java.security.GeneralSecurityException;
> 
> public class ChachaDecoder {
>     private static final int CHACHA_KEY_SIZE = 256;
>     private static final int CHACHA_IV_SIZE = 96;
>     private static final int CHACHA20_POLY1305_IV_SIZE = 1305;
>     private static final int CHACHA_BLOCK_SIZE = 1024;
> 
>     private ChaChaEngine engine;
>     private ChaCha20Poly1305 cipher;
>     private KeyParameter key;
>     private ParametersWithIV parameters;
> 
>     public ChachaDecoder(final KeyParameter key, final ParametersWithIV parameters) {
>         this.key = key;
>         this.parameters = parameters;
>         try {
>             engine = new ChaChaEngine();
>             cipher = new ChaCha20Poly1305(engine);
>         } catch (GeneralSecurityException e) {
>             throw new IllegalArgumentException("ChaCha20Poly1305 init failed", e);
>         }
>     }
> 
>     public void decode(final byte[] input, final int inOff, final int len) throws IOException {
>         try {
>             cipher.init(true, parameters);
>             final int outLen = len - CHACHA_IV_SIZE;
>             final byte[] out = new byte[outLen];
>             final int bytesRead = cipher.processBytes(input, inOff, len, out, 0, outLen);
>             if (bytesRead < 0) {
>                 throw new PaddingException("Invalid padding");
>             }
>             return out;
>         } catch (GeneralSecurityException e) {
>             throw new IOException("ChaCha20Poly1305 decoding failed", e);
>         }
>     }
> }
\ No newline at end of file
