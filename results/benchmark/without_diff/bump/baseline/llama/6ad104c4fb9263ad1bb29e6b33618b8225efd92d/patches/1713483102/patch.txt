import org.bouncycastle.util.Arrays;

public class ChachaDecoder {
    private static final int CHACHA_IV_SIZE = 8;
    private static final int CHACHA_KEY_SIZE = 32;
    private static final int CHACHA_BLOCK_SIZE = 64;
    private static final int CHACHA_STATE_SIZE = 64;

    private byte[] iv;
    private byte[] key;
    private byte[] state;

    public ChachaDecoder(byte[] iv, byte[] key) {
        this.iv = iv;
        this.key = key;
        this.state = new byte[CHACHA_STATE_SIZE];
    }

    public void decode(byte[] ciphertext, int offset, int len) {
        int remaining = len;
        int chunkSize = CHACHA_BLOCK_SIZE - (len % CHACHA_BLOCK_SIZE);

        while (remaining > 0) {
            int chunkLen = Math.min(chunkSize, remaining);
            byte[] chunk = new byte[chunkLen];
            System.arraycopy(ciphertext, offset, chunk, 0, chunkLen);
            decodeChunk(chunk, 0, chunkLen);
            remaining -= chunkLen;
            offset += chunkLen;
        }
    }

    private void decodeChunk(byte[] chunk, int offset, int len) {
        int[] state = new int[CHACHA_STATE_SIZE];
        int[] keystream = new int[CHACHA_KEY_SIZE];

        for (int i = 0; i < CHACHA_KEY_SIZE; i++) {
            keystream[i] = (int) (key[i % key.length] & 0xFF);
        }

        for (int i = 0; i < CHACHA_STATE_SIZE; i++) {
            state[i] = (int) (iv[i % iv.length] & 0xFF);
        }

        for (int i = 0; i < len; i += 4) {
            int block = (chunk[offset + i] & 0xFF) << 24;
            block |= (chunk[offset + i + 1] & 0xFF) << 16;
            block |= (chunk[offset + i + 2] & 0xFF) << 8;
            block |= chunk[offset + i + 3] & 0xFF;

            int keystreamBlock = keystream[i / 4];
            block ^= keystreamBlock;
            block = block & 0xFFFFFF;
            block = block << 8;
            block = block & 0xFFFFFF;
            block ^= keystreamBlock;
            block = block & 0xFFFFFF;

            state[i / 4] = block;
        }

        for (int i = 0; i < len; i += 4) {
            int block = state[i / 4];
            block = (block << 8) & 0xFFFFFF;
            block = block | (chunk[offset + i] & 0xFF);
            block = block & 0xFFFFFF;
            block ^= keystream[i / 4];
            block = block & 0xFFFFFF;
            chunk[offset + i] = (byte) (block >> 24);
            chunk[offset + i + 1] = (byte) (block >> 16);
            chunk[offset + i + 2] = (byte) (block >> 8);
            chunk[offset + i + 3] = (byte) block;
        }
    }
}