{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1052317717,
    "in_class_code": "/**\n * This is the core class of the {@code Snmpman}. The agent simulates the SNMP-capable devices.\n * <br>\n * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which\n * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.\n */\n@Slf4j\npublic class SnmpmanAgent extends BaseAgent {\n    /**\n     * The default charset for files being read.\n     */\n    private static final Charset DEFAULT_CHARSET = Charset.forName(\"UTF-8\");\n\n    /**\n     * The pattern of variable bindings in a walk file.\n     */\n    private static final Pattern VARIABLE_BINDING_PATTERN = Pattern.compile(\"(((iso)?\\\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\\\"\\\"$))\");\n\n    /**\n     * The configuration of this agent.\n     */\n    private final AgentConfiguration configuration;\n\n    /**\n     * The list of managed object groups.\n     */\n    private final List<ManagedObject> groups = new ArrayList<>();\n\n    /**\n     * Initializes a new instance of an SNMP agent.\n     *\n     * @param configuration\n     * \t\tthe configuration for this agent\n     */\n    public SnmpmanAgent(final AgentConfiguration configuration) {\n        super(SnmpmanAgent.getBootCounterFile(configuration), SnmpmanAgent.getConfigurationFile(configuration), new CommandProcessor(new OctetString(MPv3.createLocalEngineID())));\n        this.agent.setWorkerPool(ThreadPool.create(\"RequestPool\", 3));\n        this.configuration = configuration;\n    }\n\n    /**\n     * Sets the private registry value of {@link DefaultMOServer} via reflection.\n     * FIXME\n     * If there is any possibility to avoid this, then replace!\n     *\n     * @param group\n     * \t\t{@link ManagedObject} to register.\n     */\n    private void registerHard(final MOGroup group) {\n        try {\n            final Field registry = server.getClass().getDeclaredField(\"registry\");\n            registry.setAccessible(true);\n            final SortedMap<MOScope, ManagedObject> reg = server.getRegistry();\n            DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(\"\"), group.getScope());\n            reg.put(contextScope, group);\n            registry.set(server, reg);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            log.warn(\"could not set server registry\", e);\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * This is the core class of the {@code Snmpman}. The agent simulates the SNMP-capable devices.\n * <br>\n * This class can be instantiated via the constructor {@link #SnmpmanAgent(com.oneandone.snmpman.configuration.AgentConfiguration)}, which\n * requires an instance of the {@link com.oneandone.snmpman.configuration.AgentConfiguration}.\n */\n@lombok.extern.slf4j.Slf4j\npublic class SnmpmanAgent extends BaseAgent {\n    /**\n     * The default charset for files being read.\n     */\n    private static final java.nio.charset.Charset DEFAULT_CHARSET = java.nio.charset.Charset.forName(\"UTF-8\");\n\n    /**\n     * The pattern of variable bindings in a walk file.\n     */\n    private static final java.util.regex.Pattern VARIABLE_BINDING_PATTERN = java.util.regex.Pattern.compile(\"(((iso)?\\\\.[0-9]+)+) = ((([a-zA-Z0-9-]+): (.*)$)|(\\\"\\\"$))\");\n\n    /**\n     * The configuration of this agent.\n     */\n    private final com.oneandone.snmpman.configuration.AgentConfiguration configuration;\n\n    /**\n     * The list of managed object groups.\n     */\n    private final java.util.List<ManagedObject> groups = new java.util.ArrayList<>();\n\n    /**\n     * Initializes a new instance of an SNMP agent.\n     *\n     * @param configuration\n     * \t\tthe configuration for this agent\n     */\n    public SnmpmanAgent(final com.oneandone.snmpman.configuration.AgentConfiguration configuration) {\n        super(com.oneandone.snmpman.SnmpmanAgent.getBootCounterFile(configuration), com.oneandone.snmpman.SnmpmanAgent.getConfigurationFile(configuration), new CommandProcessor(new OctetString(org.snmp4j.mp.MPv3.createLocalEngineID())));\n        this.agent.setWorkerPool(org.snmp4j.util.ThreadPool.create(\"RequestPool\", 3));\n        this.configuration = configuration;\n    }\n\n    /**\n     * Sets the private registry value of {@link DefaultMOServer} via reflection.\n     * FIXME\n     * If there is any possibility to avoid this, then replace!\n     *\n     * @param group\n     * \t\t{@link ManagedObject} to register.\n     */\n    private void registerHard(final com.oneandone.snmpman.snmp.MOGroup group) {\n        try {\n            final java.lang.reflect.Field registry = server.getClass().getDeclaredField(\"registry\");\n            registry.setAccessible(true);\n            final java.util.SortedMap<MOScope, ManagedObject> reg = server.getRegistry();\n            DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(\"\"), group.getScope());\n            reg.put(contextScope, group);\n            registry.set(server, reg);\n        } catch (java.lang.NoSuchFieldException | java.lang.IllegalAccessException e) {\n            log.warn(\"could not set server registry\", e);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java:[389,77] incompatible types: java.util.SortedMap<org.snmp4j.agent.MOScope,org.snmp4j.agent.ManagedObject<?>> cannot be converted to java.util.SortedMap<org.snmp4j.agent.MOScope,org.snmp4j.agent.ManagedObject>",
        "client_file_path": "/snmpman/snmpman/src/main/java/com/oneandone/snmpman/SnmpmanAgent.java",
        "client_line_position": "389"
    },
    "client_end_line_number": 396,
    "client_line_number": 378,
    "method_code": "/**\n     * Sets the private registry value of {@link DefaultMOServer} via reflection.\n     * FIXME\n     * If there is any possibility to avoid this, then replace!\n     *\n     * @param group {@link ManagedObject} to register.\n     */\n    private void registerHard(final MOGroup group) {\n        try {\n            final Field registry = server.getClass().getDeclaredField(\"registry\");\n            registry.setAccessible(true);\n            final SortedMap<MOScope, ManagedObject> reg = server.getRegistry();\n            DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(\"\"), group.getScope());\n            reg.put(contextScope, group);\n            registry.set(server, reg);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            log.warn(\"could not set server registry\", e);\n        }\n    }",
    "qualified_code": "/**\n * Sets the private registry value of {@link DefaultMOServer} via reflection.\n * FIXME\n * If there is any possibility to avoid this, then replace!\n *\n * @param group\n * \t\t{@link ManagedObject} to register.\n */\nprivate void registerHard(final com.oneandone.snmpman.snmp.MOGroup group) {\n    try {\n        final java.lang.reflect.Field registry = server.getClass().getDeclaredField(\"registry\");\n        registry.setAccessible(true);\n        final java.util.SortedMap<MOScope, ManagedObject> reg = server.getRegistry();\n        DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(\"\"), group.getScope());\n        reg.put(contextScope, group);\n        registry.set(server, reg);\n    } catch (java.lang.NoSuchFieldException | java.lang.IllegalAccessException e) {\n        log.warn(\"could not set server registry\", e);\n    }\n}",
    "method_name": "registerHard"
}