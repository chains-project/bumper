1a2,121
>   import com.jcabi.log.Logger;
>   import com.jcabi.ssh.SSH;
>   import com.jcabi.ssh.SshByPassword;
>   import com.jcabi.ssh.SshBySpec;
>   import com.jcabi.ssh.SshBySystem;
>   import com.jcabi.ssh.SshByUnixSocket;
>   import java.io.IOException;
>   import java.net.Socket;
> 
>   class SshByPasswordTest {
> 
>     private static final String USERNAME = "user";
>     private static final String PASSWORD = "pass";
>     private static final String HOST = "host";
>     private static final int PORT = 1234;
>     private static final String SPEC = "user:pass@host:port";
> 
>     @org.junit.Test
>     public void testByPassword() throws IOException {
>       final SSH ssh = new SshByPassword(USERNAME, PASSWORD, HOST, PORT);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithPort() throws IOException {
>       final SSH ssh = new SshByPassword(USERNAME, PASSWORD, HOST);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSpec() throws IOException {
>       final SSH ssh = new SshByPassword(SPEC);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSocket() throws IOException {
>       final Socket socket = new Socket(HOST, PORT);
>       final SSH ssh = new SshByPassword(USERNAME, PASSWORD, socket);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithTv() throws IOException {
>       final SSH ssh = new SshByPassword(Tv.on(new SshByPassword(USERNAME, PASSWORD, HOST, PORT)));
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSystem() throws IOException {
>       final SSH ssh = new SshByPassword(new SshBySystem());
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocket() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(USERNAME, PASSWORD, path);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocketAndPort() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(USERNAME, PASSWORD, path, PORT);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocketAndTv() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(Tv.on(new SshByPassword(USERNAME, PASSWORD, path)));
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSpecAndTv() throws IOException {
>       final SSH ssh = new SshByPassword(Tv.on(new SshBySpec(SPEC)));
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSystemAndTv() throws IOException {
>       final SSH ssh = new SshByPassword(Tv.on(new SshBySystem()));
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocketAndPortAndTv() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(Tv.on(new SshByUnixSocket(USERNAME, PASSWORD, path, PORT)));
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocketAndTvAndLogger() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(Tv.on(new SshByUnixSocket(USERNAME, PASSWORD, path)), Logger.SYSTEM);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithUnixSocketAndPortAndTvAndLogger() throws IOException {
>       final String path = "/tmp/ssh.sock";
>       final SSH ssh = new SshByPassword(Tv.on(new SshByUnixSocket(USERNAME, PASSWORD, path, PORT)), Logger.SYSTEM);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSpecAndTvAndLogger() throws IOException {
>       final SSH ssh = new SshByPassword(Tv.on(new SshBySpec(SPEC)), Logger.SYSTEM);
>       ssh.close();
>     }
> 
>     @org.junit.Test
>     public void testByPasswordWithSystemAndTvAndLogger() throws IOException {
>       final SSH ssh = new SshByPassword(Tv.on(new SshBySystem()), Logger.SYSTEM);
>       ssh.close();
>     }
>   }
\ No newline at end of file
