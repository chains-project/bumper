1a2,389
> import org.junit.Test;
> 
> import static org.junit.Assert.assertEquals;
> 
> public class FastPolygonizerTests {
> 
>     @Test
>     public void testSimplePolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon);
> 
>         // Then
>         assertEquals(2, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(1));
>     }
> 
>     @Test
>     public void testConcavePolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon);
> 
>         // Then
>         assertEquals(4, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(0, 10)), result.get(3));
>     }
> 
>     @Test
>     public void testHolePolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5));
>         final Polygon hole = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(5, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(8, 8)), result.get(3));
>         assertEquals(new Polygon(new Point(5, 5), new Point(8, 8), new Point(2, 8)), result.get(4));
>     }
> 
>     @Test
>     public void testEmptyPolygon() {
>         // Given
>         final Polygon polygon = new Polygon();
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testNullPolygon() {
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(null);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testNullHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, null);
> 
>         // Then
>         assertEquals(2, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(1));
>     }
> 
>     @Test
>     public void testEmptyHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole = new Polygon();
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(2, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(1));
>     }
> 
>     @Test
>     public void testNullPolygonAndHole() {
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(null, null);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testInvalidPolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // Then
>         try {
>             fastPolygonizer.triangulate(polygon);
>             fail("Expected IllegalArgumentException");
>         } catch (final IllegalArgumentException e) {
>             assertEquals("Polygon is not simple", e.getMessage());
>         }
>     }
> 
>     @Test
>     public void testInvalidHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // Then
>         try {
>             fastPolygonizer.triangulate(polygon, hole);
>             fail("Expected IllegalArgumentException");
>         } catch (final IllegalArgumentException e) {
>             assertEquals("Hole is not simple", e.getMessage());
>         }
>     }
> 
>     @Test
>     public void testPolygonContainsHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(5, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(8, 8)), result.get(3));
>         assertEquals(new Polygon(new Point(5, 5), new Point(8, 8), new Point(2, 8)), result.get(4));
>     }
> 
>     @Test
>     public void testHoleContainsPolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
>         final Polygon hole = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testPolygonIntersectsHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(4, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(15, 15)), result.get(3));
>     }
> 
>     @Test
>     public void testHoleIntersectsPolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testPolygonTouchesHole() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(4, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(15, 15)), result.get(3));
>     }
> 
>     @Test
>     public void testHoleTouchesPolygon() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testPolygonContainsMultipleHoles() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole1 = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
>         final Polygon hole2 = new Polygon(new Point(3, 3), new Point(7, 3), new Point(7, 7), new Point(3, 7));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole1, hole2);
> 
>         // Then
>         assertEquals(7, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(8, 8)), result.get(3));
>         assertEquals(new Polygon(new Point(5, 5), new Point(8, 8), new Point(2, 8)), result.get(4));
>         assertEquals(new Polygon(new Point(5, 5), new Point(2, 8), new Point(3, 7)), result.get(5));
>         assertEquals(new Polygon(new Point(5, 5), new Point(3, 7), new Point(7, 7)), result.get(6));
>     }
> 
>     @Test
>     public void testPolygonIntersectsMultipleHoles() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole1 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole2 = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole1, hole2);
> 
>         // Then
>         assertEquals(4, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(15, 15)), result.get(3));
>     }
> 
>     @Test
>     public void testHoleIntersectsMultiplePolygons() {
>         // Given
>         final Polygon polygon1 = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon polygon2 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon1, polygon2, hole);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testPolygonTouchesMultipleHoles() {
>         // Given
>         final Polygon polygon = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon hole1 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole2 = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon, hole1, hole2);
> 
>         // Then
>         assertEquals(4, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(5, 5)), result.get(0));
>         assertEquals(new Polygon(new Point(0, 0), new Point(5, 5), new Point(10, 10)), result.get(1));
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 10), new Point(0, 10)), result.get(2));
>         assertEquals(new Polygon(new Point(5, 5), new Point(10, 10), new Point(15, 15)), result.get(3));
>     }
> 
>     @Test
>     public void testHoleTouchesMultiplePolygons() {
>         // Given
>         final Polygon polygon1 = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon polygon2 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
>         final Polygon hole = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon1, polygon2, hole);
> 
>         // Then
>         assertEquals(0, result.size());
>     }
> 
>     @Test
>     public void testPolygonContainsPolygon() {
>         // Given
>         final Polygon polygon1 = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon polygon2 = new Polygon(new Point(2, 2), new Point(8, 2), new Point(8, 8), new Point(2, 8));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon1, polygon2);
> 
>         // Then
>         assertEquals(1, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10)), result.get(0));
>     }
> 
>     @Test
>     public void testPolygonIntersectsPolygon() {
>         // Given
>         final Polygon polygon1 = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon polygon2 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon1, polygon2);
> 
>         // Then
>         assertEquals(1, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10)), result.get(0));
>     }
> 
>     @Test
>     public void testPolygonTouchesPolygon() {
>         // Given
>         final Polygon polygon1 = new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
>         final Polygon polygon2 = new Polygon(new Point(5, 5), new Point(15, 5), new Point(15, 15), new Point(5, 15));
> 
>         // When
>         final FastPolygonizer fastPolygonizer = new FastPolygonizer();
>         final List<Polygon> result = fastPolygonizer.triangulate(polygon1, polygon2);
> 
>         // Then
>         assertEquals(1, result.size());
>         assertEquals(new Polygon(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10)), result.get(0));
>     }
> }
\ No newline at end of file
