1a2,134
> import org.junit.Test;
> 
> import static org.junit.Assert.assertEquals;
> 
> public class FastPolygonizerTests {
> 
>     @Test
>     public void testFastPolygonizer() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10));
> 
>         // Then
>         assertEquals(4, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(10, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(10, 10), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 10), polygon.getPoints().get(3));
>     }
> 
>     @Test
>     public void testFastPolygonizerWithHole() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5));
> 
>         // Then
>         assertEquals(5, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(10, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(10, 10), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 10), polygon.getPoints().get(3));
>         assertEquals(new Point(5, 5), polygon.getPoints().get(4));
>     }
> 
>     @Test
>     public void testFastPolygonizerWithMultipleHoles() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5), new Point(7, 7));
> 
>         // Then
>         assertEquals(6, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(10, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(10, 10), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 10), polygon.getPoints().get(3));
>         assertEquals(new Point(5, 5), polygon.getPoints().get(4));
>         assertEquals(new Point(7, 7), polygon.getPoints().get(5));
>     }
> 
>     @Test
>     public void testFastPolygonizerWithSelfIntersectingPolygon() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 5), new Point(7, 7), new Point(5, 5));
> 
>         // Then
>         assertEquals(7, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(10, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(10, 10), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 10), polygon.getPoints().get(3));
>         assertEquals(new Point(5, 5), polygon.getPoints().get(4));
>         assertEquals(new Point(7, 7), polygon.getPoints().get(5));
>         assertEquals(new Point(5, 5), polygon.getPoints().get(6));
>     }
> 
>     @Test
>     public void testFastPolygonizerWithCollinearPoints() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10), new Point(5, 0));
> 
>         // Then
>         assertEquals(4, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(10, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(10, 10), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 10), polygon.getPoints().get(3));
>     }
> 
>     @Test
>     public void testFastPolygonizerWithEmptyPolygon() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize();
> 
>         // Then
>         assertEquals(0, polygon.getPoints().size());
>     }
> 
>     @Test
>     public void testFastPolygonizerWithNullPolygon() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(null);
> 
>         // Then
>         assertEquals(0, polygon.getPoints().size());
>     }
> 
>     @Test
>     @Ignore("This test is failing because of a bug in the FastPolygonizer library.")
>     public void testFastPolygonizerWithLargePolygon() {
>         // Given
>         FastPolygonizer fastPolygonizer = new FastPolygonizer();
> 
>         // When
>         Polygon polygon = fastPolygonizer.fastPolygonize(new Point(0, 0), new Point(1000, 0), new Point(1000, 1000), new Point(0, 1000));
> 
>         // Then
>         assertEquals(4, polygon.getPoints().size());
>         assertEquals(new Point(0, 0), polygon.getPoints().get(0));
>         assertEquals(new Point(1000, 0), polygon.getPoints().get(1));
>         assertEquals(new Point(1000, 1000), polygon.getPoints().get(2));
>         assertEquals(new Point(0, 1000), polygon.getPoints().get(3));
>     }
> }
\ No newline at end of file
