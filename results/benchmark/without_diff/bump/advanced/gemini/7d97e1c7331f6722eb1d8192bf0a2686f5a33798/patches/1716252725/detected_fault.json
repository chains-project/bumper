{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1686100174,
    "in_class_code": "/**\n * Integration case for {@link Region}.\n *\n * @since 0.1\n */\nfinal class RegionITCase {\n    /**\n     * SimpleDB key.\n     */\n    private static final String KEY = System.getProperty(\"failsafe.sdb.key\");\n\n    /**\n     * SimpleDB secret key.\n     */\n    private static final String SECRET = System.getProperty(\"failsafe.sdb.secret\");\n\n    @Test\n    void putsAndRemovesIndividualItems() {\n        final Domain domain = this.domain();\n        try {\n            final String name = RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            final String attr = RandomStringUtils.randomAlphabetic(Tv.EIGHT);\n            final String value = RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            for (int idx = 0; idx < 2; ++idx) {\n                domain.item(name).put(attr, value);\n                MatcherAssert.assertThat(domain.item(name), Matchers.hasKey(attr));\n                domain.item(name).remove(attr);\n                MatcherAssert.assertThat(domain.item(name), Matchers.not(Matchers.hasKey(attr)));\n            }\n        } finally {\n            domain.drop();\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration case for {@link Region}.\n *\n * @since 0.1\n */\nfinal class RegionITCase {\n    /**\n     * SimpleDB key.\n     */\n    private static final java.lang.String KEY = java.lang.System.getProperty(\"failsafe.sdb.key\");\n\n    /**\n     * SimpleDB secret key.\n     */\n    private static final java.lang.String SECRET = java.lang.System.getProperty(\"failsafe.sdb.secret\");\n\n    @org.junit.jupiter.api.Test\n    void putsAndRemovesIndividualItems() {\n        final com.jcabi.simpledb.Domain domain = this.domain();\n        try {\n            final java.lang.String name = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            final java.lang.String attr = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(Tv.EIGHT);\n            final java.lang.String value = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            for (int idx = 0; idx < 2; ++idx) {\n                domain.item(name).put(attr, value);\n                org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.hasKey(attr));\n                domain.item(name).remove(attr);\n                org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.not(org.hamcrest.Matchers.hasKey(attr)));\n            }\n        } finally {\n            domain.drop();\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.simpledb.RegionITCase\n",
        "error_message": "[ERROR] /jcabi-simpledb/src/test/java/com/jcabi/simpledb/RegionITCase.java:[65,68] cannot find symbol",
        "client_file_path": "/jcabi-simpledb/src/test/java/com/jcabi/simpledb/RegionITCase.java",
        "client_line_position": "65"
    },
    "client_end_line_number": 80,
    "client_line_number": 60,
    "method_code": "@Test\n    void putsAndRemovesIndividualItems() {\n        final Domain domain = this.domain();\n        try {\n            final String name = RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            final String attr = RandomStringUtils.randomAlphabetic(Tv.EIGHT);\n            final String value = RandomStringUtils.randomAlphanumeric(Tv.TEN);\n            for (int idx = 0; idx < 2; ++idx) {\n                domain.item(name).put(attr, value);\n                MatcherAssert.assertThat(\n                    domain.item(name), Matchers.hasKey(attr)\n                );\n                domain.item(name).remove(attr);\n                MatcherAssert.assertThat(\n                    domain.item(name), Matchers.not(Matchers.hasKey(attr))\n                );\n            }\n        } finally {\n            domain.drop();\n        }\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid putsAndRemovesIndividualItems() {\n    final com.jcabi.simpledb.Domain domain = this.domain();\n    try {\n        final java.lang.String name = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TEN);\n        final java.lang.String attr = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(Tv.EIGHT);\n        final java.lang.String value = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TEN);\n        for (int idx = 0; idx < 2; ++idx) {\n            domain.item(name).put(attr, value);\n            org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.hasKey(attr));\n            domain.item(name).remove(attr);\n            org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.not(org.hamcrest.Matchers.hasKey(attr)));\n        }\n    } finally {\n        domain.drop();\n    }\n}",
    "method_name": "putsAndRemovesIndividualItems"
}