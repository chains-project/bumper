1c1,9
< @Test
---
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.notNullValue;
> import static org.hamcrest.core.IsEqual.equalTo;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> 
> @org.junit.jupiter.api.Test
3,6c11,12
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
>     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
8,34c14,19
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
>         assertThat("Exception thrown", throwable, notNullValue());
>         assertThat("Exception is InvalidDigestException", throwable.getCause(), instanceOf(com.artipie.docker.error.InvalidDigestException.class));
>         String message = throwable.getCause().getMessage();
>         assertThat("Exception message contains calculated digest", message, new org.hamcrest.core.StringContains(equalTo("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")));
>         assertThat("Exception message contains expected digest", message, new org.hamcrest.core.StringContains(equalTo(digest)));
36,37c21
<             }
<         ).join();
---
>     }).join();
