1,6c1,29
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
---
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
> import eu.europa.esig.dss.enumerations.DigestAlgorithm;
> import eu.europa.esig.dss.enumerations.SignatureLevel;
> import eu.europa.esig.dss.enumerations.CertificatePolicyId;
> import eu.europa.esig.dss.model.DSSDocument;
> import eu.europa.esig.dss.model.InMemoryDocument;
> import eu.europa.esig.dss.model.ToBeSigned;
> import eu.europa.esig.dss.model.x509.CertificateToken;
> import eu.europa.esig.dss.pades.SignatureImageParameters;
> import eu.europa.esig.dss.pades.signature.PdfBoxNativeTableObjectFactory;
> import eu.europa.esig.dss.pades.TableSignatureFieldParameters;
> import org.openpdfsign.SignerParameters;
> import java.io.IOException;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.time.ZoneId;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
> import java.util.stream.Stream;
8c31,32
<         //load PDF file in DSSDocument format
---
> public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignerParameters params) throws IOException {
>     boolean visibleSignature = params.getPage() != null;
10,13c34
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
15d35
<         //PAdES parameters
17,18c37
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
---
>     java.lang.String keyAlias = "alias";
20c39
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>         keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d40
<         ;
25c43
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
30,32c48,51
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
---
>     if (params.getPolicy() != null) {
>         signatureParameters.setSigningCertificatePolicyId(CertificatePolicyId.forValue(params.getPolicy()));
>     }
>     signatureParameters.setPermission(params.getPermission() != null ? params.getPermission() : CertificationPermission.NO_CHANGES_ALLOWED);
34d52
<         // Create PAdESService for signature
36d53
< 
38,39d54
< 
<         // Initialize visual signature and configure
44d58
< 
48c62
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d63
< 
57d69
< 
61,66c73,75
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
---
>         fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
68d76
<             // user-provided timezone, if any
79d86
< 
81,83c88
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
87,92c92
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
97c97
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>             Stream.of(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach((source) -> {
101c101
<                 params.getTSA().stream().forEach(source -> {
---
>             params.getTSA().stream().forEach((source) -> {
107d106
< 
109,111d107
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
115,118d110
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
120d111
< 
126c117
<             signedDocument.save(outputFile.toAbsolutePath().toString());
---
>         signedDocument.save(outputFile.toString());
