0a1,23
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.apache.commons.io.IOUtils;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> 
> import java.io.ByteArrayInputStream;
> import java.io.IOException;
> import java.io.InputStream;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.time.ZoneId;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
> 
3,8d25
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
10,13c27
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
15d28
<         //PAdES parameters
17,20c30,32
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d33
<         ;
25,26c36,37
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c39
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
30,39d40
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
<         log.debug("Signature service initialized");
< 
<         // Initialize visual signature and configure
41c42
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>         eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44,45c45
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {
48c48,50
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             InputStream inputStream = getClass().getClassLoader().getResourceAsStream("signature.png");
>             imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(inputStream)));
>             inputStream.close();
50d51
< 
52c53
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
---
>             org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());
57d57
< 
61,66c61,63
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
---
>         fieldParameters.setOriginX((params.getLeft() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
68d64
<             // user-provided timezone, if any
74c70
<             if (!Strings.isStringEmpty(params.getHint())) {
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {
79d74
< 
81,82d75
< 
< 
87,92c80
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
97,103c85,91
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
---
>             for (String source : Configuration.getInstance().getProperties().getStringArray("tsp_sources")) {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
>             }
>         } else {
>             for (String source : params.getTSA()) {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
>             }
107d94
< 
109,112d95
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
114,118c97
<         SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
---
>     SignatureValue signatureValue = signingToken.sign(dataToSign, signatureParameters.getDigestAlgorithm(), signingToken.getKey(keyAlias));
120d98
< 
