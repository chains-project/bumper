{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1686100174,
    "in_class_code": "/**\n * Integration case for {@link Region}.\n *\n * @since 0.1\n */\nfinal class RegionITCase {\n    /**\n     * SimpleDB key.\n     */\n    private static final String KEY = System.getProperty(\"failsafe.sdb.key\");\n\n    /**\n     * SimpleDB secret key.\n     */\n    private static final String SECRET = System.getProperty(\"failsafe.sdb.secret\");\n\n    /**\n     * Region.Simple can select many items.\n     */\n    @Test\n    void selectsManyItems() {\n        final Domain domain = this.domain();\n        try {\n            for (int idx = 0; idx < Tv.TEN; ++idx) {\n                domain.item(String.format(\"i-%d\", idx)).put(\"hey\", \"\");\n            }\n            MatcherAssert.assertThat(domain.select(new SelectRequest().withSelectExpression(String.format(\"SELECT * FROM `%s`\", domain.name())).withConsistentRead(true)), Matchers.iterableWithSize(Tv.TEN));\n        } finally {\n            domain.drop();\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration case for {@link Region}.\n *\n * @since 0.1\n */\nfinal class RegionITCase {\n    /**\n     * SimpleDB key.\n     */\n    private static final java.lang.String KEY = java.lang.System.getProperty(\"failsafe.sdb.key\");\n\n    /**\n     * SimpleDB secret key.\n     */\n    private static final java.lang.String SECRET = java.lang.System.getProperty(\"failsafe.sdb.secret\");\n\n    /**\n     * Region.Simple can select many items.\n     */\n    @org.junit.jupiter.api.Test\n    void selectsManyItems() {\n        final com.jcabi.simpledb.Domain domain = this.domain();\n        try {\n            for (int idx = 0; idx < Tv.TEN; ++idx) {\n                domain.item(java.lang.String.format(\"i-%d\", idx)).put(\"hey\", \"\");\n            }\n            org.hamcrest.MatcherAssert.assertThat(domain.select(new com.amazonaws.services.simpledb.model.SelectRequest().withSelectExpression(java.lang.String.format(\"SELECT * FROM `%s`\", domain.name())).withConsistentRead(true)), org.hamcrest.Matchers.iterableWithSize(Tv.TEN));\n        } finally {\n            domain.drop();\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.simpledb.RegionITCase\n",
        "error_message": "[ERROR] /jcabi-simpledb/src/test/java/com/jcabi/simpledb/RegionITCase.java:[102,43] cannot find symbol",
        "client_file_path": "/jcabi-simpledb/src/test/java/com/jcabi/simpledb/RegionITCase.java",
        "client_line_position": "102"
    },
    "client_end_line_number": 107,
    "client_line_number": 86,
    "method_code": "/**\n     * Region.Simple can select many items.\n     */\n    @Test\n    void selectsManyItems() {\n        final Domain domain = this.domain();\n        try {\n            for (int idx = 0; idx < Tv.TEN; ++idx) {\n                domain.item(String.format(\"i-%d\", idx)).put(\"hey\", \"\");\n            }\n            MatcherAssert.assertThat(\n                domain.select(\n                    new SelectRequest().withSelectExpression(\n                        String.format(\"SELECT * FROM `%s`\", domain.name())\n                    ).withConsistentRead(true)\n                ),\n                Matchers.iterableWithSize(Tv.TEN)\n            );\n        } finally {\n            domain.drop();\n        }\n    }",
    "qualified_code": "/**\n * Region.Simple can select many items.\n */\n@org.junit.jupiter.api.Test\nvoid selectsManyItems() {\n    final com.jcabi.simpledb.Domain domain = this.domain();\n    try {\n        for (int idx = 0; idx < Tv.TEN; ++idx) {\n            domain.item(java.lang.String.format(\"i-%d\", idx)).put(\"hey\", \"\");\n        }\n        org.hamcrest.MatcherAssert.assertThat(domain.select(new com.amazonaws.services.simpledb.model.SelectRequest().withSelectExpression(java.lang.String.format(\"SELECT * FROM `%s`\", domain.name())).withConsistentRead(true)), org.hamcrest.Matchers.iterableWithSize(Tv.TEN));\n    } finally {\n        domain.drop();\n    }\n}",
    "method_name": "selectsManyItems"
}