act as a senior software engineer, your goal is fix code failures.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
BE SURE to return fully qualified code (e.g. don't return Float but return java.lang.Float)
return only the fixed failing method, not the complete class code, you MUST change something in the code.

the following client code fails:
```java
/**
 * Computes if a given class is to be included in the post-coverage computation
 *
 * If we have include-exclude patterns for Jacoco:
 * - We include the class if it matches the include patterns and does not match the excludes patterns
 * Else:
 * - We include the class if it is available in the binary directories
 *
 * @param className
 * @return true if the class should be included in the coverage result, false otherwise
 */
private boolean classToInclude(java.lang.String className) {
    // False if it matches an excludes pattern
    for (java.lang.String pattern : config.getJacocoExcludes()) {
        org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);
        if (matcher.matches(className)) {
            return false;
        }
    }
    // True if it matches an includes pattern and doesn't match any excludes pattern
    for (java.lang.String pattern : config.getJacocoIncludes()) {
        org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);
        if (matcher.matches(className)) {
            return true;
        }
    }
    // True if it is present in the available binaries
    for (java.lang.String dir : config.getBinJavaDir()) {
        org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());
        if (directoryScanner.scan().getClasses().contains(className)) {
            return true;
        }
    }
    for (java.lang.String dir : config.getBinTestDir()) {
        org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());
        if (directoryScanner.scan().getClasses().contains(className)) {
            return true;
        }
    }
    return false;
}
```

with the following error message:
[ERROR] /flacoco/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java:[205,101] cannot find symbol
  symbol:   method getWildcard()
  location: class org.apache.maven.surefire.api.testset.TestListResolver
