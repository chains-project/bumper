import java.security.cert.CertificateEncodingException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import org.bouncycastle.asn1.ASN1Encodable;
import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1ObjectIdentifier;
import org.bouncycastle.asn1.DERInputStream;
import org.bouncycastle.asn1.DERObjectIdentifier;
import org.bouncycastle.crypto.CipherException;
import org.bouncycastle.crypto.DigestException;
import org.bouncycastle.crypto.EncryptionException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.PBEBlockCipher;
import org.bouncycastle.crypto.PBEParameterKeys;
import org.bouncycastle.crypto.engines.AESFastEngine;
import org.bouncycastle.crypto.engines.RC2Engine;
import org.bouncycastle.crypto.modes.CBCBlockCipher;
import org.bouncycastle.crypto.modes.CFBBlockCipher;
import org.bouncycastle.crypto.modes.OFBBlockCipher;
import org.bouncycastle.crypto.pbe.PBEKey;
import org.bouncycastle.crypto.pbe.PBEParameter;
import org.bouncycastle.crypto.tls.AlertDescription;
import org.bouncycastle.crypto.tls.TlsUtils;

public class ChachaDecoder {
    private static final int CHACHA_KEY_SIZE = 32;
    private static final int CHACHA_IV_SIZE = 12;

    private static final byte[] CHACHA_KEY = new byte[CHACHA_KEY_SIZE];
    private static final byte[] CHACHA_IV = new byte[CHACHA_IV_SIZE];

    private static PBEBlockCipher cipher;

    static {
        try {
            cipher = new AESFastEngine();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public ChachaDecoder() {
        super();
    }

    public void decode(byte[] input, int offset, int length) throws CertificateException, IOException, DecryptionException {
        try {
            ASN1InputStream aIn = new ASN1InputStream(input, offset, length);
            DERInputStream derIn = new DERInputStream(aIn);
            DERObjectIdentifier derObjectIdentifier = derIn.readObjectIdentifier();
            if (derObjectIdentifier.equals(AlertDescription.ALERT_DESCRIPTION)) {
                // Skipping AlertDescription
                derIn.readObject();
            }
            PBEParameterKeys pbeParameterKeys = new PBEParameterKeys(derIn);
            PBEKey pbeKey = pbeParameterKeys.getKey();
            PBEParameter pbeParameter = pbeParameterKeys.getParameter();
            cipher.init(false, pbeKey, pbeParameter);
            byte[] encryptedData = new byte[length - (offset - 4)];
            System.arraycopy(input, offset + 4, encryptedData, 0, encryptedData.length);
            cipher.decrypt(encryptedData, 0, encryptedData.length);
            return encryptedData;
        } catch (IOException | DecryptionException | CertificateException e) {
            e.printStackTrace();
        }
        return null;
    }
}