1,9c1,7
< public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
< 
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
<         representer.addClassTag(ZoneId.class, zoneIdTag);
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
---
> public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {
>     final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();
>     loadingConfig.setTagInspector(new org.yaml.snakeyaml.tag.TagInspector() {
>         @Override
>         public boolean shouldInspectImplicitNonCollectionTags() {
>             return true;
>         }
11,13c9,12
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
---
>         @Override
>         public boolean shouldInspectImplicitCollections() {
>             return true;
>         }
15,17c14,17
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
---
>         @Override
>         public boolean shouldInspectMaps() {
>             return true;
>         }
19c19,22
<         Yaml yaml = new Yaml(constructor, representer);
---
>         @Override
>         public boolean shouldInspectProperties() {
>             return true;
>         }
20a24,42
>         @Override
>         public boolean shouldInspectSingletonTags() {
>             return true;
>         }
>     });
>     final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());
>     final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag("!ZoneId");
>     representer.addClassTag(java.time.ZoneId.class, zoneIdTag);
>     final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag("!LocalDate");
>     representer.addClassTag(java.time.LocalDate.class, localDateTag);
>     final org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(clazz, loadingConfig) {
>         {
>             this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, "ZoneId"));
>             this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, "LocalDate"));
>             this.yamlConstructors.put(zoneIdTag, new com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct());
>             this.yamlConstructors.put(localDateTag, new com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct());
>         }
>     };
>     org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);
22,24c44,46
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
<             throw new RuntimeException(e);
---
>         return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));
>     } catch (java.io.FileNotFoundException e) {
>         throw new java.lang.RuntimeException(e);
