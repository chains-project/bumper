1,10c1,7
< @Test
<     void testScope() {
<         final String line = "GET /resource.txt HTTP/1.1";
<         final String action = "foo:bar:baz";
<         final AtomicReference<String> caction = new AtomicReference<>();
<         final AtomicReference<String> cline = new AtomicReference<>();
<         new AuthScopeSlice(
<             new ScopeSlice() {
<                 @Override
<                 public Scope scope(final String rqline) {
---
> final java.lang.String line = "GET /resource.txt HTTP/1.1";
>     final java.lang.String action = "foo:bar:baz";
>     final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();
>     final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();
>     new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {
>         @java.lang.Override
>         public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {
12c9
<                     return new Scope.FromString(action);
---
>             return new com.artipie.docker.http.Scope.FromString(action);
15,28c12,19
<                 @Override
<                 public Response response(
<                     final String line,
<                     final Iterable<Map.Entry<String, String>> headers,
<                     final Publisher<ByteBuffer> body
<                 ) {
<                     return StandardRs.OK;
<                 }
<             },
<             (headers, rline) -> CompletableFuture.completedFuture(
<                 new AuthScheme.Result() {
<                     @Override
<                     public Optional<Authentication.User> user() {
<                         return Optional.of(new Authentication.User("alice"));
---
>         @java.lang.Override
>         public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {
>             return com.artipie.http.rs.StandardRs.OK;
>         }
>     }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.AuthScheme.Result() {
>         @java.lang.Override
>         public Optional<com.artipie.http.auth.Authentication.User> user() {
>             return java.util.Optional.of(new com.artipie.http.auth.Authentication.SimpleUser("alice"));
31,32c22,23
<                     @Override
<                     public String challenge() {
---
>         @java.lang.Override
>         public java.lang.String challenge() {
35,37c26
<                 }
<             ),
<             (user, act) -> {
---
>     }), ( user, act) -> {
40,54c29,31
<             }
<         ).response(line, Headers.EMPTY, Content.EMPTY).send(
<             (status, headers, body) -> CompletableFuture.allOf()
<         ).toCompletableFuture().join();
<         MatcherAssert.assertThat(
<             "Request line passed to slice",
<             cline.get(),
<             new IsEqual<>(line)
<         );
<         MatcherAssert.assertThat(
<             "Scope passed as action to permissions",
<             caction.get(),
<             new IsEqual<>(action)
<         );
<     }
\ No newline at end of file
---
>     }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();
>     org.hamcrest.MatcherAssert.assertThat("Request line passed to slice", cline.get(), new org.hamcrest.core.IsEqual<>(line));
>     org.hamcrest.MatcherAssert.assertThat("Scope passed as action to permissions", caction.get(), new org.hamcrest.core.IsEqual<>(action));
\ No newline at end of file
