0a1,18
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ext.BlobSource;
> import com.artipie.asto.ext.CheckedBlobSource;
> import com.artipie.asto.ext.Layouts;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.AstoBlobs;
> import com.google.common.base.Throwables;
> 
3c21
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final MemoryStorage storage = new MemoryStorage();
5c23
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage, Layouts.singleTar(), new RepoName.Simple("any")
9c27,30
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
---
>         new CheckedBlobSource(
>             new Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
>         )
12,33c33,38
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>             assertThat(throwable, not(nullValue()));
>             assertThat(throwable, instanceOf(InvalidDigestException.class));
>             final String message = Throwables.getRootCause(throwable).getMessage();
>             assertThat(
>                 message,
>                 not(not(new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")))
34a40
>             assertThat(message, new StringContains(digest));
38a45,67
> 
> class StringContains implements org.hamcrest.Matcher<String> {
>     private final boolean contains;
>     private final String substring;
> 
>     StringContains(boolean contains, String substring) {
>         this.contains = contains;
>         this.substring = substring;
>     }
> 
>     @Override
>     public boolean matches(final String s) {
>         return contains
>             ? s.contains(substring)
>             : !s.contains(substring);
>     }
> 
>     public void describeTo(org.hamcrest.Description description) {
>         description.appendText("a string");
>         description.appendText(contains ? " containing " : " not containing ");
>         description.appendText(substring);
>     }
> }
\ No newline at end of file
