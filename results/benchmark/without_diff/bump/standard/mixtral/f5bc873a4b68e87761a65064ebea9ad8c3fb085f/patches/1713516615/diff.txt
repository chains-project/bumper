0a1
> import org.apache.maven.model.Model;
1a3,68
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.DependencyCollectionException;
> import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
> import org.eclipse.aether.impl.DefaultServiceLocator;
> import org.eclipse.aether.repository.LocalRepository;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactRequest;
> import org.eclipse.aether.resolution.ArtifactResolutionException;
> import org.eclipse.aether.resolution.ArtifactResult;
> import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;
> import org.eclipse.aether.spi.locator.ServiceLocator;
> import org.eclipse.aether.transfer.ArtifactTransferException;
> import org.eclipse.aether.util.artifact.JavaScopes;
> 
> //...
> 
> private MavenProject getProject(String groupId, String artifactId, String version) {
>     RepositorySystem repositorySystem = newRepositorySystem();
>     LocalRepository localRepository = new LocalRepository("local-repo");
>     ServiceLocator serviceLocator = new DefaultServiceLocator();
>     serviceLocator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory::new);
>     RepositorySystemSession session = newRepositorySystemSession(repositorySystem, localRepository, serviceLocator);
>     
>     try {
>         CollectRequest collectRequest = new CollectRequest();
>         RemoteRepository remoteRepository = new RemoteRepository.Builder("central", "default", "https://repo.maven.apache.org/maven2/").build();
>         collectRequest.setRemoteRepositories(remoteRepository);
>         collectRequest.addDependency(newDependency(groupId, artifactId, version, JavaScopes.COMPILE));
>         DependencyCollectionException exception = new DependencyCollectionException("Failed to collect dependencies");
>         try {
>             repositorySystem.collectDependencies(session, collectRequest);
>         } catch (DependencyCollectionException e) {
>             throw exception;
>         }
>         
>         ArtifactRequest artifactRequest = new ArtifactRequest();
>         artifactRequest.setArtifact(newDependency(groupId, artifactId, version, JavaScopes.COMPILE).getArtifact());
>         artifactRequest.setRepositories(remoteRepository);
>         ArtifactResult artifactResult = repositorySystem.resolveArtifact(session, artifactRequest);
>         
>         return new MavenProject(model, artifactResult.getArtifact());
>     } catch (ArtifactResolutionException | ArtifactTransferException e) {
>         throw new RuntimeException("Failed to resolve artifact", e);
>     }
> }
> 
> private RepositorySystem newRepositorySystem() {
>     return new org.eclipse.aether.RepositorySystemImpl();
> }
> 
> private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem, LocalRepository localRepository, ServiceLocator serviceLocator) {
>     RepositorySystemSession session = repositorySystem.newSession();
>     session.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(localRepository));
>     serviceLocator.setService(RepositorySystemSession.class, session);
>     return session;
> }
> 
> private Dependency newDependency(String groupId, String artifactId, String version, String scope) {
>     return new Dependency(new DefaultArtifact(groupId, artifactId, version, scope), JavaScopes.getScope(scope));
> }
> 
> private DefaultArtifact newArtifact(String groupId, String artifactId, String version, String scope) {
>     return new DefaultArtifact(groupId, artifactId, version, null, null, null, scope);
> }
\ No newline at end of file
