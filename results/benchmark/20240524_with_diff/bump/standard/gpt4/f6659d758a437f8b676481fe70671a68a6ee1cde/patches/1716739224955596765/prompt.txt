Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
BE SURE to return fully qualified code (e.g. don't return Float but return java.lang.Float)
return only the fixed failing method, not the complete class code, you MUST change something in the code.

the following client code fails:
```java
public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {
    final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();
    loadingConfig.setTagInspector(new com.premiumminds.billy.core.test.TrustedTagInspector());
    final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());
    final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag("!ZoneId");
    representer.addClassTag(java.time.ZoneId.class, zoneIdTag);
    final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag("!LocalDate");
    representer.addClassTag(java.time.LocalDate.class, localDateTag);
    final org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(clazz, loadingConfig) {
        {
            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, "ZoneId"));
            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, "LocalDate"));
            this.yamlConstructors.put(zoneIdTag, new com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct());
            this.yamlConstructors.put(localDateTag, new com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct());
        }
    };
    org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);
    try {
        return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));
    } catch (java.io.FileNotFoundException e) {
        throw new java.lang.RuntimeException(e);
    }
}
```

with the following error message:
[ERROR] /billy/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java:[67,43] cannot find symbol
  symbol:   class TrustedTagInspector
  location: class com.premiumminds.billy.core.test.AbstractTest


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
-- public TrustedPrefixesTagInspector org.yaml.snakeyaml.inspector.TrustedPrefixesTagInspector(java.util.List)
-- public bool org.yaml.snakeyaml.inspector.TrustedPrefixesTagInspector.isGlobalTagAllowed(org.yaml.snakeyaml.nodes.Tag)
-- public TrustedTagInspector org.yaml.snakeyaml.inspector.TrustedTagInspector()
-- public bool org.yaml.snakeyaml.inspector.TrustedTagInspector.isGlobalTagAllowed(org.yaml.snakeyaml.nodes.Tag)