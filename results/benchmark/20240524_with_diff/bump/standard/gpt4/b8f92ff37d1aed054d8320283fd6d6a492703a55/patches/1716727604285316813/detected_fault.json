{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 887750041,
    "in_class_code": "/**\n * This class contains the result of the execution of a set of test units\n *\n * @author Matias Martinez\n */\npublic class CoverageMatrix {\n    private Logger logger = Logger.getLogger(CoverageMatrix.class);\n\n    private FlacocoConfig config;\n\n    public CoverageMatrix(FlacocoConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Key is the line, value is a set of test methods that execute that line\n     */\n    protected Map<Location, Set<TestMethod>> resultExecution = new HashMap<>();\n\n    /**\n     * Map between executed test methods and their result. True if passing, false is failing.\n     */\n    protected Map<TestMethod, Boolean> tests = new HashMap<>();\n\n    /**\n     * Computes if a given class is to be included in the post-coverage computation\n     *\n     * If we have include-exclude patterns for Jacoco:\n     * - We include the class if it matches the include patterns and does not match the excludes patterns\n     * Else:\n     * - We include the class if it is available in the binary directories\n     *\n     * @param className\n     * @return true if the class should be included in the coverage result, false otherwise\n     */\n    private boolean classToInclude(String className) {\n        // False if it matches an excludes pattern\n        for (String pattern : config.getJacocoExcludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return false;\n            }\n        }\n        // True if it matches an includes pattern and doesn't match any excludes pattern\n        for (String pattern : config.getJacocoIncludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return true;\n            }\n        }\n        // True if it is present in the available binaries\n        for (String dir : config.getBinJavaDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        for (String dir : config.getBinTestDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "qualified_in_class_code": "/**\n * This class contains the result of the execution of a set of test units\n *\n * @author Matias Martinez\n */\npublic class CoverageMatrix {\n    private org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(fr.spoonlabs.flacoco.core.coverage.CoverageMatrix.class);\n\n    private fr.spoonlabs.flacoco.core.config.FlacocoConfig config;\n\n    public CoverageMatrix(fr.spoonlabs.flacoco.core.config.FlacocoConfig config) {\n        this.config = config;\n    }\n\n    /**\n     * Key is the line, value is a set of test methods that execute that line\n     */\n    protected java.util.Map<fr.spoonlabs.flacoco.api.result.Location, java.util.Set<fr.spoonlabs.flacoco.core.test.method.TestMethod>> resultExecution = new java.util.HashMap<>();\n\n    /**\n     * Map between executed test methods and their result. True if passing, false is failing.\n     */\n    protected java.util.Map<fr.spoonlabs.flacoco.core.test.method.TestMethod, java.lang.Boolean> tests = new java.util.HashMap<>();\n\n    /**\n     * Computes if a given class is to be included in the post-coverage computation\n     *\n     * If we have include-exclude patterns for Jacoco:\n     * - We include the class if it matches the include patterns and does not match the excludes patterns\n     * Else:\n     * - We include the class if it is available in the binary directories\n     *\n     * @param className\n     * @return true if the class should be included in the coverage result, false otherwise\n     */\n    private boolean classToInclude(java.lang.String className) {\n        // False if it matches an excludes pattern\n        for (java.lang.String pattern : config.getJacocoExcludes()) {\n            org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return false;\n            }\n        }\n        // True if it matches an includes pattern and doesn't match any excludes pattern\n        for (java.lang.String pattern : config.getJacocoIncludes()) {\n            org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return true;\n            }\n        }\n        // True if it is present in the available binaries\n        for (java.lang.String dir : config.getBinJavaDir()) {\n            org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        for (java.lang.String dir : config.getBinTestDir()) {\n            org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   method getWildcard()\n  location: class org.apache.maven.surefire.api.testset.TestListResolver\n",
        "error_message": "[ERROR] /flacoco/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java:[205,101] cannot find symbol",
        "client_file_path": "/flacoco/src/main/java/fr/spoonlabs/flacoco/core/coverage/CoverageMatrix.java",
        "client_line_position": "205"
    },
    "client_end_line_number": 212,
    "client_line_number": 171,
    "method_code": "/**\n\t * Computes if a given class is to be included in the post-coverage computation\n\t *\n\t * If we have include-exclude patterns for Jacoco:\n\t * - We include the class if it matches the include patterns and does not match the excludes patterns\n\t * Else:\n\t * - We include the class if it is available in the binary directories\n\t * @param className\n\t * @return true if the class should be included in the coverage result, false otherwise\n\t */\n    private boolean classToInclude(String className) {\n        // False if it matches an excludes pattern\n        for (String pattern : config.getJacocoExcludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return false;\n            }\n        }\n        // True if it matches an includes pattern and doesn't match any excludes pattern\n        for (String pattern : config.getJacocoIncludes()) {\n            WildcardMatcher matcher = new WildcardMatcher(pattern);\n            if (matcher.matches(className)) {\n                return true;\n            }\n        }\n\n        // True if it is present in the available binaries\n        for (String dir : config.getBinJavaDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n        for (String dir : config.getBinTestDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());\n            if (directoryScanner.scan().getClasses().contains(className)) {\n                return true;\n            }\n        }\n\n        return false;\n    }",
    "qualified_code": "/**\n * Computes if a given class is to be included in the post-coverage computation\n *\n * If we have include-exclude patterns for Jacoco:\n * - We include the class if it matches the include patterns and does not match the excludes patterns\n * Else:\n * - We include the class if it is available in the binary directories\n *\n * @param className\n * @return true if the class should be included in the coverage result, false otherwise\n */\nprivate boolean classToInclude(java.lang.String className) {\n    // False if it matches an excludes pattern\n    for (java.lang.String pattern : config.getJacocoExcludes()) {\n        org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);\n        if (matcher.matches(className)) {\n            return false;\n        }\n    }\n    // True if it matches an includes pattern and doesn't match any excludes pattern\n    for (java.lang.String pattern : config.getJacocoIncludes()) {\n        org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);\n        if (matcher.matches(className)) {\n            return true;\n        }\n    }\n    // True if it is present in the available binaries\n    for (java.lang.String dir : config.getBinJavaDir()) {\n        org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n        if (directoryScanner.scan().getClasses().contains(className)) {\n            return true;\n        }\n    }\n    for (java.lang.String dir : config.getBinTestDir()) {\n        org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(dir), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n        if (directoryScanner.scan().getClasses().contains(className)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "method_name": "classToInclude"
}