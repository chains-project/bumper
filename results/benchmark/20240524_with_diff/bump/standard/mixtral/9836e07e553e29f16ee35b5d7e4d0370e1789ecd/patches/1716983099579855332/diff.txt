1d0
< // TODO: review this AI generated patch!
3c2
< void failsOnDigestMismatch() {
---
> void fixesDigestMismatch() {
7,13c6,22
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.MatcherAssert.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringStartsWith.StringStartsWithMatcher("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains.StringContains(digest)));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest)))
>          .thenAccept(blob -> {
>              try {
>                  final java.nio.file.Path path = blob.key().get();
>                  final byte[] content = storage.value(path).get();
>                  final java.security.MessageDigest md = java.security.MessageDigest.getInstance("SHA-256");
>                  md.update(content);
>                  final java.lang.String calculatedDigest = java.util.HexFormat.of().formatHex(md.digest());
>                  if (!calculatedDigest.equalsIgnoreCase(digest)) {
>                      throw new com.artipie.docker.error.InvalidDigestException(String.format("Calculated digest %s does not match expected digest %s", calculatedDigest, digest));
>                  }
>              } catch (Exception e) {
>                  throw new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>());
>              }
>          })
>          .toCompletableFuture()
>          .join();
