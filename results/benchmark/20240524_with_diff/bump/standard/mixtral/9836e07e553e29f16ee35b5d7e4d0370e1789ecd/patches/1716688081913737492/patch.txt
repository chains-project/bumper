@org.junit.jupiter.api.Test
void failsOnDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip.InMemoryStorage();
    com.artipie.docker.asto.calculated.MD5 digest;
    final com.artipie.asto.memory.InMemoryStorage inMemoryStorage = new com.artipie.asto.memory.InMemoryStorage();
    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(inMemoryStorage, new com.artipie.docker.asto.MD5CalculatorImpl());
    final java.lang.String calculatedDigest = "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7";
    final java.lang.String digestValue = "123";
    blobs.put(new java.nio.charset.StandardCharsets.UTF_8.toString(), new java.nio.charset.StandardCharsets.UTF_org.hamcrest.core.StringStartsWith(calculatedDigest)).toCompletableFuture().handle(( blob, throwable) -> {
        org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
        org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getMessage(), new org.hamcrein.core.StringContains(calculatedDigest));
        org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", throwable.getMessage(), new org.hamcrest.core.StringContains(digestValue));
        return java.util.concurrent.CompletableFuture.allOf();
    }).join();
}