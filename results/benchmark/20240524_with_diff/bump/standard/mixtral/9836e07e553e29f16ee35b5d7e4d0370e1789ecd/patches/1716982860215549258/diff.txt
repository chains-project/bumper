0a1,22
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.notNullValue;
> import static org.hamcrest.core.IsEqual.equalTo;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.ExtendedCheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Completable;
> import java.util.concurrent.CompletionStage;
> 
3c25
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new MemoryStorage();
5c27,29
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new com.artipie.docker.RepoName.Simple("any")
8,15c32,35
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
---
>     final Key key = new Key.From("data".getBytes(StandardCharsets.UTF_8));
>     final Content content = Content.From("data".getBytes());
>     final Digest calculatedDigest = new Sha256(
>         com.artipie.docker.Digest.calculateSha256(content.bytes())
17,20c37,39
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
---
>     final CheckedBlobSource checkedBlobSource = new ExtendedCheckedBlobSource(
>         content,
>         calculatedDigest
22c41,47
<                 MatcherAssert.assertThat(
---
>     final CompletionStage<Void> put = blobs.put(checkedBlobSource);
>     put.toCompletableFuture()
>         .handle((Void v, Throwable throwable) -> {
>             assertThat("Exception thrown", throwable, notNullValue());
>             assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>             final InvalidDigestException idException = (InvalidDigestException) throwable;
>             assertThat(
24,28c49,50
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                 idException.message(),
>                 equalTo(String.format("invalid digest for %s, expected %s, got %s", key, calculatedDigest, idException.digest()))
30,37c52,55
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
<                 return CompletableFuture.allOf();
<             }
<         ).join();
---
>             assertThat("Exception message contains expected digest", idException.message(), equalTo(String.format("invalid digest for %s, expected %s, got %s", key, digest, idException.digest())));
>             return Completable.complete();
>         })
>         .join();
