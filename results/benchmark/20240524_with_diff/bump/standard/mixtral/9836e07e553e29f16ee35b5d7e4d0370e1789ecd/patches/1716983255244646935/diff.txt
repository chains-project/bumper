1,2c1,19
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.core.IsNot.not;
> import static org.hamcrest.core.StringContains.containsString;
> import static org.hamcrest.core.StringStartsWith.startsWith;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Single;
> 
> @Test
4,13c21,44
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.MatcherAssert.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringStartsWith.StringStartsWithMatcher("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains.StringContains(digest)));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     final InMemoryStorage storage = new InMemoryStorage();
>     final AstoBlobs blobs = new AstoBlobs(
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
>     );
>     final String digest = "123";
>     final Key key = new SimpleKey("data".getBytes(StandardCharsets.UTF_8));
>     blobs.put(
>         new CheckedBlobSource(
>             Content.from("data".getBytes()),
>             new Sha256(digest)
>         )
>     )
>     .singleOrError()
>     .flatMapCompletable(blob -> {
>         assertThat("Exception thrown", false, not(new IsNull<>()));
>         final Throwable rootCause = Throwables.getRootCause(new RuntimeException());
>         assertThat("Exception is InvalidDigestException", rootCause, instanceOf(InvalidDigestException.class));
>         assertThat("Exception message contains calculated digest", rootCause.getMessage(), startsWith("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>         assertThat("Exception message contains expected digest", rootCause.getMessage(), containsString(digest));
>         return CompletableFuture.allOf();
>     })
>     .blockingAwait();
