@org.junit.jupiter.api.Test
void failsOnDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip.InMemoryStorage();
    com.artipie.docker.asto.calculated digest;
    final com.artipie.asto.memory.InMemoryStorage blobs = new com.artipie.asto.memory.InMemoryStorage();
    final java.lang.String calculatedDigest = "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7";
    final java.lang.String digest = "123";
    blobs.put(new com.artipie.dorg.hamcrest.core.StringStartsWith<>(calculatedDigest))
            .toCompletableFuture()
            .handle(( blob, throwable) -> {
                org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable != null);
                org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException",
                        com.google.common.base.Throwables.getRootCause(throwable),
                        new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
                org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest",
                        com.google.common.base.Throwables.getRootCause(throwable).getMessage(),
                        new org.hamcrest.core.StringContains(calculatedDigest));
                org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest",
                        throwable.getMessage(),
                        new org.hamcrest.core.StringContains(digest));
                return java.util.concurrent.CompletableFuture.allOf();
            })
            .join();
}