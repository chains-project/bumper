import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.core.IsNot.not;
import static org.hamcrest.core.StringContains.containsString;
import static org.hamcrest.core.StringStartsWith.startsWith;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.junit.jupiter.api.Test;
import com.artipie.asto.Content;
import com.artipie.asto.Key;
import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.CheckedBlobSource;
import com.artipie.docker.Digest;
import com.artipie.docker.error.InvalidDigestException;
import com.google.common.base.Throwables;
import io.reactivex.Single;

@Test
void failsOnDigestMismatch() {
    final InMemoryStorage storage = new InMemoryStorage();
    final AstoBlobs blobs = new AstoBlobs(
        storage,
        new DefaultLayout(),
        new RepoName.Simple("any")
    );
    final String digest = "123";
    final Key key = new SimpleKey("data".getBytes(StandardCharsets.UTF_8));
    blobs.put(
        new CheckedBlobSource(
            Content.from("data".getBytes()),
            new Sha256(digest)
        )
    )
    .singleOrError()
    .flatMapCompletable(blob -> {
        assertThat("Exception thrown", false, not(new IsNull<>()));
        final Throwable rootCause = Throwables.getRootCause(new RuntimeException());
        assertThat("Exception is InvalidDigestException", rootCause, instanceOf(InvalidDigestException.class));
        assertThat("Exception message contains calculated digest", rootCause.getMessage(), startsWith("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
        assertThat("Exception message contains expected digest", rootCause.getMessage(), containsString(digest));
        return CompletableFuture.allOf();
    })
    .blockingAwait();
}