import org.jasypt.util.password.PasswordEncryptor;
import org.jasypt.util.text.TextEncryptor;
import org.jasypt.digest.StringDigester;
import org.jasypt.encryption.pbe.PBEStringEncryptor;

import java.lang.String;
import java.lang.Object;

// ...

public class GeoStoreDigestPasswordEncoder {

    // ...

    private PasswordEncryptor passwordEncryptor;
    private TextEncryptor textEncryptor;
    private StringDigester stringDigester;
    private PBEStringEncryptor pbeStringEncryptor;

    // ...

    public void setPasswordEncryptor(PasswordEncryptor passwordEncryptor) {
        this.passwordEncryptor = passwordEncryptor;
    }

    public void setTextEncryptor(TextEncryptor textEncryptor) {
        this.textEncryptor = textEncryptor;
    }

    public void setStringDigester(StringDigester stringDigester) {
        this.stringDigester = stringDigester;
    }

    public void setPbeStringEncryptor(PBEStringEncryptor pbeStringEncryptor) {
        this.pbeStringEncryptor = pbeStringEncryptor;
    }

    public String encodePassword(String rawPassword, Object salt) {
        // Use the appropriate encryptor based on the configuration
        if (passwordEncryptor != null) {
            return passwordEncryptor.encryptPassword(rawPassword);
        } else if (textEncryptor != null) {
            return textEncryptor.encrypt(rawPassword);
        } else if (stringDigester != null) {
            return stringDigester.digest(rawPassword);
        } else if (pbeStringEncryptor != null) {
            return pbeStringEncryptor.encrypt(rawPassword);
        } else {
            throw new IllegalStateException("No encryptor or digester has been configured.");
        }
    }

    public boolean isPasswordValid(String encryptedPassword, String rawPassword, Object salt) {
        // Use the appropriate encryptor based on the configuration
        if (passwordEncryptor != null) {
            return passwordEncryptor.checkPassword(rawPassword, encryptedPassword);
        } else if (textEncryptor != null) {
            return textEncryptor.decrypt(encryptedPassword).equals(rawPassword);
        } else if (stringDigester != null) {
            return stringDigester.matches(rawPassword, encryptedPassword);
        } else if (pbeStringEncryptor != null) {
            return pbeStringEncryptor.checkPassword(rawPassword, encryptedPassword);
        } else {
            throw new IllegalStateException("No encryptor or digester has been configured.");
        }
    }
}