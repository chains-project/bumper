1,2c1,2
< @Override
<         protected PasswordEncoder createStringEncoder() {
---
> @java.lang.Override
> protected org.acegisecurity.providers.encoding.PasswordEncoder createStringEncoder() {
4,5c4
< 
<                 char[] chars = toChars(password);
---
>     char[] chars = it.geosolutions.geostore.core.security.password.SecurityUtils.toChars(password);
7,11c6,14
<                         stringEncrypter = new StandardPBEStringEncryptor();
<                         stringEncrypter.setPasswordCharArray(chars);
< 
<                         if (getProviderName() != null && !getProviderName().isEmpty()) {
<                                 stringEncrypter.setProviderName(getProviderName());
---
>         StringEncryptor stringEncrypter = new org.jasypt.util.text.DefaultStringEncryptor();
>         stringEncrypior.setPassword(new String(chars));
>         if ((getProviderName() != null) && (!getProviderName().isEmpty())) {
>             stringEncrypior.setKeyObtentionIterations(1024);
>             String algorithm = getAlgorithm();
>             StringProviderProvider provider = new SunJCEStringProvider();
>             String engine = "PBEWithMD5AndTripleDES";
>         String ivParameterSpec = null;
>         stringEncrypior.setParameters(engine, provider, algorithm, ivParameterSpec);
13,17c16,17
<                         stringEncrypter.setAlgorithm(getAlgorithm());
< 
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
< 
---
>         StringEncoder encoder = new StringEncoder();
>         encoder.setStringEncryptor(stringEncrypior);
20,21c20,21
<                         scramble(password);
<                         scramble(chars);
---
>         it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(password);
>         it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(chars);
