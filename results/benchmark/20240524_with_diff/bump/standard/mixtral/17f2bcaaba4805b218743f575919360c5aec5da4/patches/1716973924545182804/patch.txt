import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.CoordinateList;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.index.ItemVisitor;
import org.locationtech.jts.index.quadtree.Quadtree;
import org.locationtech.jts.noding.IntersectionMatrix;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.NodingIndex;
import org.locationtech.jts.noding.SegmentString;
import micycle.pgs.commons.PEdge;
import micycle.pgs.commons.PVector;
import processing.core.PApplet;
import processing.core.PShape;
import static micycle.pgs.PGS.GEOM_FACTORY;
import static micycle.pgs.PGS.NodedSegmentStrings;
import static micycle.pgs.PGS.coordFromPVector;
import static micycle.pgs.PGS.nodedEdges;
import static micycle.pgs.PGS.nodedEdgesSet;
import static micycle.pgs.PGS.nodedSegments;
import static micycle.pgs.PGS.pointIndex;
import static micycle.pgs.PGS.polygonize;
import static micycle.pgs.PGS.toPVector;
import static micycle.pgs.PGS.validateNodedSegments;
import static micycle.pgs.PGS.validatePolygons;

@Test
@org.junit.jupiter.api.Ignore
void testRobustnessRandomly() {
    Random r = new XoRoShiRo128PlusRandom(0);
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        validateNodedSegments(segmentStrings);
        NodingIndex index = new Quadtree();
        index.insert(segmentStrings);
        IntersectionMatrix m = new IntersectionMatrix(index.query(index.getEnvelope()));
        m.trim(index);
        Collection<SegmentString> nodedSS = NodedSegmentStrings(segmentStrings, m);
        validateNodedSegments(nodedSS);
        Collection<PEdge> nodedEdges = new ArrayList<>();
        nodedSS.forEach((ss) -> nodedEdges.add(new PEdge(toPVector(ss.getCoordinate(0)), toPVector(ss.getCoordinate(1)))));
        validateNodedEdges(nodedEdges);
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
        validateNodedEdges(nodedEdgesSet);
        GeometryFactory gf = GEOM_FACTORY;
        Quadtree tree = new Quadtree();
        for (SegmentString ss : nodedSS) {
            tree.insert(ss.getEnvelopeInternal(), ss);
        }
        validatePointIndex(tree);
        validateNodedSegments(nodedSS);
        final Polygonizer polygonizerJTS = new Polygonizer();
        polygonizerJTS.setCheckRingsValid(false);
        nodedEdgesSet.forEach((e) -> {
            final LineString l = gf.createLineString(new Coordinate[]{ coordFromPVector(e.a), coordFromPVector(e.b) });
            polygonizerJTS.add(l);
        });
        long t1 = System.currentTimeMillis();
        @SuppressWarnings("unchecked")
        Collection<Polygon> JTS = polygonizerJTS.getPolygons();
        long t2 = System.currentTimeMillis();
        long timeJTS = t2 - t1;
        t1 = System.currentTimeMillis();
        PShape FP = polygonize(nodedEdgesSet);
        t2 = System.currentTimeMillis();
        long timeFP = t2 - t1;
        // System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
        assertEquals(JTS.size(), FP.getChildCount());
    }
}