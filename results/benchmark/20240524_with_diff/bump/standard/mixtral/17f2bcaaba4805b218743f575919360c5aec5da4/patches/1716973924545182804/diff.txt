0a1,36
> import static org.junit.jupiter.api.Assertions.assertEquals;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> import org.junit.jupiter.api.Test;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.CoordinateList;
> import org.locationtech.jts.geom.Envelope;
> import org.locationtech.jts.geom.Geometry;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.index.ItemVisitor;
> import org.locationtech.jts.index.quadtree.Quadtree;
> import org.locationtech.jts.noding.IntersectionMatrix;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.NodingIndex;
> import org.locationtech.jts.noding.SegmentString;
> import micycle.pgs.commons.PEdge;
> import micycle.pgs.commons.PVector;
> import processing.core.PApplet;
> import processing.core.PShape;
> import static micycle.pgs.PGS.GEOM_FACTORY;
> import static micycle.pgs.PGS.NodedSegmentStrings;
> import static micycle.pgs.PGS.coordFromPVector;
> import static micycle.pgs.PGS.nodedEdges;
> import static micycle.pgs.PGS.nodedEdgesSet;
> import static micycle.pgs.PGS.nodedSegments;
> import static micycle.pgs.PGS.pointIndex;
> import static micycle.pgs.PGS.polygonize;
> import static micycle.pgs.PGS.toPVector;
> import static micycle.pgs.PGS.validateNodedSegments;
> import static micycle.pgs.PGS.validatePolygons;
> 
2c38
<         @Ignore
---
> @org.junit.jupiter.api.Ignore
7,9c43,44
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
11c46,52
<                         Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
---
>         validateNodedSegments(segmentStrings);
>         NodingIndex index = new Quadtree();
>         index.insert(segmentStrings);
>         IntersectionMatrix m = new IntersectionMatrix(index.query(index.getEnvelope()));
>         m.trim(index);
>         Collection<SegmentString> nodedSS = NodedSegmentStrings(segmentStrings, m);
>         validateNodedSegments(nodedSS);
13c54,55
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach((ss) -> nodedEdges.add(new PEdge(toPVector(ss.getCoordinate(0)), toPVector(ss.getCoordinate(1)))));
>         validateNodedEdges(nodedEdges);
15c57,64
< 
---
>         validateNodedEdges(nodedEdgesSet);
>         GeometryFactory gf = GEOM_FACTORY;
>         Quadtree tree = new Quadtree();
>         for (SegmentString ss : nodedSS) {
>             tree.insert(ss.getEnvelopeInternal(), ss);
>         }
>         validatePointIndex(tree);
>         validateNodedSegments(nodedSS);
18,20c67,68
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach((e) -> {
>             final LineString l = gf.createLineString(new Coordinate[]{ coordFromPVector(e.a), coordFromPVector(e.b) });
23d70
< 
29d75
< 
