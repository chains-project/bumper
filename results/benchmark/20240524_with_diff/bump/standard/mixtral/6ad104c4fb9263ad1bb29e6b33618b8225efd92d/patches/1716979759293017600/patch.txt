import java.io.IOException;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

import io.github.hapjava.server.impl.crypto.PolyKeyCreator;

public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws IOException {
    SecretKeySpec macKey = initRecordMAC(decryptCipher);
    byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);
    if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
        throw new RuntimeException("bad_record_mac");
    }
    byte[] output = new byte[ciphertext.length];
    decryptCipher.doFinal(ciphertext, 0, ciphertext.length, output, 0);
    return output;
}

private SecretKeySpec initRecordMAC(Cipher decryptCipher) {
    // Initialize the MAC key here
    byte[] macKeyBytes = new byte[32]; // or whatever the key length is
    // Initialize the IV here
    byte[] iv = new byte[12]; // or whatever the IV length is
    IvParameterSpec ivSpec = new IvParameterSpec(iv);
    decryptCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(macKeyBytes, "AES"), ivSpec);
    return new SecretKeySpec(decryptCipher.getIV(), "AES");
}