1,6c1,13
< // TODO: review this AI generated patch!
< public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws java.io.IOException {
<     org.bouncycastle.crypto.params.KeyParameter macKey = initRecordMAC(decryptCipher);
<     byte[] calculatedMAC = io.github.hapjava.server.impl.crypto.PolyKeyCreator.create(macKey, additionalData, ciphertext);
<     if (!org.bouncycastle.util.Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
<         throw new org.bouncycastle.crypto.tls.TlsFatalAlert(new org.bouncycastle.crypto.tls.AlertDescription(80), "bad_record_mac");
---
> import java.io.IOException;
> import java.util.Objects;
> 
> import org.bouncycastle.crypto.CipherParameters;
> import org.bouncycastle.crypto.DataLengthException;
> import org.bouncycastle.crypto.params.KeyParameter;
> import org.bouncycastle.util.Arrays;
> 
> public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws IOException {
>     CipherParameters macKey = initRecordMAC(decryptCipher);
>     byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);
>     if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
>         throw new RuntimeException("bad_record_mac");
8a16
>     try {
9a18,20
>     } catch (DataLengthException e) {
>         throw new IOException("Failed to decrypt ciphertext", e);
>     }
10a22,33
> }
> 
> private CipherParameters initRecordMAC(CipherParameters decryptCipher) {
>     // Implement the logic to initialize the macKey using decryptCipher
>     // ...
> }
> 
> static class PolyKeyCreator {
>     static byte[] create(CipherParameters macKey, byte[] additionalData, byte[] ciphertext) {
>         // Implement the logic to create calculatedMAC using macKey, additionalData and ciphertext
>         // ...
>     }
