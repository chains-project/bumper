1,6c1,14
< // TODO: review this AI generated patch!
< public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws java.io.IOException {
<     org.bouncycastle.crypto.params.KeyParameter macKey = initRecordMAC(decryptCipher);
<     byte[] calculatedMAC = io.github.hapjava.server.impl.crypto.PolyKeyCreator.create(macKey, additionalData, ciphertext);
<     if (!org.bouncycastle.util.Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
<         throw new org.bouncycastle.crypto.tls.TlsFatalAlert(new org.bouncycastle.crypto.tls.AlertDescription(80), "bad_record_mac");
---
> import java.io.IOException;
> import java.util.Arrays;
> 
> import javax.crypto.Cipher;
> import javax.crypto.spec.IvParameterSpec;
> import javax.crypto.spec.SecretKeySpec;
> 
> import io.github.hapjava.server.impl.crypto.PolyKeyCreator;
> 
> public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws IOException {
>     SecretKeySpec macKey = initRecordMAC(decryptCipher);
>     byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);
>     if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
>         throw new RuntimeException("bad_record_mac");
9c17
<     decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);
---
>     decryptCipher.doFinal(ciphertext, 0, ciphertext.length, output, 0);
10a19,28
> }
> 
> private SecretKeySpec initRecordMAC(Cipher decryptCipher) {
>     // Initialize the MAC key here
>     byte[] macKeyBytes = new byte[32]; // or whatever the key length is
>     // Initialize the IV here
>     byte[] iv = new byte[12]; // or whatever the IV length is
>     IvParameterSpec ivSpec = new IvParameterSpec(iv);
>     decryptCipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(macKeyBytes, "AES"), ivSpec);
>     return new SecretKeySpec(decryptCipher.getIV(), "AES");
