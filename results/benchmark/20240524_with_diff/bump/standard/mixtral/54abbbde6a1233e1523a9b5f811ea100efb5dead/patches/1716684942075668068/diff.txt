1c1,6
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
---
> import static java.util.concurrent.TimeUnit.MINUTES;
> import static org.cactoos.scalar.Scalar.ex;
> import static org.cactoos.scalar.Scalar.intScalar;
> 
> // ...
> 
3,4c8,9
<     @RetryOnFailure(
<         attempts = Tv.SEVEN,
---
> @com.jcabi.aspects.RetryOnFailure(
>   attempts = com.jcabi.ssh.Tv.SEVEN,
6c11
<         unit = TimeUnit.MINUTES,
---
>   unit = MINUTES,
8c13
<         types = IOException.class
---
>   types = java.io.IOException.class
10,11c15,16
<     protected Session session() throws IOException {
<         final File file = File.createTempFile("jcabi-ssh", ".key");
---
> protected ses.Session session() throws java.io.IOException {
>   final java.io.File file = java.io.File.createTempFile("jcabi-ssh", ".key");
13,20c18,24
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             new Unchecked<>(
<                 new LengthOf(
<                     new TeeInput(
<                         this.key.replaceAll("\r", "")
<                             .replaceAll("\n\\s+|\n{2,}", "\n")
<                             .trim(),
---
>     com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());
>     final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();
>     ex(new org.cactoos.Scalar<Void>() {
>       @Override
>       public void value() throws Exception {
>         new org.cactoos.io.TeeInput(
>           this$0.key.replaceAll("\r", "").replaceAll("\n\\s+|\n{2,}", "\n").trim(),
22,25c26,29
<                     )
<                 )
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
---
>         ).stream().limit(4096).close();
>       }
>     });
>     jsch.setHostKeyRepository(new com.jcabi.sint.Pkgs().get(com.jcabi.ssh.Key.class));
29,34c33
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
---
>       jsch.addIdentity(this.getLogin(), this.key.getBytes(java.nio.charset.StandardCharsets.UTF_org.cactoos.Scalar.intScalar(32)), null, this.passphrase.getBytes(java.nio.charset.StandardCharsets.UTF_8));
36,41c35
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
<             );
---
>     com.jcabi.log.Logger.debug(this, "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...", this.getLogin(), this.getAddr(), this.getPort(), file.length());
43,44c37,38
<         } catch (final JSchException ex) {
<             throw new IOException(ex);
---
>   } catch (final com.jcraft.jsch.JSchException ex) {
>     throw new java.io.IOException(ex);
46c40
<             Files.deleteIfExists(file.toPath());
---
>     java.nio.file.Files.deleteIfExists(file.toPath());
