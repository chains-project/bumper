@org.junit.jupiter.api.Test
void fixesOnDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InSubDirectoryInMemoryStorage("blobs");
    final com.artipie.docker.asto.AstoBlasts blasts = new com.artipie.docker.asto.AstoBlasts(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
    final java.lang.String digest = "123";
    blasts.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artiporium.docker.digest.Hash.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
        org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
        org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", org.hamcrest.core.StringStartsWith.startsWith(com.google.common.base.Strings.emptyToNull(throwable.getMessage()), "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
        org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", org.hamcrest.core.StringContains.containsString(com.google.common.base.Strings.emptyToNull(throwable.getMessage()), digest));
        return java.util.concurrent.CompletableFuture.allOf();
    }).join();
}