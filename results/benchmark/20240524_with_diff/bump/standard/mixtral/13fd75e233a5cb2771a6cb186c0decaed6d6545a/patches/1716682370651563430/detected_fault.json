{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 369049246,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new artip();\n        calculatedDigest = \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\";\n        final AstoBlobs blobs = new AstoBlasts(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new IsInstanceOf(InvalidDigestException.class)));\n        hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", Throwables.getRootCause(throwable).getMessage(), core.StringStartsWith.startsWith(calculatedDigest));\n        hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwstringContains = new StringContains(calculatedDigest, true)));\n        MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwable).getMessage(), stringContains);\n        return CompletableFuture.allOf();\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void failsOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip();\n        calculatedDigest = \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\";\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlasts(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.dorg.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class)));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), org.hamcrest.core.StringStartsWith.startsWith(calculatedDigest));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwstringContains = new org.hamcrest.core.StringContains(calculatedDigest, true)));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), stringContains);\n        return java.util.concurrent.CompletableFuture.allOf();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[74,3] invalid method declaration; return type required",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "74"
    },
    "client_end_line_number": 74,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artip calculatedDigest = \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\";\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlasts(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.dorg.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), org.hamcrest.core.StringStartsWith.startsWith(calculatedDigest));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwstringContains = new org.hamcrest.core.StringContains(calculatedDigest, true));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), stringContains);\n    return java.util.concurrent.CompletableFuture.allOf();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip();\n    calculatedDigest = \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\";\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlasts(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.dorg.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class)));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), org.hamcrest.core.StringStartsWith.startsWith(calculatedDigest));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwstringContains = new org.hamcrest.core.StringContains(calculatedDigest, true)));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), stringContains);\n    return java.util.concurrent.CompletableFuture.allOf();\n}",
    "method_name": "failsOnDigestMismatch"
}