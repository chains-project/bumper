@org.junit.jupiter.api.Test
void fixesDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
    final java.lang.String digest = "123";
    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest)))
         .toCompletableFuture()
         .exceptionally(throwable -> {
             org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable != null);
             org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", throwable.getCause(), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
             org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getCause().getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(com.artipie.docker.Digest.Sha256.NAME)));
             return null;
         });
    org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest));
    return java.util.concurrent.CompletableFuture.allOf();
}