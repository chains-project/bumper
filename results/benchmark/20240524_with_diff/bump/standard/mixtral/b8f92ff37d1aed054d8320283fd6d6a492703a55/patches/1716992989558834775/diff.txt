0a1,10
> import org.apache.maven.plugin.surefire.booterclient.Commandline;
> import org.apache.maven.plugin.surefire.booterclient.DefaultForkConfiguration;
> import org.apache.maven.plugin.surefire.booterclient.lazytestprovider.LazyTestProviderFactory;
> import org.apache.maven.surefire.api.testset.TestListResolver;
> import org.apache.maven.surefire.api.util.internal.ClasspathUtils;
> 
> import java.io.File;
> import java.util.Collections;
> import java.util.List;
> 
2c12,15
<         DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard());
---
>     DefaultForkConfiguration forConfig = new DefaultForkConfiguration(testSrcFolder);
>     Commandline commandLine = forConfig.createCommandLine(new StartupConfiguration(), 1, testSrcFolder);
>     TestListResolver testListResolver = LazyTestProviderFactory.createTestListResolver(commandLine, forConfig);
>     DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, testListResolver.getWildcard());
4a18,56
> 
> static class DirectoryScanner {
>     private final File testSrcFolder;
>     private final String wildcard;
> 
>     public DirectoryScanner(File testSrcFolder, String wildcard) {
>         this.testSrcFolder = testSrcFolder;
>         this.wildcard = wildcard;
>     }
> 
>     public ClasspathScanner scan() {
>         ClasspathUtils classpathUtils = new ClasspathUtils();
>         List<File> classpathElements = classpathUtils.getBootClasspathElements(testSrcFolder);
>         classpathElements.add(testSrcFolder);
>         ClasspathScanner scanner = new ClasspathScanner(classpathElements, wildcard);
>         scanner.scan();
>         return scanner;
>     }
> }
> 
> static class ClasspathScanner {
>     private final List<File> classpathElements;
>     private final String wildcard;
>     private List<String> classes;
> 
>     public ClasspathScanner(List<File> classpathElements, String wildcard) {
>         this.classpathElements = classpathElements;
>         this.wildcard = wildcard;
>     }
> 
>     public void scan() {
>         classes = Collections.emptyList();
>         // Implement the scanning logic using the classpathElements and wildcard
>     }
> 
>     public List<String> getClasses() {
>         return classes;
>     }
> }
\ No newline at end of file
