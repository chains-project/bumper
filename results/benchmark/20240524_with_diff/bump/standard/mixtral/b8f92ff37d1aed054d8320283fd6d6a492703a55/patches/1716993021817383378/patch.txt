import org.apache.maven.plugin.surefire.booterclient.Commandline;
import org.apache.maven.plugin.surefire.booterclient.lazytestprovider.LazyTestProviderFactory;
import org.apache.maven.plugin.surefire.booterclient.output.StreamDecorator;
import org.apache.maven.plugin.surefire.booterclient.output.TestOutputReceiver;
import org.apache.maven.plugin.surefire.report.ReportEntry;
import org.apache.maven.plugin.surefire.report.ReportEntryFactory;
import org.apache.maven.plugin.surefire.report.ReportGenerator;
import org.apache.maven.plugin.surefire.report.ReportGeneratorFactory;
import org.apache.maven.plugin.surefire.report.SimpleReportEntry;
import org.apache.maven.plugin.surefire.report.SurefireReportParser;
import org.apache.maven.plugin.surefire.report.SurefireReportParserFactory;
import org.apache.maven.plugin.surefire.report.provider.FileConsoleOutputReceiver;
import org.apache.maven.plugin.surefire.report.provider.FileReportEntryFactory;
import org.apache.maven.plugin.surefire.report.provider.FileReportGenerator;
import org.apache.maven.plugin.surefire.report.provider.FileSurefireReportParser;
import org.apache.maven.plugin.surefire.report.provider.NullSurefireReportParserFactory;
import org.apache.maven.plugin.surefire.report.provider.SimpleReportEntryFactory;
import org.apache.maven.plugin.surefire.report.provider.SurefireReportParserFactoryFactory;
import org.apache.maven.plugin.surefire.report.provider.TestOutputReceiverFactory;
import org.apache.maven.plugin.surefire.report.provider.TestOutputReceiverFactoryFactory;
import org.apache.maven.plugin.surefire.util.DefaultScanResult;
import org.apache.maven.plugin.surefire.util.ScanResult;
import org.apache.maven.plugin.surefire.util.SurefireReflectionUtils;
import org.apache.maven.shared.utils.StringUtils;
import org.apache.maven.surefire.api.booter.ForkingMode;
import org.apache.maven.surefire.api.booter.ForkStarter;
import org.apache.maven.surefire.api.booter.ProviderParameter;
import org.apache.maven.surefire.api.booter.ProviderParametersAware;
import org.apache.maven.surefire.api.fork.ForkConfiguration;
import org.apache.maven.surefire.api.fork.ForkFactory;
import org.apache.maven.surefire.api.fork.ForkFactoryFactory;
import org.apache.maven.surefire.api.provider.ProviderParameters;
import org.apache.maven.surefire.api.provider.SurefireProvider;
import org.apache.maven.surefire.api.provider.SurefireProviderFactory;
import org.apache.maven.surefire.api.provider.SurefireProviderFactoryAware;
import org.apache.maven.surefire.api.testset.TestSetFailedException;
import org.apache.maven.surefire.api.testset.TestSetFilter;
import org.apache.maven.surefire.api.testset.TestSetFailedException;
import org.apache.maven.surefire.api.util.Threads;
import org.apache.maven.surefire.api.util.internal.UncheckedByteArrayOutputStream;
import org.apache.maven.surefire.api.util.internal.UncheckedInputStream;
import org.apache.maven.surefire.api.util.internal.UncheckedOutputStream;
import org.apache.maven.surefire.api.util.internal.UncheckedReader;
import org.apache.maven.surefire.api.util.internal.UncheckedStreamConsumer;
import org.apache.maven.surefire.api.util.internal.UncheckedStreamDecorator;
import org.apache.maven.surefire.api.util.internal.UncheckedStreamFactory;
import org.apache.maven.surefire.api.util.internal.UncheckedWriter;
import org.apache.maven.surefire.api.util.internal.UncheckedWriterFactory;

import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;
import java.util.ServiceLoader;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.stream.Collectors;

static List<String> getClassesLoc(File testSrcFolder) throws IOException {
    DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, new TestListResolver());
    return directoryScanner.scan().getClasses();
}

static class DirectoryScanner {
    private final File baseDirectory;
    private final TestListResolver testListResolver;

    public DirectoryScanner(File baseDirectory, TestListResolver testListResolver) {
        this.baseDirectory = baseDirectory;
        this.testListResolver = testListResolver;
    }

    public ScanResult scan() throws IOException {
        File[] files = baseDirectory.listFiles(file -> {
            if (file.isDirectory()) {
                return false;
            }
            return StringUtils.endsWithIgnoreCase(file.getName(), ".class");
        });

        if (files == null) {
            return new DefaultScanResult(Collections.emptyList());
        }

        List<String> classNames = Arrays.stream(files)
                .map(File::getCanonicalPath)
                .map(path -> StringUtils.replace(path, baseDirectory.getCanonicalPath() + File.separator, ""))
                .map(path -> StringUtils.replace(path, File.separator, "."))
                .map(path -> path.substring(0, path.length() - 6))
                .collect(Collectors.toList());

        return new DefaultScanResult(classNames);
    }
}

static class TestListResolver {
    public static String getWildcard() {
        return "**/*.class";
    }
}

static class DefaultScanResult implements ScanResult {
    private final List<String> classes;

    public DefaultScanResult(List<String> classes) {
        this.classes = classes;
    }

    public List<String> getClasses() {
        return classes;
    }
}