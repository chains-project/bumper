1,11c1
< /**
<          * Computes if a given class is to be included in the post-coverage computation
<          *
<          * If we have include-exclude patterns for Jacoco:
<          * - We include the class if it matches the include patterns and does not match the excludes patterns
<          * Else:
<          * - We include the class if it is available in the binary directories
<          * @param className
<          * @return true if the class should be included in the coverage result, false otherwise
<          */
<     private boolean classToInclude(String className) {
---
> private boolean classToInclude(java.lang.String className) {
13,14c3,4
<         for (String pattern : config.getJacocoExcludes()) {
<             WildcardMatcher matcher = new WildcardMatcher(pattern);
---
>     for (java.lang.String pattern : config.getJacocoExcludes()) {
>         org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);
20,21c10,11
<         for (String pattern : config.getJacocoIncludes()) {
<             WildcardMatcher matcher = new WildcardMatcher(pattern);
---
>     for (java.lang.String pattern : config.getJacocoIncludes()) {
>         org.jacoco.core.runtime.WildcardMatcher matcher = new org.jacoco.core.runtime.WildcardMatcher(pattern);
26d15
< 
28,30c17,22
<         for (String dir : config.getBinJavaDir()) {
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
---
>     for (java.lang.String dir : config.getBinJavaDir()) {
>         File binDir = new File(dir);
>         if (binDir.exists() && binDir.isDirectory()) {
>             File[] classFiles = binDir.listFiles((File dir1, String name) -> name.endsWith(".class") && !name.contains("$"));
>             for (File classFile : classFiles) {
>                 if (classFile.getName().replace(".class", "").equals(className)) {
34,36c26,33
<         for (String dir : config.getBinTestDir()) {
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
---
>         }
>     }
>     for (java.lang.String dir : config.getBinTestDir()) {
>         File binDir = new File(dir);
>         if (binDir.exists() && binDir.isDirectory()) {
>             File[] classFiles = binDir.listFiles((File dir1, String name) -> name.endsWith(".class") && !name.contains("$"));
>             for (File classFile : classFiles) {
>                 if (classFile.getName().replace(".class", "").equals(className)) {
40c37,38
< 
---
>         }
>     }
