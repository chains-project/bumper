0a1,35
> import org.apache.maven.plugin.surefire.booterclient.Commandline;
> import org.apache.maven.plugin.surefire.booterclient.DefaultForkConfiguration;
> import org.apache.maven.surefire.api.testset.TestListResolver;
> import org.apache.maven.surefire.api.testset.TestSetFailedException;
> import org.apache.maven.surefire.booter.SurefireBooterContext;
> import org.apache.maven.surefire.common.junit4.JUnit4Provider;
> import org.apache.maven.surefire.providerapi.ProviderParameters;
> import org.apache.maven.surefire.providerapi.SurefireProvider;
> import org.apache.maven.surefire.report.ReporterConfiguration;
> import org.apache.maven.surefire.report.ReporterFactory;
> import org.apache.maven.surefire.report.runner.RunListener;
> import org.apache.maven.surefire.report.runner.RunNotifier;
> import org.apache.maven.surefire.testset.TestSetFailedException2;
> import org.apache.maven.surefire.testset.TestSetFactory;
> import org.apache.maven.surefire.testset.TestSetRef;
> import org.apache.maven.surefire.util.ReflectionUtils;
> import org.apache.maven.surefire.util.SurefireReflectionException;
> import org.apache.maven.surefire.util.TestsToRun;
> 
> import java.io.File;
> import java.io.IOException;
> import java.lang.reflect.InvocationTargetException;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.Iterator;
> import java.util.List;
> import java.util.Map;
> import java.util.concurrent.ConcurrentHashMap;
> import java.util.stream.Collectors;
> 
> import static java.util.Arrays.asList;
> import static java.util.Collections.unmodifiableList;
> import static org.apache.maven.plugin.surefire.booterclient.Commandline.toCommandline;
> import static org.apache.maven.plugin.surefire.booterclient.Commandline.toCommandlineOSIndependent;
> 
2,3c37,95
<         DirectoryScanner directoryScanner = new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard());
<         return directoryScanner.scan().getClasses();
---
>     DefaultForkConfiguration forConfig = new DefaultForkConfiguration(testSrcFolder);
>     Commandline commandLine = forConfig.createCommandLine(new StartupConfiguration(), 1, testSrcFolder);
>     return new DirectoryScanner(testSrcFolder, TestListResolver.getWildcard()).scan().getClasses();
> }
> 
> static class DirectoryScanner {
>     private final File directory;
>     private final String includes;
> 
>     public DirectoryScanner(File directory, String includes) {
>         this.directory = directory;
>         this.includes = includes;
>     }
> 
>     public TestsToRun scan() {
>         TestSetFactory testSetFactory = new TestSetFactory();
>         TestSetRef testSetRef = testSetFactory.createTestSet(directory, includes);
>         ReporterConfiguration reporterConfiguration = new ReporterConfiguration();
>         ReporterFactory reporterFactory = new ReporterFactory(new RunNotifier(), reporterConfiguration);
>         RunListener runListener = reporterFactory.createRunnerFactory().getRunListener(reporterConfiguration);
> 
>         try {
>             ReflectionUtils.invokeMethod(testSetRef, "setUp", new Class[]{RunListener.class}, runListener);
>         } catch (SurefireReflectionException e) {
>             throw new TestSetFailedException2("Failed to set up test set: " + e.getMessage(), e);
>         }
> 
>         Collection<File> files = new ArrayList<>();
>         try {
>             files = ReflectionUtils.invokeMethod(testSetRef, "getIncludes", new Class[]{}, new Object[]{});
>         } catch (SurefireReflectionException e) {
>             throw new TestSetFailedException2("Failed to get includes: " + e.getMessage(), e);
>         }
> 
>         List<File> fileList = new ArrayList<>();
>         for (Object file : files) {
>             fileList.add((File) file);
>         }
> 
>         TestsToRun testsToRun = new TestsToRun(fileList);
>         return testsToRun;
>     }
> 
>     public List<String> getClasses() {
>         return unmodifiableList(
>                 scan()
>                         .getTests()
>                         .stream()
>                         .filter(test -> test instanceof JUnit4Provider.JUnit4Test)
>                         .map(test -> {
>                             try {
>                                 return ((JUnit4Provider.JUnit4Test) test).getTestClass().getName();
>                             } catch (InvocationTargetException | IllegalAccessException e) {
>                                 throw new RuntimeException(e);
>                             }
>                         })
>                         .collect(Collectors.toList())
>         );
>     }
