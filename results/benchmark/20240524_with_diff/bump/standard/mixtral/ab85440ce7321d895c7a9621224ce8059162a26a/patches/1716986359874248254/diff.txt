0a1,17
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.DefaultLayout;
> import com.google.common.base.Throwables;
> 
3c20
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new Memory.InMemoryStorage();
5c22,24
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
9,12c28,33
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
---
>         new CheckedBlobSource(
>             new Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
>         )
>     ).thenAcceptAsync(blob -> {
>         assertThat(
14,15c35,36
<                     throwable,
<                     new IsNot<>(new IsNull<>())
---
>             Throwables.getRootCause(blob),
>             not(nullValue())
17c38
<                 MatcherAssert.assertThat(
---
>         assertThat(
19,20c40,41
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
---
>             Throwables.getRootCause(blob),
>             instanceOf(InvalidDigestException.class)
22c43
<                 MatcherAssert.assertThat(
---
>         assertThat(
24,28c45,46
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>             Throwables.getRootCause(blob).getMessage(),
>             String.containsIgnoringCase("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
30c48
<                 MatcherAssert.assertThat(
---
>         assertThat(
32,33c50,51
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>             Throwables.getRootCause(blob).getMessage(),
>             String.containsIgnoringCase(digest)
35,37c53
<                 return CompletableFuture.allOf();
<             }
<         ).join();
---
>     }).toCompletableFuture().join();
