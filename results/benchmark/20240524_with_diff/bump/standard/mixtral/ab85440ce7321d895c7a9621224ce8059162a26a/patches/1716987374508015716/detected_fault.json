{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 306115458,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new Digest.Sha256(digest))).toCompletableFuture().handle((blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new Matcher(new Description(), (description, actual) -> {\n                description.appendText(\"Instance of InvalidDigestException\");\n                return actual instanceof InvalidDigestException;\n            }));\n        });\n        hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", Throwables.getRootCause(throwable).getMessage(), new Matcher<String>() {\n            @Override\n            public boolean matches(Object item) {\n                String message = ((String) (item));\n                return message.contains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\") && message.contains(digest);\n            }\n\n            @Override\n            public void describeTo(com.artipie.docker.asto.Description description) {\n                description.appendText(\"String contains calculated and expected digests\");\n            }\n        });\n        return CompletableFuture.allOf();\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void failsOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.Matcher(new org.hamcrest.Description(), ( description, actual) -> {\n                description.appendText(\"Instance of InvalidDigestException\");\n                return actual instanceof com.artipie.docker.error.InvalidDigestException;\n            }));\n        });\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.Matcher<java.lang.String>() {\n            @java.lang.Override\n            public boolean matches(java.lang.Object item) {\n                java.lang.String message = ((java.lang.String) (item));\n                return message.contains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\") && message.contains(digest);\n            }\n\n            @java.lang.Override\n            public void describeTo(com.artipie.docker.asto.Description description) {\n                description.appendText(\"String contains calculated and expected digests\");\n            }\n        });\n        return java.util.concurrent.CompletableFuture.allOf();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[74,12] ';' expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "74"
    },
    "client_end_line_number": 89,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.Matcher(new org.hamcrest.Description(), (description, actual) -> {\n            description.appendText(\"Instance of InvalidDigestException\");\n            return actual instanceof com.artipie.docker.error.InvalidDigestException;\n        })));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.Matcher<String>() {\n            @Override\n            public boolean matches(Object item) {\n                String message = (String) item;\n                return message.contains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\") && message.contains(digest);\n            }\n\n            @Override\n            public void describeTo(Description description) {\n                description.appendText(\"String contains calculated and expected digests\");\n            }\n        });\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.Matcher(new org.hamcrest.Description(), ( description, actual) -> {\n            description.appendText(\"Instance of InvalidDigestException\");\n            return actual instanceof com.artipie.docker.error.InvalidDigestException;\n        }));\n    });\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.Matcher<java.lang.String>() {\n        @java.lang.Override\n        public boolean matches(java.lang.Object item) {\n            java.lang.String message = ((java.lang.String) (item));\n            return message.contains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\") && message.contains(digest);\n        }\n\n        @java.lang.Override\n        public void describeTo(com.artipie.docker.asto.Description description) {\n            description.appendText(\"String contains calculated and expected digests\");\n        }\n    });\n    return java.util.concurrent.CompletableFuture.allOf();\n}",
    "method_name": "failsOnDigestMismatch"
}