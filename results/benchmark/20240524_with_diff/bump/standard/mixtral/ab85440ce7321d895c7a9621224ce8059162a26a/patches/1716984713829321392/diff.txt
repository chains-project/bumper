0a1,14
> import com.artipie.asto.Content.From;
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.RepoName.Simple;
> import com.artipie.docker.asto.CheckedBlobSource.ExceptionSupplier;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import org.junit.jupiter.api.Test;
> 
4,6c18
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new Simple("any"));
8,34c20,26
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     blobs.put(new CheckedBlobSource(new From("data".getBytes()), new Sha256(digest), () -> new InvalidDigestException("calculated digest", "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")))
>         .toCompletableFuture()
>         .handle((blob, throwable) -> {
>             MatcherAssert.assertThat("Exception thrown", throwable, Matchers.notNullValue());
>             MatcherAssert.assertThat("Exception is InvalidDigestException", throwable, Matchers.instanceOf(InvalidDigestException.class));
>             MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getMessage(), Matchers.startsWith("Invalid digest: expected '"));
>             MatcherAssert.assertThat("Exception message contains expected digest", throwable.getMessage(), Matchers.containsString(digest));
35a28,34
>         })
>         .join();
> }
> 
> class InvalidDigestException extends RuntimeException {
>     InvalidDigestException(String message, String digest) {
>         super(String.format("Invalid digest: expected '%s', calculated '%s'", digest, message));
37d35
<         ).join();
