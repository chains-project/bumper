0a1,21
> import com.artipie.asto.Content;
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ansion.Layout;
> import com.artipie.asto.ext.Ext;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlob;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Completable;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.hamcrest.MatcherAssert;
> import org.junit.jupiter.api.Test;
> import static com.artipie.docker.asto.CheckedBlob.checksum;
> import static org.hamcrest.Matchers.*;
> import static org.hamcrest.core.IsInstanceOf.instanceOf;
> 
3,6c24,27
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final MemoryStorage storage = new MemoryStorage();
>     final Layout layout = new Layout.Base();
>     final RepoName repoName = new RepoName.Simple("any");
>     final AstoBlobs blobs = new AstoBlobs(storage, layout, repoName);
8,28c29,34
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final ByteBuffer buffer = content.buffer();
>     final CheckedBlob checkedBlob = CheckedBlob.create(
>         buffer,
>         checksum(buffer),
>         Digest.Sha256.name()
30,37c36,46
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
<                 return CompletableFuture.allOf();
<             }
<         ).join();
---
>     blobs.put(new CheckedBlobSource(checkedBlob)).toCompletableFuture().handle(( blob, throwable) -> {
>         MatcherAssert.assertThat("Exception thrown", throwable, notNullValue());
>         MatcherAssert.assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>         MatcherAssert.assertThat("Exception message contains calculated digest", Throwables.getRootCause(throwable).getMessage(), stringContainsInOrder(
>             checkedBlob.content().content(),
>             checkedBlob.checksum(),
>             checkedBlob.digest().name()
>         ));
>         MatcherAssert.assertThat("Exception message contains expected digest", Throwables.getRootCause(throwable).getMessage(), stringContainsIgnoringCase(digest));
>         return Completable.complete();
>     }).join();
