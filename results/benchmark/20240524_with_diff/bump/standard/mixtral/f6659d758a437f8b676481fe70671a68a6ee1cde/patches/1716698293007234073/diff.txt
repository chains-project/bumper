1,3c1,3
< public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
> import java.io.BufferedReader;
> import java.io.FileNotFoundException;
> import java.io.FileReader;
5,6c5,44
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
---
> import org.yaml.snakeyaml.DumperOptions;
> import org.yaml.snakeyaml.LoaderOptions;
> import org.yaml.snakeyaml.Node;
> import org.yaml.snakeyaml.Representer;
> import org.yaml.snimport org.yaml.snakeyaml.constructor.Constructor;
> import org.yaml.snakeyaml.error.YAMLError;
> import org.yaml.snakeyaml.nodes.MappingNode;
> import org.yaml.snakeyaml.nodes.NodeTuple;
> import org.yaml.snakeyaml.nodes.Tag;
> import org.yaml.snakeyaml.representer.Representer;
> import org.yaml.snakeyaml.scanner.ScannerException;
> import org.yaml.snakeyaml.scanner.ScannerImpl;
> import org.yaml.snakeyaml.scanner.Token;
> import org.yaml.snakeyaml.scanner.parser.Parser;
> import org.yaml.snakeyaml.scanner.parser.ParserException;
> import org.yaml.snakeyaml.scanner.parser.ParserImpl;
> import org.yaml.snakeyaml.scanner.scannererror.ScannerError;
> import org.yaml.snakeyaml.scanner.tokens.TokenType;
> import org.yaml.snakeyaml.serializer.Serializer;
> import org.yaml.snakeyaml.serializer.SerializerException;
> import org.yaml.snakeyaml.serializer.SerializerImpl;
> import org.yaml.snakeyaml.Yaml;
> import org.yaml.snakeyaml.inspector.AbstractInspector;
> import org.yaml.snakeyaml.inspector.DefaultValue;
> 
> public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
>     LoaderOptions loadingConfig = new LoaderOptions();
>     loadingConfig.setClassLoader(getClass().getClassLoader());
>     loadingConfig.setCodePointLimit(1024 * 1024);
>     loadingConfig.setMaxAliasesForCollection(1024);
>     loadingConfig.setMaxAliases(1024);
>     loadingConfig.setMaximumNesting(1024);
>     loadingConfig.setMaxSingleQuotedString(1024);
> 
>     AbstractInspector inspector = new AbstractIn defaultValue = new DefaultValue();
>     inspector.setDefaultValue(defaultValue);
>     loadingConfig.setInspector(inspector);
> 
>     Representer representer = new Representer(new DumperOptions());
>     Tag zoneIdTag = new Tag("!ZoneId");
8,9c46
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
---
>     Tag localDateTag = new Tag("!LocalDate");
11,17c48,57
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
---
>     Constructor constructor = new Constructor(clazz, loadingConfig) {
>         {
>             addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
>             addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
>             getSingleTypeDescription(ZoneId.class).setType(ZoneId.class);
>             getSingleTypeDescription(LocalDate.YAML.TypeDescription(LocalDate.class, "LocalDate"));            getSingleTypeDescription(LocalDate.class).setType(LocalDate.class);
>             yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
>             yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
>         }
>     };
20d59
< 
22c61
<             return yaml.load(new BufferedReader(new FileReader(path)));
---
>         return yaml.loadAs(new BufferedReader(new FileReader(path)), clazz);
25,26c64
<         }
<     }
\ No newline at end of file
---
> 9.
\ No newline at end of file
