1c1,19
< // TODO: review this AI generated patch!
---
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.core.Is.isA;
> import static org.hamcrest.core.StringContains.containsString;
> import static org.hamcrest.text.MatchesPattern.matchesPattern;
> 
4,11c22,35
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.MatcherAssert.MatchesPattern(com.artipie.docker.error.InvalidDigestException.class.getName() + ": .*: expected='.*%s', calculated='.*%s'".formatted(digest, "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"))));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     final InMemoryStorage storage = new InMemoryStorage();
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
>     final String digest = "123";
>     blobs.put(new CheckedBlobSource(new Content.From("data".getBytes(StandardCharsets.UTF_8)), new Digest.Sha256(digest)))
>         .thenApply(unused -> {})
>         .exceptionally(throwable -> {
>             assertThat("Exception thrown", throwable, not(instanceOf(InvalidDigestException.class)));
>             assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>             assertThat("Exception message matches pattern",
>                 Throwables.getRootCause(throwable).getMessage(),
>                 matchesPattern(containsString(String.format("expected='.*%s', calculated='.*%s'", digest, "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")))
>             );
>             return null;
>         });
