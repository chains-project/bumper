1d0
< // TODO: review this AI generated patch!
4,14c3,52
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artip calculated digest
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.doster.Checksummed(new com.artipie.asto.Key.Simple("data"), new com.artipie.docker.Digest.Sha256(digest), new java.nio.charset.StandardCharsets.UTF_8.name()))
<     .toCompletableFuture()
<     .handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.StringDescription().append(new java.lang.StringBuilder().append(new java.security.MessageDigest.getInstance("SHA-256").digest(new java.nio.charset.StandardCharsets.UTF_Â­8.encode("data"))).toString().substring(0, 12))));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));
<         return java.util.concurrent.CompletableFuture.allOf();
---
>     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip.InMemoryStorage();
>     com.artipie.docker.asto.calculated.DigestCalculator digest;
>     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(
>             storage,
>             new com.artipie.docker.asto.DefaultLayout(),
>             new com.artipie.docker.RepoName.Simple("any")
>     );
>     final java.lang.String digestValue = "123";
>     blobs.put(
>             new com.artipie.doster.Checksummed(
>                     new com.artipie.asto.Key.Simple("data"),
>                     new com.artipie.docker.Digest.Sha256(digestValue),
>                     new java.nio.charset.StandardCharsets.UTF_8
>             )
>     ).thenAccept(blob -> {
>         try {
>             blob.checksum();
>             throw new AssertionError("Exception expected");
>         } catch (final com.artipie.docker.asto.InvalidDigestException e) {
>             org.hamcrest.MatcherAssert.assertThat(
>                     "Exception thrown",
>                     true,
>                     org.hamcrest.CoreMatchers.is(true)
>             );
>             org.hamcrest.MatcherAssert.assertThat(
>                     "Exception is InvalidDigestException",
>                     e,
>                     org.hamcrest.CoreMatchers.instanceOf(com.artipie.docker.error.InvalidDigestException.class)
>             );
>             org.hamcrest.MatcherAssert.assertThat(
>                     "Exception message contains calculated digest",
>                     e.getMessage(),
>                     org.hamcrest.CoreMatchers.startsWith(
>                             java.util.HexFormat.ofDelimiter("").formatHex(
>                                     java.security.MessageDigest.getInstance("SHA-256")
>                                             .digest(
>                                                     "data".getBytes(
>                                                             java.nio.charset.StandardCharsets.UTF_8
>                                                     )
>                                             )
>                                     )
>                             )
>                     )
>             );
>             org.hamcrest.MatcherAssert.assertThat(
>                     "Exception message contains expected digest",
>                     e.getMessage(),
>                     org.hamcrest.CoreMatchers.containsString(digestValue)
>             );
>         }
