{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1636182655,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new artip();\n        calculated digest;\n        final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new Checksummed(new Key.Simple(\"data\"), new Digest.Sha256(digest), new name())).toCompletableFuture().handle((blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new IsInstanceOf(InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new StringStartsWith(new StringDescription().append(new StringBuilder().append(new getInstance(\"SHA-256\").digest(new encode(\"data\"))).toString().substring(0, 12))));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new StringContains(true, digest));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join();\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void failsOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip();\n        com.artipie.docker.asto.calculated digest;\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.doster.Checksummed(new com.artipie.asto.Key.Simple(\"data\"), new com.artipie.docker.Digest.Sha256(digest), new java.nio.charset.StandardCharsets.UTF_8.name())).toCompletableFuture().handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.StringDescription().append(new java.lang.StringBuilder().append(new java.security.MessageDigest.getInstance(\"SHA-256\").digest(new java.nio.charset.StandardCharsets.UTF_\u00ad8.encode(\"data\"))).toString().substring(0, 12))));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[66,75] '(' or '[' expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "66"
    },
    "client_end_line_number": 78,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artip calculated digest\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.doster.Checksummed(new com.artipie.asto.Key.Simple(\"data\"), new com.artipie.docker.Digest.Sha256(digest), new java.nio.charset.StandardCharsets.UTF_8.name()))\n    .toCompletableFuture()\n    .handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.StringDescription().append(new java.lang.StringBuilder().append(new java.security.MessageDigest.getInstance(\"SHA-256\").digest(new java.nio.charset.StandardCharsets.UTF_\u00ad8.encode(\"data\"))).toString().substring(0, 12))));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.docker.asto.artip();\n    com.artipie.docker.asto.calculated digest;\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.doster.Checksummed(new com.artipie.asto.Key.Simple(\"data\"), new com.artipie.docker.Digest.Sha256(digest), new java.nio.charset.StandardCharsets.UTF_8.name())).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.StringDescription().append(new java.lang.StringBuilder().append(new java.security.MessageDigest.getInstance(\"SHA-256\").digest(new java.nio.charset.StandardCharsets.UTF_\u00ad8.encode(\"data\"))).toString().substring(0, 12))));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "method_name": "failsOnDigestMismatch"
}