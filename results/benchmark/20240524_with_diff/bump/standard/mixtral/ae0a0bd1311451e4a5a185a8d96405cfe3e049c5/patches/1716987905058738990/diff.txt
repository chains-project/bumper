1d0
< // TODO: review this AI generated patch!
7,11c6,29
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.MatcherAssert.MatchesPattern(com.artipie.docker.error.InvalidDigestException.class.getName() + ": .*: expected='.*%s', calculated='.*%s'".formatted(digest, "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"))));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest)))
>         .thenAccept(blob -> {
>             try {
>                 blob.lock().ifPresent(lock -> lock.close());
>             } catch (final java.io.IOException e) {
>                 throw new com.artipie.docker.asto.InvalidBlobException("Exception thrown", e);
>             }
>         })
>         .thenCompose(blob -> {
>             final java.util.concurrent.CompletableFuture<Void> future = new java.util.concurrent.CompletableFuture<>();
>             try {
>                 final java.nio.file.Path path = blob.key().get();
>                 final java.security.MessageDigest md = java.security.MessageDigest.getInstance("SHA-256");
>                 md.update(java.nio.file.Files.readAllBytes(path));
>                 final byte[] calculatedDigest = md.digest();
>                 if (!java.util.Arrays.equals(calculatedDigest, java.util.Base64.getEncoder().encode(calculatedDigest))) {
>                     throw new com.artipie.docker.error.InvalidDigestException(String.format("expected='.*%s', calculated='.*%s'", digest, java.util.Base64.getEncoder().encodeToString(calculatedDigest)));
>                 }
>             } catch (final java.security.NoSuchAlgorithmException | java.io.IOException e) {
>                 future.completeExceptionally(e);
>             }
>             return future;
>         })
>         .join();
