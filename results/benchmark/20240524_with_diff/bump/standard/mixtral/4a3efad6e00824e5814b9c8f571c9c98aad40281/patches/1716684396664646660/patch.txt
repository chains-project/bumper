import eu.europa.esig.dss.certificate.CertificateToken;
import eu.europea.esig.dss.pades.PAdESParameter;
import eu.europa.esig.dss.pades.PAdESParameters;
import eu.europa.esig.dss.pades.SignatureImageParameters;
import eu.europa.esig.dss.pades.SignatureImageParameters.Image;
import eu.europa.esig.dss.pades.SignatureImageParameters.SignatureImageParametersBuilder;
import eu.europa.esig.dss.pades.SignatureParameters;
import eu.europa.esig.dss.pades.TimeStampParameters;
import eu.europa.esig.darrow.adobe.PAdESConstants;
import org.openpdf.sign.CertificateInfo;

//...

public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
    //...
    // use new method
    signatureParameters.setPermission(new PAdESParameter.Permission(PAdESConstants.MINIMAL_CHANGES_PERMITTED));
    //...
    if (visibleSignature) {
        // use new Builder pattern
        Image image = new Image(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
        //...
        SignatureImageParametersBuilder builder = new SignatureImageParametersBuilder();
        //...
        signatureParameters.setImageParameters(builder.build());
    //...
    }
    //...
    if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
        //...
        TimeStampParameters timeStampParameters = new TimeStampParameters();
        //...
        service.setTspSource(new CompositeTspSource(tspSources));
    }
    //...
}

private static class InMemoryDocument implements Image.Document {
    //...
}

private static class CompositeTspSource implements TspSource {
    //...
}