0a1,23
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.apache.pdfbox.pdmodel.PDDocument;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> 
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
> import java.io.File;
> import java.io.IOException;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.time.ZoneId;
> import java.time.ZonedDateTime;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
> 
3,8d25
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
10,13c27
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
15d28
<         //PAdES parameters
17,20c30,32
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d33
<         ;
25,26c36,38
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     signatureParameters.setPermission(new eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission(eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission.MINIMAL_CHANGES_PERMITTED));
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c40
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
30,39d41
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
<         log.debug("Signature service initialized");
< 
<         // Initialize visual signature and configure
41c43
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>         eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44,45c46
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {
48c49
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d50
< 
56,57d55
<                 log.debug("PDF page count: " + pageCount);
< 
61,74c59,64
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
<             // user-provided timezone, if any
<             if (params.getTimezone() != null) {
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
<             }
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
<             if (!Strings.isStringEmpty(params.getHint())) {
---
>         fieldParameters.setOriginX((params.getLeft() * Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setSignatureDate(DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault()).format(ZonedDateTime.now()));
>         fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubjectX500Principal().getName());
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {
79d68
< 
81,83c70
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
87,92c74
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
96,97c78,79
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>         if (params.getTSA() == null) {
>             Configuration.getInstance().getProperties().getStringArray("tsp_sources").forEach((source) -> {
101c83
<                 params.getTSA().stream().forEach(source -> {
---
>             params.getTSA().forEach((source) -> {
107d88
< 
109,113c90
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
<         log.debug("Data to be signed loaded");
---
>     eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
115,118d91
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
120d92
< 
124c96
<             signedDocument.writeTo(System.out);
---
>         signedDocument.writeTo(new ByteArrayOutputStream());
