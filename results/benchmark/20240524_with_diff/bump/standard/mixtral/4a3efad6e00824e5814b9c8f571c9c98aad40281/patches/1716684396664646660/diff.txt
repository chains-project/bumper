1,30c1,10
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
<         DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
<         log.debug("Keystore created for signing");
<         //PAdES parameters
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
<         }
<         ;
<         signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
<         signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
<         } else {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
<         }
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
---
> import eu.europa.esig.dss.certificate.CertificateToken;
> import eu.europea.esig.dss.pades.PAdESParameter;
> import eu.europa.esig.dss.pades.PAdESParameters;
> import eu.europa.esig.dss.pades.SignatureImageParameters;
> import eu.europa.esig.dss.pades.SignatureImageParameters.Image;
> import eu.europa.esig.dss.pades.SignatureImageParameters.SignatureImageParametersBuilder;
> import eu.europa.esig.dss.pades.SignatureParameters;
> import eu.europa.esig.dss.pades.TimeStampParameters;
> import eu.europa.esig.darrow.adobe.PAdESConstants;
> import org.openpdf.sign.CertificateInfo;
32,35c12
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
---
> //...
37,39c14,18
<         log.debug("Signature service initialized");
< 
<         // Initialize visual signature and configure
---
> public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
>     //...
>     // use new method
>     signatureParameters.setPermission(new PAdESParameter.Permission(PAdESConstants.MINIMAL_CHANGES_PERMITTED));
>     //...
41,59c20,35
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
<             TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
<             imageParameters.setFieldParameters(fieldParameters);
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
<             } else {
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
<             }
< 
<             if (params.getPage() < 0) {
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
<                 int pageCount = pdDocument.getNumberOfPages();
<                 fieldParameters.setPage(pageCount + (1 + params.getPage()));
<                 pdDocument.close();
<                 log.debug("PDF page count: " + pageCount);
< 
<             } else {
<                 fieldParameters.setPage(params.getPage());
---
>         // use new Builder pattern
>         Image image = new Image(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
>         //...
>         SignatureImageParametersBuilder builder = new SignatureImageParametersBuilder();
>         //...
>         signatureParameters.setImageParameters(builder.build());
>     //...
>     }
>     //...
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         //...
>         TimeStampParameters timeStampParameters = new TimeStampParameters();
>         //...
>         service.setTspSource(new CompositeTspSource(tspSources));
>     }
>     //...
61,63d36
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
65,70c38,39
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
<             // user-provided timezone, if any
<             if (params.getTimezone() != null) {
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
---
> private static class InMemoryDocument implements Image.Document {
>     //...
72,108d40
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
<             if (!Strings.isStringEmpty(params.getHint())) {
<                 fieldParameters.setHint(params.getHint());
<             } else {
<                 fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString("hint_text"));
<             }
< 
<             signatureParameters.setImageParameters(imageParameters);
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
<             service.setPdfObjFactory(pdfBoxNativeObjectFactory);
<             log.debug("Visible signature parameters set");
<         }
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
<             compositeTSPSource.setTspSources(tspSources);
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             }
<             service.setTspSource(compositeTSPSource);
<         }
< 
<         ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);
110,127c42,43
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
<         log.debug("Data to be signed loaded");
<         SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
<         log.debug("Signature value calculated");
< 
<         DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);
<         log.debug("Document signing complete");
<         if (binary) {
<             signedDocument.writeTo(System.out);
<         } else {
<             signedDocument.save(outputFile.toAbsolutePath().toString());
<         }
---
> private static class CompositeTspSource implements TspSource {
>     //...
