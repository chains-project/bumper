import eu.europa.esig.dss.pades.PAdESSignatureParameters;
import eu.europa.esig.dss.pades.PAdESService;
import eu.europa.esig.dss.pades.signature.PAdESSignatureService;
import eu.europa.esig.dss.pades.signature.PdfBoxNativeTableObjectFactory;
import eu.europa.esig.dss.pades.signature.SignatureImageParameters;
import eu.europa.esig.dss.pades.validation.PAdESLevel;
import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
import eu.europa.esig.dss.token.JKSSignatureToken;
import eu.europa.esig.dss.validation.CommonCertificateVerifier;
import eu.europa.esig.dss.validation.CertificateVerifier;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.security.KeyStore;
import java.security.KeyStore.PasswordProtection;
import java.security.cert.Certificate;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;

public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
    //...
    // PAdES parameters
    PAdESLevel signatureLevel = params.getUseTimestamp() || (!params.getTSA().isEmpty()) ? PAdESLevel.PAdES_BASELINE_T : PAdESLevel.PAdES_BASELINE_B;
    PAdESignatureParameters signatureParameters = new PAdESignatureParameters();
    signatureParameters.setSigningDate(ZonedDateTime.now(ZoneId.systemDefault()));
    //...
    signatureParameters.setPermission(Permission.MINIMAL_CHANGES_PERMITTED);
    //...
    // Create PAdESService for signature
    PAdEService service = new PAdEService(commonCertificateVerifier);
    //...
    // Initialize visual signature and configure
    if (visibleSignature) {
        SignatureImageParameters imageParameters = new SignatureImageParameters();
        //...
        if (params.getPage() < 0) {
            PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
            int pageCount = pdDocument.getNumberOfPages();
            fieldParameters.setPage(pageCount + (1 + params.getPage()));
            pdDocument.close();
            log.debug("PDF page count: " + pageCount);
        } else {
            fieldParameters.setPage(params.getPage());
        }
        fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
        fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
        fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
        // Get the SignedInfo segment that need to be signed.
        // respect local timezone
        DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
        // user-provided timezone, if any
        if (params.getTimezone() != null) {
            formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
        }
        fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate()));
        fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubjectX500Principal().getName());
        if (!Strings.isStringEmpty(params.getHint())) {
            fieldParameters.setHint(params.getHint());
        } else {
            fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString("hint_text"));
        }
        signatureParameters.setImageParameters(imageParameters);
        PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
        service.setPdfObjFactory(pdfBoxNativeObjectFactory);
    }
    //...
}