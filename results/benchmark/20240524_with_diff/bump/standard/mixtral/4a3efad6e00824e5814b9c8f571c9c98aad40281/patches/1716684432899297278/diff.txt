1,9c1,25
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
<         DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());
---
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.PAdESService;
> import eu.europa.esig.dss.pades.signature.PAdESSignatureService;
> import eu.europa.esig.dss.pades.signature.PdfBoxNativeTableObjectFactory;
> import eu.europa.esig.dss.pades.signature.SignatureImageParameters;
> import eu.europa.esig.dss.pades.validation.PAdESLevel;
> import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.CertificateVerifier;
> import org.apache.pdfbox.pdmodel.PDDocument;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> 
> import java.io.ByteArrayInputStream;
> import java.io.IOException;
> import java.nio.file.Path;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.time.ZoneId;
> import java.time.ZonedDateTime;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
11,14c27,28
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
<         log.debug("Keystore created for signing");
---
> public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
>     //...
16,33c30,35
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
<         }
<         ;
<         signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
<         signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
<         } else {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
<         }
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
---
>     PAdESLevel signatureLevel = params.getUseTimestamp() || (!params.getTSA().isEmpty()) ? PAdESLevel.PAdES_BASELINE_T : PAdESLevel.PAdES_BASELINE_B;
>     PAdESignatureParameters signatureParameters = new PAdESignatureParameters();
>     signatureParameters.setSigningDate(ZonedDateTime.now(ZoneId.systemDefault()));
>     //...
>     signatureParameters.setPermission(Permission.MINIMAL_CHANGES_PERMITTED);
>     //...
35,38c37,38
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
<         log.debug("Signature service initialized");
< 
---
>     PAdEService service = new PAdEService(commonCertificateVerifier);
>     //...
42,50c42
<             TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
<             imageParameters.setFieldParameters(fieldParameters);
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
<             } else {
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
<             }
< 
---
>         //...
57d48
< 
61,64c52,54
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
---
>         fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
72,73c62,63
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
---
>         fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate()));
>         fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubjectX500Principal().getName());
79d68
< 
81,83c70
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
85,126d71
<             log.debug("Visible signature parameters set");
<         }
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
<             compositeTSPSource.setTspSources(tspSources);
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             }
<             service.setTspSource(compositeTSPSource);
<         }
< 
<         ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
<         log.debug("Data to be signed loaded");
<         SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
<         log.debug("Signature value calculated");
< 
<         DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);
<         log.debug("Document signing complete");
<         if (binary) {
<             signedDocument.writeTo(System.out);
<         } else {
<             signedDocument.save(outputFile.toAbsolutePath().toString());
127a73
>     //...
