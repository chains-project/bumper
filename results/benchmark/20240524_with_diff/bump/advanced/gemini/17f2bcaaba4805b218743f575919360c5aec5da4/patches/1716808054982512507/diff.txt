1a2,106
> 
> import org.tinspin.index.PointIndexMMWrapper;
> import org.tinspin.index.phtree.PHTreeMMP;
> import org.tinspin.index.util.MinHeap;
> import org.tinspin.index.util.MinMaxHeap;
> 
> public class PGS_MeshingTests {
> 
>     @Test
>     public void testMeshing() {
>         // Create a meshing instance
>         PGS_Meshing meshing = new PGS_Meshing();
> 
>         // Set the meshing parameters
>         meshing.setMeshSize(10);
>         meshing.setMeshDensity(0.5);
> 
>         // Create a mesh
>         Mesh mesh = meshing.createMesh();
> 
>         // Assert that the mesh has the correct size and density
>         assertEquals(10, mesh.getSize());
>         assertEquals(0.5, mesh.getDensity(), 0.001);
>     }
> 
>     @Test
>     public void testPointIndex() {
>         // Create a point index
>         PointIndexMMWrapper pointIndex = new PointIndexMMWrapper();
> 
>         // Add some points to the index
>         pointIndex.addPoint(new double[]{0, 0, 0});
>         pointIndex.addPoint(new double[]{1, 1, 1});
> 
>         // Query the index for points within a radius of 1
>         List<double[]> points = pointIndex.query(new double[]{0.5, 0.5, 0.5}, 1);
> 
>         // Assert that the query returns the correct points
>         assertEquals(2, points.size());
>         assertEquals(0, points.get(0)[0], 0.001);
>         assertEquals(0, points.get(0)[1], 0.001);
>         assertEquals(0, points.get(0)[2], 0.001);
>         assertEquals(1, points.get(1)[0], 0.001);
>         assertEquals(1, points.get(1)[1], 0.001);
>         assertEquals(1, points.get(1)[2], 0.001);
>     }
> 
>     @Test
>     public void testPHTree() {
>         // Create a PHTree
>         PHTreeMMP phtree = new PHTreeMMP();
> 
>         // Insert some points into the PHTree
>         phtree.insert(new double[]{0, 0, 0});
>         phtree.insert(new double[]{1, 1, 1});
> 
>         // Query the PHTree for points within a radius of 1
>         List<double[]> points = phtree.query(new double[]{0.5, 0.5, 0.5}, 1);
> 
>         // Assert that the query returns the correct points
>         assertEquals(2, points.size());
>         assertEquals(0, points.get(0)[0], 0.001);
>         assertEquals(0, points.get(0)[1], 0.001);
>         assertEquals(0, points.get(0)[2], 0.001);
>         assertEquals(1, points.get(1)[0], 0.001);
>         assertEquals(1, points.get(1)[1], 0.001);
>         assertEquals(1, points.get(1)[2], 0.001);
>     }
> 
>     @Test
>     public void testMinHeap() {
>         // Create a MinHeap
>         MinHeap minHeap = new MinHeap(10);
> 
>         // Add some elements to the MinHeap
>         minHeap.add(1);
>         minHeap.add(2);
>         minHeap.add(3);
> 
>         // Extract the minimum element from the MinHeap
>         int min = minHeap.extractMin();
> 
>         // Assert that the minimum element is 1
>         assertEquals(1, min);
>     }
> 
>     @Test
>     public void testMinMaxHeap() {
>         // Create a MinMaxHeap
>         MinMaxHeap minMaxHeap = new MinMaxHeap(10);
> 
>         // Add some elements to the MinMaxHeap
>         minMaxHeap.add(1);
>         minMaxHeap.add(2);
>         minMaxHeap.add(3);
> 
>         // Extract the minimum and maximum elements from the MinMaxHeap
>         int min = minMaxHeap.extractMin();
>         int max = minMaxHeap.extractMax();
> 
>         // Assert that the minimum element is 1 and the maximum element is 3
>         assertEquals(1, min);
>         assertEquals(3, max);
>     }
> }
\ No newline at end of file
