1,6c1,20
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
---
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.apache.pdfbox.pdmodel.PDDocument;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> import org.openpdfsign.dss.SignerParameters;
> 
> import java.io.ByteArrayInputStream;
> import java.io.IOException;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.time.ZoneId;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
8c22,23
<         //load PDF file in DSSDocument format
---
> public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignerParameters params) throws IOException {
>     boolean visibleSignature = params.getPage() != null;
10,15c25
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
<         log.debug("Keystore created for signing");
<         //PAdES parameters
---
>     JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
17,20c27,29
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d30
<         ;
25,26c33,34
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c36
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
30,32c38
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
---
>     signatureParameters.setPermission(eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission.MINIMAL_CHANGES_PERMITTED);
34d39
<         // Create PAdESService for signature
36,39d40
< 
<         log.debug("Signature service initialized");
< 
<         // Initialize visual signature and configure
41c42
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>         eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44d44
< 
48c48
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d49
< 
54c53
<                 fieldParameters.setPage(pageCount + (1 + params.getPage()));
---
>             fieldParameters.setPage(pageCount + 1 + params.getPage());
56,57d54
<                 log.debug("PDF page count: " + pageCount);
< 
61,66c58,60
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
---
>         fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
68d61
<             // user-provided timezone, if any
79d71
< 
81,83c73
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
85d74
<             log.debug("Visible signature parameters set");
87,92c76
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
97c81
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>             for (String source : Configuration.getInstance().getProperties().getStringArray("tsp_sources")) {
99c83
<                 });
---
>             }
101c85
<                 params.getTSA().stream().forEach(source -> {
---
>             for (String source : params.getTSA()) {
103c87
<                 });
---
>             }
107d90
< 
109,120c92
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
<         log.debug("Data to be signed loaded");
<         SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
<         log.debug("Signature value calculated");
< 
---
>     SignatureValue signatureValue = signingToken.sign(dataToSign, signatureParameters.getDigestAlgorithm(), signingToken.getKey(keyAlias));
122d93
<         log.debug("Document signing complete");
126c97
<             signedDocument.save(outputFile.toAbsolutePath().toString());
---
>         signedDocument.save(outputFile.toString());
