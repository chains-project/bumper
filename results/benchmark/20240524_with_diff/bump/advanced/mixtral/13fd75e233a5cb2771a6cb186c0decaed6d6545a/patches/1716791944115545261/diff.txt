1d0
< // TODO: review this AI generated patch!
4c3
< "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" })
---
> "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" })
7,9c6,8
<     org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual<>(false));
<     final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);
<     org.hamcrest.MatcherAssert.assertThat(throwable, new org.hamcrest.core.StringContains.StringContains(new org.hamcrest.core.AllOf<>(java.util.Arrays.asList(new org.hamcrest.core.StringStartsWith.StringStartsWith("Invalid tag"), new org.hamcrest.core.StringEndsWith.StringEndsWith(original))))));
---
>     org.hamcrest.MatcherAssert.assertThat(tag.valid(), java.lang.Boolean.valueOf(false));
>     final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, () -> tag.value());
>     org.hamcrest.MatcherAssert.assertThat(throwable, new org.hamcrest.core.StringContains.StringContains(new org.hamcrest.core.AllOf(java.util.Arrays.asList(new org.hamcrest.core.StringStartsWith.StringStartsWith("Invalid tag"), new org.hamcrest.core.StringEndsWith.StringEndsWith(original)))));
