1,6c1,10
< @Test
<     void failsOnDigestMismatch() {
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import java.util.concurrent.ExecutionException;
> 
> @org.junit.jupiter.api.Test
> void failsOnDigestMismatch() throws ExecutionException, InterruptedException {
>     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
>     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
8,37c12,20
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
<                 return CompletableFuture.allOf();
<             }
<         ).join();
---
>     CompletableFuture<com.artipie.asto.Key> future = blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes(StandardCharsets.UTF_8)), new com.artipie.docker.Digest.Sha256(digest)));
>     future.exceptionally(throwable -> {
>         MatcherAssert.assertThat("Exception thrown", throwable, Matchers.notNullValue());
>         MatcherAssert.assertThat("Exception is InvalidDigestException", throwable.getCause(), Matchers.instanceOf(com.artipie.docker.error.InvalidDigestException.class));
>         MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getCause().getMessage(), Matchers.stringContainsInOrder(new String[]{"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"}));
>         MatcherAssert.assertThat("Exception message contains expected digest", throwable.getCause().getMessage(), Matchers.stringContainsInOrder(new String[]{digest}));
>         return null;
>     });
>     future.get();
