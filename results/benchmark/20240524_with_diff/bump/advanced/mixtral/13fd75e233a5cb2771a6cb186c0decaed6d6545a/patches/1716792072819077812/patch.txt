@org.junit.jupiter.params.ParameterizedTest
@org.junit.jupiter.params.provider.ValueSource(strings = { "", ".0", "*", "Ãª", "-my-tag", // @checkstyle LineLengthCheck (1 line)
"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" })
void shouldFailToGetValueWhenInvalid(final java.lang.String original) {
    final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);
    org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual(false));
    java.util.function.Predicate<java.lang.Throwable> predicate = throwable -> {
        return throwable instanceof com.artipie.docker.error.InvalidTagNameException &&
            throwable.getMessage().startsWith("Invalid tag") &&
            throwable.getMessage().endsWith(original);
    };
    org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, () -> {
        tag.value();
    }, predicate);
}