import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.nullValue;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.junit.jupiter.api.Test;
import com.artipie.asto.Content;
import com.artipie.asto.MemoryStorage;
import com.artipie.asto.ext.BlobLayout;
import com.artipie.asto.ext.CheckedBlobSource;
import com.artipie.asto.ext.Key;
import com.artipie.docker.Digest;
import com.artipie.docker.Digest.Sha256;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.IsNotNull;
import com.artipie.docker.asto.IsNotNullOrEmpty;
import com.artipie.docker.error.InvalidDigestException;
import com.google.common.base.Throwables;
import io.reactivex.Single;

@Test
void failsOnDigestMismatch() {
    final MemoryStorage storage = new MemoryStorage();
    final AstoBlobs blobs = new AstoBlobs(
        storage,
        new BlobLayout(),
        new RepoName.Simple("any")
    );
    final String digest = "123";
    blobs.put(
        new CheckedBlobSource(
            Content.From("data".getBytes(StandardCharsets.UTF_8)),
            new Sha256(digest)
        )
    ).toSingleDefault(new Void()).flatMapCompletable(v -> {
        assertThat(
            "Exception thrown",
            Throwables.getRootCause(blobs.exceptionally(throwable -> null)),
            not(nullValue())
        );
        assertThat(
            "Exception is InvalidDigestException",
            Throwables.getRootCause(blobs.exceptionally(throwable -> null)),
            instanceOf(InvalidDigestException.class)
        );
        assertThat(
            "Exception message contains calculated digest",
            Throwables.getRootCause(blobs.exceptionally(throwable -> null)).getMessage(),
            new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
        );
        assertThat(
            "Exception message contains expected digest",
            Throwables.getRootCause(blobs.exceptionally(throwable -> null)).getMessage(),
            new StringContains(digest)
        );
        return CompletableFuture.allOf();
    }).blockingAwait();
}