@org.junit.jupiter.api.Test
void failsOnDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
    final java.lang.String digest = "123";
    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest)))
        .toCompletableFuture()
        .handle(
            (blob, throwable) -> {
              if (throwable != null) {
                if (throwable instanceof com.artipie.docker.asto.Null) {
                  throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
                }
                if (throwable instanceof com.artipie.docker.asto.IsNull) {
                  throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
                }
                throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
              }
              if (throwable instanceof com.artipie.docker.asto.Null) {
                throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
              }
              if (throwable instanceof com.artipie.docker.asto.IsNull) {
                throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
              }
              throw new com.artipie.docker.error.InvalidDigestException("Exception thrown", throwable);
            }
        )
        .join();
}