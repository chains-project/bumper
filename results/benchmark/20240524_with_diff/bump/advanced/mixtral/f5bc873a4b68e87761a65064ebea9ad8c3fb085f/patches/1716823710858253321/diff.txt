0a1
> import org.apache.maven.model.Model;
1a3,75
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.DependencyCollectionException;
> import org.eclipse.aether.collection.DependencyFilter;
> import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
> import org.eclipse.aether.impl.DefaultServiceLocator;
> import org.eclipse.aether.repository.LocalRepository;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactRequest;
> import org.eclipse.aether.resolution.ArtifactResolutionException;
> import org.eclipse.aether.resolution.VersionRangeRequest;
> import org.eclipse.aether.spi.connector.connectorFactory;
> import org.eclipse.aether.spi.locator.ServiceLocator;
> import org.eclipse.aether.util.artifact.JavaScopes;
> import org.eclipse.aether.util.filter.DependencyFilterUtils;
> 
> // ...
> 
> private MavenProject getProject(String groupId, String artifactId, String version) {
>     RepositorySystem repositorySystem = newRepositorySystem();
>     RepositorySystemSession session = newRepositorySystemSession(repositorySystem);
> 
>     LocalRepository localRepository = new LocalRepository(getLocalRepositoryPath());
>     session.setLocalRepositoryManager(repositorySystem.newLocalRepositoryManager(session, localRepository));
> 
>     CollectRequest collectRequest = new CollectRequest();
>     Model model = new Model();
>     model.setGroupId(groupId);
>     model.setArtifactId(artifactId);
>     model.setVersion(version);
>     model.setPackaging("pom");
>     ArtifactRequest artifactRequest = new ArtifactRequest();
>     artifactRequest.setArtifact(new DefaultArtifact(model));
>     artifactRequest.setRepositories(getRemoteRepositories());
>     collectRequest.setArtifactRequests(asList(artifactRequest));
> 
>     try {
>         repositorySystem.collectDependencies(session, collectRequest);
>     } catch (DependencyCollectionException e) {
>         throw new MojoExecutionException("Failed to collect dependencies for " + groupId + ":" + artifactId + ":" + version, e);
>     }
> 
>     MavenProject mavenProject = null;
>     for (Dependency dependency : collectRequest.getArtifactDescriptors()) {
>         if (dependency.getArtifact().getGroupId().equals(groupId) && dependency.getArtifact().getArtifactId().equals(artifactId)) {
>             mavenProject = new MavenProject(dependency.getArtifact().getFile(), dependency.getArtifact().getVersion(), session.getRepositorySession());
>             break;
>         }
>     }
> 
>     if (mavenProject == null) {
>         throw new MojoExecutionException("Failed to find Maven project for " + groupId + ":" + artifactId + ":" + version);
>     }
> 
>     return mavenProject;
> }
> 
> private List<RemoteRepository> getRemoteRepositories() {
>     // ...
> }
> 
> private RepositorySystem newRepositorySystem() {
>     DefaultServiceLocator locator = new DefaultServiceLocator();
>     locator.addService(connectorFactory.class, BasicRepositoryConnectorFactory.class);
>     return locator.getService(RepositorySystem.class);
> }
> 
> private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem) {
>     DefaultServiceLocator locator = new DefaultServiceLocator();
>     locator.addService(RepositorySystem.class, repositorySystem);
>     return locator.getService(RepositorySystemSession.class);
> }
\ No newline at end of file
