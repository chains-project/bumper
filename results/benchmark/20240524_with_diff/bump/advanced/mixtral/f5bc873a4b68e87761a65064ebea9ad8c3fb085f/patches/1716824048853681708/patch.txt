import org.apache.maven.model.Model;
import org.apache.maven.project.MavenProject;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.collection.CollectRequest;
import org.eclipse.aether.collection.DependencyCollectionException;
import org.eclipse.aether.collection.DependencyFilter;
import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
import org.eclipse.aether.impl.DefaultServiceLocator;
import org.eclipse.aether.internal.impl.DefaultRepositorySystemSession;
import org.eclipse.aether.repository.LocalRepository;
import org.eclipse.aether.repository.RemoteRepository;
import org.eclipse.aether.resolution.ArtifactRequest;
import org.eclipse.aether.resolution.ArtifactResolutionException;
import org.eclipse.aether.resolution.VersionRangeRequest;
import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;
import org.eclipse.aether.spi.locator.ServiceLocator;
import org.eclipse.aether.transfer.TransferEvent;
import org.eclipse.aether.transfer.TransferResource;

public MavenProject getProject() {
    Model model = new Model();
    RepositorySystem repositorySystem = newRepositorySystem();
    RepositorySystemSession repositorySystemSession = newRepositorySystemSession(repositorySystem);
    LocalRepository localRepository = new LocalRepository("local-repo");
    RemoteRepository remoteRepository = new RemoteRepository("central", "default", "https://repo.maven.apache.org/maven2/");
    CollectRequest collectRequest = new CollectRequest();
    DependencyFilter dependencyFilter = DependencyFilter.includeVersionless();
    VersionRangeRequest versionRangeRequest = new VersionRangeRequest();
    ArtifactRequest artifactRequest = new ArtifactRequest();
    try {
        repositorySystem.collectDependencies(repositorySystemSession, collectRequest, dependencyFilter);
        repositorySystem.resolveArtifacts(repositorySystemSession, artifactRequest);
        repositorySystem.resolveVersionRange(repositorySystemSession, versionRangeRequest);
        repositorySystem.transfer(repositorySystemSession, new TransferEvent(null, null, TransferResource.URI_CTX, null, null, null, null, null));
    } catch (DependencyCollectionException | ArtifactResolutionException e) {
        e.printStackTrace();
    }
    return new MavenProject(model, localRepository, remoteRepository, repositorySystem, repositorySystemSession);
}

private RepositorySystem newRepositorySystem() {
    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
    return new DefaultRepositorySystem();
}

private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem) {
    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
    ServiceLocator serviceLocator = locator.getServiceLocator();
    return new DefaultRepositorySystemSession(serviceLocator);
}