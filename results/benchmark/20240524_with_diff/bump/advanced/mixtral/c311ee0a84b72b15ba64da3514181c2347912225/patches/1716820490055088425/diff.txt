1,2c1,25
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.ExtAsto;
> import com.artipie.docker.Digest;
> import com.artipie.docker.CheckedBlobSource;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.core.IsInstanceOf;
> import org.hamcrest.core.StringContains;
> import org.hamcrest.core.StringStartsWith;
> import org.junit.jupiter.api.Test;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> 
> import static com.artipie.asto.ext.ExtAsto.content;
> import static org.hamcrest.core.IsNot.not;
> import static org.mockito.Mockito.mock;
> import static org.mockito.Mockito.when;
> 
> @Test
4,13c27,41
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(new java.lang.StringBuilder("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString()))));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest)));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     final Storage storage = mock(Storage.class);
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
>     final String digest = "123";
>     final Key key = new Key.From("any", Digest.Sha256.name(), digest);
>     final Content content = content(ByteBuffer.wrap("data".getBytes(StandardCharsets.UTF_8)));
>     when(storage.save(key, content)).thenAnswer(invocation -> {
>         throw new InvalidDigestException("Invalid digest: " + digest);
>     });
>     blobs.put(new CheckedBlobSource(content, new Digest.Sha256(digest))).toCompletableFuture().handle((blob, throwable) -> {
>         MatcherAssert.assertThat("Exception thrown", throwable, not(new IsInstanceOf(IllegalStateException.class)));
>         MatcherAssert.assertThat("Exception is InvalidDigestException", throwable, new IsInstanceOf(InvalidDigestException.class));
>         MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getMessage(), new StringStartsWith(new StringValue(new StringBuilder("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString())));
>     });
>     MatcherAssert.assertThat("Exception message contains expected digest", throwable.getMessage(), new StringContains(digest));
>     return CompletableFuture.allOf();
