0a1,30
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ext.BlobName;
> import com.artipie.asto.ext.BlobSource;
> import com.artipie.asto.ext.CheckedBlobSource;
> import com.artipie.asto.ext.Layouts;
> import com.artipie.asto.ext.Putter;
> import com.artipie.docker.Digest;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.IsBlob;
> import com.artipie.docker.asto.IsNot;
> import com.artipie.docker.asto.IsNull;
> import com.artipie.docker.error.InvalidDigestException;
> import io.reactivex.Completable;
> import static org.hamcrest.Matchers.containsString;
> import static org.hamcrest.Matchers.hasItem;
> import static org.hamcrest.Matchers.hasSize;
> import java.util.List;
> import java.util.concurrent.CompletionException;
> import org.hamcrest.Matcher;
> 
3c33
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final MemoryStorage storage = new MemoryStorage();
5c35,37
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         Layouts.singleTar(),
>         new BlobName.Simple("any")
8,33c40,55
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>     final Key key = new BlobName.Simple("any").withDigest(new Sha256(digest));
>     final Matcher<Throwable> notNullNotIs Null = not(new IsNull<>());
>     final Matcher<Throwable> isInvalidDigestException = instanceOf(InvalidDigestException.class);
>     final Matcher<Throwable> messageContainsCalculatedDigest = new IsBlob(
>         storage,
>         key,
>         new Content.From("data".getBytes(StandardCharsets.UTF_8))
>     ).andThen(new Putter(storage)).andThen(Completable.defer(() -> {
>         try {
>             return Completable.complete();
>         } catch (final CompletionException ex) {
>             return Completable.error(ex.getCause());
>         }
>     })).andThen(new IsNot<>(notNullNotIsNull)).andThen(throwable -> {
>         List<String> messages = List.of(throwable.getMessage(),
>             Throwables.getRootCause(throwable).getMessage()
34a57,65
>         return hasItem(messages, hasSize(2), hasItem(messages, containsString(digest)),
>             hasItem(messages, containsString(new Sha256("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString())));
>     }));
>     blobs.put(new CheckedBlobSource(
>         new Content.From("data".getBytes(StandardCharsets.UTF_8)),
>         new Sha256(digest)
>     )).toCompletableFuture().handle((blob, throwable) -> {
>         assertThat("Exception thrown", throwable, isInvalidDigestException);
>         assertThat("Exception message contains calculated digest", throwable, messageContainsCalculatedDigest);
36,37c67
<             }
<         ).join();
---
>     }).join();
