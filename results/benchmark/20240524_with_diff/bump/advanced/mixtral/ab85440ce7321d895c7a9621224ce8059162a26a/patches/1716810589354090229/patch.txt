import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.nullValue;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.junit.jupiter.api.Test;
import com.artipie.asto.Content;
import com.artipie.asto.Key;
import com.artipie.asto.MemoryStorage;
import com.artipie.asto.ext.BlobName;
import com.artipie.asto.ext.BlobSource;
import com.artipie.asto.ext.CheckedBlobSource;
import com.artipie.asto.ext.Layouts;
import com.artipie.asto.ext.Putter;
import com.artipie.docker.Digest;
import com.artipie.docker.Digest.Sha256;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.IsBlob;
import com.artipie.docker.asto.IsNot;
import com.artipie.docker.asto.IsNull;
import com.artipie.docker.error.InvalidDigestException;
import io.reactivex.Completable;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.hasSize;
import java.util.List;
import java.util.concurrent.CompletionException;
import org.hamcrest.Matcher;

@Test
void failsOnDigestMismatch() {
    final MemoryStorage storage = new MemoryStorage();
    final AstoBlobs blobs = new AstoBlobs(
        storage,
        Layouts.singleTar(),
        new BlobName.Simple("any")
    );
    final String digest = "123";
    final Key key = new BlobName.Simple("any").withDigest(new Sha256(digest));
    final Matcher<Throwable> notNullNotIs Null = not(new IsNull<>());
    final Matcher<Throwable> isInvalidDigestException = instanceOf(InvalidDigestException.class);
    final Matcher<Throwable> messageContainsCalculatedDigest = new IsBlob(
        storage,
        key,
        new Content.From("data".getBytes(StandardCharsets.UTF_8))
    ).andThen(new Putter(storage)).andThen(Completable.defer(() -> {
        try {
            return Completable.complete();
        } catch (final CompletionException ex) {
            return Completable.error(ex.getCause());
        }
    })).andThen(new IsNot<>(notNullNotIsNull)).andThen(throwable -> {
        List<String> messages = List.of(throwable.getMessage(),
            Throwables.getRootCause(throwable).getMessage()
        );
        return hasItem(messages, hasSize(2), hasItem(messages, containsString(digest)),
            hasItem(messages, containsString(new Sha256("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString())));
    }));
    blobs.put(new CheckedBlobSource(
        new Content.From("data".getBytes(StandardCharsets.UTF_8)),
        new Sha256(digest)
    )).toCompletableFuture().handle((blob, throwable) -> {
        assertThat("Exception thrown", throwable, isInvalidDigestException);
        assertThat("Exception message contains calculated digest", throwable, messageContainsCalculatedDigest);
        return CompletableFuture.allOf();
    }).join();
}