0a1,17
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ext.Keys;
> import com.artipie.asto.ext.Putter;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.AstoBlobs;
> import com.google.common.base.Throwables;
> 
3c20
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final MemoryStorage storage = new MemoryStorage();
5c22,24
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
7a27,30
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final Digest calcDigest = Digest.Sha256.string(
>         Keys.hash(content).join().toString()
>     );
9c32
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
---
>         new CheckedBlobSource(content, calcDigest)
12,22c35,37
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
---
>             assertThat("Exception thrown", throwable, not(nullValue()));
>             assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>             assertThat(
25,33c40
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>                 String.format("invalid digest %s, expected %s", calcDigest, digest)
