{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1002021887,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    @Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new Digest.Sha256(digest))).toCompletableFuture().handle((blob, throwable) -> {\n            MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new IsNull<>()));\n            MatcherAssert.assertThat(\"Exception is InvalidDigestException\", Throwables.getRootCause(throwable), new IsInstanceOf(InvalidDigestException.class));\n            MatcherAssert.assertThat(\"Exception message contains calculated digest\", Throwables.getRootCause(throwable).getMessage(), new StringContains(true, \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n            MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwable).getMessage(), new StringContains(true, digest));\n            return CompletableFuture.allOf();\n        }).join();\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    @org.junit.jupiter.api.Test\n    void failsOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  required: java.lang.String\n  found: boolean,java.lang.String\n  reason: actual and formal argument lists differ in length\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[87,21] constructor StringContains in class org.hamcrest.core.StringContains cannot be applied to given types;",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "87"
    },
    "client_end_line_number": 100,
    "client_line_number": 63,
    "method_code": "@Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(\n            storage, new DefaultLayout(), new RepoName.Simple(\"any\")\n        );\n        final String digest = \"123\";\n        blobs.put(\n            new CheckedBlobSource(new Content.From(\"data\".getBytes()), new Digest.Sha256(digest))\n        ).toCompletableFuture().handle(\n            (blob, throwable) -> {\n                MatcherAssert.assertThat(\n                    \"Exception thrown\",\n                    throwable,\n                    new IsNot<>(new IsNull<>())\n                );\n                MatcherAssert.assertThat(\n                    \"Exception is InvalidDigestException\",\n                    Throwables.getRootCause(throwable),\n                    new IsInstanceOf(InvalidDigestException.class)\n                );\n                MatcherAssert.assertThat(\n                    \"Exception message contains calculated digest\",\n                    Throwables.getRootCause(throwable).getMessage(),\n                    new StringContains(\n                        true,\n                        \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"\n                    )\n                );\n                MatcherAssert.assertThat(\n                    \"Exception message contains expected digest\",\n                    Throwables.getRootCause(throwable).getMessage(),\n                    new StringContains(true, digest)\n                );\n                return CompletableFuture.allOf();\n            }\n        ).join();\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "method_name": "failsOnDigestMismatch"
}