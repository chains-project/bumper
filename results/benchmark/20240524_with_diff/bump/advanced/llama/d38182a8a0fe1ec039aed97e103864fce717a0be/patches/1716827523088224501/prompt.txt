Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
BE SURE to return fully qualified code (e.g. don't return Float but return java.lang.Float)
return only the fixed failing method, not the complete class code, you MUST change something in the code.

the following client code fails:
```java
@org.junit.jupiter.api.Test
void testScope() {
    final java.lang.String line = "GET /resource.txt HTTP/1.1";
    final java.lang.String action = "foo:bar:baz";
    final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();
    final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();
    new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {
        @java.lang.Override
        public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {
            cline.set(rqline);
            return new com.artipie.docker.http.Scope.FromString(action);
        }

        @java.lang.Override
        public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {
            return com.artipie.http.rs.StandardRs.OK;
        }
    }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.AuthScheme.Result() {
        @java.lang.Override
        public Optional<com.artipie.http.auth.Authentication.User> user() {
            return java.util.Optional.of(new com.artipie.http.auth.Authentication.User("alice"));
        }

        @java.lang.Override
        public java.lang.String challenge() {
            return "";
        }
    }), ( user, act) -> {
        caction.set(act);
        return true;
    }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();
    org.hamcrest.MatcherAssert.assertThat("Request line passed to slice", cline.get(), new org.hamcrest.core.IsEqual<>(line));
    org.hamcrest.MatcherAssert.assertThat("Scope passed as action to permissions", caction.get(), new org.hamcrest.core.IsEqual<>(action));
}
```

with the following error message:
[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java:[56,51] cannot find symbol
  symbol:   class User
  location: interface com.artipie.http.auth.Authentication


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
Here is the list of suitable replacements for "User":

++ Authentication$User
++ User$Simple
++ com.artipie.http.auth.Authentication$User
++ com.artipie.security.perms.User
-- com.artipie.security.perms.User
++ com.artipie.security.policy.CachedYamlPolicy$AstoUser