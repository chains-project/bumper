Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

the following client code fails:
```java
  import org.cactoos.scalar.UncheckedScalar;
```

with the following error message:
[ERROR] /java-api/src/main/java/io/zold/api/Wallet.java:[38,26] cannot find symbol
  symbol:   class UncheckedScalar
  location: package org.cactoos.scalar


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
-- public Scalar$NoNulls org.cactoos.Scalar$NoNulls(org.cactoos.Scalar)
-- public java.lang.Object org.cactoos.Scalar$NoNulls.value()
++ public UncheckedBytes org.cactoos.bytes.UncheckedBytes(org.cactoos.Bytes)
++ public UncheckedBytes org.cactoos.bytes.UncheckedBytes(org.cactoos.Bytes,org.cactoos.Fallback)
++ public [B org.cactoos.bytes.UncheckedBytes.asBytes()
-- public CollectionEnvelope org.cactoos.collection.CollectionEnvelope(org.cactoos.Scalar)
++ public transient Threads org.cactoos.experimental.Threads(int,java.time.Duration,org.cactoos.Scalar[])
++ public transient Threads org.cactoos.experimental.Threads(int,org.cactoos.Scalar[])
++ public transient Threads org.cactoos.experimental.Threads(java.util.concurrent.ExecutorService,java.time.Duration,org.cactoos.Scalar[])
++ public transient Threads org.cactoos.experimental.Threads(java.util.concurrent.ExecutorService,org.cactoos.Scalar[])
-- public UncheckedBiProc org.cactoos.func.UncheckedBiProc(org.cactoos.BiProc)
-- public void org.cactoos.func.UncheckedBiProc.exec(java.lang.Object,java.lang.Object)
-- public UncheckedProc org.cactoos.func.UncheckedProc(org.cactoos.Proc)
-- public void org.cactoos.func.UncheckedProc.exec(java.lang.Object)
-- public UncheckedBytes org.cactoos.io.UncheckedBytes(org.cactoos.Bytes)
-- public UncheckedBytes org.cactoos.io.UncheckedBytes(org.cactoos.Bytes,org.cactoos.Func)
-- public [B org.cactoos.io.UncheckedBytes.asBytes()
-- public IterableEnvelope org.cactoos.iterable.IterableEnvelope(org.cactoos.Scalar)
-- public Repeated org.cactoos.iterable.Repeated(int,org.cactoos.scalar.UncheckedScalar)
-- public Endless org.cactoos.iterator.Endless(org.cactoos.scalar.UncheckedScalar)
-- public Repeated org.cactoos.iterator.Repeated(int,org.cactoos.scalar.UncheckedScalar)
-- public ListIterator org.cactoos.list.ListIterator(org.cactoos.Scalar)
-- public MapEnvelope org.cactoos.map.MapEnvelope(org.cactoos.Scalar)
++ public NumberOfScalars org.cactoos.number.NumberOfScalars(org.cactoos.Scalar)
++ public NumberOfScalars org.cactoos.number.NumberOfScalars(org.cactoos.Scalar,org.cactoos.Scalar,org.cactoos.Scalar,org.cactoos.Scalar)
++ public D org.cactoos.number.NumberOfScalars.doubleValue()
++ public bool org.cactoos.number.NumberOfScalars.equals(java.lang.Object)
++ public F org.cactoos.number.NumberOfScalars.floatValue()
++ public int org.cactoos.number.NumberOfScalars.hashCode()
++ public int org.cactoos.number.NumberOfScalars.intValue()
++ public J org.cactoos.number.NumberOfScalars.longValue()
++ public java.lang.String org.cactoos.number.NumberOfScalars.toString()
++ public CallableOf org.cactoos.proc.CallableOf(org.cactoos.Scalar)
++ public RunnableOf org.cactoos.proc.RunnableOf(org.cactoos.Scalar)
++ public UncheckedBiProc org.cactoos.proc.UncheckedBiProc(org.cactoos.BiProc)
++ public void org.cactoos.proc.UncheckedBiProc.exec(java.lang.Object,java.lang.Object)
++ public UncheckedProc org.cactoos.proc.UncheckedProc(org.cactoos.Proc)
++ public void org.cactoos.proc.UncheckedProc.exec(java.lang.Object)
-- public transient AvgOf org.cactoos.scalar.AvgOf(org.cactoos.Scalar[])
++ public Binary org.cactoos.scalar.Binary(org.cactoos.Scalar,java.lang.Runnable)
++ public CallableOf org.cactoos.scalar.CallableOf(org.cactoos.Scalar)
++ public Checked org.cactoos.scalar.Checked(org.cactoos.Scalar,org.cactoos.Func)
-- public CheckedScalar org.cactoos.scalar.CheckedScalar(org.cactoos.Scalar,org.cactoos.Func)
-- public java.lang.Object org.cactoos.scalar.CheckedScalar.value()
++ public EqualsNullable org.cactoos.scalar.EqualsNullable(java.lang.Object,org.cactoos.Scalar)
++ public EqualsNullable org.cactoos.scalar.EqualsNullable(org.cactoos.Scalar,java.lang.Object)
++ public EqualsNullable org.cactoos.scalar.EqualsNullable(org.cactoos.Scalar,org.cactoos.Scalar)
++ public FirstOf org.cactoos.scalar.FirstOf(java.lang.Iterable,org.cactoos.Scalar)
++ public Flattened org.cactoos.scalar.Flattened(org.cactoos.Scalar)
++ public IoChecked org.cactoos.scalar.IoChecked(org.cactoos.Scalar)
-- public IoCheckedScalar org.cactoos.scalar.IoCheckedScalar(org.cactoos.Scalar)
-- public java.lang.Object org.cactoos.scalar.IoCheckedScalar.value()
++ public Mapped org.cactoos.scalar.Mapped(org.cactoos.Func,org.cactoos.Scalar)
++ public NoNulls org.cactoos.scalar.NoNulls(org.cactoos.Scalar)
-- public NumberEnvelope org.cactoos.scalar.NumberEnvelope(org.cactoos.Scalar)
-- public NumberEnvelope org.cactoos.scalar.NumberEnvelope(org.cactoos.Scalar,org.cactoos.Scalar,org.cactoos.Scalar,org.cactoos.Scalar)
++ public Repeated org.cactoos.scalar.Repeated(org.cactoos.Scalar,int)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar,int)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar,int,java.time.Duration)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar,java.time.Duration)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar,org.cactoos.Func)
++ public Retry org.cactoos.scalar.Retry(org.cactoos.Scalar,org.cactoos.Func,java.time.Duration)
-- public RetryScalar org.cactoos.scalar.RetryScalar(org.cactoos.Scalar)
-- public RetryScalar org.cactoos.scalar.RetryScalar(org.cactoos.Scalar,int)
-- public RetryScalar org.cactoos.scalar.RetryScalar(org.cactoos.Scalar,org.cactoos.Func)
-- public java.lang.Object org.cactoos.scalar.RetryScalar.value()
++ public ScalarEnvelope org.cactoos.scalar.ScalarEnvelope(org.cactoos.Scalar)
++ public final java.lang.Object org.cactoos.scalar.ScalarEnvelope.value()
++ public ScalarOf org.cactoos.scalar.ScalarOf(java.lang.Runnable,java.lang.Object)
++ public ScalarOf org.cactoos.scalar.ScalarOf(java.util.concurrent.Callable)
++ public ScalarOf org.cactoos.scalar.ScalarOf(org.cactoos.Func,java.lang.Object)
++ public ScalarOf org.cactoos.scalar.ScalarOf(org.cactoos.Proc,java.lang.Object,java.lang.Object)
++ public ScalarOfSupplier org.cactoos.scalar.ScalarOfSupplier(java.util.function.Supplier)
++ public ScalarWithFallback org.cactoos.scalar.ScalarWithFallback(org.cactoos.Scalar,java.lang.Iterable)
-- public ScalarWithFallback org.cactoos.scalar.ScalarWithFallback(org.cactoos.Scalar,java.lang.Iterable,org.cactoos.Func)
++ public transient ScalarWithFallback org.cactoos.scalar.ScalarWithFallback(org.cactoos.Scalar,org.cactoos.Fallback[])
++ public Solid org.cactoos.scalar.Solid(org.cactoos.Scalar)
-- public SolidScalar org.cactoos.scalar.SolidScalar(org.cactoos.Scalar)
-- public java.lang.Object org.cactoos.scalar.SolidScalar.value()
++ public Sticky org.cactoos.scalar.Sticky(org.cactoos.Scalar)
-- public StickyScalar org.cactoos.scalar.StickyScalar(org.cactoos.Scalar)
-- public java.lang.Object org.cactoos.scalar.StickyScalar.value()
-- public transient SumOfDoubleScalar org.cactoos.scalar.SumOfDoubleScalar(org.cactoos.Scalar[])
-- public java.lang.Double org.cactoos.scalar.SumOfDoubleScalar.value()
-- public transient SumOfFloatScalar org.cactoos.scalar.SumOfFloatScalar(org.cactoos.Scalar[])
-- public java.lang.Float org.cactoos.scalar.SumOfFloatScalar.value()
-- public transient SumOfIntScalar org.cactoos.scalar.SumOfIntScalar(org.cactoos.Scalar[])
-- public java.lang.Integer org.cactoos.scalar.SumOfIntScalar.value()
-- public transient SumOfLongScalar org.cactoos.scalar.SumOfLongScalar(org.cactoos.Scalar[])
-- public java.lang.Long org.cactoos.scalar.SumOfLongScalar.value()
-- public SyncScalar org.cactoos.scalar.SyncScalar(org.cactoos.Scalar)
-- public SyncScalar org.cactoos.scalar.SyncScalar(org.cactoos.Scalar,java.lang.Object)
-- public java.lang.Object org.cactoos.scalar.SyncScalar.value()
++ public Synced org.cactoos.scalar.Synced(org.cactoos.Scalar)
++ public Synced org.cactoos.scalar.Synced(org.cactoos.Scalar,java.lang.Object)
++ public Ternary org.cactoos.scalar.Ternary(boolean,org.cactoos.Scalar,org.cactoos.Scalar)
++ public Ternary org.cactoos.scalar.Ternary(org.cactoos.Scalar,org.cactoos.Func,org.cactoos.Func,org.cactoos.Func)
++ public Unchecked org.cactoos.scalar.Unchecked(org.cactoos.Scalar)
++ public java.lang.Object org.cactoos.scalar.Unchecked.value()
-- public UncheckedScalar org.cactoos.scalar.UncheckedScalar(org.cactoos.Scalar)
-- public java.lang.Object org.cactoos.scalar.UncheckedScalar.value()
++ public transient Xor org.cactoos.scalar.Xor(org.cactoos.Scalar[])
++ public Flattened org.cactoos.text.Flattened(org.cactoos.Scalar)
-- public RandomText org.cactoos.text.RandomText(java.util.List,org.cactoos.Scalar)
-- public RandomText org.cactoos.text.RandomText(java.util.List,org.cactoos.Scalar,java.util.Random)
-- public RandomText org.cactoos.text.RandomText(org.cactoos.Scalar)
-- public transient RandomText org.cactoos.text.RandomText(org.cactoos.Scalar,java.lang.Character[])
++ public Randomized org.cactoos.text.Randomized(java.lang.Iterable,org.cactoos.Scalar)
++ public Randomized org.cactoos.text.Randomized(java.lang.Iterable,org.cactoos.Scalar,java.util.Random)
++ public Randomized org.cactoos.text.Randomized(org.cactoos.Scalar)
++ public transient Randomized org.cactoos.text.Randomized(org.cactoos.Scalar,java.lang.Character[])
++ public Replaced org.cactoos.text.Replaced(org.cactoos.Text,org.cactoos.Scalar,org.cactoos.Func)
-- public ReplacedText org.cactoos.text.ReplacedText(org.cactoos.Text,org.cactoos.Scalar,org.cactoos.Func)
-- public SplitText org.cactoos.text.SplitText(org.cactoos.text.UncheckedText,org.cactoos.text.UncheckedText)
++ public Sub org.cactoos.text.Sub(org.cactoos.Text,int,org.cactoos.Scalar)
++ public Sub org.cactoos.text.Sub(org.cactoos.Text,org.cactoos.Scalar)
++ public Sub org.cactoos.text.Sub(org.cactoos.Text,org.cactoos.Scalar,org.cactoos.Func)
++ public Sub org.cactoos.text.Sub(org.cactoos.Text,org.cactoos.Scalar,org.cactoos.Scalar)
-- public SubText org.cactoos.text.SubText(org.cactoos.Text,org.cactoos.Scalar,org.cactoos.Scalar)
-- public SubText org.cactoos.text.SubText(org.cactoos.Text,org.cactoos.scalar.UncheckedScalar,org.cactoos.scalar.UncheckedScalar)
-- public TextEnvelope org.cactoos.text.TextEnvelope(org.cactoos.Scalar)
++ public TextOfScalar org.cactoos.text.TextOfScalar(org.cactoos.Scalar)
++ public java.lang.String org.cactoos.text.TextOfScalar.asString()
++ public bool org.cactoos.text.TextOfScalar.equals(java.lang.Object)
++ public int org.cactoos.text.TextOfScalar.hashCode()
++ public java.lang.String org.cactoos.text.TextOfScalar.toString()
++ public UncheckedText org.cactoos.text.UncheckedText(java.lang.CharSequence)
-- public UncheckedText org.cactoos.text.UncheckedText(java.lang.String)
++ public bool org.cactoos.text.UncheckedText.equals(java.lang.Object)
++ public int org.cactoos.text.UncheckedText.hashCode()
++ public java.lang.String org.cactoos.text.UncheckedText.toString()

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CAN remove the Override decorator IF AND ONLY IF the method is not overriding any method in the new version.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
return only the fixed failing method, not the complete class code, you MUST change something in the code.
