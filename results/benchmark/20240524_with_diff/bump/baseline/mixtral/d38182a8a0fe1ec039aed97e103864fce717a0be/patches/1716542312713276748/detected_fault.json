{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1859374258,
    "in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    @Test\n    void testScope() {\n        final String line = \"GET /resource.txt HTTP/1.1\";\n        final String action = \"foo:bar:baz\";\n        final AtomicReference<String> caction = new AtomicReference<>();\n        final AtomicReference<String> cline = new AtomicReference<>();\n        // TODO: review this AI generated patch!\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    @org.junit.jupiter.api.Test\n    void testScope() {\n        final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n        final java.lang.String action = \"foo:bar:baz\";\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n        // TODO: review this AI generated patch!\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java:[56,1] illegal start of type",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java",
        "client_line_position": "56"
    },
    "client_end_line_number": 86,
    "client_line_number": 30,
    "method_code": "@Test\n    void testScope() {\n        final String line = \"GET /resource.txt HTTP/1.1\";\n        final String action = \"foo:bar:baz\";\n        final AtomicReference<String> caction = new AtomicReference<>();\n        final AtomicReference<String> cline = new AtomicReference<>();\n        new AuthScopeSlice(\n            new ScopeSlice() {\n                @Override\n                public Scope scope(final String rqline) {\n                    cline.set(rqline);\n                    return new Scope.FromString(action);\n                }\n\n                @Override\n                public Response response(\n                    final String line,\n                    final Iterable<Map.Entry<String, String>> headers,\n                    final Publisher<ByteBuffer> body\n                ) {\n                    return StandardRs.OK;\n                }\n            },\n            (headers, rline) -> CompletableFuture.completedFuture(\n                new AuthScheme.Result() {\n// TODO: review this AI generated patch!\nimport com.artipie.http.auth.AuthUser;\n\n@Override\npublic Optional<AuthUser> user() {\n    return Optional.of(new AuthUser(\"alice\"));\n}\n\n                    @Override\n                    public String challenge() {\n                        return \"\";\n                    }\n                }\n            ),\n            (user, act) -> {\n                caction.set(act);\n                return true;\n            }\n        ).response(line, Headers.EMPTY, Content.EMPTY).send(\n            (status, headers, body) -> CompletableFuture.allOf()\n        ).toCompletableFuture().join();\n        MatcherAssert.assertThat(\n            \"Request line passed to slice\",\n            cline.get(),\n            new IsEqual<>(line)\n        );\n        MatcherAssert.assertThat(\n            \"Scope passed as action to permissions\",\n            caction.get(),\n            new IsEqual<>(action)\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid testScope() {\n    final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n    final java.lang.String action = \"foo:bar:baz\";\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n    // TODO: review this AI generated patch!\n}",
    "method_name": "testScope"
}