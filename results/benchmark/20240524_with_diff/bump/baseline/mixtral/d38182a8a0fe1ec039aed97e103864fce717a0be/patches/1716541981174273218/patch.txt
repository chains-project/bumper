import com.artipie.http.auth.AuthUser;
import com.artipie.http.auth.Authentication;
import com.artipie.http.auth.Authentication.Single;
import com.artipie.http.auth.Permission;
import com.artipie.http.auth.Permissions;
import com.artipie.http.auth.UserPermissions;
import com.artipie.http.slice.Slice;
import com.artipie.security.perms.Action;
import com.artipie.security.perms.Action.Standard;
import com.artipie.security.perms.Action.Standard.GET;
import com.artipie.security.perms.Action.Standard.POST;
import com.artipie.security.perms.Action.Standard.PUT;
import com.artipie.security.perms.Action.Standard.DELETE;
import com.artipie.security.perms.PermissionConfig;
import com.artipie.security.perms.PermissionConfig.Yaml;
import com.artipie.security.perms.Role;
import java.util.Collections;
import java.util.EnumSet;
import java.util.Set;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.IsEqual;
import reactor.core.publisher.Mono;
import static com.artipie.http.auth.Permissions.single;
import static com.artipie.security.perms.Action.*;
import static com.artipie.security.perms.Role.ANY;

@Test
void testScope() {
    final String line = "GET /resource.txt HTTP/1.1";
    final String action = "foo:bar:baz";
    final AtomicReference<String> caction = new AtomicReference<>();
    final AtomicReference<String> cline = new AtomicReference<>();
    Set<Role> roles = Collections.singleton(ANY);
    Permission permission = single(
        new PermissionConfig.Yaml(Map.of("actions", EnumSet.of(GET, PUT, POST, DELETE))),
        roles
    );
    UserPermissions userPermissions = new UserPermissions(
        () -> Collections.singletonMap("user", permission),
        authUser -> authUser.roles()
    );
    Slice authScopeSlice = new AuthScopeSlice(
        new ScopeSlice() {
            @Override
            public Scope scope(final String rqline) {
                cline.set(rqline);
                return new Scope.FromString(action);
            }

            @Override
            public Response response(
                final String line,
                final Iterable<Map.Entry<String, String>> headers,
                final Publisher<ByteBuffer> body
            ) {
                return StandardRs.OK;
            }
        },
        (headers, rline) -> Mono.just(
            new Single(new AuthUser("alice"), "")
        ),
        (user, act) -> {
            caction.set(act);
            userPermissions.add(new GET("/resource.txt"));
            return true;
        }
    );
    authScopeSlice.response(line, Headers.EMPTY, Content.EMPTY).send(
        (status, headers, body) -> Mono.empty()
    ).block();
    MatcherAssert.assertThat(
        "Request line passed to slice",
        cline.get(),
        new IsEqual<>(line)
    );
    MatcherAssert.assertThat(
        "Scope passed as action to permissions",
        caction.get(),
        new IsEqual<>(action)
    );
}