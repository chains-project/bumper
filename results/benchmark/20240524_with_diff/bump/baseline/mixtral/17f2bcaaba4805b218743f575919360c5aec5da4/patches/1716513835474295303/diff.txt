1c1,51
< import it.unimi.dsi.util.XoRoShiRo128PlusRandom;
\ No newline at end of file
---
> import org.tinspin.index.PointIndexMMWrapper;
> import org.tinspin.index.phtree.PHTreeMMP;
> import org.tinspin.index.util.MinHeap;
> import org.tinspin.index.util.MinHeapI;
> import org.tinspin.index.util.MinMaxHeap;
> import org.tinspin.index.util.MinMaxHeapI;
> 
> // ...
> 
> public class FastPolygonizerTests {
>   // ...
> 
>   @Test
>   public void testIndexSize() {
>     PointIndexMMWrapper<Double, Integer> index = new PointIndexMMWrapper<>();
>     // ... initialize the index
> 
>     int size = index.size();
>     assertEquals(expectedSize, size);
> 
>     PHTreeMMP<Double, Integer> phtree = new PHTreeMMP<>();
>     // ... initialize the phtree
> 
>     size = phtree.size();
>     assertEquals(expectedSize, size);
> 
>     MinHeap<Double> minHeap = new MinHeap<>();
>     // ... initialize the minHeap
> 
>     size = minHeap.size();
>     assertEquals(expectedSize, size);
> 
>     MinHeapI<Double> minHeapI = new MinHeap<>();
>     // ... initialize the minHeapI
> 
>     size = minHeapI.size();
>     assertEquals(expectedSize, size);
> 
>     MinMaxHeap<Double> minMaxHeap = new MinMaxHeap<>();
>     // ... initialize the minMaxHeap
> 
>     size = minMaxHeap.size();
>     assertEquals(expectedSize, size);
> 
>     MinMaxHeapI<Double> minMaxHeapI = new MinMaxHeap<>();
>     // ... initialize the minMaxHeapI
> 
>     size = minMaxHeapI.size();
>     assertEquals(expectedSize, size);
>   }
> }
\ No newline at end of file
