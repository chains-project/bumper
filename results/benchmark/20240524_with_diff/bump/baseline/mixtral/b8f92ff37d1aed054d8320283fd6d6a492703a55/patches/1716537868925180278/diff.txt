1,10d0
< /**
<          * Computes if a given class is to be included in the post-coverage computation
<          *
<          * If we have include-exclude patterns for Jacoco:
<          * - We include the class if it matches the include patterns and does not match the excludes patterns
<          * Else:
<          * - We include the class if it is available in the binary directories
<          * @param className
<          * @return true if the class should be included in the coverage result, false otherwise
<          */
27a18,19
>     DirectoryScanner directoryScanner = new DirectoryScanner(new File(""), "");
>     Set<String> classes = directoryScanner.scan().getClasses();
29,32c21,22
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
<                 return true;
<             }
---
>         directoryScanner = new DirectoryScanner(new File(dir), "");
>         classes.addAll(directoryScanner.scan().getClasses());
35,38c25,26
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
<                 return true;
<             }
---
>         directoryScanner = new DirectoryScanner(new File(dir), "");
>         classes.addAll(directoryScanner.scan().getClasses());
41c29
<         return false;
---
>     return classes.contains(className);
