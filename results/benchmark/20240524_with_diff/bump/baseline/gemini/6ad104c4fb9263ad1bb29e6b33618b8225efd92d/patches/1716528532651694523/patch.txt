import org.bouncycastle.crypto.tls.AlertLevel;
import org.bouncycastle.crypto.tls.AlertDescription;

public class ChachaDecoder {

    public void decode(byte[] data, int offset, int len) {
        // Check if the data is long enough to contain a ChaCha20Poly1305 header.
        if (len < 16) {
            throw new IllegalArgumentException("Data is too short to contain a ChaCha20Poly1305 header.");
        }

        // Extract the ChaCha20Poly1305 header.
        byte[] header = new byte[16];
        System.arraycopy(data, offset, header, 0, 16);

        // Check if the header is valid.
        if (!isValidHeader(header)) {
            throw new IllegalArgumentException("Invalid ChaCha20Poly1305 header.");
        }

        // Extract the ciphertext.
        byte[] ciphertext = new byte[len - 16];
        System.arraycopy(data, offset + 16, ciphertext, 0, len - 16);

        // Decrypt the ciphertext.
        byte[] plaintext = decrypt(ciphertext);

        // Check if the decryption was successful.
        if (plaintext == null) {
            throw new IllegalStateException("Decryption failed.");
        }

        // Return the plaintext.
        return plaintext;
    }

    private boolean isValidHeader(byte[] header) {
        // Check if the header is the correct length.
        if (header.length != 16) {
            return false;
        }

        // Check if the header contains the correct magic bytes.
        if (header[0] != 0x43 || header[1] != 0x48 || header[2] != 0x41 || header[3] != 0x43 ||
                header[4] != 0x41 || header[5] != 0x20 || header[6] != 0x20 || header[7] != 0x50 ||
                header[8] != 0x6f || header[9] != 0x6c || header[10] != 0x79 || header[11] != 0x31 ||
                header[12] != 0x33 || header[13] != 0x30 || header[14] != 0x35) {
            return false;
        }

        // Check if the header contains a valid version number.
        if (header[15] != 0x01) {
            return false;
        }

        return true;
    }

    private byte[] decrypt(byte[] ciphertext) {
        // Create a new ChaCha20Poly1305 decrypter.
        ChaCha20Poly1305 decrypter = new ChaCha20Poly1305();

        // Decrypt the ciphertext.
        byte[] plaintext = decrypter.decrypt(ciphertext);

        return plaintext;
    }
}