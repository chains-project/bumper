{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 887750041,
    "in_class_code": "public abstract class TestFrameworkStrategy {\n    private static final Logger logger = Logger.getLogger(TestFrameworkStrategy.class);\n\n    protected FlacocoConfig config;\n\n    public TestFrameworkStrategy(FlacocoConfig flacocoConfig) {\n        this.config = flacocoConfig;\n    }\n\n    protected String computeJacocoIncludes() {\n        StringBuilder includes = new StringBuilder();\n        for (String directory : config.getBinJavaDir()) {\n            DirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n            includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> (x + \":\") + y).orElse(\"\"));\n        }\n        if (config.isCoverTests()) {\n            for (String directory : config.getBinTestDir()) {\n                DirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n                includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> (x + \":\") + y).orElse(\"\"));\n            }\n        }\n        return includes.toString();\n    }\n}",
    "qualified_in_class_code": "public abstract class TestFrameworkStrategy {\n    private static final org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(fr.spoonlabs.flacoco.core.coverage.framework.TestFrameworkStrategy.class);\n\n    protected fr.spoonlabs.flacoco.core.config.FlacocoConfig config;\n\n    public TestFrameworkStrategy(fr.spoonlabs.flacoco.core.config.FlacocoConfig flacocoConfig) {\n        this.config = flacocoConfig;\n    }\n\n    protected java.lang.String computeJacocoIncludes() {\n        java.lang.StringBuilder includes = new java.lang.StringBuilder();\n        for (java.lang.String directory : config.getBinJavaDir()) {\n            org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(directory), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n            includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce(( x, y) -> (x + \":\") + y).orElse(\"\"));\n        }\n        if (config.isCoverTests()) {\n            for (java.lang.String directory : config.getBinTestDir()) {\n                org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(directory), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n                includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce(( x, y) -> (x + \":\") + y).orElse(\"\"));\n            }\n        }\n        return includes.toString();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   method getWildcard()\n  location: class org.apache.maven.surefire.api.testset.TestListResolver\n",
        "error_message": "[ERROR] /flacoco/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java:[92,119] cannot find symbol",
        "client_file_path": "/flacoco/src/main/java/fr/spoonlabs/flacoco/core/coverage/framework/TestFrameworkStrategy.java",
        "client_line_position": "92"
    },
    "client_end_line_number": 102,
    "client_line_number": 89,
    "method_code": "protected String computeJacocoIncludes() {\n\t\tStringBuilder includes = new StringBuilder();\n\t\tfor (String directory : config.getBinJavaDir()) {\n\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t}\n\t\tif (config.isCoverTests()) {\n\t\t\tfor (String directory : config.getBinTestDir()) {\n\t\t\t\tDirectoryScanner directoryScanner = new DirectoryScanner(new File(directory), TestListResolver.getWildcard());\n\t\t\t\tincludes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce((x, y) -> x + \":\" + y).orElse(\"\"));\n\t\t\t}\n\t\t}\n\t\treturn includes.toString();\n\t}",
    "qualified_code": "protected java.lang.String computeJacocoIncludes() {\n    java.lang.StringBuilder includes = new java.lang.StringBuilder();\n    for (java.lang.String directory : config.getBinJavaDir()) {\n        org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(directory), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n        includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce(( x, y) -> (x + \":\") + y).orElse(\"\"));\n    }\n    if (config.isCoverTests()) {\n        for (java.lang.String directory : config.getBinTestDir()) {\n            org.apache.maven.plugin.surefire.util.DirectoryScanner directoryScanner = new org.apache.maven.plugin.surefire.util.DirectoryScanner(new java.io.File(directory), org.apache.maven.surefire.api.testset.TestListResolver.getWildcard());\n            includes.append(\":\").append(directoryScanner.scan().getClasses().stream().reduce(( x, y) -> (x + \":\") + y).orElse(\"\"));\n        }\n    }\n    return includes.toString();\n}",
    "method_name": "computeJacocoIncludes"
}