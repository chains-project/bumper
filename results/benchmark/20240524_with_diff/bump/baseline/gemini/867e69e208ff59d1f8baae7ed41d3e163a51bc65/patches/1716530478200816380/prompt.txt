Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

the following client code fails:
```java
  import org.apache.thrift.transport.TFramedTransport;
```

with the following error message:
[ERROR] /singer/singer/src/main/java/com/pinterest/singer/utils/SimpleThriftLogger.java:[24,35] cannot find symbol
  symbol:   class TFramedTransport
  location: package org.apache.thrift.transport


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
-- protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TNonblockingServer$SelectAcceptThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
++ protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TNonblockingServer$SelectAcceptThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
++ public TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args(org.apache.thrift.transport.TNonblockingServerTransport)
++ protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TThreadedSelectorServer$SelectorThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
-- protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TThreadedSelectorServer$SelectorThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
-- public AutoExpandingBufferReadTransport org.apache.thrift.transport.AutoExpandingBufferReadTransport(int,double)
++ public AutoExpandingBufferReadTransport org.apache.thrift.transport.AutoExpandingBufferReadTransport(org.apache.thrift.TConfiguration,int)
-- public AutoExpandingBufferWriteTransport org.apache.thrift.transport.AutoExpandingBufferWriteTransport(int,double)
++ public AutoExpandingBufferWriteTransport org.apache.thrift.transport.AutoExpandingBufferWriteTransport(org.apache.thrift.TConfiguration,int,int)
++ public int org.apache.thrift.transport.AutoExpandingBufferWriteTransport.getLength()
-- public int org.apache.thrift.transport.AutoExpandingBufferWriteTransport.getPos()
++ public TEndpointTransport org.apache.thrift.transport.TEndpointTransport(org.apache.thrift.TConfiguration)
++ public void org.apache.thrift.transport.TEndpointTransport.checkReadBytesAvailable(long)
++ protected void org.apache.thrift.transport.TEndpointTransport.countConsumedMessageBytes(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.TEndpointTransport.getConfiguration()
++ protected J org.apache.thrift.transport.TEndpointTransport.getMaxMessageSize()
++ protected void org.apache.thrift.transport.TEndpointTransport.resetConsumedMessageSize(long)
++ public void org.apache.thrift.transport.TEndpointTransport.updateKnownMessageSize(long)
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory()
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory(int)
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory(int,int)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TFastFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int)
-- public void org.apache.thrift.transport.TFastFramedTransport.clear()
-- public void org.apache.thrift.transport.TFastFramedTransport.close()
-- public void org.apache.thrift.transport.TFastFramedTransport.consumeBuffer(int)
-- public void org.apache.thrift.transport.TFastFramedTransport.flush()
-- public [B org.apache.thrift.transport.TFastFramedTransport.getBuffer()
-- public int org.apache.thrift.transport.TFastFramedTransport.getBufferPosition()
-- public int org.apache.thrift.transport.TFastFramedTransport.getBytesRemainingInBuffer()
-- public bool org.apache.thrift.transport.TFastFramedTransport.isOpen()
-- public void org.apache.thrift.transport.TFastFramedTransport.open()
-- public int org.apache.thrift.transport.TFastFramedTransport.read(byte[],int,int)
-- public void org.apache.thrift.transport.TFastFramedTransport.write(byte[],int,int)
++ public void org.apache.thrift.transport.TFileTransport.checkReadBytesAvailable(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.TFileTransport.getConfiguration()
++ public void org.apache.thrift.transport.TFileTransport.updateKnownMessageSize(long)
-- public TFramedTransport$Factory org.apache.thrift.transport.TFramedTransport$Factory()
-- public TFramedTransport$Factory org.apache.thrift.transport.TFramedTransport$Factory(int)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public TFramedTransport org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport)
-- public TFramedTransport org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport,int)
-- public void org.apache.thrift.transport.TFramedTransport.clear()
-- public void org.apache.thrift.transport.TFramedTransport.close()
-- public void org.apache.thrift.transport.TFramedTransport.consumeBuffer(int)
-- public static final int org.apache.thrift.transport.TFramedTransport.decodeFrameSize(byte[])
-- public static final void org.apache.thrift.transport.TFramedTransport.encodeFrameSize(int,byte[])
-- public void org.apache.thrift.transport.TFramedTransport.flush()
-- public [B org.apache.thrift.transport.TFramedTransport.getBuffer()
-- public int org.apache.thrift.transport.TFramedTransport.getBufferPosition()
-- public int org.apache.thrift.transport.TFramedTransport.getBytesRemainingInBuffer()
-- public bool org.apache.thrift.transport.TFramedTransport.isOpen()
-- public void org.apache.thrift.transport.TFramedTransport.open()
-- public int org.apache.thrift.transport.TFramedTransport.read(byte[],int,int)
-- public void org.apache.thrift.transport.TFramedTransport.write(byte[],int,int)
++ protected TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream,java.io.OutputStream)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.OutputStream)
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration)
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration,byte[])
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration,byte[],int,int)
++ public TMemoryTransport org.apache.thrift.transport.TMemoryTransport(byte[])
++ public TMemoryTransport org.apache.thrift.transport.TMemoryTransport(org.apache.thrift.TConfiguration,byte[])
++ public void org.apache.thrift.transport.TMemoryTransport.close()
++ public org.apache.thrift.TByteArrayOutputStream org.apache.thrift.transport.TMemoryTransport.getOutput()
++ public bool org.apache.thrift.transport.TMemoryTransport.isOpen()
++ public void org.apache.thrift.transport.TMemoryTransport.open()
++ public int org.apache.thrift.transport.TMemoryTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.TMemoryTransport.write(byte[],int,int)
++ public abstract org.apache.thrift.transport.TNonblockingTransport org.apache.thrift.transport.TNonblockingServerTransport.accept()
-- public TNonblockingTransport org.apache.thrift.transport.TNonblockingTransport()
++ public TNonblockingTransport org.apache.thrift.transport.TNonblockingTransport(org.apache.thrift.TConfiguration)
-- public abstract int org.apache.thrift.transport.TNonblockingTransport.read(java.nio.ByteBuffer)
-- public abstract int org.apache.thrift.transport.TNonblockingTransport.write(java.nio.ByteBuffer)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TSaslServerTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TSaslServerTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.byValue(byte)
-- public B org.apache.thrift.transport.TSaslTransport$NegotiationStatus.getValue()
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.valueOf(java.lang.String)
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.values()
-- public TSaslTransport$SaslResponse org.apache.thrift.transport.TSaslTransport$SaslResponse(org.apache.thrift.transport.TSaslTransport$NegotiationStatus,byte[])
++ public TSaslTransport$SaslResponse org.apache.thrift.transport.TSaslTransport$SaslResponse(org.apache.thrift.transport.sasl.NegotiationStatus,byte[])
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException()
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.String)
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.String,java.lang.Throwable)
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.Throwable)
++ public abstract org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.accept()
-- public final org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.accept()
-- protected abstract org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.acceptImpl()
++ public TSimpleFileTransport org.apache.thrift.transport.TSimpleFileTransport(org.apache.thrift.TConfiguration,java.lang.String,boolean,boolean,boolean)
++ public abstract void org.apache.thrift.transport.TTransport.checkReadBytesAvailable(long)
++ public abstract org.apache.thrift.TConfiguration org.apache.thrift.transport.TTransport.getConfiguration()
++ public int org.apache.thrift.transport.TTransport.read(java.nio.ByteBuffer)
++ public abstract void org.apache.thrift.transport.TTransport.updateKnownMessageSize(long)
++ public int org.apache.thrift.transport.TTransport.write(java.nio.ByteBuffer)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TTransportFactory.getTransport(org.apache.thrift.transport.TTransport)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TTransportFactory.getTransport(org.apache.thrift.transport.TTransport)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TZlibTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TZlibTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory()
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory(int)
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory(int,int)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TFastFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.clear()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.close()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.consumeBuffer(int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.flush()
++ public [B org.apache.thrift.transport.layered.TFastFramedTransport.getBuffer()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.getBufferPosition()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.getBytesRemainingInBuffer()
++ public bool org.apache.thrift.transport.layered.TFastFramedTransport.isOpen()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.open()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.write(byte[],int,int)
++ public TFramedTransport$Factory org.apache.thrift.transport.layered.TFramedTransport$Factory()
++ public TFramedTransport$Factory org.apache.thrift.transport.layered.TFramedTransport$Factory(int)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFramedTransport org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport)
++ public TFramedTransport org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int)
++ public void org.apache.thrift.transport.layered.TFramedTransport.clear()
++ public void org.apache.thrift.transport.layered.TFramedTransport.close()
++ public void org.apache.thrift.transport.layered.TFramedTransport.consumeBuffer(int)
++ public static final int org.apache.thrift.transport.layered.TFramedTransport.decodeFrameSize(byte[])
++ public static final void org.apache.thrift.transport.layered.TFramedTransport.encodeFrameSize(int,byte[])
++ public void org.apache.thrift.transport.layered.TFramedTransport.flush()
++ public [B org.apache.thrift.transport.layered.TFramedTransport.getBuffer()
++ public int org.apache.thrift.transport.layered.TFramedTransport.getBufferPosition()
++ public int org.apache.thrift.transport.layered.TFramedTransport.getBytesRemainingInBuffer()
++ public bool org.apache.thrift.transport.layered.TFramedTransport.isOpen()
++ public void org.apache.thrift.transport.layered.TFramedTransport.open()
++ public int org.apache.thrift.transport.layered.TFramedTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.layered.TFramedTransport.write(byte[],int,int)
++ public TLayeredTransport org.apache.thrift.transport.layered.TLayeredTransport(org.apache.thrift.transport.TTransport)
++ public void org.apache.thrift.transport.layered.TLayeredTransport.checkReadBytesAvailable(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.layered.TLayeredTransport.getConfiguration()
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TLayeredTransport.getInnerTransport()
++ public void org.apache.thrift.transport.layered.TLayeredTransport.updateKnownMessageSize(long)
++ public bool org.apache.thrift.transport.sasl.FixedSizeHeaderReader.read(org.apache.thrift.transport.TTransport)
++ public abstract bool org.apache.thrift.transport.sasl.FrameHeaderReader.read(org.apache.thrift.transport.TTransport)
++ public bool org.apache.thrift.transport.sasl.FrameReader.read(org.apache.thrift.transport.TTransport)
++ public void org.apache.thrift.transport.sasl.FrameWriter.write(org.apache.thrift.transport.TNonblockingTransport)
++ public NonblockingSaslHandler org.apache.thrift.transport.sasl.NonblockingSaslHandler(java.nio.channels.SelectionKey,org.apache.thrift.transport.TNonblockingTransport,org.apache.thrift.transport.sasl.TSaslServerFactory,org.apache.thrift.transport.sasl.TSaslProcessorFactory,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.server.TServerEventHandler)
++ public org.apache.thrift.transport.TNonblockingTransport org.apache.thrift.transport.sasl.NonblockingSaslHandler.getUnderlyingTransport()

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CAN remove the Override decorator IF AND ONLY IF the method is not overriding any method in the new version.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
return only the fixed failing method, not the complete class code, you MUST change something in the code.
