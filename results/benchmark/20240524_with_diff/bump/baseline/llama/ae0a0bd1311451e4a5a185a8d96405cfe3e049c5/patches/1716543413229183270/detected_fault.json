{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 2141817446,
    "in_class_code": "/**\n * Tests for {@link UploadEntity.Request}.\n *\n * @since 0.2\n * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)\n */\n@SuppressWarnings({ \"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\" })\nclass UploadEntityRequestTest {\n    @Test\n    void shouldThrowExceptionOnInvalidPath() {\n        MatcherAssert.assertThat(Assertions.assertThrows(IllegalArgumentException.class, () -> new UploadEntity.Request(new RequestLine(RqMethod.PUT, \"/one/two\").toString()).name()).getMessage(), new StringContains(false, \"Unexpected path\"));\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link UploadEntity.Request}.\n *\n * @since 0.2\n * @checkstyle ClassDataAbstractionCouplingCheck (2 lines)\n */\n@java.lang.SuppressWarnings({ \"PMD.AvoidDuplicateLiterals\", \"PMD.TooManyMethods\" })\nclass UploadEntityRequestTest {\n    @org.junit.jupiter.api.Test\n    void shouldThrowExceptionOnInvalidPath() {\n        org.hamcrest.MatcherAssert.assertThat(org.junit.jupiter.api.Assertions.assertThrows(java.lang.IllegalArgumentException.class, () -> new com.artipie.docker.http.UploadEntity.Request(new com.artipie.http.rq.RequestLine(RqMethod.PUT, \"/one/two\").toString()).name()).getMessage(), new org.hamcrest.core.StringContains(false, \"Unexpected path\"));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  required: java.lang.String\n  found: boolean,java.lang.String\n  reason: actual and formal argument lists differ in length\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/UploadEntityRequestTest.java:[93,13] constructor StringContains in class org.hamcrest.core.StringContains cannot be applied to given types;",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/http/UploadEntityRequestTest.java",
        "client_line_position": "93"
    },
    "client_end_line_number": 95,
    "client_line_number": 84,
    "method_code": "@Test\n    void shouldThrowExceptionOnInvalidPath() {\n        MatcherAssert.assertThat(\n            Assertions.assertThrows(\n                IllegalArgumentException.class,\n                () -> new UploadEntity.Request(\n                    new RequestLine(RqMethod.PUT, \"/one/two\").toString()\n                ).name()\n            ).getMessage(),\n            new StringContains(false, \"Unexpected path\")\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid shouldThrowExceptionOnInvalidPath() {\n    org.hamcrest.MatcherAssert.assertThat(org.junit.jupiter.api.Assertions.assertThrows(java.lang.IllegalArgumentException.class, () -> new com.artipie.docker.http.UploadEntity.Request(new com.artipie.http.rq.RequestLine(RqMethod.PUT, \"/one/two\").toString()).name()).getMessage(), new org.hamcrest.core.StringContains(false, \"Unexpected path\"));\n}",
    "method_name": "shouldThrowExceptionOnInvalidPath"
}