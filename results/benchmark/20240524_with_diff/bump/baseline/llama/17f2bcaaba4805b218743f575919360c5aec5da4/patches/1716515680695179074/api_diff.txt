++ public bool org.tinspin.index.IndexConfig.getDefensiveKeyCopy()
++ public int org.tinspin.index.IndexConfig.getDimensions()
++ public void org.tinspin.index.IndexConfig.setDefensiveKeyCopy(boolean)
++ public void org.tinspin.index.IndexConfig.setDimensions(int)
++ public abstract bool org.tinspin.index.PointIndexMM.contains(double[],java.lang.Object)
++ public abstract void org.tinspin.index.PointIndexMM.insert(double[],java.lang.Object)
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMM.iterator()
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMM.query(double[])
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMM.query(double[],double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.PointIndexMM.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.PointIndexMM.queryKNN(double[],int)
++ public abstract org.tinspin.index.QueryIteratorKNN org.tinspin.index.PointIndexMM.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public abstract bool org.tinspin.index.PointIndexMM.remove(double[],java.lang.Object)
++ public abstract bool org.tinspin.index.PointIndexMM.removeIf(double[],java.util.function.Predicate)
++ public abstract bool org.tinspin.index.PointIndexMM.update(double[],double[],java.lang.Object)
++ public void org.tinspin.index.PointIndexMMWrapper.clear()
++ public bool org.tinspin.index.PointIndexMMWrapper.contains(double[],java.lang.Object)
++ public static org.tinspin.index.PointIndexMM org.tinspin.index.PointIndexMMWrapper.create(org.tinspin.index.RectangleIndexMM)
++ public int org.tinspin.index.PointIndexMMWrapper.getDepth()
++ public int org.tinspin.index.PointIndexMMWrapper.getDims()
++ public int org.tinspin.index.PointIndexMMWrapper.getNodeCount()
++ public org.tinspin.index.Stats org.tinspin.index.PointIndexMMWrapper.getStats()
++ public void org.tinspin.index.PointIndexMMWrapper.insert(double[],java.lang.Object)
++ public org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMMWrapper.iterator()
++ public void org.tinspin.index.PointIndexMMWrapper.load(org.tinspin.index.rtree.Entry[])
++ public org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMMWrapper.query(double[])
++ public org.tinspin.index.QueryIterator org.tinspin.index.PointIndexMMWrapper.query(double[],double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.PointIndexMMWrapper.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.PointIndexMMWrapper.queryKNN(double[],int)
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.PointIndexMMWrapper.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.PointIndexMMWrapper.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.PointIndexMMWrapper.removeIf(double[],java.util.function.Predicate)
++ public int org.tinspin.index.PointIndexMMWrapper.size()
++ public java.lang.String org.tinspin.index.PointIndexMMWrapper.toStringTree()
++ public bool org.tinspin.index.PointIndexMMWrapper.update(double[],double[],java.lang.Object)
++ public RectangleDistanceFunction$EdgeDistance org.tinspin.index.RectangleDistanceFunction$EdgeDistance(org.tinspin.index.PointDistanceFunction)
++ public D org.tinspin.index.RectangleDistanceFunction$EdgeDistance.edgeDistance(double[],double[],double[])
++ public abstract bool org.tinspin.index.RectangleIndexMM.contains(double[],double[],java.lang.Object)
++ public abstract void org.tinspin.index.RectangleIndexMM.insert(double[],double[],java.lang.Object)
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.RectangleIndexMM.iterator()
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.RectangleIndexMM.query1NN(double[])
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.RectangleIndexMM.queryIntersect(double[],double[])
++ public abstract org.tinspin.index.QueryIteratorKNN org.tinspin.index.RectangleIndexMM.queryKNN(double[],int)
++ public abstract org.tinspin.index.QueryIteratorKNN org.tinspin.index.RectangleIndexMM.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public abstract org.tinspin.index.QueryIterator org.tinspin.index.RectangleIndexMM.queryRectangle(double[],double[])
++ public abstract bool org.tinspin.index.RectangleIndexMM.remove(double[],double[],java.lang.Object)
++ public abstract bool org.tinspin.index.RectangleIndexMM.removeIf(double[],double[],java.util.function.Predicate)
++ public abstract bool org.tinspin.index.RectangleIndexMM.update(double[],double[],double[],double[],java.lang.Object)
++ public bool org.tinspin.index.array.PointArray.contains(double[],java.lang.Object)
++ public org.tinspin.index.QueryIterator org.tinspin.index.array.PointArray.query(double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.array.PointArray.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.array.PointArray.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.array.PointArray.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.array.PointArray.removeIf(double[],java.util.function.Predicate)
++ public bool org.tinspin.index.array.PointArray.update(double[],double[],java.lang.Object)
++ public bool org.tinspin.index.array.RectArray.contains(double[],double[],java.lang.Object)
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.array.RectArray.query1NN(double[])
++ public org.tinspin.index.QueryIterator org.tinspin.index.array.RectArray.queryIntersect(double[],double[])
-- public org.tinspin.index.array.RectArray$AQueryIterator org.tinspin.index.array.RectArray.queryIntersect(double[],double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.array.RectArray.queryKNN(double[],int)
-- public org.tinspin.index.array.RectArray$AQueryIteratorKNN org.tinspin.index.array.RectArray.queryKNN(double[],int)
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.array.RectArray.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.array.RectArray.queryRectangle(double[],double[])
++ public bool org.tinspin.index.array.RectArray.remove(double[],double[],java.lang.Object)
++ public bool org.tinspin.index.array.RectArray.removeIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.array.RectArray.update(double[],double[],double[],double[],java.lang.Object)
++ public D org.tinspin.index.kdtree.KDIteratorKnn.distance()
++ public bool org.tinspin.index.kdtree.KDIteratorKnn.hasNext()
++ public org.tinspin.index.PointEntryDist org.tinspin.index.kdtree.KDIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.kdtree.KDIteratorKnn.reset(double[],int)
++ public bool org.tinspin.index.kdtree.KDTree.contains(double[],java.lang.Object)
++ public static org.tinspin.index.kdtree.KDTree org.tinspin.index.kdtree.KDTree.create(org.tinspin.index.IndexConfig)
++ public java.util.List org.tinspin.index.kdtree.KDTree.knnQuery(double[],int,org.tinspin.index.PointDistanceFunction)
-- public static transient void org.tinspin.index.kdtree.KDTree.main(java.lang.String[])
++ public org.tinspin.index.kdtree.KDIterator org.tinspin.index.kdtree.KDTree.query(double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.kdtree.KDTree.query1NN(double[])
-- public org.tinspin.index.kdtree.KDEntryDist org.tinspin.index.kdtree.KDTree.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.kdtree.KDTree.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.kdtree.KDTree.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.kdtree.KDTree.removeIf(double[],java.util.function.Predicate)
++ public bool org.tinspin.index.kdtree.KDTree.update(double[],double[],java.lang.Object)
++ public void org.tinspin.index.phtree.PHTreeMMP.clear()
++ public bool org.tinspin.index.phtree.PHTreeMMP.contains(double[],java.lang.Object)
++ public static org.tinspin.index.phtree.PHTreeMMP org.tinspin.index.phtree.PHTreeMMP.create(int)
++ public int org.tinspin.index.phtree.PHTreeMMP.getDepth()
++ public int org.tinspin.index.phtree.PHTreeMMP.getDims()
++ public int org.tinspin.index.phtree.PHTreeMMP.getNodeCount()
++ public org.tinspin.index.Stats org.tinspin.index.phtree.PHTreeMMP.getStats()
++ public void org.tinspin.index.phtree.PHTreeMMP.insert(double[],java.lang.Object)
++ public org.tinspin.index.QueryIterator org.tinspin.index.phtree.PHTreeMMP.iterator()
++ public org.tinspin.index.QueryIterator org.tinspin.index.phtree.PHTreeMMP.query(double[])
++ public org.tinspin.index.QueryIterator org.tinspin.index.phtree.PHTreeMMP.query(double[],double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.phtree.PHTreeMMP.queryKNN(double[],int)
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.phtree.PHTreeMMP.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.phtree.PHTreeMMP.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.phtree.PHTreeMMP.removeIf(double[],java.util.function.Predicate)
++ public int org.tinspin.index.phtree.PHTreeMMP.size()
++ public java.lang.String org.tinspin.index.phtree.PHTreeMMP.toStringTree()
++ public bool org.tinspin.index.phtree.PHTreeMMP.update(double[],double[],java.lang.Object)
-- public bool org.tinspin.index.qthypercube.QEntry.enclosedBy(double[],double)
-- public bool org.tinspin.index.qthypercube.QEntry.enclosedBy(double[],double[])
++ public D org.tinspin.index.qthypercube.QIteratorKnn.distance()
++ public bool org.tinspin.index.qthypercube.QIteratorKnn.hasNext()
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qthypercube.QIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube.QIteratorKnn.reset(double[],int)
-- public bool org.tinspin.index.qthypercube.QREntry.enclosedBy(double[],double)
++ public D org.tinspin.index.qthypercube.QRIteratorKnn.distance()
++ public bool org.tinspin.index.qthypercube.QRIteratorKnn.hasNext()
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.qthypercube.QRIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube.QRIteratorKnn.reset(double[],int)
++ public bool org.tinspin.index.qthypercube.QRNode.hasChildNodes()
++ public bool org.tinspin.index.qthypercube.QRNode.hasValues()
-- public static D org.tinspin.index.qthypercube.QUtil.distToRectCenter(double[],double[],double[])
-- public static D org.tinspin.index.qthypercube.QUtil.distToRectCenter(double[],org.tinspin.index.qthypercube.QREntry)
++ public static bool org.tinspin.index.qthypercube.QUtil.fitsIntoNode(double[],double[],double)
++ public static bool org.tinspin.index.qthypercube.QUtil.fitsIntoNode(double[],double[],double[],double)
++ public static bool org.tinspin.index.qthypercube.QUtil.isNodeEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qthypercube.QUtil.isPointEnclosed(double[],double[],double)
-- public static bool org.tinspin.index.qthypercube.QUtil.isRectEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qthypercube.QUtil.isRectEnclosed(double[],double[],double[],double)
++ public bool org.tinspin.index.qthypercube.QuadTreeKD.contains(double[],java.lang.Object)
++ public java.util.List org.tinspin.index.qthypercube.QuadTreeKD.knnQuery(double[],int,org.tinspin.index.PointDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.qthypercube.QuadTreeKD.query(double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qthypercube.QuadTreeKD.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube.QuadTreeKD.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.qthypercube.QuadTreeKD.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.qthypercube.QuadTreeKD.removeIf(double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qthypercube.QuadTreeKD.update(double[],double[],java.lang.Object)
++ public java.lang.Object org.tinspin.index.qthypercube.QuadTreeKD.updateIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qthypercube.QuadTreeRKD.contains(double[],double[],java.lang.Object)
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.qthypercube.QuadTreeRKD.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube.QuadTreeRKD.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.qthypercube.QuadTreeRKD.queryRectangle(double[],double[])
++ public bool org.tinspin.index.qthypercube.QuadTreeRKD.remove(double[],double[],java.lang.Object)
++ public bool org.tinspin.index.qthypercube.QuadTreeRKD.removeIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qthypercube.QuadTreeRKD.update(double[],double[],double[],double[],java.lang.Object)
-- public bool org.tinspin.index.qthypercube2.QEntry.enclosedBy(double[],double)
-- public bool org.tinspin.index.qthypercube2.QEntry.enclosedBy(double[],double[])
++ public D org.tinspin.index.qthypercube2.QIteratorKnn.distance()
++ public bool org.tinspin.index.qthypercube2.QIteratorKnn.hasNext()
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qthypercube2.QIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube2.QIteratorKnn.reset(double[],int)
-- public static D org.tinspin.index.qthypercube2.QUtil.distToRectCenter(double[],double[],double[])
-- public static D org.tinspin.index.qthypercube2.QUtil.distance(double[],double[])
++ public static bool org.tinspin.index.qthypercube2.QUtil.fitsIntoNode(double[],double[],double)
++ public static bool org.tinspin.index.qthypercube2.QUtil.isNodeEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qthypercube2.QUtil.isPointEnclosed(double[],double[],double)
-- public static bool org.tinspin.index.qthypercube2.QUtil.isRectEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qthypercube2.QUtil.isRectEnclosed(double[],double[],double[],double)
-- public static bool org.tinspin.index.qthypercube2.QUtil.isRectEqual(double[],double[],double[],double[])
++ public bool org.tinspin.index.qthypercube2.QuadTreeKD2.contains(double[],java.lang.Object)
++ public java.util.List org.tinspin.index.qthypercube2.QuadTreeKD2.knnQuery(double[],int,org.tinspin.index.PointDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.qthypercube2.QuadTreeKD2.query(double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qthypercube2.QuadTreeKD2.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qthypercube2.QuadTreeKD2.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.qthypercube2.QuadTreeKD2.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.qthypercube2.QuadTreeKD2.removeIf(double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qthypercube2.QuadTreeKD2.update(double[],double[],java.lang.Object)
++ public java.lang.Object org.tinspin.index.qthypercube2.QuadTreeKD2.updateIf(double[],double[],java.util.function.Predicate)
-- public bool org.tinspin.index.qtplain.QEntry.enclosedBy(double[],double)
-- public bool org.tinspin.index.qtplain.QEntry.enclosedBy(double[],double[])
++ public D org.tinspin.index.qtplain.QIteratorKnn.distance()
++ public bool org.tinspin.index.qtplain.QIteratorKnn.hasNext()
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qtplain.QIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qtplain.QIteratorKnn.reset(double[],int)
-- public bool org.tinspin.index.qtplain.QREntry.enclosedBy(double[],double)
++ public D org.tinspin.index.qtplain.QRIteratorKnn.distance()
++ public bool org.tinspin.index.qtplain.QRIteratorKnn.hasNext()
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.qtplain.QRIteratorKnn.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qtplain.QRIteratorKnn.reset(double[],int)
-- public static D org.tinspin.index.qtplain.QUtil.distToRectCenter(double[],double[],double[])
-- public static D org.tinspin.index.qtplain.QUtil.distToRectCenter(double[],org.tinspin.index.qtplain.QREntry)
++ public static bool org.tinspin.index.qtplain.QUtil.fitsIntoNode(double[],double[],double)
++ public static bool org.tinspin.index.qtplain.QUtil.fitsIntoNode(double[],double[],double[],double)
++ public static bool org.tinspin.index.qtplain.QUtil.isNodeEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qtplain.QUtil.isPointEnclosed(double[],double[],double)
-- public static bool org.tinspin.index.qtplain.QUtil.isRectEnclosed(double[],double,double[],double)
-- public static bool org.tinspin.index.qtplain.QUtil.isRectEnclosed(double[],double[],double[],double)
-- public static bool org.tinspin.index.qtplain.QUtil.isRectEnclosed(double[],double[],double[],double[])
++ public bool org.tinspin.index.qtplain.QuadTreeKD0.contains(double[],java.lang.Object)
++ public java.util.List org.tinspin.index.qtplain.QuadTreeKD0.knnQuery(double[],int,org.tinspin.index.PointDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.qtplain.QuadTreeKD0.query(double[])
++ public org.tinspin.index.PointEntryDist org.tinspin.index.qtplain.QuadTreeKD0.query1NN(double[])
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qtplain.QuadTreeKD0.queryKNN(double[],int)
-- public org.tinspin.index.qtplain.QuadTreeKD0$QQueryIteratorKNN org.tinspin.index.qtplain.QuadTreeKD0.queryKNN(double[],int)
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qtplain.QuadTreeKD0.queryKNN(double[],int,org.tinspin.index.PointDistanceFunction)
++ public bool org.tinspin.index.qtplain.QuadTreeKD0.remove(double[],java.lang.Object)
++ public bool org.tinspin.index.qtplain.QuadTreeKD0.removeIf(double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qtplain.QuadTreeKD0.update(double[],double[],java.lang.Object)
++ public java.lang.Object org.tinspin.index.qtplain.QuadTreeKD0.updateIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qtplain.QuadTreeRKD0.contains(double[],double[],java.lang.Object)
++ public org.tinspin.index.RectangleEntryDist org.tinspin.index.qtplain.QuadTreeRKD0.query1NN(double[])
-- public org.tinspin.index.qtplain.QuadTreeRKD0$QRQueryIteratorKNN org.tinspin.index.qtplain.QuadTreeRKD0.queryKNN(double[],int)
++ public org.tinspin.index.qtplain.QRIteratorKnn org.tinspin.index.qtplain.QuadTreeRKD0.queryKNN(double[],int)
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.qtplain.QuadTreeRKD0.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public org.tinspin.index.QueryIterator org.tinspin.index.qtplain.QuadTreeRKD0.queryRectangle(double[],double[])
++ public bool org.tinspin.index.qtplain.QuadTreeRKD0.remove(double[],double[],java.lang.Object)
++ public bool org.tinspin.index.qtplain.QuadTreeRKD0.removeIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.qtplain.QuadTreeRKD0.update(double[],double[],double[],double[],java.lang.Object)
++ public bool org.tinspin.index.rtree.RTree.contains(double[],double[],java.lang.Object)
-- public org.tinspin.index.rtree.RTreeQueryKnn org.tinspin.index.rtree.RTree.queryKNN(double[],int)
++ public org.tinspin.index.rtree.RTreeQueryKnn2 org.tinspin.index.rtree.RTree.queryKNN(double[],int)
++ public org.tinspin.index.rtree.RTreeQueryKnn2 org.tinspin.index.rtree.RTree.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
-- public org.tinspin.index.rtree.RTreeQueryKnn org.tinspin.index.rtree.RTree.queryKNN(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public org.tinspin.index.rtree.RTreeIterator org.tinspin.index.rtree.RTree.queryRectangle(double[],double[])
++ public bool org.tinspin.index.rtree.RTree.remove(double[],double[],java.lang.Object)
++ public bool org.tinspin.index.rtree.RTree.removeIf(double[],double[],java.util.function.Predicate)
++ public bool org.tinspin.index.rtree.RTree.update(double[],double[],double[],double[],java.lang.Object)
++ public static org.tinspin.index.rtree.RTreeIterator org.tinspin.index.rtree.RTreeIterator.createExactMatch(org.tinspin.index.rtree.RTree,double[],double[])
++ public D org.tinspin.index.rtree.RTreeQueryKnn2.distance()
++ public bool org.tinspin.index.rtree.RTreeQueryKnn2.hasNext()
++ public org.tinspin.index.rtree.DistEntry org.tinspin.index.rtree.RTreeQueryKnn2.next()
++ public org.tinspin.index.QueryIteratorKNN org.tinspin.index.rtree.RTreeQueryKnn2.reset(double[],int)
-- public RTreeQueryKnnOld org.tinspin.index.rtree.RTreeQueryKnnOld(org.tinspin.index.rtree.RTree,double[],int,org.tinspin.index.RectangleDistanceFunction)
-- public bool org.tinspin.index.rtree.RTreeQueryKnnOld.hasNext()
-- public org.tinspin.index.rtree.DistEntry org.tinspin.index.rtree.RTreeQueryKnnOld.next()
-- public org.tinspin.index.rtree.RTreeQueryKnnOld org.tinspin.index.rtree.RTreeQueryKnnOld.reset(double[],int)
-- public void org.tinspin.index.rtree.RTreeQueryKnnOld.reset(double[],int,org.tinspin.index.RectangleDistanceFunction)
++ public abstract bool org.tinspin.index.util.MinHeap$Less.less(java.lang.Object,java.lang.Object)
++ public void org.tinspin.index.util.MinHeap.clear()
++ public static org.tinspin.index.util.MinHeap org.tinspin.index.util.MinHeap.create()
++ public static org.tinspin.index.util.MinHeap org.tinspin.index.util.MinHeap.create(org.tinspin.index.util.MinHeap$Less)
++ public bool org.tinspin.index.util.MinHeap.isEmpty()
++ public java.lang.Object org.tinspin.index.util.MinHeap.peekMin()
++ public void org.tinspin.index.util.MinHeap.popMin()
++ public java.lang.String org.tinspin.index.util.MinHeap.print()
++ public void org.tinspin.index.util.MinHeap.push(java.lang.Object)
++ public int org.tinspin.index.util.MinHeap.size()
++ public abstract void org.tinspin.index.util.MinHeapI.clear()
++ public abstract bool org.tinspin.index.util.MinHeapI.isEmpty()
++ public abstract java.lang.Object org.tinspin.index.util.MinHeapI.peekMin()
++ public abstract void org.tinspin.index.util.MinHeapI.popMin()
++ public abstract void org.tinspin.index.util.MinHeapI.push(java.lang.Object)
++ public abstract int org.tinspin.index.util.MinHeapI.size()
++ public abstract bool org.tinspin.index.util.MinMaxHeap$Less.less(java.lang.Object,java.lang.Object)
++ public void org.tinspin.index.util.MinMaxHeap.clear()
++ public static org.tinspin.index.util.MinMaxHeap org.tinspin.index.util.MinMaxHeap.create()
++ public static org.tinspin.index.util.MinMaxHeap org.tinspin.index.util.MinMaxHeap.create(org.tinspin.index.util.MinMaxHeap$Less)
++ public static org.tinspin.index.util.MinMaxHeap org.tinspin.index.util.MinMaxHeap.createWithComparator(java.util.Comparator)
++ public bool org.tinspin.index.util.MinMaxHeap.isEmpty()
++ public java.lang.Object org.tinspin.index.util.MinMaxHeap.peekMax()
++ public java.lang.Object org.tinspin.index.util.MinMaxHeap.peekMin()
++ public void org.tinspin.index.util.MinMaxHeap.popMax()
++ public void org.tinspin.index.util.MinMaxHeap.popMin()
++ public java.lang.String org.tinspin.index.util.MinMaxHeap.print()
++ public void org.tinspin.index.util.MinMaxHeap.push(java.lang.Object)
++ public int org.tinspin.index.util.MinMaxHeap.size()
++ public abstract void org.tinspin.index.util.MinMaxHeapI.clear()
++ public abstract bool org.tinspin.index.util.MinMaxHeapI.isEmpty()
++ public abstract java.lang.Object org.tinspin.index.util.MinMaxHeapI.peekMax()
++ public abstract java.lang.Object org.tinspin.index.util.MinMaxHeapI.peekMin()
++ public abstract void org.tinspin.index.util.MinMaxHeapI.popMax()
++ public abstract void org.tinspin.index.util.MinMaxHeapI.popMin()
++ public abstract void org.tinspin.index.util.MinMaxHeapI.push(java.lang.Object)
++ public abstract int org.tinspin.index.util.MinMaxHeapI.size()
++ public MutableBool org.tinspin.index.util.MutableBool()
++ public MutableBool org.tinspin.index.util.MutableBool(boolean)
++ public bool org.tinspin.index.util.MutableBool.get()
++ public void org.tinspin.index.util.MutableBool.set(boolean)
++ public java.lang.String org.tinspin.index.util.MutableBool.toString()
++ public MutableInt org.tinspin.index.util.MutableInt()
++ public MutableInt org.tinspin.index.util.MutableInt(int)
++ public void org.tinspin.index.util.MutableInt.add(int)
++ public int org.tinspin.index.util.MutableInt.get()
++ public org.tinspin.index.util.MutableInt org.tinspin.index.util.MutableInt.inc()
++ public void org.tinspin.index.util.MutableInt.set(int)
++ public java.lang.String org.tinspin.index.util.MutableInt.toString()
++ public MutableRef org.tinspin.index.util.MutableRef()
++ public MutableRef org.tinspin.index.util.MutableRef(java.lang.Object)
++ public java.lang.Object org.tinspin.index.util.MutableRef.get()
++ public void org.tinspin.index.util.MutableRef.set(java.lang.Object)
++ public java.lang.String org.tinspin.index.util.MutableRef.toString()
++ public QueryIteratorWrapper org.tinspin.index.util.QueryIteratorWrapper(double[],double[],java.util.function.BiFunction)
++ public bool org.tinspin.index.util.QueryIteratorWrapper.hasNext()
++ public java.lang.Object org.tinspin.index.util.QueryIteratorWrapper.next()
++ public void org.tinspin.index.util.QueryIteratorWrapper.reset(double[],double[])
++ public StringBuilderLn org.tinspin.index.util.StringBuilderLn()
++ public org.tinspin.index.util.StringBuilderLn org.tinspin.index.util.StringBuilderLn.append(java.lang.Object)
++ public org.tinspin.index.util.StringBuilderLn org.tinspin.index.util.StringBuilderLn.append(java.lang.String)
++ public org.tinspin.index.util.StringBuilderLn org.tinspin.index.util.StringBuilderLn.appendLn()
++ public org.tinspin.index.util.StringBuilderLn org.tinspin.index.util.StringBuilderLn.appendLn(java.lang.String)
++ public java.lang.String org.tinspin.index.util.StringBuilderLn.toString()