{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 380242442,
    "in_class_code": "/**\n * Generates code coverage by unit tests report in forked {@code scoverage} life cycle.\n * <br>\n * <br>\n * In forked {@code scoverage} life cycle project is compiled with SCoverage instrumentation\n * and unit tests are executed before report generation.\n * <br>\n *\n * @author <a href=\"mailto:gslowikowski@gmail.com\">Grzegorz Slowikowski</a>\n * @since 1.0.0\n */\n@Mojo(name = \"report\", threadSafe = false)\n@Execute(lifecycle = \"scoverage\", phase = LifecyclePhase.TEST)\npublic class SCoverageReportMojo extends AbstractMojo implements MavenReport {\n    /**\n     * Allows SCoverage to be skipped.\n     * <br>\n     *\n     * @since 1.0.0\n     */\n    @Parameter(property = \"scoverage.skip\", defaultValue = \"false\")\n    private boolean skip;\n\n    /**\n     * In multi-module project additionally generate aggregated SCoverage report.\n     * <br>\n     *\n     * @since 1.1.0\n     */\n    @Parameter(property = \"scoverage.aggregate\", defaultValue = \"false\")\n    private boolean aggregate;\n\n    /**\n     * In multi-module project generate only aggregated SCoverage report.\n     * <br>\n     * <br>\n     * Scoverage reports for individual modules will not be generated.\n     * <br>\n     *\n     * @since 1.4.0\n     */\n    @Parameter(property = \"scoverage.aggregateOnly\", defaultValue = \"false\")\n    private boolean aggregateOnly;\n\n    /**\n     * The file encoding to use when reading Scala sources.\n     * <br>\n     *\n     * @since 1.2.0\n     */\n    @Parameter(property = \"encoding\", defaultValue = \"${project.build.sourceEncoding}\")\n    private String encoding;\n\n    /**\n     * Specifies if the build will fail if there are errors during report execution or not.\n     */\n    @Parameter(property = \"scoverage.failOnError\", defaultValue = \"true\", readonly = true)\n    private boolean failOnError;\n\n    /**\n     * Maven project to interact with.\n     */\n    @Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n    private MavenProject project;\n\n    /**\n     * All Maven projects in the reactor.\n     */\n    @Parameter(defaultValue = \"${reactorProjects}\", required = true, readonly = true)\n    private List<MavenProject> reactorProjects;\n\n    /**\n     * Destination directory where the coverage data files should be written.\n     */\n    @Parameter(property = \"scoverage.dataDirectory\", defaultValue = \"${project.build.directory}/scoverage-data\", required = true, readonly = true)\n    private File dataDirectory;\n\n    /**\n     * Destination directory for generated HTML report files.\n     */\n    @Parameter(property = \"scoverage.outputDirectory\", defaultValue = \"${project.reporting.outputDirectory}/scoverage\", required = true, readonly = true)\n    private File outputDirectory;\n\n    /**\n     * Destination directory for XML report files.\n     */\n    @Parameter(property = \"scoverage.xmlOutputDirectory\", defaultValue = \"${project.build.directory}\", required = true, readonly = true)\n    private File xmlOutputDirectory;\n\n    /**\n     * The name of the destination directory.\n     * <br>\n     */\n    @Parameter(property = \"destDir\", defaultValue = \"scoverage\", required = true, readonly = true)\n    private String destDir;\n\n    /**\n     * The name of the SCoverage report to be displayed in the Maven Generated Reports page\n     * (i.e. <code>project-reports.html</code>).\n     */\n    @Parameter(property = \"name\", readonly = true)\n    private String name;\n\n    /**\n     * The description of the Scoverage report to be displayed in the Maven Generated Reports page\n     * (i.e. <code>project-reports.html</code>).\n     */\n    @Parameter(property = \"description\", readonly = true)\n    private String description;\n\n    /**\n     * Generates SCoverage report.\n     *\n     * @throws MojoExecutionException\n     * \t\tif unexpected problem occurs\n     */\n    @Override\n    public void execute() throws MojoExecutionException {\n        if (!canGenerateReport()) {\n            getLog().info(\"Skipping SCoverage report generation\");\n            return;\n        }\n        try {\n            RenderingContext context = new RenderingContext(outputDirectory, getOutputName() + \".html\");\n            SiteRendererSink sink = new SiteRendererSink(context);\n            Locale locale = Locale.getDefault();\n            generate(sink, locale);\n        } catch (MavenReportException e) {\n            String prefix = (\"An error has occurred in \" + getName(Locale.ENGLISH)) + \" report generation\";\n            throw new MojoExecutionException((prefix + \": \") + e.getMessage(), e);\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Generates code coverage by unit tests report in forked {@code scoverage} life cycle.\n * <br>\n * <br>\n * In forked {@code scoverage} life cycle project is compiled with SCoverage instrumentation\n * and unit tests are executed before report generation.\n * <br>\n *\n * @author <a href=\"mailto:gslowikowski@gmail.com\">Grzegorz Slowikowski</a>\n * @since 1.0.0\n */\n@org.apache.maven.plugins.annotations.Mojo(name = \"report\", threadSafe = false)\n@org.apache.maven.plugins.annotations.Execute(lifecycle = \"scoverage\", phase = org.apache.maven.plugins.annotations.LifecyclePhase.TEST)\npublic class SCoverageReportMojo extends org.apache.maven.plugin.AbstractMojo implements org.apache.maven.reporting.MavenReport {\n    /**\n     * Allows SCoverage to be skipped.\n     * <br>\n     *\n     * @since 1.0.0\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.skip\", defaultValue = \"false\")\n    private boolean skip;\n\n    /**\n     * In multi-module project additionally generate aggregated SCoverage report.\n     * <br>\n     *\n     * @since 1.1.0\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.aggregate\", defaultValue = \"false\")\n    private boolean aggregate;\n\n    /**\n     * In multi-module project generate only aggregated SCoverage report.\n     * <br>\n     * <br>\n     * Scoverage reports for individual modules will not be generated.\n     * <br>\n     *\n     * @since 1.4.0\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.aggregateOnly\", defaultValue = \"false\")\n    private boolean aggregateOnly;\n\n    /**\n     * The file encoding to use when reading Scala sources.\n     * <br>\n     *\n     * @since 1.2.0\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"encoding\", defaultValue = \"${project.build.sourceEncoding}\")\n    private java.lang.String encoding;\n\n    /**\n     * Specifies if the build will fail if there are errors during report execution or not.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.failOnError\", defaultValue = \"true\", readonly = true)\n    private boolean failOnError;\n\n    /**\n     * Maven project to interact with.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(defaultValue = \"${project}\", readonly = true, required = true)\n    private org.apache.maven.project.MavenProject project;\n\n    /**\n     * All Maven projects in the reactor.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(defaultValue = \"${reactorProjects}\", required = true, readonly = true)\n    private java.util.List<org.apache.maven.project.MavenProject> reactorProjects;\n\n    /**\n     * Destination directory where the coverage data files should be written.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.dataDirectory\", defaultValue = \"${project.build.directory}/scoverage-data\", required = true, readonly = true)\n    private java.io.File dataDirectory;\n\n    /**\n     * Destination directory for generated HTML report files.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.outputDirectory\", defaultValue = \"${project.reporting.outputDirectory}/scoverage\", required = true, readonly = true)\n    private java.io.File outputDirectory;\n\n    /**\n     * Destination directory for XML report files.\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"scoverage.xmlOutputDirectory\", defaultValue = \"${project.build.directory}\", required = true, readonly = true)\n    private java.io.File xmlOutputDirectory;\n\n    /**\n     * The name of the destination directory.\n     * <br>\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"destDir\", defaultValue = \"scoverage\", required = true, readonly = true)\n    private java.lang.String destDir;\n\n    /**\n     * The name of the SCoverage report to be displayed in the Maven Generated Reports page\n     * (i.e. <code>project-reports.html</code>).\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"name\", readonly = true)\n    private java.lang.String name;\n\n    /**\n     * The description of the Scoverage report to be displayed in the Maven Generated Reports page\n     * (i.e. <code>project-reports.html</code>).\n     */\n    @org.apache.maven.plugins.annotations.Parameter(property = \"description\", readonly = true)\n    private java.lang.String description;\n\n    /**\n     * Generates SCoverage report.\n     *\n     * @throws MojoExecutionException\n     * \t\tif unexpected problem occurs\n     */\n    @java.lang.Override\n    public void execute() throws org.apache.maven.plugin.MojoExecutionException {\n        if (!canGenerateReport()) {\n            getLog().info(\"Skipping SCoverage report generation\");\n            return;\n        }\n        try {\n            org.scoverage.plugin.RenderingContext context = new org.scoverage.plugin.RenderingContext(outputDirectory, getOutputName() + \".html\");\n            org.apache.maven.doxia.siterenderer.sink.SiteRendererSink sink = new org.apache.maven.doxia.siterenderer.sink.SiteRendererSink(context);\n            java.util.Locale locale = java.util.Locale.getDefault();\n            generate(sink, locale);\n        } catch (org.apache.maven.reporting.MavenReportException e) {\n            java.lang.String prefix = (\"An error has occurred in \" + getName(java.util.Locale.ENGLISH)) + \" report generation\";\n            throw new org.apache.maven.plugin.MojoExecutionException((prefix + \": \") + e.getMessage(), e);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   class RenderingContext\n  location: class org.scoverage.plugin.SCoverageReportMojo\n",
        "error_message": "[ERROR] /scoverage-maven-plugin/src/main/java/org/scoverage/plugin/SCoverageReportMojo.java:[386,44] cannot find symbol",
        "client_file_path": "/scoverage-maven-plugin/src/main/java/org/scoverage/plugin/SCoverageReportMojo.java",
        "client_line_position": "386"
    },
    "client_end_line_number": 396,
    "client_line_number": 369,
    "method_code": "/**\n     * Generates SCoverage report.\n     * \n     * @throws MojoExecutionException if unexpected problem occurs\n     */\n    @Override\n    public void execute()\n        throws MojoExecutionException\n    {\n        if ( !canGenerateReport() )\n        {\n            getLog().info( \"Skipping SCoverage report generation\" );\n            return;\n        }\n\n        try\n        {\n            RenderingContext context = new RenderingContext( outputDirectory, getOutputName() + \".html\" );\n            SiteRendererSink sink = new SiteRendererSink( context );\n            Locale locale = Locale.getDefault();\n            generate( sink, locale );\n        }\n        catch ( MavenReportException e )\n        {\n            String prefix = \"An error has occurred in \" + getName( Locale.ENGLISH ) + \" report generation\";\n            throw new MojoExecutionException( prefix + \": \" + e.getMessage(), e );\n        }\n    }",
    "qualified_code": "/**\n * Generates SCoverage report.\n *\n * @throws MojoExecutionException\n * \t\tif unexpected problem occurs\n */\n@java.lang.Override\npublic void execute() throws org.apache.maven.plugin.MojoExecutionException {\n    if (!canGenerateReport()) {\n        getLog().info(\"Skipping SCoverage report generation\");\n        return;\n    }\n    try {\n        org.scoverage.plugin.RenderingContext context = new org.scoverage.plugin.RenderingContext(outputDirectory, getOutputName() + \".html\");\n        org.apache.maven.doxia.siterenderer.sink.SiteRendererSink sink = new org.apache.maven.doxia.siterenderer.sink.SiteRendererSink(context);\n        java.util.Locale locale = java.util.Locale.getDefault();\n        generate(sink, locale);\n    } catch (org.apache.maven.reporting.MavenReportException e) {\n        java.lang.String prefix = (\"An error has occurred in \" + getName(java.util.Locale.ENGLISH)) + \" report generation\";\n        throw new org.apache.maven.plugin.MojoExecutionException((prefix + \": \") + e.getMessage(), e);\n    }\n}",
    "method_name": "execute"
}