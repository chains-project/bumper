{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1686100174,
    "in_class_code": "/**\n * Integration case for {@link AwsOcket}.\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: d67286e195243030346f4424945bcc8027d7b932 $\n * @since 0.1\n */\npublic final class AwsOcketITCase {\n    /**\n     * Bucket we're working with.\n     *\n     * @checkstyle VisibilityModifier (3 lines)\n     */\n    @Rule\n    public transient final BucketRule rule = new BucketRule();\n\n    /**\n     * AwsOcket can read and write large S3 content.\n     *\n     * @throws Exception\n     * \t\tIf fails\n     */\n    @Test\n    public void readsAndWritesLargeObjectContent() throws Exception {\n        final Bucket bucket = this.rule.bucket();\n        final String name = \"test-44.txt\";\n        final Ocket.Text ocket = new Ocket.Text(bucket.ocket(name));\n        final String data = RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);\n        ocket.write(data);\n        try {\n            MatcherAssert.assertThat(ocket.read(), Matchers.equalTo(data));\n        } finally {\n            bucket.remove(name);\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration case for {@link AwsOcket}.\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: d67286e195243030346f4424945bcc8027d7b932 $\n * @since 0.1\n */\npublic final class AwsOcketITCase {\n    /**\n     * Bucket we're working with.\n     *\n     * @checkstyle VisibilityModifier (3 lines)\n     */\n    @org.junit.Rule\n    public transient final com.jcabi.s3.BucketRule rule = new com.jcabi.s3.BucketRule();\n\n    /**\n     * AwsOcket can read and write large S3 content.\n     *\n     * @throws Exception\n     * \t\tIf fails\n     */\n    @org.junit.Test\n    public void readsAndWritesLargeObjectContent() throws java.lang.Exception {\n        final com.jcabi.s3.Bucket bucket = this.rule.bucket();\n        final java.lang.String name = \"test-44.txt\";\n        final com.jcabi.s3.Ocket.Text ocket = new com.jcabi.s3.Ocket.Text(bucket.ocket(name));\n        final java.lang.String data = org.apache.commons.lang3.RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);\n        ocket.write(data);\n        try {\n            org.hamcrest.MatcherAssert.assertThat(ocket.read(), org.hamcrest.Matchers.equalTo(data));\n        } finally {\n            bucket.remove(name);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.s3.AwsOcketITCase\n",
        "error_message": "[ERROR] /jcabi-s3/src/test/java/com/jcabi/s3/AwsOcketITCase.java:[84,54] cannot find symbol",
        "client_file_path": "/jcabi-s3/src/test/java/com/jcabi/s3/AwsOcketITCase.java",
        "client_line_position": "84"
    },
    "client_end_line_number": 91,
    "client_line_number": 75,
    "method_code": "/**\n     * AwsOcket can read and write large S3 content.\n     * @throws Exception If fails\n     */\n    @Test\n    public void readsAndWritesLargeObjectContent() throws Exception {\n        final Bucket bucket = this.rule.bucket();\n        final String name = \"test-44.txt\";\n        final Ocket.Text ocket = new Ocket.Text(bucket.ocket(name));\n        final String data = RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);\n        ocket.write(data);\n        try {\n            MatcherAssert.assertThat(ocket.read(), Matchers.equalTo(data));\n        } finally {\n            bucket.remove(name);\n        }\n    }",
    "qualified_code": "/**\n * AwsOcket can read and write large S3 content.\n *\n * @throws Exception\n * \t\tIf fails\n */\n@org.junit.Test\npublic void readsAndWritesLargeObjectContent() throws java.lang.Exception {\n    final com.jcabi.s3.Bucket bucket = this.rule.bucket();\n    final java.lang.String name = \"test-44.txt\";\n    final com.jcabi.s3.Ocket.Text ocket = new com.jcabi.s3.Ocket.Text(bucket.ocket(name));\n    final java.lang.String data = org.apache.commons.lang3.RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);\n    ocket.write(data);\n    try {\n        org.hamcrest.MatcherAssert.assertThat(ocket.read(), org.hamcrest.Matchers.equalTo(data));\n    } finally {\n        bucket.remove(name);\n    }\n}",
    "method_name": "readsAndWritesLargeObjectContent"
}