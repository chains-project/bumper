{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1637061418,
    "in_class_code": "/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n * new SSH(\n * \"ssh.example.com\", 22,\n * \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n * )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\nchecking of passphrase. There should probably be separate classes for\nencrypted/unencrypted private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"key\", callSuper = true)\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends AbstractSshShell {\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private transient final String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private transient final String passphrase;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final URL priv) throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final URL priv) throws IOException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final String adr, final String user, final String priv) throws UnknownHostException {\n        this(adr, Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final InetAddress adr, final String user, final String priv) throws UnknownHostException {\n        this(adr.getCanonicalHostName(), Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt, final String user, final URL priv) throws IOException {\n        this(adr, prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final InetAddress adr, final int prt, final String user, final URL priv) throws IOException {\n        this(adr.getCanonicalHostName(), prt, user, new UncheckedText(new TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt, final String user, final String priv) throws UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @param passphrs\n     * \t\tPass phrase for encrypted priv. key\n     * @throws UnknownHostException\n     * \t\twhen host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final String adr, final int prt, final String user, final String priv, final String passphrs) throws UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = TimeUnit.MINUTES, verbose = false, types = IOException.class)\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(new LengthOf(new TeeInput(this.key.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\").trim(), file))).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(this.getLogin(), this.key.getBytes(StandardCharsets.UTF_8), null, this.passphrase.getBytes(StandardCharsets.UTF_8));\n            }\n            Logger.debug(this, \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\", this.getLogin(), this.getAddr(), this.getPort(), file.length());\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Single SSH Channel.\n *\n * <p>This class implements {@link Shell} interface. In order to use\n * it, just make an instance and call\n * {@link #exec(String, InputStream, OutputStream, OutputStream)} method:\n *\n * <pre> String hello = new Shell.Plain(\n *   new SSH(\n *     \"ssh.example.com\", 22,\n *     \"yegor\", \"-----BEGIN RSA PRIVATE KEY-----...\"\n *   )\n * ).exec(\"echo 'Hello, world!'\");</pre>\n *\n * <p>It is highly recommended to use classes from {@link Shell} interface,\n * they will simplify operations.</p>\n *\n * <p>Instances of this class are NOT reusable. Once you do\n * {@link Ssh#exec(String, InputStream, OutputStream, OutputStream)},\n * the connection is lost. You have to create a new {@link Ssh} object, if\n * you need to execute a new command.</p>\n *\n * @since 1.0\n * @see <a href=\"http://www.yegor256.com/2014/09/02/java-ssh-client.html\">article by Yegor Bugayenko</a>\n * @todo #30:30min Refactor this class into smaller ones to avoid null\nchecking of passphrase. There should probably be separate classes for\nencrypted/unencrypted private key.\n */\n@lombok.ToString\n@lombok.EqualsAndHashCode(of = \"key\", callSuper = true)\n@java.lang.SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class Ssh extends com.jcabi.ssh.AbstractSshShell {\n    /**\n     * Default SSH port.\n     */\n    public static final int PORT = 22;\n\n    /**\n     * Private SSH key.\n     */\n    private transient final java.lang.String key;\n\n    /**\n     * Private SSH key pass phrase.\n     */\n    private transient final java.lang.String passphrase;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final java.lang.String adr, final java.lang.String user, final java.net.URL priv) throws java.io.IOException {\n        this(adr, com.jcabi.ssh.Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final java.net.InetAddress adr, final java.lang.String user, final java.net.URL priv) throws java.io.IOException {\n        this(adr, com.jcabi.ssh.Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final java.lang.String adr, final java.lang.String user, final java.lang.String priv) throws java.net.UnknownHostException {\n        this(adr, com.jcabi.ssh.Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @since 1.4\n     */\n    public Ssh(final java.net.InetAddress adr, final java.lang.String user, final java.lang.String priv) throws java.net.UnknownHostException {\n        this(adr.getCanonicalHostName(), com.jcabi.ssh.Ssh.PORT, user, priv);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final java.lang.String adr, final int prt, final java.lang.String user, final java.net.URL priv) throws java.io.IOException {\n        this(adr, prt, user, new org.cactoos.text.UncheckedText(new org.cactoos.text.TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws IOException\n     * \t\tIf fails\n     * @since 1.4\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final java.net.InetAddress adr, final int prt, final java.lang.String user, final java.net.URL priv) throws java.io.IOException {\n        this(adr.getCanonicalHostName(), prt, user, new org.cactoos.text.UncheckedText(new org.cactoos.text.TextOf(priv)).asString());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final java.lang.String adr, final int prt, final java.lang.String user, final java.lang.String priv) throws java.net.UnknownHostException {\n        this(adr, prt, user, priv, null);\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param priv\n     * \t\tPrivate SSH key\n     * @param passphrs\n     * \t\tPass phrase for encrypted priv. key\n     * @throws UnknownHostException\n     * \t\twhen host is unknown.\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public Ssh(final java.lang.String adr, final int prt, final java.lang.String user, final java.lang.String priv, final java.lang.String passphrs) throws java.net.UnknownHostException {\n        super(adr, prt, user);\n        this.key = priv;\n        this.passphrase = passphrs;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @java.lang.Override\n    @com.jcabi.aspects.RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\n    protected com.jcraft.jsch.Session session() throws java.io.IOException {\n        final java.io.File file = java.io.File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n            final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n            new org.cactoos.scalar.Unchecked<>(new org.cactoos.scalar.LengthOf(new org.cactoos.io.TeeInput(this.key.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\").trim(), file))).value();\n            jsch.setHostKeyRepository(new com.jcabi.ssh.EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(this.getLogin(), this.key.getBytes(java.nio.charset.StandardCharsets.UTF_8), null, this.passphrase.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n            }\n            com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\", this.getLogin(), this.getAddr(), this.getPort(), file.length());\n            return this.session(jsch);\n        } catch (final com.jcraft.jsch.JSchException ex) {\n            throw new java.io.IOException(ex);\n        } finally {\n            java.nio.file.Files.deleteIfExists(file.toPath());\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.ssh.Ssh\n",
        "error_message": "[ERROR] /jcabi-ssh/src/main/java/com/jcabi/ssh/Ssh.java:[236,20] cannot find symbol",
        "client_file_path": "/jcabi-ssh/src/main/java/com/jcabi/ssh/Ssh.java",
        "client_line_position": "236"
    },
    "client_end_line_number": 280,
    "client_line_number": 233,
    "method_code": "// @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        final File file = File.createTempFile(\"jcabi-ssh\", \".key\");\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            new Unchecked<>(\n                new LengthOf(\n                    new TeeInput(\n                        this.key.replaceAll(\"\\r\", \"\")\n                            .replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\")\n                            .trim(),\n                        file\n                    )\n                )\n            ).value();\n            jsch.setHostKeyRepository(new EasyRepo());\n            if (this.passphrase == null) {\n                jsch.addIdentity(file.getAbsolutePath());\n            } else {\n                jsch.addIdentity(\n                    this.getLogin(),\n                    this.key.getBytes(StandardCharsets.UTF_8),\n                    null,\n                    this.passphrase.getBytes(StandardCharsets.UTF_8)\n                );\n            }\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\",\n                this.getLogin(), this.getAddr(), this.getPort(),\n                file.length()\n            );\n            return this.session(jsch);\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        } finally {\n            Files.deleteIfExists(file.toPath());\n        }\n    }",
    "qualified_code": "// @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n@java.lang.Override\n@com.jcabi.aspects.RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\nprotected com.jcraft.jsch.Session session() throws java.io.IOException {\n    final java.io.File file = java.io.File.createTempFile(\"jcabi-ssh\", \".key\");\n    try {\n        com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n        final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n        new org.cactoos.scalar.Unchecked<>(new org.cactoos.scalar.LengthOf(new org.cactoos.io.TeeInput(this.key.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\\\\s+|\\n{2,}\", \"\\n\").trim(), file))).value();\n        jsch.setHostKeyRepository(new com.jcabi.ssh.EasyRepo());\n        if (this.passphrase == null) {\n            jsch.addIdentity(file.getAbsolutePath());\n        } else {\n            jsch.addIdentity(this.getLogin(), this.key.getBytes(java.nio.charset.StandardCharsets.UTF_8), null, this.passphrase.getBytes(java.nio.charset.StandardCharsets.UTF_8));\n        }\n        com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (%d bytes in RSA key)...\", this.getLogin(), this.getAddr(), this.getPort(), file.length());\n        return this.session(jsch);\n    } catch (final com.jcraft.jsch.JSchException ex) {\n        throw new java.io.IOException(ex);\n    } finally {\n        java.nio.file.Files.deleteIfExists(file.toPath());\n    }\n}",
    "method_name": "session"
}