act as a senior software engineer, your goal is fix code failures.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

the following client code fails:
```java
  @Test
    void testScope() {
        final String line = "GET /resource.txt HTTP/1.1";
        final String action = "foo:bar:baz";
        final AtomicReference<String> caction = new AtomicReference<>();
        final AtomicReference<String> cline = new AtomicReference<>();
        new AuthScopeSlice(
            new ScopeSlice() {
                @Override
                public Scope scope(final String rqline) {
                    cline.set(rqline);
                    return new Scope.FromString(action);
                }

                @Override
                public Response response(
                    final String line,
                    final Iterable<Map.Entry<String, String>> headers,
                    final Publisher<ByteBuffer> body
                ) {
                    return StandardRs.OK;
                }
            },
            (headers, rline) -> CompletableFuture.completedFuture(
                new AuthScheme.Result() {
                    @Override
                    public Optional<Authentication.User> user() {
                        return Optional.of(new Authentication.User("alice"));
                    }

                    @Override
                    public String challenge() {
                        return "";
                    }
                }
            ),
            (user, act) -> {
                caction.set(act);
                return true;
            }
        ).response(line, Headers.EMPTY, Content.EMPTY).send(
            (status, headers, body) -> CompletableFuture.allOf()
        ).toCompletableFuture().join();
        MatcherAssert.assertThat(
            "Request line passed to slice",
            cline.get(),
            new IsEqual<>(line)
        );
        MatcherAssert.assertThat(
            "Scope passed as action to permissions",
            caction.get(),
            new IsEqual<>(action)
        );
    }
```

with the following error message:
[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java:[56,51] cannot find symbol
  symbol:   class User
  location: interface com.artipie.http.auth.Authentication


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
++ public AuthUser com.artipie.http.auth.AuthUser(java.lang.String,java.lang.String)
++ public java.lang.String com.artipie.http.auth.AuthUser.authContext()
++ public bool com.artipie.http.auth.AuthUser.equals(java.lang.Object)
++ public int com.artipie.http.auth.AuthUser.hashCode()
++ public java.lang.String com.artipie.http.auth.AuthUser.name()
++ public java.lang.String com.artipie.http.auth.AuthUser.toString()
++ public Authentication$Single com.artipie.http.auth.Authentication$Single(com.artipie.http.auth.AuthUser,java.lang.String)
-- public Authentication$Single com.artipie.http.auth.Authentication$Single(com.artipie.http.auth.Authentication$User,java.lang.String)
-- public Authentication$User com.artipie.http.auth.Authentication$User(java.lang.String)
-- public Authentication$User com.artipie.http.auth.Authentication$User(java.lang.String,java.util.Collection)
-- public bool com.artipie.http.auth.Authentication$User.equals(java.lang.Object)
-- public java.util.Collection com.artipie.http.auth.Authentication$User.groups()
-- public int com.artipie.http.auth.Authentication$User.hashCode()
-- public java.lang.String com.artipie.http.auth.Authentication$User.name()
-- public java.lang.String com.artipie.http.auth.Authentication$User.toString()
++ public bool com.artipie.http.auth.JoinedPermissions.allowed(com.artipie.http.auth.AuthUser,java.lang.String)
-- public bool com.artipie.http.auth.JoinedPermissions.allowed(com.artipie.http.auth.Authentication$User,java.lang.String)
++ public bool com.artipie.http.auth.OperationControl.allowed(com.artipie.http.auth.AuthUser)
++ public bool com.artipie.http.auth.Permission$All.allowed(com.artipie.http.auth.AuthUser)
-- public bool com.artipie.http.auth.Permission$All.allowed(com.artipie.http.auth.Authentication$User)
++ public bool com.artipie.http.auth.Permission$Any.allowed(com.artipie.http.auth.AuthUser)
-- public bool com.artipie.http.auth.Permission$Any.allowed(com.artipie.http.auth.Authentication$User)
++ public bool com.artipie.http.auth.Permission$ByName.allowed(com.artipie.http.auth.AuthUser)
-- public bool com.artipie.http.auth.Permission$ByName.allowed(com.artipie.http.auth.Authentication$User)
++ public abstract bool com.artipie.http.auth.Permission.allowed(com.artipie.http.auth.AuthUser)
-- public abstract bool com.artipie.http.auth.Permission.allowed(com.artipie.http.auth.Authentication$User)
++ public bool com.artipie.http.auth.Permissions$Single.allowed(com.artipie.http.auth.AuthUser,java.lang.String)
-- public bool com.artipie.http.auth.Permissions$Single.allowed(com.artipie.http.auth.Authentication$User,java.lang.String)
++ public final bool com.artipie.http.auth.Permissions$Wrap.allowed(com.artipie.http.auth.AuthUser,java.lang.String)
-- public final bool com.artipie.http.auth.Permissions$Wrap.allowed(com.artipie.http.auth.Authentication$User,java.lang.String)
++ public abstract bool com.artipie.http.auth.Permissions.allowed(com.artipie.http.auth.AuthUser,java.lang.String)
-- public abstract bool com.artipie.http.auth.Permissions.allowed(com.artipie.http.auth.Authentication$User,java.lang.String)
++ public abstract java.lang.String com.artipie.http.auth.Tokens.generate(com.artipie.http.auth.AuthUser)
++ public java.util.Set com.artipie.security.perms.Action$All.names()
++ public java.util.Set com.artipie.security.perms.Action$Standard.names()
++ public abstract java.util.Set com.artipie.security.perms.Action.names()
++ public java.lang.String com.artipie.security.perms.PermissionConfig$Yaml.name()
++ public abstract java.lang.String com.artipie.security.perms.PermissionConfig.name()
++ public User$Simple com.artipie.security.perms.User$Simple(java.util.Collection,java.security.PermissionCollection)
++ public java.security.PermissionCollection com.artipie.security.perms.User$Simple.perms()
++ public java.util.Collection com.artipie.security.perms.User$Simple.roles()
++ public abstract java.security.PermissionCollection com.artipie.security.perms.User.perms()
++ public abstract java.util.Collection com.artipie.security.perms.User.roles()
++ public UserPermissions com.artipie.security.perms.UserPermissions(java.util.function.Supplier,java.util.function.Function)
++ public void com.artipie.security.perms.UserPermissions.add(java.security.Permission)
++ public java.util.Enumeration com.artipie.security.perms.UserPermissions.elements()
++ public bool com.artipie.security.perms.UserPermissions.implies(java.security.Permission)
++ public java.security.PermissionCollection com.artipie.security.policy.CachedYamlPolicy$AstoUser.perms()
++ public java.util.Collection com.artipie.security.policy.CachedYamlPolicy$AstoUser.roles()
++ public com.artipie.security.perms.UserPermissions com.artipie.security.policy.CachedYamlPolicy.getPermissions(com.artipie.http.auth.AuthUser)
++ public abstract java.security.PermissionCollection com.artipie.security.policy.Policy.getPermissions(com.artipie.http.auth.AuthUser)
++ public PolicyByUsername com.artipie.security.policy.PolicyByUsername(java.lang.String)
++ public java.security.PermissionCollection com.artipie.security.policy.PolicyByUsername.getPermissions(com.artipie.http.auth.AuthUser)

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CAN remove the Override decorator IF AND ONLY IF the method is not overriding any method in the new version.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
return only the fixed failing method, not the complete class code, you MUST change something in the code.
