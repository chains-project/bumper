import static java.util.concurrent.TimeUnit.MINUTES;
import static java.util.concurrent.TimeUnit.SECONDS;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.GeneralSecurityException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.function.Supplier;

import com.google.common.base.CharMatcher;
import com.google.common.base.Throwables;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import org.cactoos.scalar.Unchecked;
import org.cactoos.scalar.LengthOf;
import org.cactoos.io.TeeInput;

@Override
protected Session session() throws IOException {
    final File file = File.createTempFile("jcabi-ssh", ".key");
    try {
        JSch.setLogger(new JschLogger());
        final JSch jsch = new JSch();
        new Unchecked<>(new LengthOf(new TeeInput(
            CharMatcher.is('\r').replaceFrom(this.key, ""),
            file
        ))).value();
        jsch.setHostKeyRepository(new EasyRepo());
        if (this.passphrase == null) {
            jsch.addIdentity(file.getAbsolutePath());
        } else {
            jsch.addIdentity(this.getLogin(), this.key.getBytes(StandardCharsets.UTF_8), null, this.passphrase.getBytes(StandardCharsets.UTF_8));
        }
        com.jcabi.log.Logger.debug(this, "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...", this.getLogin(), this.getAddr(), this.getPort(), file.length());
        return this.session(jsch);
    } catch (final JSchException ex) {
        throw new IOException(ex);
    } finally {
        try {
            Files.deleteIfExists(file.toPath());
        } catch (final Exception e) {
            // Suppress any exception here as we want to fail-fast in the main session method
        }
    }
}