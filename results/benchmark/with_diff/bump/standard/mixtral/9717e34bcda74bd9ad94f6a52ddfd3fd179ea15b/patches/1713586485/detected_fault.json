{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1637061418,
    "in_class_code": "/**\n * Mock Github client.\n *\n * <p>This is how you use it:\n *\n * <pre> GitHub gitHub = new MkGithub(\"username\");\n * Repos.RepoCreate create = new Repos.RepoCreate(\"dummy\", false);\n * Repo repo = gitHub.repos().create(create);\n * Issue issue = repo.issues().create(\"title\", \"body\");</pre>\n *\n * <p>By default, it works with a temporary file, which will be deleted\n * on JVM exit:\n *\n * <pre> Github github = new MkGithub(\"jeff\");</pre>\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: 2efb1ed33587ae680ea352251dda744d7a0ae3c6 $\n * @since 0.5\n * @checkstyle ClassDataAbstractionCoupling (500 lines)\n */\n@Immutable\n@Loggable(Loggable.DEBUG)\n@EqualsAndHashCode(of = { \"storage\", \"self\" })\n@SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class MkGithub implements Github {\n    /**\n     * Storage.\n     */\n    private final transient MkStorage storage;\n\n    /**\n     * Login of the user logged in.\n     */\n    private final transient String self;\n\n    /**\n     * Public ctor.\n     *\n     * @throws IOException\n     * \t\tIf there is any I/O problem\n     */\n    public MkGithub() throws IOException {\n        this(\"jeff\");\n    }\n\n    /**\n     * Public ctor.\n     *\n     * @param login\n     * \t\tUser to login\n     * @throws IOException\n     * \t\tIf there is any I/O problem\n     */\n    public MkGithub(final String login) throws IOException {\n        this(new MkStorage.Synced(new MkStorage.InFile()), login);\n    }\n\n    /**\n     * Public ctor.\n     *\n     * @param stg\n     * \t\tStorage\n     * @param login\n     * \t\tUser to login\n     */\n    public MkGithub(final MkStorage stg, final String login) {\n        this.storage = stg;\n        this.self = login;\n    }\n\n    /**\n     * Create repo with random name.\n     *\n     * @return Repo\n     * @throws IOException\n     * \t\tIf fails\n     */\n    public Repo randomRepo() throws IOException {\n        return this.repos().create(new Repos.RepoCreate(RandomStringUtils.randomAlphanumeric(Tv.TWENTY), true));\n    }\n}",
    "qualified_in_class_code": "/**\n * Mock Github client.\n *\n * <p>This is how you use it:\n *\n * <pre> GitHub gitHub = new MkGithub(\"username\");\n * Repos.RepoCreate create = new Repos.RepoCreate(\"dummy\", false);\n * Repo repo = gitHub.repos().create(create);\n * Issue issue = repo.issues().create(\"title\", \"body\");</pre>\n *\n * <p>By default, it works with a temporary file, which will be deleted\n * on JVM exit:\n *\n * <pre> Github github = new MkGithub(\"jeff\");</pre>\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: 2efb1ed33587ae680ea352251dda744d7a0ae3c6 $\n * @since 0.5\n * @checkstyle ClassDataAbstractionCoupling (500 lines)\n */\n@com.jcabi.aspects.Immutable\n@com.jcabi.aspects.Loggable(com.jcabi.aspects.Loggable.DEBUG)\n@lombok.EqualsAndHashCode(of = { \"storage\", \"self\" })\n@java.lang.SuppressWarnings(\"PMD.TooManyMethods\")\npublic final class MkGithub implements com.jcabi.github.Github {\n    /**\n     * Storage.\n     */\n    private final transient com.jcabi.github.mock.MkStorage storage;\n\n    /**\n     * Login of the user logged in.\n     */\n    private final transient java.lang.String self;\n\n    /**\n     * Public ctor.\n     *\n     * @throws IOException\n     * \t\tIf there is any I/O problem\n     */\n    public MkGithub() throws java.io.IOException {\n        this(\"jeff\");\n    }\n\n    /**\n     * Public ctor.\n     *\n     * @param login\n     * \t\tUser to login\n     * @throws IOException\n     * \t\tIf there is any I/O problem\n     */\n    public MkGithub(final java.lang.String login) throws java.io.IOException {\n        this(new com.jcabi.github.mock.MkStorage.Synced(new com.jcabi.github.mock.MkStorage.InFile()), login);\n    }\n\n    /**\n     * Public ctor.\n     *\n     * @param stg\n     * \t\tStorage\n     * @param login\n     * \t\tUser to login\n     */\n    public MkGithub(final com.jcabi.github.mock.MkStorage stg, final java.lang.String login) {\n        this.storage = stg;\n        this.self = login;\n    }\n\n    /**\n     * Create repo with random name.\n     *\n     * @return Repo\n     * @throws IOException\n     * \t\tIf fails\n     */\n    public com.jcabi.github.Repo randomRepo() throws java.io.IOException {\n        return this.repos().create(new com.jcabi.github.Repos.RepoCreate(org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TWENTY), true));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.github.mock.MkGithub\n",
        "error_message": "[ERROR] /jcabi-github/src/main/java/com/jcabi/github/mock/MkGithub.java:[224,54] cannot find symbol",
        "client_file_path": "/jcabi-github/src/main/java/com/jcabi/github/mock/MkGithub.java",
        "client_line_position": "224"
    },
    "client_end_line_number": 228,
    "client_line_number": 216,
    "method_code": "/**\n     * Create repo with random name.\n     * @return Repo\n     * @throws IOException If fails\n     */\n    public Repo randomRepo() throws IOException {\n        return this.repos().create(\n            new Repos.RepoCreate(\n                RandomStringUtils.randomAlphanumeric(Tv.TWENTY),\n                true\n            )\n        );\n    }",
    "qualified_code": "/**\n * Create repo with random name.\n *\n * @return Repo\n * @throws IOException\n * \t\tIf fails\n */\npublic com.jcabi.github.Repo randomRepo() throws java.io.IOException {\n    return this.repos().create(new com.jcabi.github.Repos.RepoCreate(org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(Tv.TWENTY), true));\n}",
    "method_name": "randomRepo"
}