import static java.lang.System.currentTimeMillis;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.geom.PrecisionModel;
import org.locationtech.jts.index.ItemVisitor;
import org.locationtech.jts.index.quadtree.Quadtree;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import org.locationtech.jts.operation.polygonize.Polygonizer;

public class FastPolygonizerTests {

    @Test
    void testRobustnessRandomly() {
        Random r = new Random(0);
        for (int k = 0; k < 100; k++) {
            List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
            for (int i = 0; i < (111 + k); i++) {
                segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
            }
            Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
            Collection<micycle.pgs.commons.PEdge> nodedEdges = new ArrayList<>();
            nodedSS.forEach((ss) -> nodedEdges.add(new micycle.pgs.commons.PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
            Collection<micycle.pgs.commons.PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
            final Polygonizer polygonizerJTS = new Polygonizer();
            polygonizerJTS.setCheckRingsValid(false);
            nodedEdgesSet.forEach((e) -> {
                final LineString l = PGS.GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
                polygonizerJTS.add(l);
            });
            long t1 = currentTimeMillis();
            @SuppressWarnings("unchecked")
            Collection<Polygon> JTS = polygonizerJTS.getPolygons();
            long t2 = currentTimeMillis();
            long timeJTS = t2 - t1;
            t1 = currentTimeMillis();
            processing.core.PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
            t2 = currentTimeMillis();
            long timeFP = t2 - t1;
            assertEquals(JTS.size(), FP.getChildCount());
        }
    }
}