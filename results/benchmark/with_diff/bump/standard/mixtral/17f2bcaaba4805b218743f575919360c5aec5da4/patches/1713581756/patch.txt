import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.CoordinateList;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.index.quadtree.Quadtree;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import processing.core.PShape;
import micycle.pgs.commons.PEdge;
import micycle.pgs.commons.PVector;
import micycle.pgs.FastPolygonizer;
import static java.lang.System.currentTimeMillis;
import static java.util.Arrays.stream;

@Test
void testRobustnessRandomly() {
    java.util.Random r = new java.util.Random();
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
        Collection<PEdge> nodedEdges = new ArrayList<>();
        nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);

        GeometryFactory GEOM_FACTORY = new GeometryFactory();
        Quadtree index = new Quadtree();
        nodedEdgesSet.forEach(( e) -> {
            LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
            index.insert(new Envelope(l.getEnvelopeInternal()), l);
        });

        long t1 = currentTimeMillis();
        @SuppressWarnings("unchecked")
        Collection<Polygon> JTS = new ArrayList<>();
        index.query(index.getBounds(), (geometry) -> JTS.add(geometry));
        long t2 = currentTimeMillis();
        long timeJTS = TimeUnit.MILLISECONDS.toNanos(t2 - t1);

        t1 = currentTimeMillis();
        PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
        t2 = currentTimeMillis();
        long timeFP = TimeUnit.MILLISECONDS.toNanos(t2 - t1);

        assertEquals(JTS.size(), FP.getChildCount());
    }
}