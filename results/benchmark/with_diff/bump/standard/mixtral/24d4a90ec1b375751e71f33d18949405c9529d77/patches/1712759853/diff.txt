0a1,15
> import com.jcabi.s3.Bucket;
> import com.jcabi.s3.Ocket;
> import com.jcabi.s3.Ocket.Text;
> import org.apache.commons.lang3.RandomStringUtils;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import static java.lang.String.format;
> import static java.util.concurrent.TimeUnit.SECONDS;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.equalTo;
> 
> public class AwsOcketITCase {
> 
>         // ... other methods ...
> 
3c18,20
<      * @throws Exception If fails
---
>      *
>      * @throws Exception
>      *          If fails
5,6c22,23
<     @Test
<     public void readsAndWritesLargeObjectContent() throws Exception {
---
>     @org.junit.Test
>     public void readsAndWritesLargeObjectContent() throws java.lang.Exception {
10c27,28
<         final String data = RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);
---
>         final int largeObjectSize = 100 * 1000;
>         final String data = RandomStringUtils.random(largeObjectSize);
13c31,40
<             MatcherAssert.assertThat(ocket.read(), Matchers.equalTo(data));
---
>             final String readData = ocket.read();
>             final long timeout = 60;
>             final long start = System.currentTimeMillis();
>             while (!data.equals(readData)) {
>                 if (System.currentTimeMillis() - start > timeout * SECONDS.toMillis(1)) {
>                     throw new Exception(format("Timeout while waiting for object content to be consistent (expected: %s, actual: %s)", data, readData));
>                 }
>                 SECONDS.sleep(1);
>                 readData = ocket.read();
>             }
17a45
> }
\ No newline at end of file
