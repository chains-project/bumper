import java.io.File;
import java.util.List;

import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.BuildPluginManager;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProjectBuilder;
import org.apache.maven.project.ProjectBuilderConfiguration;
import org.apache.maven.project.ProjectBuildingException;
import org.apache.maven.project.ProjectConfigurator;
import org.apache.maven.project.ProjectConfiguratorException;
import org.codehaus.plexus.interpolation.InterpolationException;
import org.codehaus.plexus.interpolation.MapBasedValueSource;
import org.codehaus.plexus.interpolation.ValueSource;

public class AbstractThemeMojo extends AbstractMojo {

    // ...

    @Parameter(defaultValue = "${session}", readonly = true, required = true)
    private MavenSession session;

    @Component
    private MavenProjectBuilder projectBuilder;

    @Component
    private ProjectConfigurator projectConfigurator;

    @Component
    private BuildPluginManager pluginManager;

    @Parameter
    private File outputDirectory;

    // ...

    @Override
    public void execute() throws MojoExecutionException {
        // ...

        ProjectBuilderConfiguration config = new ProjectBuilderConfiguration();
        ValueSource valueSource = new MapBasedValueSource();
        try {
            project = projectBuilder.build(new File(basedir, pomFile), config, valueSource, session.getProjectBuildingRequest());
        } catch (ProjectBuildingException e) {
            throw new MojoExecutionException("Failed to build project", e);
        }

        // ...
    }

    // ...

}