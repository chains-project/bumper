1,2c1,20
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.asto.TmpFolder;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.CheckedBlob;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.google.common.base.Throwables;
> import io.reactivex.Completable;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import org.junit.jupiter.api.Test;
> 
> @Test
4,13c22,60
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", new org.hamcrest.core.StringContains(com.google.common.base.Throwables.getRootCause(throwable).getMessage()), "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", new org.hamcrest.core.StringContains(com.google.common.base.Throwables.getRootCause(throwable).getMessage()), digest);
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     final Storage storage = new TmpFolder();
>     final AstoBlobs blobs = new AstoBlobs(
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
>     );
>     final Digest digest = Digest.sha256("123");
>     final Path data = Files.createTempFile("data", null);
>     try {
>         final Content content = Content.from(Files.readAllBytes(data));
>         final Key key = new Key.From("data", digest);
>         final CheckedBlob checkedBlob = new CheckedBlob(content, key);
>         final CompletableFuture<CheckedBlob> future = blobs.put(new CheckedBlobSource(checkedBlob));
>         future.handle((blob, throwable) -> {
>             MatcherAssert.assertThat(
>                 "Exception thrown",
>                 throwable,
>                 Matchers.not(Matchers.instanceOf(IllegalArgumentException.class))
>             );
>             MatcherAssert.assertThat(
>                 "Exception is InvalidDigestException",
>                 Throwables.getRootCause(throwable),
>                 Matchers.instanceOf(com.artipie.docker.error.InvalidDigestException.class)
>             );
>             MatcherAssert.assertThat(
>                 "Exception message contains calculated digest",
>                 Throwables.getRootCause(throwable).getMessage(),
>                 Matchers.stringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
>             );
>         });
>     } finally {
>         Files.deleteIfExists(data);
>     }
>     MatcherAssert.assertThat(
>         "Exception message contains expected digest",
>         Throwables.getRootCause(throwable).getMessage(),
>         Matchers.stringContains(digest.toString())
>     );
>     return Completable.complete();
