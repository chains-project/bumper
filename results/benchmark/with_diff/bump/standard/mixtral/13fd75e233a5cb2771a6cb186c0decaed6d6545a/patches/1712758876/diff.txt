1,2c1,18
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ext.CheckedBlobSource;
> import com.artipie.asto.ext.Digest;
> import com.artipie.asto.ext.IsNot;
> import com.artipie.asto.ext.IsNull;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.RepoName.Simple;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> 
> @Test
4,13c20,32
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringStartsWith.StringStartsWithMatcher("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest)));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     MemoryStorage storage = new MemoryStorage();
>     AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new Simple("any"));
>     String digest = "123";
>     blobs.put(new CheckedBlobSource(new Content.From("data".getBytes(StandardCharsets.UTF_8)), new Sha256(digest)))
>         .toCompletableFuture()
>         .handle((blob, throwable) -> {
>             MatcherAssert.assertThat("Exception thrown", throwable, new IsNot(new IsNull<>()));
>             MatcherAssert.assertThat("Exception is InvalidDigestException", Throwables.getRootCause(throwable), Matchers.instanceOf(InvalidDigestException.class));
>             MatcherAssert.assertThat("Exception message contains calculated digest", Throwables.getRootCause(throwable).getMessage(), Matchers.startsWith("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>             MatcherAssert.assertThat("Exception message contains expected digest", Throwables.getRootCause(throwable).getMessage(), Matchers.containsString(digest));
>             return CompletableFuture.allOf();
>         })
>         .join();
