import org.bouncycastle.crypto.tls.AlertDescription;
import org.bouncycastle.crypto.tls.TlsFatalAlert;

import java.io.IOException;

public class ChachaDecoder {

    public void decode(byte[] in, int inOff, int len) throws IOException {
        // Check that the input is long enough to contain at least the header.
        if (len < 16) {
            throw new TlsFatalAlert(AlertDescription.decode_error);
        }

        // Get the length of the plaintext.
        int plaintextLength = in[inOff] & 0xff;
        plaintextLength |= (in[inOff + 1] & 0xff) << 8;
        plaintextLength |= (in[inOff + 2] & 0xff) << 16;
        plaintextLength |= (in[inOff + 3] & 0xff) << 24;

        // Check that the input is long enough to contain the plaintext.
        if (len < plaintextLength + 16) {
            throw new TlsFatalAlert(AlertDescription.decode_error);
        }

        // Decrypt the plaintext.
        byte[] plaintext = new byte[plaintextLength];
        System.arraycopy(in, inOff + 16, plaintext, 0, plaintextLength);

        // Check the MAC.
        byte[] mac = new byte[16];
        System.arraycopy(in, inOff + 16 + plaintextLength, mac, 0, 16);

        // TODO: Implement MAC verification.

        // Return the plaintext.
        //return plaintext;
    }
}