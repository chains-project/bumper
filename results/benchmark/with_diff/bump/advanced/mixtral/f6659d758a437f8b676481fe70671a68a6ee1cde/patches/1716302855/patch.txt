public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {
    final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();
    loadingConfig.setSafeLoadHandlers(new org.yaml.snakeyaml.constructor.SafeConstructor.SafeLoadHandler[]{
        new org.yaml.snakeyaml.constructor.SafeConstructor.SafeLoadHandler() {
            @Override
            public Object onUnknownTag(Node node, Tag tag) {
                if (tag.getValue().equals("!ZoneId")) {
                    return new com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct().construct(node);
                } else if (tag.getValue().equals("!LocalDate")) {
                    return new com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct().construct(node);
                }
                throw new ConstructionException(null, node.getStartMark(), "could not resolve tag " + tag);
            }
        }
    });
    final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());
    final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag("!ZoneId");
    representer.addClassTag(java.time.ZoneId.class, zoneIdTag);
    final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag("!LocalDate");
    representer.addClassTag(java.time.LocalDate.class, localDateTag);
    org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(new org.yaml.snakeyaml.constructor.SafeConstructor(clazz, loadingConfig), representer);
    try {
        return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));
    } catch (java.io.FileNotFoundException e) {
        throw new java.lang.RuntimeException(e);
    }
}