import org.jasypt.util.text.TextEncryptor;
import org.jasypt.util.password.PasswordEncryptor;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.password.Pbkdf2PasswordEncoder;

import java.util.Objects;

@SuppressWarnings("deprecation")
public class GeoStorePBEPasswordEncoder {

    // ...

    @Override
    @SuppressWarnings("deprecation")
    public void init() {
        TextEncryptor textEncryptor = new TextEncryptor();
        PasswordEncryptor passwordEncryptor = new PasswordEncryptor();
        PasswordEncoder passwordEncoder = new Pbkdf2PasswordEncoder();

        textEncryptor.setAlgorithm(algorithm);
        textEncryptor.setKeyObtentionIterations(iterationCount);
        textEncryptor.setPoolSize(poolSize);
        textEncryptor.setSaltGenerator(saltGenerator);

        passwordEncryptor.setAlgorithm(algorithm);
        passwordEncryptor.setIterationCount(iterationCount);
        passwordEncryptor.setKeyObtentionIterations(iterationCount);

        passwordEncoder.setEncodeHashAsBase64(true);
        passwordEncoder.setPasswordEncoder(passwordEncryptor);

        this.textEncryptor = textEncryptor;
        this.passwordEncoder = passwordEncoder;
    }

    // ...

    @Override
    public String encodePassword(String rawPass, Object salt) {
        Objects.requireNonNull(rawPass, "rawPass cannot be null");
        Objects.requireNonNull(salt, "salt cannot be null");

        return passwordEncoder.encode(rawPass);
    }

    @Override
    public boolean isPasswordValid(String encPass, String rawPass, Object salt) {
        Objects.requireNonNull(encPass, "encPass cannot be null");
        Objects.requireNonNull(rawPass, "rawPass cannot be null");
        Objects.requireNonNull(salt, "salt cannot be null");

        return passwordEncoder.matches(rawPass, encPass);
    }

    // ...

}