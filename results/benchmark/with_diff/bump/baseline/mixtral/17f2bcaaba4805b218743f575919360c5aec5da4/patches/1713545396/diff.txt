1c1,62
< import org.junit.Ignore;
\ No newline at end of file
---
> import org.junit.experimental.runners.model.RunnerFacade;
> import org.junit.internal.runners.model.ReflectiveCallable;
> import org.junit.runner.Description;
> import org.junit.runner.notification.RunNotifier;
> import org.junit.runners.ParentRunner;
> import org.junit.runners.model.FrameworkMethod;
> import org.junit.runners.model.InitializationError;
> 
> @SuppressWarnings("deprecation")
> public class IgnoreRule extends ParentRunner<FrameworkMethod> {
>     private RunnerFacade runnerFacade;
> 
>     public IgnoreRule(Class<?> testClass) throws InitializationError {
>         super(testClass);
>         runnerFacade = new RunnerFacade() {
>             @Override
>             public Description getDescription() {
>                 return IgnoreRule.this.getDescription();
>             }
> 
>             @Override
>             public void run(RunNotifier notifier) {
>                 IgnoreRule.this.runLeafMethods(notifier);
>             }
>         };
>     }
> 
>     @Override
>     public Description getDescription() {
>         return runnerFacade.getDescription();
>     }
> 
>     @Override
>     protected List<FrameworkMethod> getChildren() {
>         return Collections.emptyList();
>     }
> 
>     @Override
>     protected void runChild(FrameworkMethod method, RunNotifier notifier) {
>         ReflectiveCallable callable = new ReflectiveCallable() {
>             @Override
>             public Object runReflectiveCall() throws Throwable {
>                 return null;
>             }
>         };
> 
>         Description description = Description.createSuiteDescription(method.getName());
>         notifier.fireTestStarted(description);
>         try {
>             callable.runReflectiveCall();
>         } catch (Throwable t) {
>             failFast(description, t);
>         }
>         notifier.fireTestFinished(description);
>     }
> 
>     private void failFast(Description description, Throwable t) {
>         notifier.fireTestFailure(description, t);
>         notifier.fireTestAssumptionFailed(description, t);
>         notifier.fireTestIgnored(description);
>     }
> }
\ No newline at end of file
