0a1,14
> import com.artipie.http.auth.AuthUser;
> import com.artipie.http.auth.Authentication;
> import com.artipie.http.auth.Authentication.Single;
> import com.artipie.http.auth.Permissions;
> import com.artipie.http.auth.UserPermissions;
> import com.artipie.http.rs.RsStatus;
> import java.util.concurrent.CompletableFuture;
> import java.util.function.Function;
> import static java.util.concurrent.CompletableFuture.completedFuture;
> import static java.util.concurrent.CompletableFuture.allOf;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.equalTo;
> import static org.hamcrest.Matchers.notNullValue;
> 
6a21,24
>     final UserPermissions perms = new UserPermissions(
>         () -> new AuthUser("alice", "group1", "group2"),
>         (user, act) -> true
>     );
21c39
<                     return StandardRs.OK;
---
>                 return new RsStatus.Ok();
24,35c42,43
<             (headers, rline) -> CompletableFuture.completedFuture(
<                 new AuthScheme.Result() {
<                     @Override
<                     public Optional<Authentication.User> user() {
<                         return Optional.of(new Authentication.User("alice"));
<                     }
< 
<                     @Override
<                     public String challenge() {
<                         return "";
<                     }
<                 }
---
>         (headers, rline) -> completedFuture(
>             new Single(perms, action)
42c50
<             (status, headers, body) -> CompletableFuture.allOf()
---
>         (status, headers, body) -> allOf()
44c52
<         MatcherAssert.assertThat(
---
>     assertThat(
47c55
<             new IsEqual<>(line)
---
>         notNullValue()
49c57
<         MatcherAssert.assertThat(
---
>     assertThat(
52c60
<             new IsEqual<>(action)
---
>         equalTo(action)
