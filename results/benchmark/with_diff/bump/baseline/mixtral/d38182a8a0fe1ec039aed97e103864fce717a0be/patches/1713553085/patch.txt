import com.artipie.http.auth.AuthUser;
import com.artipie.http.auth.Authentication;
import com.artipie.http.auth.Permission;
import com.artipie.http.auth.Permissions;
import com.artipie.http.auth.SimpleAuthUser;
import com.artipie.http.auth.UserPermissions;
import com.artipie.http.slice.AuthScheme;
import com.artipie.http.slice.AuthScheme.Result;
import com.artipie.http.slice.Slice;
import com.artipie.http.ssl.SslConfigs;
import io.reactivex.CompletableFuture;
import java.util.Collections;
import java.util.concurrent.ExecutionException;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;
import reactor.core.publisher.MonoProcessor;
import reactor.core.publisher.Sinks;

@Test
void testScope() throws ExecutionException, InterruptedException {
    final String line = "GET /resource.txt HTTP/1.1";
    final String action = "foo:bar:baz";
    final AtomicReference<String> caction = new AtomicReference<>();
    final AtomicReference<String> cline = new AtomicReference<>();
    final UserPermissions userPermissions = new UserPermissions(
        () -> new SimpleAuthUser("alice"),
        perms -> Collections.singleton("user")
    );
    final AuthUser authUser = new SimpleAuthUser("alice");
    new AuthScopeSlice(
        new Slice.Root() {
            @Override
            public Response response(final String line, final Iterable<Map.Entry<String, String>> headers, final Publisher<ByteBuffer> body) {
                return StandardRs.OK;
            }
        },
        (headers, rline) -> CompletableFuture.completedFuture(
            new Result() {
                @Override
                public Optional<AuthUser> user() {
                    return Optional.of(authUser);
                }

                @Override
                public String challenge() {
                    return "";
                }
            }
        ),
        (user, act) -> {
            caction.set(act);
            return true;
        }
    ).response(line, Headers.EMPTY, Content.EMPTY).send(
        (status, headers, body) -> Mono.fromRunnable(() -> {})
    ).block();
    MatcherAssert.assertThat(
        "Request line passed to slice",
        cline.get(),
        new IsEqual<>(line)
    );
    MatcherAssert.assertThat(
        "Scope passed as action to permissions",
        caction.get(),
        new IsEqual<>(action)
    );
}