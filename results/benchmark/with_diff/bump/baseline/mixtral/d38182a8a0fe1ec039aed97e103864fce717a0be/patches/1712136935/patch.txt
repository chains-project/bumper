import com.artipie.http.auth.AuthUser;
import com.artipie.http.auth.Authentication;
import com.artipie.http.auth.Authentication.Single;
import com.artipie.http.auth.Permission;
import com.artipie.http.auth.Permissions;
import com.artipie.http.auth.UserPermissions;
import com.artipie.http.slice.Slice;
import com.artipie.http.ssl.SslUtils;
import com.artipie.security.perms.Action;
import com.artipie.security.perms.Action.Standard;
import com.artipie.security.perms.PermissionConfig;
import com.artipie.security.perms.User;
import com.artipie.security.perms.UserPermissions;
import java.util.Collections;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.function.Function;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import static com.artipie.http.auth.Permission.All;
import static com.artipie.http.auth.Permission.Any;
import static com.artipie.http.auth.Permission.ByName;
import static com.artipie.security.perms.Action.AllActions;
import static com.artipie.security.perms.Action.StandardActions;
import static com.artipie.security.perms.PermissionConfig.of;
import static com.artipie.security.perms.UserPermissions.singleUserPermissions;

@Test
void testScope() throws ExecutionException, InterruptedException {
    final String line = "GET /resource.txt HTTP/1.1";
    final String action = "foo:bar:baz";
    final AtomicReference<String> caction = new AtomicReference<>();
    final AtomicReference<String> cline = new AtomicReference<>();
    final User user = new User.Simple(Collections.emptySet(), SslUtils.perms());
    final Permission permission = new Permissions.Single(ByName.of("foo"), AllActions);
    final UserPermissions userPermissions = singleUserPermissions(permission, user);
    final Authentication authentication = new Authentication.Single(user, "test-realm");
    final Slice.Context ctx = new Slice.Context(
        authentication,
        new Permission$ByName(action, userPermissions),
        (AuthUser authUser, String s) -> true
    );
    new AuthScopeSlice().response(line, Headers.EMPTY, Content.EMPTY).send(
        (status, headers, body) -> CompletableFuture.allOf()
    ).apply(ctx).toCompletableFuture().get();
    MatcherAssert.assertThat(
        "Request line passed to slice",
        cline.get(),
        new IsEqual<>(line)
    );
    MatcherAssert.assertThat(
        "Scope passed as action to permissions",
        caction.get(),
        new IsEqual<>(action)
    );
}