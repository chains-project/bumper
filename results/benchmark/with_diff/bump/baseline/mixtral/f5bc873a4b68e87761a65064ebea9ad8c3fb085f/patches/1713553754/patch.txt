import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.ArtifactUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Component;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.archiver.Archiver;
import org.codehaus.plexus.archiver.ArchiverException;
import org.codehaus.plexus.archiver.manager.ArchiverManager;
import org.codehaus.plexus.components.interactivity.InteractionException;
import org.codehaus.plexus.components.interactivity.InteractiveInput;
import org.codehaus.plexus.components.interactivity.InteractiveInputProvider;
import org.codehaus.plexus.components.interactivity.Prompt;
import org.codehaus.plexus.components.interactivity.PromptResolver;
import org.codehaus.plexus.components.interactivity.io.InteractiveConsole;
import org.codehaus.plexus.components.interactivity.io.InteractiveConsoleException;
import org.codehaus.plexus.components.interactivity.io.Prompter;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Objects;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

@Mojo(name = "unpack-theme", threadSafe = true)
public class UnPackThemeMojo extends AbstractMojo {

    // ... other fields and methods

    @Override
    public void execute() throws MojoExecutionException {
        try {
            // ... existing code

            // ...

            // Extract the theme
            File themeDir = new File(outputDirectory, themeName);
            if (!themeDir.exists()) {
                themeDir.mkdir();
            }

            ArchiverManager archiverManager = (ArchiverManager) getContainer().lookup(ArchiverManager.ROLE);
            Archiver archiver = archiverManager.getArchiver("zip");
            archiver.setDestDirectory(themeDir);
            archiver.addDirectory(themeFile);
            archiver.createArchive();

            // ...

        } catch (DependencyResolutionRequiredException e) {
            getLog().error("Dependency resolution is required to proceed. Please ensure all dependencies are resolved before running the plugin.");
        } catch (ArchiverException | IOException e) {
            throw new MojoExecutionException("Failed to unpack theme", e);
        }
    }
}