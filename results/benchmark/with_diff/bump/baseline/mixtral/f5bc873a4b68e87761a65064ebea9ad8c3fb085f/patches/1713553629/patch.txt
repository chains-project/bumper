import org.apache.maven.artifact.ResolutionFailedException;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.IOUtil;

import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.Properties;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

public class UnPackThemeMojo extends AbstractMojo {

    // ...

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        // ...

        try {
            unpackTheme(themeJarFile, targetDir, properties, getLog());
        } catch (DependencyResolutionRequiredException e) {
            throw new MojoExecutionException("Unable to unpack theme", e);
        } catch (IOException e) {
            throw new MojoExecutionException("Unable to unpack theme", e);
        }

        // ...
    }

    // ...

    private void unpackTheme(File themeJarFile, File targetDir, Properties properties, org.apache.maven.plugin.logging.Log log)
            throws IOException, DependencyResolutionRequiredException {
        try (JarFile jarFile = new JarFile(themeJarFile)) {
            Enumeration<JarEntry> entries = jarFile.entries();
            while (entries.hasMoreElements()) {
                JarEntry entry = entries.nextElement();
                if (entry.isDirectory()) {
                    continue;
                }
                String entryName = entry.getName();
                if (entryName.startsWith("META-INF/") || entryName.startsWith("tobago-theme/")) {
                    File entryFile = new File(targetDir, entryName);
                    if (!entryFile.getParentFile().exists()) {
                        entryFile.getParentFile().mkdirs();
                    }
                    try (InputStream in = jarFile.getInputStream(entry)) {
                        try (FileOutputStream out = new FileOutputStream(entryFile)) {
                            FileUtils.copyStream(in, out);
                        }
                    }
                    if (entryName.endsWith(".properties")) {
                        Properties prop = new Properties();
                        try (FileReader reader = new FileReader(entryFile)) {
                            prop.load(reader);
                        }
                        properties.putAll(prop);
                    }
                }
            }
        }
    }
}