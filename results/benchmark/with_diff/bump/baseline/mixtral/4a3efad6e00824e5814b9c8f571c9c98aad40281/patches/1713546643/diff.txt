1c1,55
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.pades.PadesSignature;
> import eu.europa.esig.dss.pades.PadesSigner;
> import eu.europa.esig.dss.pades.PdfDocumentSignature;
> import eu.europa.esig.dss.pades.PdfSignatureParameters;
> import eu.europa.esig.dss.pades.tsl.TimestampToken;
> import eu.europa.esig.dss.token.DSSPrivateKeyEntry;
> import eu.europa.esig.dss.token.DSSPrivateKeySource;
> import eu.europa.esig.dss.token.DSSPublicKeyEntry;
> import eu.europa.esig.dss.token.DSSPublicKeySource;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.CertificateVerifier;
> import eu.europa.esig.dss.validation.SignedDocumentValidator;
> import eu.europa.esig.dss.validation.reports.Reports;
> import java.io.File;
> import java.io.InputStream;
> import java.security.KeyStore;
> import java.security.cert.X509Certificate;
> import java.util.List;
> 
> // ...
> 
> public class Signer {
> 
>     // ...
> 
>     private CertificateVerifier certificateVerifier = new CommonCertificateVerifier();
> 
>     // ...
> 
>     @Override
>     public void signPdf(InputStream inputStream, File outputFile, String signatureFieldName, KeyStore keyStore,
>                         String keyAlias, char[] keyPassword) throws Exception {
> 
>         // ...
> 
>         List<X509Certificate> certificates = getCertificates(keyStore, keyAlias);
> 
>         // ...
> 
>         PdfSignatureParameters parameters = new PdfSignatureParameters();
>         parameters.setSigningCertificateChain(certificates);
>         parameters.setReason("Test");
>         parameters.setLocation("Test");
> 
>         // ...
> 
>         PadesSigner signer = new PadesSigner(document, signerParameters);
>         PdfDocumentSignature pdfSignature = signer.sign(parameters);
> 
>         // ...
>     }
> 
>     // ...
> 
> }
\ No newline at end of file
