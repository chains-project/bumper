import eu.europa.esig.dss.pades.PadesSigner;
import eu.europa.esig.dss.pades.PadesSigningCertificate;
import eu.europa.esig.dss.pades.PdfBoxUtils;
import eu.europa.esig.dss.pades.PdfDocumentSignature;
import eu.europa.esig.dss.pades.PdfSignatureParameters;
import eu.europa.esig.dss.pades.PdfSigningCertificateSource;
import eu.europa.esig.dss.pades.tsl.PAdESTLManager;
import eu.europa.esig.dss.pades.tsl.PAdESTLProvider;
import eu.europa.esig.dss.pades.tsl.TSPSource;
import eu.europa.esig.dss.pades.validation.PdfDocumentValidator;
import eu.europa.esig.dss.pades.validation.reports.PdfValidationReport;
import eu.europa.esig.dss.signing.service.SigningDocumentValidator;
import eu.europa.esig.dss.signing.service.SigningService;
import eu.europa.esig.dss.token.TokenConstants;
import eu.europa.esig.dss.validation.CommonCertificateVerifier;
import eu.europa.esig.dss.validation.CertificateVerifier;
import eu.europa.esig.dss.validation.Processable;
import eu.europa.esig.dss.validation.reports.Reports;
import eu.europa.esig.dss.validation.CertificateWrapper;
import eu.europa.esig.dss.validation.SignedDocumentValidator;
import eu.europa.esig.dss.validation.reports.Reports;
import eu.europa.esig.dss.validation.AdvancedBaselineValidator;
import eu.europa.esig.dss.validation.CAdESSignatureValidator;
import eu.europa.esig.dss.validation.CMSSignatureValidator;
import eu.europa.esig.dss.validation.DSSDocument;
import eu.europa.esig.dss.validation.EPESSignaturesValidator;
import eu.europa.esig.dss.validation.IntermediateCertificateVerifier;
import eu.europa.esig.dss.validation.PKCS7SignatureValidator;
import eu.europa.esig.dss.validation.TSPSource;
import eu.europa.esig.dss.validation.reports.Reports;
import eu.europa.esig.dss.validation.reports.SimpleReport;
import eu.europa.esig.dss.validation.reports.SubFilterReport;
import eu.europa.esig.dss.validation.reports.TimestampReport;
import eu.europa.esig.dss.validation.reports.ValidationReport;
import eu.europa.esig.dss.validation.reports.jaxb.XmlAdESReport;
import eu.europa.esig.dss.validation.reports.jaxb.XmlCertificate;
import eu.europa.esig.dss.validation.reports.jaxb.XmlCertificateRefBySigRef;
import eu.europa.esig.dss.validation.reports.jaxb.XmlTimestamp;
import java.io.File;
import java.io.InputStream;
import java.security.KeyStore;
import java.security.Security;
import java.util.List;

// ...

public void signPdf(InputStream is, String outputFilePath,
                    String signatureName, String signatureReason,
                    String signatureContactInfo, String ocspUrl,
                    String tsaUrl, String certificateAlias,
                    String certificatePassword,
                    String timestampTokenAlias, String timestampTokenPassword)
        throws Exception {

    // ...

    // Initialize the signer
    PadesSigner signer = new PadesSigner(certificate);

    // Set the signing date
    signer.setSigningDate(new Date());

    // Set the reason for signing
    signer.setSigningReason(signatureReason);

    // Set the contact info
    signer.setSigningContactInfo(signatureContactInfo);

    // Set the location
    signer.setLocation("City, Country");

    // Set the certification level
    signer.setCertificationLevel(CertificationLevel.CERTIFIED_NO_CHANGES_ALLOWED);

    // Create a PDF signature parameters object
    PdfSignatureParameters params = new PdfSignatureParameters();

    // Set the appearance
    params.setSigningCertificate(new PadesSigningCertificate(certificate));
    params.setLocation("City, Country");
    params.setReason(signatureReason);
    params.setContactInfo(signatureContactInfo);
    params.setPageAppearance(PdfBoxUtils.getPageAppearance());

    // Set the timestamp
    if (tsaUrl != null && !tsaUrl.isEmpty()) {
        TSPSource tspSource = new SimpleTSPSource(tsaUrl);
        params.setTspSource(tspSource);
    }

    // Set the OCSP
    if (ocspUrl != null && !ocspUrl.isEmpty()) {
        params.setOcspSource(new SimpleOcspSource(ocspUrl));
    }

    // Create the PDF document signature
    PdfDocumentSignature pdfSignature = signer.sign(pdfDoc, params);

    // Save the signed PDF document
    pdfDoc.saveIncremental(outputFilePath);

    // ...
}