{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1836463382,
    "in_class_code": "@Configuration\npublic class SecurityConfig {\n    @Value(\"${jasypt.encryptor.password}\")\n    private String encryptorPassword;\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        PBEStringEncryptor encryptor = new PBEStringEncryptor();\n        StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\n        PBEConfig config = new PBEConfig();\n        config.setPassword(encryptorPassword);\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        config.setKeyObtentionIterations(\"1000\");\n        config.setPoolSize(\"1\");\n        config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n        config.setProviderName(\"SunJCE\");\n        config.setIvGeneratorClassName(\"org.jasypt.iv.RandomIvGenerator\");\n        config.setStringOutputType(\"base64\");\n        encryptor.setConfig(config);\n        passwordEncryptor.setPasswordEncoder(encryptor);\n        return passwordEncryptor;\n    }\n}",
    "qualified_in_class_code": "@org.springframework.context.annotation.Configuration\npublic class SecurityConfig {\n    @org.springframework.beans.factory.annotation.Value(\"${jasypt.encryptor.password}\")\n    private java.lang.String encryptorPassword;\n\n    @org.springframework.context.annotation.Bean\n    public org.acegisecurity.providers.encoding.PasswordEncoder passwordEncoder() {\n        org.jasypt.encryption.pbe.PBEStringEncryptor encryptor = new org.jasypt.encryption.pbe.PBEStringEncryptor();\n        org.jasypt.util.password.StrongPasswordEncryptor passwordEncryptor = new org.jasypt.util.password.StrongPasswordEncryptor();\n        org.jasypt.encryption.pbe.config.PBEConfig config = new org.jasypt.encryption.pbe.config.PBEConfig();\n        config.setPassword(encryptorPassword);\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        config.setKeyObtentionIterations(\"1000\");\n        config.setPoolSize(\"1\");\n        config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n        config.setProviderName(\"SunJCE\");\n        config.setIvGeneratorClassName(\"org.jasypt.iv.RandomIvGenerator\");\n        config.setStringOutputType(\"base64\");\n        encryptor.setConfig(config);\n        passwordEncryptor.setPasswordEncoder(encryptor);\n        return passwordEncryptor;\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java:[57,14] error: cannot find symbol",
        "client_file_path": "/geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
        "client_line_position": "57"
    },
    "client_end_line_number": 64,
    "client_line_number": 48,
    "method_code": "@Bean\n    public PasswordEncoder passwordEncoder() {\n        PBEStringEncryptor encryptor = new PBEStringEncryptor();\n        StrongPasswordEncryptor passwordEncryptor = new StrongPasswordEncryptor();\n        PBEConfig config = new PBEConfig();\n        config.setPassword(encryptorPassword);\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        config.setKeyObtentionIterations(\"1000\");\n        config.setPoolSize(\"1\");\n        config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n        config.setProviderName(\"SunJCE\");\n        config.setIvGeneratorClassName(\"org.jasypt.iv.RandomIvGenerator\");\n        config.setStringOutputType(\"base64\");\n        encryptor.setConfig(config);\n        passwordEncryptor.setPasswordEncoder(encryptor);\n        return passwordEncryptor;\n    }",
    "qualified_code": "@org.springframework.context.annotation.Bean\npublic org.acegisecurity.providers.encoding.PasswordEncoder passwordEncoder() {\n    org.jasypt.encryption.pbe.PBEStringEncryptor encryptor = new org.jasypt.encryption.pbe.PBEStringEncryptor();\n    org.jasypt.util.password.StrongPasswordEncryptor passwordEncryptor = new org.jasypt.util.password.StrongPasswordEncryptor();\n    org.jasypt.encryption.pbe.config.PBEConfig config = new org.jasypt.encryption.pbe.config.PBEConfig();\n    config.setPassword(encryptorPassword);\n    config.setAlgorithm(\"PBEWithMD5AndDES\");\n    config.setKeyObtentionIterations(\"1000\");\n    config.setPoolSize(\"1\");\n    config.setSaltGeneratorClassName(\"org.jasypt.salt.RandomSaltGenerator\");\n    config.setProviderName(\"SunJCE\");\n    config.setIvGeneratorClassName(\"org.jasypt.iv.RandomIvGenerator\");\n    config.setStringOutputType(\"base64\");\n    encryptor.setConfig(config);\n    passwordEncryptor.setPasswordEncoder(encryptor);\n    return passwordEncryptor;\n}",
    "method_name": "passwordEncoder"
}