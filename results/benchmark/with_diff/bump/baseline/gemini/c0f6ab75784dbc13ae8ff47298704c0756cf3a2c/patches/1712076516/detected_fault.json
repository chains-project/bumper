{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1842851631,
    "in_class_code": "public final class SonarLintEngine extends AbstractSonarLintEngine {\n    // The order of these initialisations is important as each field is dependent upon the previous\n    // one.\n    private static final String SONAR_JAVA_PLUGIN_JAR_NAME = \"sonar-java-plugin.jar\";\n\n    private static final Path sonarJavaPlugin = getOrDownloadSonarJavaPlugin().getPath();\n\n    private static final StandaloneGlobalConfiguration globalConfig = buildGlobalConfig();\n\n    private static final LoadedPluginsThatDoesNotCloseLoader loadedPlugins = getLoadedPlugins();\n\n    private static final Map<String, SonarLintRuleDefinition> allRulesDefinitionsByKey = computeAllRulesDefinitionsByKey();\n\n    private static final AnalysisEngineConfiguration analysisGlobalConfig = buildAnalysisEngineConfiguration();\n\n    // The only instance of this singleton class\n    private static SonarLintEngine theOnlyInstance;\n\n    // We need to reinitialise it before starting analysis of any source files on any rules.\n    private AnalysisEngine analysisEngine;\n\n    private SonarLintEngine() {\n        super(null);\n        setLogging(null);\n        this.analysisEngine = new AnalysisEngine(analysisGlobalConfig, loadedPlugins, null);\n    }\n\n    /**\n     * Store the path to SonarJava plugin and if it is downloaded or fetched from cache.\n     */\n    public static class SonarJavaJarHolder {\n        private final Path path;\n\n        private final boolean downloaded;\n\n        SonarJavaJarHolder(Path path, boolean downloaded) {\n            this.path = path;\n            this.downloaded = downloaded;\n        }\n\n        public Path getPath() {\n            return path;\n        }\n\n        public boolean isDownloaded() {\n            return downloaded;\n        }\n    }\n\n    private static AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n        return AnalysisEngineConfiguration.builder().addEnabledLanguages(globalConfig.getEnabledLanguages()).setClientPid(globalConfig.getClientPid()).setExtraProperties(globalConfig.extraProperties()).setWorkDir(globalConfig.getWorkDir()).setModulesProvider(globalConfig.getModulesProvider()).build();\n    }\n\n    /**\n     * Overriding this class to ensure that plugin instance loader never closes throughout the\n     * lifecycle of JVM.\n     */\n    public static class LoadedPluginsThatDoesNotCloseLoader extends LoadedPlugins {\n        public LoadedPluginsThatDoesNotCloseLoader(Map<String, Plugin> pluginInstancesByKeys, PluginInstancesLoader pluginInstancesLoader) {\n            super(pluginInstancesByKeys, pluginInstancesLoader);\n        }\n\n        @Override\n        public void unload() {\n            // Prevent closing of `pluginInstancesLoader`\n        }\n    }\n}",
    "qualified_in_class_code": "public final class SonarLintEngine extends org.sonarsource.sonarlint.core.AbstractSonarLintEngine {\n    // The order of these initialisations is important as each field is dependent upon the previous\n    // one.\n    private static final java.lang.String SONAR_JAVA_PLUGIN_JAR_NAME = \"sonar-java-plugin.jar\";\n\n    private static final java.nio.file.Path sonarJavaPlugin = sorald.sonar.SonarLintEngine.getOrDownloadSonarJavaPlugin().getPath();\n\n    private static final org.sonarsource.sonarlint.core.client.api.standalone.StandaloneGlobalConfiguration globalConfig = sorald.sonar.SonarLintEngine.buildGlobalConfig();\n\n    private static final sorald.sonar.SonarLintEngine.LoadedPluginsThatDoesNotCloseLoader loadedPlugins = sorald.sonar.SonarLintEngine.getLoadedPlugins();\n\n    private static final java.util.Map<java.lang.String, org.sonarsource.sonarlint.core.rule.extractor.SonarLintRuleDefinition> allRulesDefinitionsByKey = sorald.sonar.SonarLintEngine.computeAllRulesDefinitionsByKey();\n\n    private static final org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration analysisGlobalConfig = sorald.sonar.SonarLintEngine.buildAnalysisEngineConfiguration();\n\n    // The only instance of this singleton class\n    private static sorald.sonar.SonarLintEngine theOnlyInstance;\n\n    // We need to reinitialise it before starting analysis of any source files on any rules.\n    private org.sonarsource.sonarlint.core.analysis.AnalysisEngine analysisEngine;\n\n    private SonarLintEngine() {\n        super(null);\n        setLogging(null);\n        this.analysisEngine = new org.sonarsource.sonarlint.core.analysis.AnalysisEngine(sorald.sonar.SonarLintEngine.analysisGlobalConfig, sorald.sonar.SonarLintEngine.loadedPlugins, null);\n    }\n\n    /**\n     * Store the path to SonarJava plugin and if it is downloaded or fetched from cache.\n     */\n    public static class SonarJavaJarHolder {\n        private final java.nio.file.Path path;\n\n        private final boolean downloaded;\n\n        SonarJavaJarHolder(java.nio.file.Path path, boolean downloaded) {\n            this.path = path;\n            this.downloaded = downloaded;\n        }\n\n        public java.nio.file.Path getPath() {\n            return path;\n        }\n\n        public boolean isDownloaded() {\n            return downloaded;\n        }\n    }\n\n    private static org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n        return org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.builder().addEnabledLanguages(sorald.sonar.SonarLintEngine.globalConfig.getEnabledLanguages()).setClientPid(sorald.sonar.SonarLintEngine.globalConfig.getClientPid()).setExtraProperties(sorald.sonar.SonarLintEngine.globalConfig.extraProperties()).setWorkDir(sorald.sonar.SonarLintEngine.globalConfig.getWorkDir()).setModulesProvider(sorald.sonar.SonarLintEngine.globalConfig.getModulesProvider()).build();\n    }\n\n    /**\n     * Overriding this class to ensure that plugin instance loader never closes throughout the\n     * lifecycle of JVM.\n     */\n    public static class LoadedPluginsThatDoesNotCloseLoader extends org.sonarsource.sonarlint.core.plugin.commons.LoadedPlugins {\n        public LoadedPluginsThatDoesNotCloseLoader(java.util.Map<java.lang.String, org.sonar.api.Plugin> pluginInstancesByKeys, org.sonarsource.sonarlint.core.plugin.commons.loading.PluginInstancesLoader pluginInstancesLoader) {\n            super(pluginInstancesByKeys, pluginInstancesLoader);\n        }\n\n        @java.lang.Override\n        public void unload() {\n            // Prevent closing of `pluginInstancesLoader`\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   method addEnabledLanguages(java.util.Set<org.sonarsource.sonarlint.core.commons.Language>)\n  location: class org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.Builder\n",
        "error_message": "[ERROR] /sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java:[163,17] cannot find symbol",
        "client_file_path": "/sorald/sorald/src/main/java/sorald/sonar/SonarLintEngine.java",
        "client_line_position": "163"
    },
    "client_end_line_number": 169,
    "client_line_number": 161,
    "method_code": "private static AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n        return AnalysisEngineConfiguration.builder()\n                .addEnabledLanguages(globalConfig.getEnabledLanguages())\n                .setClientPid(globalConfig.getClientPid())\n                .setExtraProperties(globalConfig.extraProperties())\n                .setWorkDir(globalConfig.getWorkDir())\n                .setModulesProvider(globalConfig.getModulesProvider())\n                .build();\n    }",
    "qualified_code": "private static org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration buildAnalysisEngineConfiguration() {\n    return org.sonarsource.sonarlint.core.analysis.api.AnalysisEngineConfiguration.builder().addEnabledLanguages(sorald.sonar.SonarLintEngine.globalConfig.getEnabledLanguages()).setClientPid(sorald.sonar.SonarLintEngine.globalConfig.getClientPid()).setExtraProperties(sorald.sonar.SonarLintEngine.globalConfig.extraProperties()).setWorkDir(sorald.sonar.SonarLintEngine.globalConfig.getWorkDir()).setModulesProvider(sorald.sonar.SonarLintEngine.globalConfig.getModulesProvider()).build();\n}",
    "method_name": "buildAnalysisEngineConfiguration"
}