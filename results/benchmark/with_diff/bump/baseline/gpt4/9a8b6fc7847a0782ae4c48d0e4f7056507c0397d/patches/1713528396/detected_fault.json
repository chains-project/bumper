{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 447212746,
    "in_class_code": "// TODO: review this AI generated patch!\n// import org.jasypt.spring.security.PBEPasswordEncoder; // This line was removed because the package does not exist anymore\n/**\n * Password Encoder using symmetric encryption\n *\n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n *\n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n *\n * @author Lorenzo Natali\n */\npublic class GeoStorePBEPasswordEncoder extends AbstractGeoStorePasswordEncoder {\n    StandardPBEStringEncryptor stringEncrypter;\n\n    StandardPBEByteEncryptor byteEncrypter;\n\n    private String providerName;\n\n    private String algorithm;\n\n    private String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n    private KeyStoreProvider keystoreProvider;\n\n    @Override\n    protected PasswordEncoder createStringEncoder() {\n        byte[] password = lookupPasswordFromKeyStore();\n        char[] chars = toChars(password);\n        try {\n            stringEncrypter = new StandardPBEStringEncryptor();\n            stringEncrypter.setPasswordCharArray(chars);\n            if ((getProviderName() != null) && (!getProviderName().isEmpty())) {\n                stringEncrypter.setProviderName(getProviderName());\n            }\n            stringEncrypter.setAlgorithm(getAlgorithm());\n            PBEPasswordEncoder encoder = new PBEPasswordEncoder();\n            encoder.setPbeStringEncryptor(stringEncrypter);\n            return encoder;\n        } finally {\n            scramble(password);\n            scramble(chars);\n        }\n    }\n}",
    "qualified_in_class_code": "// TODO: review this AI generated patch!\n// import org.jasypt.spring.security.PBEPasswordEncoder; // This line was removed because the package does not exist anymore\n/**\n * Password Encoder using symmetric encryption\n *\n * The salt parameter is not used, this implementation computes a random salt as\n * default.\n *\n * {@link #isPasswordValid(String, String, Object)}\n * {@link #encodePassword(String, Object)}\n *\n * @author Lorenzo Natali\n */\npublic class GeoStorePBEPasswordEncoder extends it.geosolutions.geostore.core.security.password.AbstractGeoStorePasswordEncoder {\n    org.jasypt.encryption.pbe.StandardPBEStringEncryptor stringEncrypter;\n\n    org.jasypt.encryption.pbe.StandardPBEByteEncryptor byteEncrypter;\n\n    private java.lang.String providerName;\n\n    private java.lang.String algorithm;\n\n    private java.lang.String keyAliasInKeyStore = KeyStoreProviderImpl.CONFIGPASSWORDKEY;\n\n    private it.geosolutions.geostore.core.security.password.KeyStoreProvider keystoreProvider;\n\n    @java.lang.Override\n    protected org.acegisecurity.providers.encoding.PasswordEncoder createStringEncoder() {\n        byte[] password = lookupPasswordFromKeyStore();\n        char[] chars = it.geosolutions.geostore.core.security.password.SecurityUtils.toChars(password);\n        try {\n            stringEncrypter = new org.jasypt.encryption.pbe.StandardPBEStringEncryptor();\n            stringEncrypter.setPasswordCharArray(chars);\n            if ((getProviderName() != null) && (!getProviderName().isEmpty())) {\n                stringEncrypter.setProviderName(getProviderName());\n            }\n            stringEncrypter.setAlgorithm(getAlgorithm());\n            it.geosolutions.geostore.core.security.password.PBEPasswordEncoder encoder = new it.geosolutions.geostore.core.security.password.PBEPasswordEncoder();\n            encoder.setPbeStringEncryptor(stringEncrypter);\n            return encoder;\n        } finally {\n            it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(password);\n            it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(chars);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java:[103,36] error: cannot find symbol",
        "client_file_path": "/geostore/src/core/security/src/main/java/it/geosolutions/geostore/core/security/password/GeoStorePBEPasswordEncoder.java",
        "client_line_position": "103"
    },
    "client_end_line_number": 111,
    "client_line_number": 89,
    "method_code": "@Override\n\tprotected PasswordEncoder createStringEncoder() {\n\t\tbyte[] password = lookupPasswordFromKeyStore();\n\n\t\tchar[] chars = toChars(password);\n\t\ttry {\n\t\t\tstringEncrypter = new StandardPBEStringEncryptor();\n\t\t\tstringEncrypter.setPasswordCharArray(chars);\n\n\t\t\tif (getProviderName() != null && !getProviderName().isEmpty()) {\n\t\t\t\tstringEncrypter.setProviderName(getProviderName());\n\t\t\t}\n\t\t\tstringEncrypter.setAlgorithm(getAlgorithm());\n\n\t\t\tPBEPasswordEncoder encoder = new PBEPasswordEncoder();\n\t\t\tencoder.setPbeStringEncryptor(stringEncrypter);\n\n\t\t\treturn encoder;\n\t\t} finally {\n\t\t\tscramble(password);\n\t\t\tscramble(chars);\n\t\t}\n\t}",
    "qualified_code": "@java.lang.Override\nprotected org.acegisecurity.providers.encoding.PasswordEncoder createStringEncoder() {\n    byte[] password = lookupPasswordFromKeyStore();\n    char[] chars = it.geosolutions.geostore.core.security.password.SecurityUtils.toChars(password);\n    try {\n        stringEncrypter = new org.jasypt.encryption.pbe.StandardPBEStringEncryptor();\n        stringEncrypter.setPasswordCharArray(chars);\n        if ((getProviderName() != null) && (!getProviderName().isEmpty())) {\n            stringEncrypter.setProviderName(getProviderName());\n        }\n        stringEncrypter.setAlgorithm(getAlgorithm());\n        it.geosolutions.geostore.core.security.password.PBEPasswordEncoder encoder = new it.geosolutions.geostore.core.security.password.PBEPasswordEncoder();\n        encoder.setPbeStringEncryptor(stringEncrypter);\n        return encoder;\n    } finally {\n        it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(password);\n        it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(chars);\n    }\n}",
    "method_name": "createStringEncoder"
}