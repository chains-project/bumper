import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.representer.Representer;
import org.yaml.snakeyaml.nodes.Tag;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.Yaml;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.time.ZoneId;
import java.time.LocalDate;
import com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct;
import com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct;
import com.premiumminds.billy.core.test.trust.TrustedTagInspector;

public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {
    final LoaderOptions loadingConfig = new LoaderOptions();
    loadingConfig.setTagInspector(new TrustedTagInspector());
    final Representer representer = new Representer(new org.yaml.snakeyaml.DumperOptions());
    final Tag zoneIdTag = new Tag("!ZoneId");
    representer.addClassTag(java.time.ZoneId.class, zoneIdTag);
    final Tag localDateTag = new Tag("!LocalDate");
    representer.addClassTag(java.time.LocalDate.class, localDateTag);
    final Constructor constructor = new Constructor(clazz, loadingConfig) {
        {
            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, "ZoneId"));
            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, "LocalDate"));
            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
        }
    };
    Yaml yaml = new Yaml(constructor, representer);
    try {
        return (T) yaml.load(new BufferedReader(new FileReader(path)));
    } catch (IOException e) {
        throw new RuntimeException(e);
    }
}