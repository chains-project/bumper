1,3c1,12
< public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
> import org.yaml.snakeyaml.LoaderOptions;
> import org.yaml.snakeyaml.nodes.Tag;
> import org.yaml.snakeyaml.representer.Representer;
> import org.yaml.snakeyaml.DumperOptions;
> import org.yaml.snakeyaml.constructor.Constructor;
> import org.yaml.snakeyaml.TypeDescription;
> import java.time.ZoneId;
> import java.time.LocalDate;
> import java.io.BufferedReader;
> import java.io.FileReader;
> import java.io.FileNotFoundException;
> import java.lang.reflect.Constructor;
5,6c14,18
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
---
> public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
>     LoaderOptions loadingConfig = new LoaderOptions();
>     loadingConfig.setTagInspector(new TagInspector());
>     Representer representer = new Representer(new DumperOptions());
>     Tag zoneIdTag = new Tag("!ZoneId");
8c20
<         final Tag localDateTag = new Tag("!LocalDate");
---
>     Tag localDateTag = new Tag("!LocalDate");
10,20c22,30
< 
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
< 
<         Yaml yaml = new Yaml(constructor, representer);
< 
---
>     Constructor constructor = new Constructor(clazz, loadingConfig) {
>         {
>             addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
>             addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
>             yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
>             yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
>         }
>     };
>     org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);
22,23c32,33
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
---
>         return (T) constructor.getConstructor(String.class).newInstance(path);
>     } catch (Exception e) {
26a37,48
> 
> static class TagInspector extends org.yaml.snakeyaml.introspector.TagInspector {
>     // empty
> }
> 
> static class JavaZoneIdConstruct extends org.yaml.snakeyaml.constructor.SafeConstructor.ConstructScalar {
>     // empty
> }
> 
> static class JavaLocalDateConstruct extends org.yaml.snakeyaml.constructor.SafeConstructor.ConstructScalar {
>     // empty
> }
\ No newline at end of file
