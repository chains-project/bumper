0a1,19
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.ExtendedCheckedBlobSource;
> import com.artipie.asto.ext.ExtendedLayout;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.google.common.base.Throwables;
> import org.hamcrest.Matcher;
> 
3,6c22,24
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final Storage storage = new MemoryStorage();
>     final ExtendedLayout layout = new ExtendedLayout();
>     final RepoName repoName = new RepoName.Simple("any");
8,34c26,39
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final Digest calculatedDigest = Digest.sha256("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7");
>     final CheckedBlobSource checkedBlobSource = new ExtendedCheckedBlobSource(content, calculatedDigest);
>     final Matcher<Throwable> notNullMatcher = not(nullValue());
>     final Matcher<Throwable> isInvalidDigestException = instanceOf(InvalidDigestException.class);
>     final Matcher<Throwable> messageContainsCalculatedDigest = new MessageContains(calculatedDigest.toString());
>     final Matcher<Throwable> messageContainsExpectedDigest = new MessageContains(digest);
>     AstoBlobs.put(new AstoBlobs(storage, layout, repoName), checkedBlobSource)
>         .toCompletableFuture()
>         .handle((blob, throwable) -> {
>             assertThat("Exception thrown", throwable, notNullMatcher);
>             assertThat("Exception is InvalidDigestException", throwable, isInvalidDigestException);
>             assertThat("Exception message contains calculated digest", throwable, messageContainsCalculatedDigest);
>             assertThat("Exception message contains expected digest", throwable, messageContainsExpectedDigest);
35a41,59
>         })
>         .join();
> }
> 
> private static class MessageContains implements Matcher<Throwable> {
>     private final String message;
> 
>     private MessageContains(String message) {
>         this.message = message;
>     }
> 
>     @Override
>     public boolean matches(Object item) {
>         return item instanceof Throwable && ((Throwable) item).getMessage().contains(message);
>     }
> 
>     @Override
>     public void describeTo(org.hamcrest.Description description) {
>         description.appendText("message contains ").appendValue(message);
37d60
<         ).join();
