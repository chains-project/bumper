1,3c1,3
< @Override
<         protected PasswordEncoder createStringEncoder() {
<                 byte[] password = lookupPasswordFromKeyStore();
---
> import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
> import org.jasypt.spring.security3.PasswordEncoder;
> import org.springframework.security.crypto.password.PBEPasswordEncoder;
5c5,8
<                 char[] chars = toChars(password);
---
> @java.lang.Override
> protected org.springframework.security.crypto.password.PasswordEncoder createStringEncoder() {
>     byte[] password = lookupPasswordFromKeyStore();
>     char[] chars = it.geosolutions.geostore.core.security.password.SecurityUtils.toChars(password);
7c10
<                         stringEncrypter = new StandardPBEStringEncryptor();
---
>         PooledPBEStringEncryptor stringEncrypter = new PooledPBEStringEncryptable();
9,10c12
< 
<                         if (getProviderName() != null && !getProviderName().isEmpty()) {
---
>         if ((getProviderName() != null) && (!getProviderName().isEmpty())) {
14,18c16,18
< 
<                         PBEPasswordEncoder encoder = new PBEPasswordEncoder();
<                         encoder.setPbeStringEncryptor(stringEncrypter);
< 
<                         return encoder;
---
>         PasswordEncoder encoder = new PasswordEncoder();
>         encoder.setPBEStringEncryptor(stringEncrypter);
>         return (PBEPasswordEncoder) encoder;
20,21c20,21
<                         scramble(password);
<                         scramble(chars);
---
>         it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(password);
>         it.geosolutions.geostore.core.security.password.SecurityUtils.scramble(chars);
