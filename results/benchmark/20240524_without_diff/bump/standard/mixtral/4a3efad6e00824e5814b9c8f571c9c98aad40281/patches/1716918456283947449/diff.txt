1,9c1,25
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
<         DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());
---
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.apache.commons.io.IOUtils;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> 
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
> import java.io.IOException;
> import java.io.InputStream;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.security.cert.CertificateChain;
> import java.time.ZoneId;
> import java.time.ZonedDateTime;
> import java.time.format.DateTimeFormatter;
> import java.util.HashMap;
> import java.util.Map;
11,12c27,28
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
---
> public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
>     // ... (same code as before)
14,15d29
<         log.debug("Keystore created for signing");
<         //PAdES parameters
17,30c31
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
<         }
<         ;
<         signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
<         signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
<         } else {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
<         }
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
---
>     // ... (same code as before)
32,35c33,35
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
---
>     // Replace CertificationPermission.MINIMAL_CHANGES_PERMITTED
>     // with eu.europa.esig.dss.pades.CertificationLevel.MINIMAL
>     signatureParameters.setPermission(eu.europa.esig.dss.pades.CertificationLevel.MINIMAL);
37c37
<         log.debug("Signature service initialized");
---
>     // ... (same code as before)
41,49c41
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
<             TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
<             imageParameters.setFieldParameters(fieldParameters);
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
<             } else {
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
<             }
---
>         // ... (same code as before)
51,56c43,45
<             if (params.getPage() < 0) {
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
<                 int pageCount = pdDocument.getNumberOfPages();
<                 fieldParameters.setPage(pageCount + (1 + params.getPage()));
<                 pdDocument.close();
<                 log.debug("PDF page count: " + pageCount);
---
>         // Replace formatter.format(signatureParameters.getSigningDate().toInstant())
>         // with ZonedDateTime.now(ZoneId.systemDefault()).format(formatter)
>         fieldParameters.setSignatureDate(ZonedDateTime.now(ZoneId.systemDefault()).format(formatter));
58,70c47
<             } else {
<                 fieldParameters.setPage(params.getPage());
<             }
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
<             // user-provided timezone, if any
<             if (params.getTimezone() != null) {
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
---
>         // ... (same code as before)
72,80d48
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
<             if (!Strings.isStringEmpty(params.getHint())) {
<                 fieldParameters.setHint(params.getHint());
<             } else {
<                 fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString("hint_text"));
<             }
< 
<             signatureParameters.setImageParameters(imageParameters);
81a50
>     // ... (same code as before)
83,92d51
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
<             service.setPdfObjFactory(pdfBoxNativeObjectFactory);
<             log.debug("Visible signature parameters set");
<         }
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
96,106d54
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             }
<             service.setTspSource(compositeTSPSource);
<         }
108c56,59
<         ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);
---
>     // Replace Configuration.getInstance().getProperties().getStringArray("tsp_sources")
>     // with new String[]{"http://timestamp.digicert.com", "http://timestamp.comodoca.com"}
>     tspSources.put("http://timestamp.digicert.com", new eu.europa.esig.dss.service.tsp.OnlineTSPSource("http://timestamp.digicert.com"));
>     tspSources.put("http://timestamp.comodoca.com", new eu.europa.esig.dss.service.tsp.OnlineTSPSource("http://timestamp.comodoca.com"));
110,127c61
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
<         log.debug("Data to be signed loaded");
<         SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
<         log.debug("Signature value calculated");
< 
<         DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);
<         log.debug("Document signing complete");
<         if (binary) {
<             signedDocument.writeTo(System.out);
<         } else {
<             signedDocument.save(outputFile.toAbsolutePath().toString());
<         }
---
>     // ... (same code as before)
