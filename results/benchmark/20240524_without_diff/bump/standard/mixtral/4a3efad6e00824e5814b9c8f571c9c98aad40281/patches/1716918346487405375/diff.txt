0a1,52
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.enumerations.SignatureLevel;
> import eu.europa.esig.dss.enumerations.DigestAlgorithm;
> import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
> import eu.europa.esig.dss.spi.x509.tsp.OnlineTSPSource;
> import eu.europa.esig.dss.model.DSSDocument;
> import eu.europa.esig.dss.model.ToBeSigned;
> import eu.europa.esig.dss.model.SignatureValue;
> import eu.europa.esig.dss.pades.PdfBoxNativeObjectFactory;
> import eu.europa.esig.dss.pades.TableSignatureFieldParameters;
> import eu.europa.esig.dss.pades.SignatureImageParameters;
> import eu.europa.esig.dss.pades.pdfbox.PdfBoxNativeTableObjectFactory;
> import eu.europa.esig.dss.diagnostic.DiagnosticData;
> import eu.europa.esig.dss.diagnostic.SignatureDiagnosticData;
> import eu.europa.esig.dss.diagnostic.TimestampDiagnosticData;
> import eu.europa.esig.dss.diagnostic.RevocationDiagnosticData;
> import org.apache.pdfbox.pdmodel.PDDocument;
> import org.apache.pdfbox.pdmodel.PDPage;
> import org.openpdfsign.dss.PDFSignatureService;
> import org.openpdfsign.dss.PDFSignatureServiceFactory;
> import org.openpdfsign.Signer;
> import org.openpdfsign.dss.SignerParameters;
> import org.openpdfsign.dss.SignatureParameters;
> import org.openpdfsign.dss.PDFSignatureServiceFactory;
> import java.io.ByteArrayInputStream;
> import java.io.File;
> import java.io.FileInputStream;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.io.InputStream;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.nio.charset.StandardCharsets;
> import java.security.KeyStore;
> import java.security.KeyStoreException;
> import java.security.NoSuchAlgorithmException;
> import java.security.cert.Certificate;
> import java.security.cert.CertificateException;
> import java.security.cert.CertificateFactory;
> import java.util.Collection;
> import java.util.Date;
> import java.util.HashMap;
> import java.util.List;
> import java.util.Map;
> import java.util.stream.Collectors;
> import java.util.stream.Stream;
> 
3,8d54
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
10,11d55
< 
<         //load certificate and private key
13,15d56
< 
<         log.debug("Keystore created for signing");
<         //PAdES parameters
17,18c58
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
---
>     String keyAlias = "";
20c60
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>         keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d61
<         ;
25c64
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
31,32d69
< 
<         // Create common certificate verifier
34d70
<         // Create PAdESService for signature
36,39d71
< 
<         log.debug("Signature service initialized");
< 
<         // Initialize visual signature and configure
44d75
< 
48c79
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d80
< 
56,57d85
<                 log.debug("PDF page count: " + pageCount);
< 
61,66c89,91
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
---
>         fieldParameters.setOriginX((params.getLeft() * Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * Signer.POINTS_PER_MM) * 10.0F);
68d92
<             // user-provided timezone, if any
79d102
< 
81,83c104
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         PdfBoxNativeTableObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
85d105
<             log.debug("Visible signature parameters set");
87,92c107
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
97c112
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>             Stream.of(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach((source) -> {
101c116
<                 params.getTSA().stream().forEach(source -> {
---
>             params.getTSA().stream().forEach((source) -> {
107d121
< 
109,111d122
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
113d123
<         log.debug("Data to be signed loaded");
115,120d124
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
<         log.debug("Signature value calculated");
< 
122d125
<         log.debug("Document signing complete");
