1,6c1,17
< /**
<      * AwsOcket can read and write large S3 content.
<      * @throws Exception If fails
<      */
<     @Test
<     public void readsAndWritesLargeObjectContent() throws Exception {
---
> import com.jcabi.s3.Bucket;
> import com.jcabi.s3.Ocket;
> import com.jcabi.s3.Ocket.Text;
> import org.apache.commons.lang3.RandomStringUtils;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.equalTo;
> import java.lang.String;
> import static java.lang.String.format;
> import java.nio.file.Files;
> import java.nio.file.Paths;
> import java.nio.charset.StandardCharsets;
> import static java.util.concurrent.TimeUnit.SECONDS;
> import static java.util.stream.Collectors.joining;
> import static java.util.stream.IntStream.range;
> 
> @org.junit.Test
> public void readsAndWritesLargeObjectContent() throws java.lang.Exception {
10c21,22
<         final String data = RandomStringUtils.random(Tv.HUNDRED * Tv.THOUSAND);
---
>     final int size = 100 * 1000;
>     final String data = range(0, size).mapToObj(i -> format("%04d", i)).collect(joining(""));
13c25,26
<             MatcherAssert.assertThat(ocket.read(), Matchers.equalTo(data));
---
>         final String content = new String(Files.readAllBytes(Paths.get(name)), StandardCharsets.UTF_8);
>         assertThat(content, equalTo(data));
