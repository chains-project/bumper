import com.artipie.asto.Content;
import com.artipie.asto.CheckedBlobSource;
import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.DefaultLayout;
import com.artipie.docker.asto.DefaultDigest.Sha256;
import com.artipie.docker.RepoName;
import com.artipie.docker.error.InvalidDigestException;
import org.hamcrest.MatcherAssert;
import org.hamcrest.core.IsInstanceOf;
import org.hamcrest.core.StringContains;
import org.hamcrest.core.StringDoesNotContain;
import org.hamcrest.core.StringStartsWith;
import org.junit.jupiter.api.Test;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import static com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX;
import static com.google.common.base.Throwables.getRootCause;
import static com.google.common.io.BaseEncoding.base16;

@Test
void fixesOnDigestMismatch() {
    final InMemoryStorage storage = new InMemoryStorage();
    final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
    final String digest = "123";
    blobs.put(new CheckedBlobSource(new Content.From("data".getBytes()), new Sha256(digest)))
            .toCompletableFuture()
            .handle((blob, throwable) -> {
                MatcherAssert.assertThat("Exception thrown", throwable, new IsInstanceOf(InvalidDigestException.class));
                MatcherAssert.assertThat("Exception message contains calculated digest",
                        getRootCause(throwable).getMessage(),
                        new StringStartsWith(
                                new StringBuilder()
                                        .append(base16().encode(base16().decode(new StringBuilder()
                                                .append(SHA256_PREFIX)
                                                .append(digest)
                                                .toString()))).toString()));
                MatcherAssert.assertThat("Exception message contains expected digest",
                        getRootCause(throwable).getMessage(),
                        new StringContains(new StringBuilder()
                                .append(SHA256_PREFIX)
                                .append(digest)
                                .toString()));
                MatcherAssert.assertThat("Exception message does not contain calculated digest",
                        getRootCause(throwable).getMessage(),
                        new StringDoesNotContain(new StringBuilder()
                                .append(base16().encode(base16().decode(new StringBuilder()
                                        .append(SHA256_PREFIX)
                                        .append(base16().encode(base16().decode(new StringBuilder()
                                                .append(SHA256_PREFIX)
                                                .append(digest)
                                                .toString()))).toString()))).toString()));
                return CompletableFuture.allOf();
            });
}