{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1390869998,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void fixesOnDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new DefaultDigest.Sha256(digest))).toCompletableFuture().handle((blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsInstanceOf(InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new StringStartsWith(new StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString()).build());\n        });\n        hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwable).getMessage(), new StringContains(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(digest).toString()));\n        MatcherAssert.assertThat(\"Exception message does not contain calculated digest\", Throwables.getRootCause(throwable).getMessage(), new StringDoesNotContain(new StringBuilder().append(BaseEncoding.base16().encode(BaseEncoding.base16().decode(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(BaseEncoding.base16().encode(BaseEncoding.base16().decode(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString())).toString())));\n        return CompletableFuture.allOf();\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void fixesOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.asto.DefaultDigest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString()).build());\n        });\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message does not contain calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringDoesNotContain(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString())).toString())));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[73,696] ')' expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "73"
    },
    "client_end_line_number": 76,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid fixesOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.asto.DefaultDigest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString()).build()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message does not contain calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringDoesNotContain(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString())).toString()));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid fixesOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.asto.DefaultDigest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString()).build());\n    });\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()));\n    org.hamcrest.MatcherAssert.assertThat(\"Exception message does not contain calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringDoesNotContain(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString())).toString())));\n    return java.util.concurrent.CompletableFuture.allOf();\n}",
    "method_name": "fixesOnDigestMismatch"
}