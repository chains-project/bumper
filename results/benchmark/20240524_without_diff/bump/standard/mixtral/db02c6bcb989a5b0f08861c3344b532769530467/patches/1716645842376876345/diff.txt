1c1,28
< // TODO: review this AI generated patch!
---
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.asto.Content;
> from com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.asto.Key;
> import com.artipie.asto.Mime;
> import com.artipie.asto.artipie.Artipie;
> import com.artipie.http.rs.Rs;
> import com.artipie.http.rs.RsDirect;
> import com.artipie.http.rt.Rt;
> import com.artipie.http.rt.RtCompat;
> import com.artipie.mime.MimeType;
> import io.reactivex.Completable;
> import io.reactivex.Single;
> import org.hamcrest.MatcherAssert;
> import org.junit.jupiter.api.Test;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import static com.google.common.base.Throwables.getRootCause;
> import static com.google.common.io.BaseEncoding.base16;
> import static org.hamcrest.CoreMatchers.*;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.containsString;
> import static org.hamcrest.Matchers.startsWith;
> 
4,13c31,49
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.asto.DefaultDigest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString()).build()));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()));
<         org.hamcrest.MatcherAssert.assertThat("Exception message does not contain calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringDoesNotContain(new java.lang.StringBuilder().append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(com.google.common.io.BaseEncoding.base16().encode(com.google.common.io.BaseEncoding.base16().decode(new java.lang.StringBuilder().append(com.artipie.docker.asto.DefaultDigest.SHA256_PREFIX).append(digest).toString()))).toString())).toString()));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     final InMemoryStorage storage = new InMemoryStorage();
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
>     final String digest = "123";
>     blobs.put(new CheckedBlobSource(new Content.From("data".getBytes()), new DefaultDigest.Sha256(digest)))
>             .toCompletableFuture()
>             .handle((blob, throwable) -> {
>                 MatcherAssert.assertThat("Exception thrown", throwable,
>                         is(instanceOf(InvalidDigestException.class)));
>                 MatcherAssert.assertThat("Exception message contains calculated digest",
>                         getRootCause(throwable).getMessage(),
>                         startsWith(new StringBuilder().append(base16().encode(base16().decode(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(digest)).toString())).toString()));
>             });
>     MatcherAssert.assertThat("Exception message contains expected digest",
>             getRootCause(throwable).getMessage(),
>             containsString(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(digest).toString()));
>     MatcherAssert.assertThat("Exception message does not contain calculated digest",
>             getRootCause(throwable).getMessage(),
>             not(containsString(new StringBuilder().append(base16().encode(base16().decode(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(base16().encode(base16().decode(new StringBuilder().append(DefaultDigest.SHA256_PREFIX).append(digest)).toString()))).toString())).toString())));
>     return Completable.complete();
