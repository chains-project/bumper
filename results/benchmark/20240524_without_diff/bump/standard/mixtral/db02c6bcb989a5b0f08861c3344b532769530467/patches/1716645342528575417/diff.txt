1c1,35
< @Test
---
> import org.hamcrest.MatcherAssert;
> import java.util.concurrent.CompletableFuture;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.core.IsEqual.equalTo;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.containsString;
> import static java.util.concurrent.CompletableFuture.allOf;
> import static com.google.common.base.Throwables.getRootCause;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.Memoized;
> import com.artipie.asto.NoSuchKeyException;
> import com.artipie.asto.ext.Keyed;
> import com.artipie.asto.ext.Paged;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.Digest;
> import com.artipie.docker.Docker;
> import com.artipie.http.rq.RqMethod;
> import com.artipie.http.rs.RsDirectory;
> import com.artipie.http.rs.RsMethodNotAllowed;
> import com.artipie.http.rs.RsNotFound;
> import com.artipie.http.rs.RsOk;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletionStage;
> import static java.util.stream.Collectors.toList;
> import java.util.stream.Stream;
> import org.hamcrest.Matcher;
> 
> @org.junit.jupiter.api.Test
4,6c38
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
8,35c40,50
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
<                 return CompletableFuture.allOf();
---
>     BlobSource source = new CheckedBlobSource(new Content.From("data".getBytes()), new Sha256(digest));
>     BlobId id = new BlobId(digest);
>     CompletionStage<Void> result = blobs.put(source, id)
>             .thenAccept(id -> {
>                 try {
>                     Key key = new Key.From(id.encoded());
>                     ByteBuffer content = new Memoized<Key, ByteBuffer>(key, (k) -> k.load()).get();
>                     String contentStr = StandardCharsets.UTF_8.decode(content).toString();
>                     assertThat("Decoded content does not match expected data", contentStr, equalTo("data"));
>                 } catch (NoSuchKeyException e) {
>                     throw new RuntimeException("Failed to load key from storage", e);
37c52,61
<         ).join();
---
>             })
>             .exceptionally(throwable -> {
>                 assertThat("Exception thrown", throwable, not(equalTo(null)));
>                 assertThat("Exception is InvalidDigestException", throwable.getCause(), instanceOf(InvalidDigestException.class));
>                 String message = throwable.getMessage();
>                 assertThat("Exception message contains calculated digest", message, containsString("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>                 assertThat("Exception message contains expected digest", message, containsString(digest));
>                 return null;
>             });
>     result.toCompletableFuture().join();
