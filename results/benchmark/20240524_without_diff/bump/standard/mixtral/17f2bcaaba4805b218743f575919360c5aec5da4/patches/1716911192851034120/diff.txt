0a1,21
> import org.junit.jupiter.api.Test;
> import static org.junit.jupiter.api.Assertions.assertEquals;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.CoordinateList;
> import org.locationtech.jts.geom.Envelope;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.SegmentString;
> import processing.core.PShape;
> import micycle.pgs.FastPolygonizer;
> import micycle.pgs.GEOM_FACTORY;
> import micycle.pgs.PEdge;
> import micycle.pgs.PGS;
> 
2d22
<         @Ignore
4c24
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>     Random r = new Random();
7,9c27,28
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
13c32
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
15,34c34,48
< 
<                         final Polygonizer polygonizerJTS = new Polygonizer();
<                         polygonizerJTS.setCheckRingsValid(false);
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
<                                 polygonizerJTS.add(l);
<                         });
< 
<                         long t1 = System.currentTimeMillis();
<                         @SuppressWarnings("unchecked")
<                         Collection<Polygon> JTS = polygonizerJTS.getPolygons();
<                         long t2 = System.currentTimeMillis();
<                         long timeJTS = t2 - t1;
< 
<                         t1 = System.currentTimeMillis();
<                         PShape FP = polygonize(nodedEdgesSet);
<                         t2 = System.currentTimeMillis();
<                         long timeFP = t2 - t1;
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
---
>         GeometryFactory factory = GEOM_FACTORY;
>         Envelope env = factory.getEnvelopeInternal();
>         for (Coordinate coord : factory.getCoordinateSequenceFactory().create(nodedEdgesSet.size())) {
>             env.expandToInclude(coord);
>         }
>         CoordinateList list = new CoordinateList(nodedEdgesSet.size());
>         for (PEdge edge : nodedEdgesSet) {
>             list.add(PGS.coordFromPVector(edge.a));
>             list.add(PGS.coordFromPVector(edge.b));
>         }
>         LineString lineString = factory.createLineString(list.toCoordinateArray());
>         lineString.setUserData(nodedEdgesSet);
>         List<Polygon> JTS = new ArrayList<>();
>         FastPolygonizer.polygonize(lineString, JTS, env);
>         PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
