1,14c1
< @Test
<         @Ignore
<         void testRobustnessRandomly() {
<                 Random r = new XoRoShiRo128PlusRandom(0);
<                 for (int k = 0; k < 100; k++) {
<                         List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
<                         }
<                         Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
<                         Collection<PEdge> nodedEdges = new ArrayList<>();
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
<                         Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
---
> package micycle.pgs;
16,22c3,15
<                         final Polygonizer polygonizerJTS = new Polygonizer();
<                         polygonizerJTS.setCheckRingsValid(false);
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
<                                 polygonizerJTS.add(l);
<                         });
---
> import static org.junit.jupiter.api.Assertions.assertEquals;
> import org.junit.jupiter.api.Test;
> import micycle.pgs.commons.PEdge;
> import micycle.pgs.PGS;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.CoordinateArraySequence;
> import org.locationtech.jNoding.INoding;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.operation.polygonize.Polygonizer;
> import java.util.ArrayList;
> import java.util.Collection;
24d16
<                         long t1 = System.currentTimeMillis();
26,28c18
<                         Collection<Polygon> JTS = polygonizerJTS.getPolygons();
<                         long t2 = System.currentTimeMillis();
<                         long timeJTS = t2 - t1;
---
> public class FastPolygonizationTest {
30,37c20,24
<                         t1 = System.currentTimeMillis();
<                         PShape FP = polygonize(nodedEdgesSet);
<                         t2 = System.currentTimeMillis();
<                         long timeFP = t2 - t1;
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
<                         assertEquals(JTS.size(), FP.getChildCount());
<                 }
<         }
\ No newline at end of file
---
>     @Test
>   @org.junit.jupiter.api.extension.ExtendWith(org.junit.jupiter.api.extension.Ignore.class)
>     void testRobustnessRandomly() {
>         java.util.Random r = new it.unimi.dsi.util.XoRoShiRo128PlusRandom(0);
>         for (int k = 
\ No newline at end of file
