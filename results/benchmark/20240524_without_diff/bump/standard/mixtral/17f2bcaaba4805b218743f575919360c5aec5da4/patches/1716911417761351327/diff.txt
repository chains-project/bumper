0a1,17
> import org.junit.jupiter.api.Test;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.geom.util.LinearComponentExtracter;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.SegmentString;
> import processing.core.PShape;
> import micycle.pgs.commons.PEdge;
> import micycle.pgs.GEOM_FACTORY;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.function.Consumer;
> import java.util.stream.Collectors;
> 
2d18
<         @Ignore
4c20
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>     java.util.Random r = new java.util.Random();
7,9c23,24
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
13c28
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
15,16c30
< 
<                         final Polygonizer polygonizerJTS = new Polygonizer();
---
>         final org.locationtech.jts.operation.polygonize.Polygonizer polygonizerJTS = new org.locationtech.jts.operation.polygonize.Polygonizer();
18,20c32,33
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach(( e) -> {
>             final LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
23,25c36,37
< 
<                         long t1 = System.currentTimeMillis();
<                         @SuppressWarnings("unchecked")
---
>         long t1 = java.lang.System.currentTimeMillis();
>         @java.lang.SuppressWarnings("unchecked")
27c39
<                         long t2 = System.currentTimeMillis();
---
>         long t2 = java.lang.System.currentTimeMillis();
29,32c41,43
< 
<                         t1 = System.currentTimeMillis();
<                         PShape FP = polygonize(nodedEdgesSet);
<                         t2 = System.currentTimeMillis();
---
>         t1 = java.lang.System.currentTimeMillis();
>         List<PShape> FP = FastPolygonizer.polygonize(nodedEdgesSet);
>         t2 = java.lang.System.currentTimeMillis();
35c46
<                         assertEquals(JTS.size(), FP.getChildCount());
---
>         assertEquals(JTS.size(), FP.size());
