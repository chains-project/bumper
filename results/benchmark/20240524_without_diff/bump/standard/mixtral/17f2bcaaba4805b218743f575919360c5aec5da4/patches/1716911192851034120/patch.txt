import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.CoordinateList;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import processing.core.PShape;
import micycle.pgs.FastPolygonizer;
import micycle.pgs.GEOM_FACTORY;
import micycle.pgs.PEdge;
import micycle.pgs.PGS;

@Test
void testRobustnessRandomly() {
    Random r = new Random();
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
        Collection<PEdge> nodedEdges = new ArrayList<>();
        nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
        GeometryFactory factory = GEOM_FACTORY;
        Envelope env = factory.getEnvelopeInternal();
        for (Coordinate coord : factory.getCoordinateSequenceFactory().create(nodedEdgesSet.size())) {
            env.expandToInclude(coord);
        }
        CoordinateList list = new CoordinateList(nodedEdgesSet.size());
        for (PEdge edge : nodedEdgesSet) {
            list.add(PGS.coordFromPVector(edge.a));
            list.add(PGS.coordFromPVector(edge.b));
        }
        LineString lineString = factory.createLineString(list.toCoordinateArray());
        lineString.setUserData(nodedEdgesSet);
        List<Polygon> JTS = new ArrayList<>();
        FastPolygonizer.polygonize(lineString, JTS, env);
        PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
        assertEquals(JTS.size(), FP.getChildCount());
    }
}