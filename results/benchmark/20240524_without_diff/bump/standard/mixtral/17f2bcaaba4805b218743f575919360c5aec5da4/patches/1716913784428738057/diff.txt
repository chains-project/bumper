0a1,23
> import org.junit.jupiter.api.Test;
> import static org.junit.jupiter.api.Assertions.assertEquals;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.CoordinateList;
> import org.locationtech.jts.geom.Envelope;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.noding.IntersectionAdder;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.SegmentString;
> import org.locationtech.jts.noding.STRtree;
> import org.locationtech.jts.operation.polygonize.Polygonizer;
> import processing.core.PApplet;
> import processing.core.PShape;
> import micycle.pgs.commons.PVector;
> import micycle.pgs.commons.PGS;
> 
2d24
<         @Ignore
4c26
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>     Random r = new Random();
7,9c29,30
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) ) }, null));
10a32,38
>         STRtree tree = new STRtree();
>         segmentStrings.forEach(segmentString -> tree.insert(segmentString.getEnvelopeInternal(), segmentString));
>         IntersectionAdder adder = new IntersectionAdder();
>         tree.query(new Envelope(0, 10000, 0, 13337), adder);
>         adder.getSegments().forEach(segment -> {
>             segmentStrings.add(new NodedSegmentString(segment, null));
>         });
12,16c40,44
<                         Collection<PEdge> nodedEdges = new ArrayList<>();
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
<                         Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
< 
<                         final Polygonizer polygonizerJTS = new Polygonizer();
---
>         Collection<micycle.pgs.commons.PEdge> nodedEdges = new ArrayList<>();
>         nodedSS.forEach(( ss) -> nodedEdges.add(new micycle.pgs.commons.PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
>         Collection<micycle.pgs.commons.PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
>         GeometryFactory gf = new GeometryFactory();
>         Polygonizer polygonizerJTS = new Polygonizer();
18,20c46,47
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach(( e) -> {
>             LineString l = gf.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
23d49
< 
29d54
< 
31c56,57
<                         PShape FP = polygonize(nodedEdgesSet);
---
>         PApplet pa = new PApplet();
>         PShape FP = FastPolygonizer.polygonize(nodedEdgesSet, pa);
34d59
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
