0a1,21
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.core.IsEqual.equalTo;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.Storage;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.digest.CanonicalBlob;
> import com.artipie.docker.digest.DefaultDigest;
> import com.artipie.docker.digest.Digest;
> import com.artipie.docker.digest.Digger;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Single;
> 
3c24
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new InMemoryStorage();
5c26,28
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
7a31,36
>     final Key key = new Key.From("data".getBytes(StandardCharsets.UTF_8));
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final CanonicalBlob canonicalBlob = new CanonicalBlob(content);
>     final Digest calculatedDigest = new DefaultDigest(
>         new Digger.Sha256().digest(Single.just(canonicalBlob))
>     );
9c38
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
---
>         new CheckedBlobSource(content, new Digest.Sha256(calculatedDigest.value()))
12,17c41,42
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
---
>             assertThat("Exception thrown", throwable, not(equalTo(null)));
>             assertThat(
19,20c44,45
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
---
>                 throwable,
>                 instanceOf(InvalidDigestException.class)
22c47
<                 MatcherAssert.assertThat(
---
>             assertThat(
25,28c50
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                 new StringContains(calculatedDigest.value())
30c52
<                 MatcherAssert.assertThat(
---
>             assertThat(
33c55
<                     new StringContains(true, digest)
---
>                 new StringContains(digest)
38a61,78
> 
> private static class StringContains implements org.hamcrest.Matcher<String> {
>     private final String value;
> 
>     StringContains(String value) {
>         this.value = value;
>     }
> 
>     @Override
>     public boolean matches(Object item) {
>         return ((String) item).contains(value);
>     }
> 
>     @Override
>     public void describeTo(org.hamcrest.Description description) {
>         description.appendText("string containing ").appendValue(value);
>     }
> }
\ No newline at end of file
