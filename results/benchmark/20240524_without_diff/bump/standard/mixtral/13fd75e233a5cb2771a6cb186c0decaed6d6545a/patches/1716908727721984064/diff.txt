0a1,18
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Memory;
> import com.artipie.asto.ext.ExtendedMemory;
> import com.artipie.asto.Key;
> import com.artipie.asto.Storage;
> import com.artipie.docker.Digest;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> 
3,6c21,22
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final Storage storage = new ExtendedMemory(new Memory.InMem());
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
8,34c24,32
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     blobs.put(new CheckedBlobSource(
>         new Content.From("data".getBytes(StandardCharsets.UTF_8)),
>         new Digest.Sha256(digest)
>     )).toCompletableFuture().handle((blob, throwable) -> {
>         assertThat("Exception thrown", throwable, not(nullValue()));
>         assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>         String message = Throwables.getRootCause(throwable).getMessage();
>         assertThat("Exception message contains calculated digest", message, new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>         assertThat("Exception message contains expected digest", message, new StringContains(digest));
35a34
>     }).join();
37c36,38
<         ).join();
---
> 
> interface StringContains extends org.hamcrest.Matcher<String> {
>     StringContains contains(boolean ignoreCase, String substring);
