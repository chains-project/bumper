{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 440737101,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void fixesDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(storage, new artip());\n        calculated digest;\n        final String expected = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new handle((blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new StringContains(expected)));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwstringContains(throwable.getMessage(), \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\")));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.StringContains(expected));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join()));\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void fixesDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.artip());\n        com.artipie.docker.asto.calculated digest;\n        final java.lang.String expected = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha23.handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.dorg.hamcrest.core.StringContains(expected)));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwstringContains(throwable.getMessage(), \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\")));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.StringContains(expected));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join()));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[75,14] ')' expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "75"
    },
    "client_end_line_number": 76,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid fixesDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artip calculated digest\n    final java.lang.String expected = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha23\n    .handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.dorg.hamcrest.core.StringContains(expected)));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwstringContains(throwable.getMessage(), \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\")));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.StringContains(expected));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid fixesDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.artip());\n    com.artipie.docker.asto.calculated digest;\n    final java.lang.String expected = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha23.handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.dorg.hamcrest.core.StringContains(expected)));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwstringContains(throwable.getMessage(), \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\")));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.StringContains(expected));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join()));\n}",
    "method_name": "fixesDigestMismatch"
}