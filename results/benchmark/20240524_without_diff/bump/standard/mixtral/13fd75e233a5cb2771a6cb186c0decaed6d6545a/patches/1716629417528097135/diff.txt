1d0
< // TODO: review this AI generated patch!
5c4,5
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artip calculated digest
---
>     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.artip.Default());
>     com.artipie.docker.asto.calculated.Default digest;
7,13c7,23
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha23
<     .handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.dorg.hamcrest.core.StringContains(expected)));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwstringContains(throwable.getMessage(), "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.StringContains(expected));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     java.util.concurrent.CompletableFuture<Void> result = blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes())),
>         new com.artipie.docker.Digest.Default.Handle() {
>         @Override
>         public com.artipie.docker.asto.calculated.Default handle(com.artipie.asto.Key key, Throwable error) throws Exception {
>             if (error != null) {
>                 org.hamcrest.MatcherAssert.assertThat("Exception thrown", error, new com.artipie.dorg.hamcrest.core.StringContains(expected));
>                 java.util.concurrent.ExecutionException ex = new java.util.concurrent.ExecutionException(error);
>                 java.lang.reflect.Method getCause = java.util.concurrent.ExecutionException.class.getDeclaredMethod("getCause");
>                 getCause.setAccessible(true);
>                 java.lang.Throwable rootCause = (java.lang.Throwable) getCause.invoke(ex);
>                 org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", rootCause, new org.hamcrest.core.StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>                 org.hamcreht.MatcherAssert.assertThat("Exception message contains expected digest", rootCause, new org.hamcrest.core.StringContains(expected));
>             }
>             return null;
>         }
>     });
>     result.get();
