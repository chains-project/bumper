0a1,25
> import com.artipie.asto.Content;
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.RepoName;
> import com.artipie.asto.ext.ExtendedBlobSemantics;
> import com.artipie.asto.layer.Layer;
> import com.artipie.asto.layer.Layered;
> import com.artipie.asto.storage.Storage;
> import com.artipie.docker.Digest;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlob;
> import com.artipie.docker.asto.DefaultLayout;
> import com.google.common.base.Throwables;
> import io.reactivex.Completable;
> import java.nio.ByteBuffer;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.hamcrest.CoreMatchers;
> import org.hamcrest.MatcherAssert;
> import org.junit.jupiter.api.Test;
> 
> import static com.artipie.docker.asto.IsNot.not;
> import static com.artipie.docker.asto.IsNull.isNull;
> 
3c28,29
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new MemoryStorage();
>     final RepoName repoName = new RepoName.Simple("any");
5c31,34
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         repoName,
>         new ExtendedBlobSemantics()
8,11c37,46
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
---
>     final byte[] data = "data".getBytes(StandardCharsets.UTF_8);
>     final Content content = Content.From(ByteBuffer.wrap(data));
>     final CheckedBlobSource checkedBlobSource = new CheckedBlobSource(content, new Sha256(digest));
>     final CheckedBlob checkedBlob = new CheckedBlob(checkedBlobSource);
>     final Layer layer = new Layer.Simple(checkedBlob, checkedBlob.contentLength(), checkedBlob.contentDigest());
>     final Layered layerd = new Layered.Simple(layer);
>     blobs.put(layerd, Completable.fromRunnable(() -> {}))
>         .toCompletableFuture()
>         .handle(
>             (throwable) -> {
15c50
<                     new IsNot<>(new IsNull<>())
---
>                     not(isNull())
20c55
<                     new IsInstanceOf(InvalidDigestException.class)
---
>                     CoreMatchers.instanceOf(InvalidDigestException.class)
25,26c60,61
<                     new StringContains(
<                         true,
---
>                     CoreMatchers.stringContainsInOrder(
>                         "Calculated digest",
33c68,71
<                     new StringContains(true, digest)
---
>                     CoreMatchers.stringContainsInOrder(
>                         "Expected digest",
>                         digest
>                     )
37c75,76
<         ).join();
---
>         )
>         .join();
