0a1,22
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.MemoryStorage;
> import com.artipie.asto.ext.ExtendedBlobSemantic;
> import com.artipie.asto.ext.ExtendedStorage;
> import com.artipie.asto.ext.Key;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Single;
> import java.util.concurrent.CompletionStage;
> 
3c25
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final ExtendedStorage storage = new MemoryStorage();
5c27,29
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
8,15c32,35
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
---
>     final Key<ExtendedBlobSemantic> key = new Key.From("data".getBytes(StandardCharsets.UTF_8));
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final CompletionStage<ExtendedBlobSemantic> putStage = blobs.put(
>         new CheckedBlobSource(content, new Digest.Sha256(digest))
17c37,41
<                 MatcherAssert.assertThat(
---
>     putStage.toCompletableFuture()
>         .handle(
>             (blob, throwable) -> {
>                 assertThat("Exception thrown", throwable, not(nullValue()));
>                 assertThat(
19,20c43,44
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
---
>                     throwable,
>                     instanceOf(InvalidDigestException.class)
22c46,47
<                 MatcherAssert.assertThat(
---
>                 final InvalidDigestException exception = (InvalidDigestException) throwable;
>                 assertThat(
24,28c49,50
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                     exception.message(),
>                     new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
30c52
<                 MatcherAssert.assertThat(
---
>                 assertThat(
32,33c54,55
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>                     exception.message(),
>                     new StringContains(digest)
37c59,60
<         ).join();
---
>         )
>         .join();
