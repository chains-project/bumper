1,2c1,19
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import com.artipie.asto.CheckedBlobSource;
> import com.artipie.asto.Content;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.hamcrest.CoreMatchers;
> import org.hamcrest.MatcherAssert;
> import org.junit.jupiter.api.Test;
> 
> import static com.artipie.docker.Digest.Sha256;
> 
> public class AstoBlobsITCase {
>     @Test
4,13c21,48
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(com.artipie.docker.Digest.Sha256.NAME))));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest)));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>         InMemoryStorage storage = new InMemoryStorage();
>         AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
>         String digest = "123";
>         CompletableFuture<Void> put = blobs.put(new CheckedBlobSource(
>             Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Sha256(digest)
>         ));
>         put.handle((blob, throwable) -> {
>             MatcherAssert.assertThat("Exception thrown", throwable, CoreMatchers.notNullValue());
>             MatcherAssert.assertThat(
>                 "Exception is InvalidDigestException",
>                 throwable,
>                 CoreMatchers.instanceOf(InvalidDigestException.class)
>             );
>             MatcherAssert.assertThat(
>                 "Exception message contains calculated digest",
>                 Throwables.getRootCause(throwable).getMessage(),
>                 CoreMatchers.startsWith(Sha256.NAME)
>             );
>             return null;
>         });
>         MatcherAssert.assertThat(
>             "Exception message contains expected digest",
>             Throwables.getRootCause(throwable).getMessage(),
>             CoreMatchers.stringContainsIgnoringCase(digest)
>         );
>         CompletableFuture.allOf().join();
>     }
