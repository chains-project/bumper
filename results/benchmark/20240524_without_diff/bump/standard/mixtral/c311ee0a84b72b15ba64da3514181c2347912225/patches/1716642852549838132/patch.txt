import com.artipie.asto.Content;
import com.artipie.asto.CheckedBlobSource;
import com.artipie.asto.MemoryStorage;
import com.artipie.asto.RepoName;
import com.artipie.asto.ext.ExtendedBlobSemantics;
import com.artipie.asto.layer.Layer;
import com.artipie.asto.layer.Layered;
import com.artipie.asto.storage.Storage;
import com.artipie.docker.Digest;
import com.artipie.docker.Digest.Sha256;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.CheckedBlob;
import com.artipie.docker.asto.DefaultLayout;
import com.google.common.base.Throwables;
import io.reactivex.Completable;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Test;

import static com.artipie.docker.asto.IsNot.not;
import static com.artipie.docker.asto.IsNull.isNull;

@Test
void failsOnDigestMismatch() {
    final Storage storage = new MemoryStorage();
    final RepoName repoName = new RepoName.Simple("any");
    final AstoBlobs blobs = new AstoBlobs(
        storage,
        new DefaultLayout(),
        repoName,
        new ExtendedBlobSemantics()
    );
    final String digest = "123";
    final byte[] data = "data".getBytes(StandardCharsets.UTF_8);
    final Content content = Content.From(ByteBuffer.wrap(data));
    final CheckedBlobSource checkedBlobSource = new CheckedBlobSource(content, new Sha256(digest));
    final CheckedBlob checkedBlob = new CheckedBlob(checkedBlobSource);
    final Layer layer = new Layer.Simple(checkedBlob, checkedBlob.contentLength(), checkedBlob.contentDigest());
    final Layered layerd = new Layered.Simple(layer);
    blobs.put(layerd, Completable.fromRunnable(() -> {}))
        .toCompletableFuture()
        .handle(
            (throwable) -> {
                MatcherAssert.assertThat(
                    "Exception thrown",
                    throwable,
                    not(isNull())
                );
                MatcherAssert.assertThat(
                    "Exception is InvalidDigestException",
                    Throwables.getRootCause(throwable),
                    CoreMatchers.instanceOf(InvalidDigestException.class)
                );
                MatcherAssert.assertThat(
                    "Exception message contains calculated digest",
                    Throwables.getRootCause(throwable).getMessage(),
                    CoreMatchers.stringContainsInOrder(
                        "Calculated digest",
                        "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
                    )
                );
                MatcherAssert.assertThat(
                    "Exception message contains expected digest",
                    Throwables.getRootCause(throwable).getMessage(),
                    CoreMatchers.stringContainsInOrder(
                        "Expected digest",
                        digest
                    )
                );
                return CompletableFuture.allOf();
            }
        )
        .join();
}