0a1,17
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.hamcrest.Matcher;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> 
3c20
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new Memory.InMemoryStorage();
5c22,24
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
7a27,28
>     final Matcher<Throwable> notNullNotIs Null = not(nullValue(InvalidDigestException.class));
>     final Matcher<Throwable> instanceOfInvalidDigestException = instanceOf(InvalidDigestException.class);
9,10c30,35
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
---
>         new CheckedBlobSource(
>             new Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
>         )
>     ).toCompletableFuture()
>     .handle(
12,26c37,39
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
---
>             assertThat("Exception thrown", throwable, notNullNotIs Null);
>             assertThat("Exception is InvalidDigestException", throwable, instanceOfInvalidDigestException);
>             final Matcher<String> stringContains = new StringContains(
28,33d40
<                     )
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
34a42,43
>             assertThat("Exception message contains calculated digest", throwable.getMessage(), stringContains);
>             assertThat("Exception message contains expected digest", throwable.getMessage(), new StringContains(digest));
38a48,66
> 
> private static class StringContains implements Matcher<String> {
>     private final String expectedSubstring;
> 
>     public StringContains(String expectedSubstring) {
>         this.expectedSubstring = expectedSubstring;
>     }
> 
>     @Override
>     public boolean matches(Object item) {
>         String actual = (String) item;
>         return actual.contains(expectedSubstring);
>     }
> 
>     @Override
>     public void describeTo(org.hamcrest.Description description) {
>         description.appendText("string containing ").appendText(expectedSubstring);
>     }
> }
\ No newline at end of file
