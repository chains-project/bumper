import com.artipie.asto.CheckedBlobSource;
import com.artipie.asto.Content;
import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.DefaultLayout;
import com.artipie.docker.Digest;
import com.artipie.docker.RepoName;
import com.artipie.docker.error.InvalidDigestException;
import com.google.common.base.Throwables;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Test;

import static com.artipie.docker.Digest.Sha256;

public class AstoBlobsITCase {
    @Test
    void failsOnDigestMismatch() {
        InMemoryStorage storage = new InMemoryStorage();
        AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
        String digest = "123";
        CompletableFuture<Void> put = blobs.put(new CheckedBlobSource(
            Content.From("data".getBytes(StandardCharsets.UTF_8)),
            new Sha256(digest)
        ));
        put.handle((blob, throwable) -> {
            MatcherAssert.assertThat("Exception thrown", throwable, CoreMatchers.notNullValue());
            MatcherAssert.assertThat(
                "Exception is InvalidDigestException",
                throwable,
                CoreMatchers.instanceOf(InvalidDigestException.class)
            );
            MatcherAssert.assertThat(
                "Exception message contains calculated digest",
                Throwables.getRootCause(throwable).getMessage(),
                CoreMatchers.startsWith(Sha256.NAME)
            );
            return null;
        });
        MatcherAssert.assertThat(
            "Exception message contains expected digest",
            Throwables.getRootCause(throwable).getMessage(),
            CoreMatchers.stringContainsIgnoringCase(digest)
        );
        CompletableFuture.allOf().join();
    }
}