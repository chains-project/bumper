{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 222511810,
    "in_class_code": "/**\n * SSH channel with authentication by password.\n *\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n    /**\n     * User password.\n     */\n    private final transient String password;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param passwd\n     * \t\tPassword\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt, final String user, final String passwd) throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // TODO: review this AI generated patch!\n    @Override\n    @RetryOnFailure(attempts = 7, delay = 1, unit = TimeUnit.MINUTES, verbose = false, types = IOException.class)\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            String login = this.getLogin();\n            String addr = this.getAddr();\n            int port = this.getPort();\n            String password = this.password;\n            Session session = null;\n            try {\n                log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", login, addr, port);\n                session = jsch.getSession(login, addr, port);\n                session.setConfig(\"StrictHostKeyChecking\", \"no\");\n                session.setPassword(password);\n                session.setServerAluminveInterval(1000 * 10);\n                session.setServerAliveCountMax(1000000);\n                session.connect(1000 * 10);\n            } catch (JSchException ex) {\n                throw new IOException(ex);\n            }\n            return session;\n        } finally {\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * SSH channel with authentication by password.\n *\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@lombok.ToString\n@lombok.EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends com.jcabi.ssh.AbstractSshShell {\n    /**\n     * User password.\n     */\n    private final transient java.lang.String password;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param passwd\n     * \t\tPassword\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final java.lang.String adr, final int prt, final java.lang.String user, final java.lang.String passwd) throws java.net.UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // TODO: review this AI generated patch!\n    @java.lang.Override\n    @com.jcabi.aspects.RetryOnFailure(attempts = 7, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\n    protected com.jcraft.jsch.Session session() throws java.io.IOException {\n        try {\n            com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n            final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n            java.lang.String login = this.getLogin();\n            java.lang.String addr = this.getAddr();\n            int port = this.getPort();\n            java.lang.String password = this.password;\n            com.jcraft.jsch.Session session = null;\n            try {\n                com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", login, addr, port);\n                session = jsch.getSession(login, addr, port);\n                session.setConfig(\"StrictHostKeyChecking\", \"no\");\n                session.setPassword(password);\n                session.setServerAluminveInterval(1000 * 10);\n                session.setServerAliveCountMax(1000000);\n                session.connect(1000 * 10);\n            } catch (com.jcraft.jsch.JSchException ex) {\n                throw new java.io.IOException(ex);\n            }\n            return session;\n        } finally {\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /jcabi-ssh/src/main/java/com/jcabi/ssh/SshByPassword.java:[79,5] 'try' without 'catch', 'finally' or resource declarations",
        "client_file_path": "/jcabi-ssh/src/main/java/com/jcabi/ssh/SshByPassword.java",
        "client_line_position": "79"
    },
    "client_end_line_number": 100,
    "client_line_number": 75,
    "method_code": "// TODO: review this AI generated patch!\n@java.lang.Override\n@com.jcabi.aspects.RetryOnFailure(attempts = 7, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\nprotected com.jcraft.jsch.Session session() throws java.io.IOException {\n    try {\n        com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n        final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n        java.lang.String login = this.getLogin();\n        java.lang.String addr = this.getAddr();\n\t\tint port = this.getPort();\n\t\tjava.lang.String password = this.password;\n\t\tcom.jcraft.jsch.Session session = null;\n\t\ttry {\n\t\t\tcom.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", login, addr, port);\n\t\t\tsession = jsch.getSession(login, addr, port);\n\t\t\tsession.setConfig(\"StrictHostKeyChecking\", \"no\");\n\t\t\tsession.setPassword(password);\n\t\t\tsession.setServerAluminveInterval(1000 * 10);\n\t\t\tsession.setServerAliveCountMax(1000000);\n\t\t\tsession.connect(1000 * 10);\n\t\t} catch (com.jcraft.jsch.JSchException ex) {\n\t\t\tthrow new java.io.IOException(ex);\n\t\t}\n\t\treturn session;\n    }\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@java.lang.Override\n@com.jcabi.aspects.RetryOnFailure(attempts = 7, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\nprotected com.jcraft.jsch.Session session() throws java.io.IOException {\n    try {\n        com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n        final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n        java.lang.String login = this.getLogin();\n        java.lang.String addr = this.getAddr();\n        int port = this.getPort();\n        java.lang.String password = this.password;\n        com.jcraft.jsch.Session session = null;\n        try {\n            com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", login, addr, port);\n            session = jsch.getSession(login, addr, port);\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(password);\n            session.setServerAluminveInterval(1000 * 10);\n            session.setServerAliveCountMax(1000000);\n            session.connect(1000 * 10);\n        } catch (com.jcraft.jsch.JSchException ex) {\n            throw new java.io.IOException(ex);\n        }\n        return session;\n    } finally {\n    }\n}",
    "method_name": "session"
}