1d0
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
3,10c2,3
<     @RetryOnFailure(
<         attempts = Tv.SEVEN,
<         delay = 1,
<         unit = TimeUnit.MINUTES,
<         verbose = false,
<         types = IOException.class
<     )
<     protected Session session() throws IOException {
---
> @com.jcabi.aspects.RetryOnFailure(attempts = 7, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)
> protected com.jcraft.jsch.Session session() throws java.io.IOException {
12,22c5,13
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (auth with password)...",
<                 this.getLogin(), this.getAddr(), this.getPort()
<             );
<             final Session session = jsch.getSession(
<                 this.getLogin(), this.getAddr(), this.getPort()
<             );
<             session.setConfig("StrictHostKeyChecking", "no");
---
>         com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());
>         final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();
>         java.lang.String login = this.getLogin();
>         java.lang.String addr = this.getAddr();
>         int port = this.getPort();
>         com.jcraft.jsch.Session session = jsch.getSession(login, addr, port);
>         java.util.Properties config = new java.util.Properties();
>         config.put("StrictHostKeyChecking", "no");
>         session.setConfig(config);
24,28c15,19
<             session.setServerAliveInterval(
<                 (int) TimeUnit.SECONDS.toMillis(Tv.TEN)
<             );
<             session.setServerAliveCountMax(Tv.MILLION);
<             session.connect((int) TimeUnit.SECONDS.toMillis(10L));
---
>         long serverAliveInterval = java.util.concurrent.TimeUnit.SECONDS.toMillis(10);
>         session.setServerAliveInterval(serverAliveInterval);
>         session.setServerAliveCountMax(1000000);
>         long connectionTimeout = java.util.concurrent.TimeUnit.SECONDS.toMillis(10);
>         session.connect(connectionTimeout);
30,31c21,22
<         } catch (final JSchException ex) {
<             throw new IOException(ex);
---
>     } catch (com.jcraft.jsch.JSchException ex) {
>         throw new java.io.IOException(ex);
