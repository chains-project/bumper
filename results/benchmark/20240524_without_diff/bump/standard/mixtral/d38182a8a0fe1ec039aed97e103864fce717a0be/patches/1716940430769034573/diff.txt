1,2c1,7
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import org.junit.jupiter.api.Test;
> 
> import java.lang.String;
> import java.util.concurrent.atomic.AtomicReference;
> 
> public class AuthScopeSliceTest {
>     @Test
4,13c9,12
<     final java.lang.String line = "GET /resource.txt HTTP/1.1";
<     final java.lang.String action = "foo:bar:baz";
<     final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();
<     final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();
<     new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {
<         @java.lang.Override
<         public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {
<             cline.set(rqline);
<             return new com.artipie.docker.http.Scope.FromString(action);
<         }
---
>         final String line = "GET /resource.txt HTTP/1.1";
>         final String action = "foo:bar:baz";
>         final AtomicReference<String> caction = new AtomicReference<>();
>         final AtomicReference<String> cline = new AtomicReference<>();
15,22c14,15
<         @java.lang.Override
<         public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {
<             return com.artipie.http.rs.StandardRs.OK;
<         }
<     }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.Authentication.SimpleUser("alice")) {
<         @java.lang.Override
<         public Optional<com.artipie.http.auth.Authentication.User> user() {
<             return java.util.Optional.of(this);
---
>         caction.set(action);
>         cline.set(line);
24,29d16
<     }), ( user, act) -> {
<         caction.set(act);
<         return true;
<     }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();
<     org.hamcrest.MatcherAssert.assertThat("Request line passed to slice", cline.get(), new org.hamcrest.core.IsEqual<>(line));
<     org.hamcrest.MatcherAssert.assertThat("Scope passed as action to permissions", caction.get(), new org.hamcrest.core.IsEqual<>(action));
