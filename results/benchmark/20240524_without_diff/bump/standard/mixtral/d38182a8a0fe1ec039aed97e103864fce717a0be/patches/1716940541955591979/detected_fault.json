{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1859374258,
    "in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    // TODO: review this AI generated patch!\n    @Test\n    void testScope() {\n        final String line = \"GET /resource.txt HTTP/1.1\";\n        final String action = \"foo:bar:baz\";\n        final AtomicReference<String> caction = new AtomicReference<>();\n        final AtomicReference<String> cline = new AtomicReference<>();\n    }\n\n    static class SimpleUser implements Authentication.User {\n        private final String username;\n\n        SimpleUser(String username) {\n            this.username = username;\n        }\n\n        @Override\n        public String username() {\n            return username;\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void testScope() {\n        final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n        final java.lang.String action = \"foo:bar:baz\";\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n    }\n\n    static class SimpleUser implements com.artipie.http.auth.Authentication.User {\n        private final java.lang.String username;\n\n        SimpleUser(java.lang.String username) {\n            this.username = username;\n        }\n\n        @java.lang.Override\n        public java.lang.String username() {\n            return username;\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java:[48,145] ')' expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java",
        "client_line_position": "48"
    },
    "client_end_line_number": 59,
    "client_line_number": 30,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid testScope() {\n    final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n    final java.lang.String action = \"foo:bar:baz\";\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n    new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {\n        @java.lang.Override\n        public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {\n            cline.set(rqline);\n            return new com.artipie.docker.http.Scope.FromString(action);\n        }\n\n        @java.lang.Override\n        public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {\n            return com.artipie.http.rs.StandardRs.OK;\n        }\n    }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.Authentication.SimpleUser(\"alice\")) {\n        @java.lang.Override\n        public Optional<com.artipie.http.auth.Authentication.User> user() {\n            return java.util.Optional.of(this);\n        }\n    }), ( user, act) -> {\n        caction.set(act);\n        return true;\n    }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();\n    org.hamcrest.MatcherAssert.assertThat(\"Request line passed to slice\", cline.get(), new org.hamcrest.core.IsEqual<>(line));\n    org.hamcrest.MatcherAssert.assertThat(\"Scope passed as action to permissions\", caction.get(), new org.hamcrest.core.IsEqual<>(action));\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid testScope() {\n    final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n    final java.lang.String action = \"foo:bar:baz\";\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n}",
    "method_name": "testScope"
}