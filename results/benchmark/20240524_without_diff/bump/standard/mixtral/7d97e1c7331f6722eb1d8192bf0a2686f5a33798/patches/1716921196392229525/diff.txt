1c1,5
< @Test
---
> import static java.lang.Integer.MAX_VALUE;
> import static java.lang.Integer.min;
> import static java.util.stream.IntStream.range;
> 
> @org.junit.jupiter.api.Test
3c7
<         final Domain domain = this.domain();
---
>     final com.jcabi.simpledb.Domain domain = this.domain();
5,8c9,14
<             final String name = RandomStringUtils.randomAlphanumeric(Tv.TEN);
<             final String attr = RandomStringUtils.randomAlphabetic(Tv.EIGHT);
<             final String value = RandomStringUtils.randomAlphanumeric(Tv.TEN);
<             for (int idx = 0; idx < 2; ++idx) {
---
>         final int ten = 10;
>         final int eight = 8;
>         final java.lang.String name = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(ten);
>         final java.lang.String attr = org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(eight);
>         final java.lang.String value = org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(ten);
>         range(0, min(2, MAX_VALUE)).forEach(idx -> {
10,12c16
<                 MatcherAssert.assertThat(
<                     domain.item(name), Matchers.hasKey(attr)
<                 );
---
>             org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.hasKey(attr));
14,17c18,19
<                 MatcherAssert.assertThat(
<                     domain.item(name), Matchers.not(Matchers.hasKey(attr))
<                 );
<             }
---
>             org.hamcrest.MatcherAssert.assertThat(domain.item(name), org.hamcrest.Matchers.not(org.hamcrest.Matchers.hasKey(attr)));
>         });
