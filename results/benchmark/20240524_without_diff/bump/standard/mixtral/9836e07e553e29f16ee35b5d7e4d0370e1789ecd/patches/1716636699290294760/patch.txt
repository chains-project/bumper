@org.junit.jupiter.api.Test
void fixed() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
    final java.lang.String digest = "123";
    java.util.concurrent.CompletableFuture.runAsync(() -> {
        try {
            blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artiporg.docker.Digest.Sha256(digest)));
        } catch (final java.util.concurrent.CompletionException e) {
            final Throwable cause = e.getCause();
            org.hamcrest.MatcherAssert.assertThat("Exception thrown", cause, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
            org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", cause.getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(new java.lang.StringBuilder("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString())));
            org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", cause.getMessage(), new org.hamcrest.core.StringContains(digest));
        }
    });
    java.util.concurrent.CompletableFuture.allOf().join();
}