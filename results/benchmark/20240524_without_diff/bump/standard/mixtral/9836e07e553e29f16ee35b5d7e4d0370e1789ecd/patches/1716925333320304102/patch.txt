import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.instanceOf;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.nullValue;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.junit.jupiter.api.Test;
import com.artipie.asto.Content;
import com.artipie.asto.Memory;
import com.artipie.asto.Storage;
import com.artipie.asto.ext.ExtAsto;
import com.artipie.docker.Digest;
import com.artipie.docker.RepoName;
import com.artipie.docker.asto.CheckedBlobSource;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.DefaultLayout;
import com.artipie.docker.error.InvalidDigestException;
import com.google.common.base.Throwables;
import io.reactivex.Single;

@Test
void failsOnDigestMismatch() {
    final Storage storage = new Memory();
    final AstoBlobs blobs = new AstoBlobs(
        storage,
        new DefaultLayout(),
        new RepoName.Simple("any")
    );
    final String digest = "123";
    final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
    final Digest calculatedDigest = Digest.Sha256.string("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7");
    blobs.put(
        new CheckedBlobSource(content, calculatedDigest)
    ).toSingleDefault(content)
    .flatMapCompletable(ignored -> {
        throw new InvalidDigestException(calculatedDigest, Digest.Sha256.string(digest));
    })
    .test()
    .assertError(throwable -> {
        assertThat(throwable, not(nullValue()));
        assertThat(throwable, instanceOf(InvalidDigestException.class));
        final InvalidDigestException ex = (InvalidDigestException) throwable;
        assertThat(
            ex.message(),
            not(new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"))
        );
        assertThat(ex.message(), new StringContains(digest));
    });
}