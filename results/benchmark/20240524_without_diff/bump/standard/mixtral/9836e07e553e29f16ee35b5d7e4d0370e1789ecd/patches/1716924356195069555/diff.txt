0a1,18
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.Args;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Completable;
> 
3c21
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new InMemoryStorage();
5c23,25
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
8,10c28,33
<         blobs.put(
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
---
>     final Content content = Content.From("data".getBytes(StandardCharsets.UTF_8));
>     final Digest.Sha256 sha256 = new Digest.Sha256(digest);
>     final CheckedBlobSource source = new CheckedBlobSource(content, sha256);
>     blobs.put(source)
>         .toCompletableFuture()
>         .handle(
12,22c35,38
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
---
>                 assertThat("Exception thrown", throwable, not(nullValue()));
>                 assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>                 final InvalidDigestException ex = (InvalidDigestException) Throwables.getRootCause(throwable);
>                 assertThat(
24,28c40,41
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                     ex.message(),
>                     new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
30c43
<                 MatcherAssert.assertThat(
---
>                 assertThat(
32,33c45,46
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>                     ex.message(),
>                     new StringContains(digest)
35c48
<                 return CompletableFuture.allOf();
---
>                 return Completable.complete();
37c50,51
<         ).join();
---
>         )
>         .blockingGet();
