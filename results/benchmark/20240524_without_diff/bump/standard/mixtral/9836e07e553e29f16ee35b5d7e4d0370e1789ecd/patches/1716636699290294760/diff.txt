1d0
< // TODO: review this AI generated patch!
3c2
< void failsOnDigestMismatch() {
---
> void fixed() {
7,13c6,16
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(new java.lang.StringBuilder("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString()))));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest));
<         return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>     java.util.concurrent.CompletableFuture.runAsync(() -> {
>         try {
>             blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artiporg.docker.Digest.Sha256(digest)));
>         } catch (final java.util.concurrent.CompletionException e) {
>             final Throwable cause = e.getCause();
>             org.hamcrest.MatcherAssert.assertThat("Exception thrown", cause, new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
>             org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", cause.getMessage(), new org.hamcrest.core.StringStartsWith(new org.hamcrest.core.StringValue(new java.lang.StringBuilder("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7").toString())));
>             org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", cause.getMessage(), new org.hamcrest.core.StringContains(digest));
>         }
>     });
>     java.util.concurrent.CompletableFuture.allOf().join();
