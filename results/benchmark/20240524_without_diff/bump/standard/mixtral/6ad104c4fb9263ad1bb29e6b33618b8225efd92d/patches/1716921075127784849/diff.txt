1,6c1,12
< // TODO: review this AI generated patch!
< public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws java.io.IOException {
<     org.bouncycastle.crypto.params.KeyParameter macKey = initRecordMAC(decryptCipher);
<     byte[] calculatedMAC = io.github.hapjava.server.impl.crypto.PolyKeyCreator.create(macKey, additionalData, ciphertext);
<     if (!org.bouncycastle.util.Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
<         throw new org.bouncycastle.crypto.tls.TlsFatalAlert(80); // bad_record_mac is 80
---
> import javax.crypto.Cipher;
> import javax.crypto.spec.IvParameterSpec;
> import javax.crypto.spec.SecretKeySpec;
> import java.nio.ByteBuffer;
> import java.security.GeneralSecurityException;
> import java.util.Arrays;
> 
> public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws GeneralSecurityException {
>     SecretKeySpec macKey = initRecordMAC(decryptCipher);
>     byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);
>     if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
>         throw new RuntimeException("Bad MAC");
8,9c14,19
<     byte[] output = new byte[ciphertext.length];
<     decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);
---
>     byte[] iv = Arrays.copyOfRange(ciphertext, 0, 12);
>     byte[] encryptedData = Arrays.copyOfRange(ciphertext, 12, ciphertext.length);
>     IvParameterSpec ivParamSpec = new IvParameterSpec(iv);
>     Cipher cipher = Cipher.getInstance("ChaCha20-Poly1305");
>     cipher.init(Cipher.DECRYPT_MODE, macKey, ivParamSpec);
>     byte[] output = cipher.doFinal(encryptedData);
