{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 369049246,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    final InMemoryStorage storage = new InMemoryStorage();\n\n    final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n\n    final String digest = \"123\";\n\n    {\n        hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new IsNull<>()));\n        hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", Throwables.getRootCause(throwable), new IsInstanceOf(InvalidDigestException.class));\n        MatcherAssert.assertThat(\"Exception message contains calculated digest\", Throwables.getRootCause(throwable).getMessage(), new StringContains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n        MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwable).getMessage(), new StringContains(digest));\n        return CompletableFuture.allOf();\n    }\n\n    {\n    }\n\n    @Test\n    void readAbsentBlob() throws Exception {\n        final AstoBlobs blobs = new AstoBlobs(new InMemoryStorage(), new DefaultLayout(), new RepoName.Simple(\"whatever\"));\n        final Digest digest = new Digest.Sha256(\"0123456789012345678901234567890123456789012345678901234567890123\");\n        MatcherAssert.assertThat(blobs.blob(digest).toCompletableFuture().get().isPresent(), new IsEqual<>(false));\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n\n    final java.lang.String digest = \"123\";\n\n    {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new org.hamcrest.core.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(digest));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }\n\n    {\n    }\n\n    @org.junit.jupiter.api.Test\n    void readAbsentBlob() throws java.lang.Exception {\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(new com.artipie.asto.memory.InMemoryStorage(), new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"whatever\"));\n        final com.artipie.docker.Digest digest = new com.artipie.docker.Digest.Sha256(\"0123456789012345678901234567890123456789012345678901234567890123\");\n        org.hamcrest.MatcherAssert.assertThat(blobs.blob(digest).toCompletableFuture().get().isPresent(), new org.hamcrest.core.IsEqual<>(false));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[95,15] class, interface, or enum expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "95"
    },
    "client_end_line_number": 105,
    "client_line_number": 93,
    "method_code": "@Test\n    void readAbsentBlob() throws Exception {\n        final AstoBlobs blobs = new AstoBlobs(\n            new InMemoryStorage(), new DefaultLayout(), new RepoName.Simple(\"whatever\")\n        );\n        final Digest digest = new Digest.Sha256(\n            \"0123456789012345678901234567890123456789012345678901234567890123\"\n        );\n        MatcherAssert.assertThat(\n            blobs.blob(digest).toCompletableFuture().get().isPresent(),\n            new IsEqual<>(false)\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid readAbsentBlob() throws java.lang.Exception {\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(new com.artipie.asto.memory.InMemoryStorage(), new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"whatever\"));\n    final com.artipie.docker.Digest digest = new com.artipie.docker.Digest.Sha256(\"0123456789012345678901234567890123456789012345678901234567890123\");\n    org.hamcrest.MatcherAssert.assertThat(blobs.blob(digest).toCompletableFuture().get().isPresent(), new org.hamcrest.core.IsEqual<>(false));\n}",
    "method_name": "readAbsentBlob"
}