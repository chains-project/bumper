{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1686100174,
    "in_class_code": "/**\n * SSH channel with authentication by password.\n *\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@ToString\n@EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends AbstractSshShell {\n    /**\n     * User password.\n     */\n    private transient final String password;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param passwd\n     * \t\tPassword\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final String adr, final int prt, final String user, final String passwd) throws UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = TimeUnit.MINUTES, verbose = false, types = IOException.class)\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", this.getLogin(), this.getAddr(), this.getPort());\n            final Session session = jsch.getSession(this.getLogin(), this.getAddr(), this.getPort());\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(((int) (TimeUnit.SECONDS.toMillis(Tv.TEN))));\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect(((int) (TimeUnit.SECONDS.toMillis(10L))));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * SSH channel with authentication by password.\n *\n * @since 1.4\n * @see Ssh For SSH channel with authenticaton using private key.\n */\n@lombok.ToString\n@lombok.EqualsAndHashCode(of = \"password\", callSuper = true)\npublic final class SshByPassword extends com.jcabi.ssh.AbstractSshShell {\n    /**\n     * User password.\n     */\n    private transient final java.lang.String password;\n\n    /**\n     * Constructor.\n     *\n     * @param adr\n     * \t\tIP address\n     * @param prt\n     * \t\tPort of server\n     * @param user\n     * \t\tLogin\n     * @param passwd\n     * \t\tPassword\n     * @throws UnknownHostException\n     * \t\tIf fails\n     * @checkstyle ParameterNumberCheck (6 lines)\n     */\n    public SshByPassword(final java.lang.String adr, final int prt, final java.lang.String user, final java.lang.String passwd) throws java.net.UnknownHostException {\n        super(adr, prt, user);\n        this.password = passwd;\n    }\n\n    // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @java.lang.Override\n    @com.jcabi.aspects.RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\n    protected com.jcraft.jsch.Session session() throws java.io.IOException {\n        try {\n            com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n            final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n            com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", this.getLogin(), this.getAddr(), this.getPort());\n            final com.jcraft.jsch.Session session = jsch.getSession(this.getLogin(), this.getAddr(), this.getPort());\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(((int) (java.util.concurrent.TimeUnit.SECONDS.toMillis(Tv.TEN))));\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect(((int) (java.util.concurrent.TimeUnit.SECONDS.toMillis(10L))));\n            return session;\n        } catch (final com.jcraft.jsch.JSchException ex) {\n            throw new java.io.IOException(ex);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.ssh.SshByPassword\n",
        "error_message": "[ERROR] /jcabi-ssh/src/main/java/com/jcabi/ssh/SshByPassword.java:[78,20] cannot find symbol",
        "client_file_path": "/jcabi-ssh/src/main/java/com/jcabi/ssh/SshByPassword.java",
        "client_line_position": "78"
    },
    "client_end_line_number": 107,
    "client_line_number": 75,
    "method_code": "// @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n    @Override\n    @RetryOnFailure(\n        attempts = Tv.SEVEN,\n        delay = 1,\n        unit = TimeUnit.MINUTES,\n        verbose = false,\n        types = IOException.class\n    )\n    protected Session session() throws IOException {\n        try {\n            JSch.setLogger(new JschLogger());\n            final JSch jsch = new JSch();\n            Logger.debug(\n                this,\n                \"Opening SSH session to %s@%s:%s (auth with password)...\",\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            final Session session = jsch.getSession(\n                this.getLogin(), this.getAddr(), this.getPort()\n            );\n            session.setConfig(\"StrictHostKeyChecking\", \"no\");\n            session.setPassword(this.password);\n            session.setServerAliveInterval(\n                (int) TimeUnit.SECONDS.toMillis(Tv.TEN)\n            );\n            session.setServerAliveCountMax(Tv.MILLION);\n            session.connect((int) TimeUnit.SECONDS.toMillis(10L));\n            return session;\n        } catch (final JSchException ex) {\n            throw new IOException(ex);\n        }\n    }",
    "qualified_code": "// @checkstyle ProtectedMethodInFinalClassCheck (10 lines)\n@java.lang.Override\n@com.jcabi.aspects.RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)\nprotected com.jcraft.jsch.Session session() throws java.io.IOException {\n    try {\n        com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());\n        final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();\n        com.jcabi.log.Logger.debug(this, \"Opening SSH session to %s@%s:%s (auth with password)...\", this.getLogin(), this.getAddr(), this.getPort());\n        final com.jcraft.jsch.Session session = jsch.getSession(this.getLogin(), this.getAddr(), this.getPort());\n        session.setConfig(\"StrictHostKeyChecking\", \"no\");\n        session.setPassword(this.password);\n        session.setServerAliveInterval(((int) (java.util.concurrent.TimeUnit.SECONDS.toMillis(Tv.TEN))));\n        session.setServerAliveCountMax(Tv.MILLION);\n        session.connect(((int) (java.util.concurrent.TimeUnit.SECONDS.toMillis(10L))));\n        return session;\n    } catch (final com.jcraft.jsch.JSchException ex) {\n        throw new java.io.IOException(ex);\n    }\n}",
    "method_name": "session"
}