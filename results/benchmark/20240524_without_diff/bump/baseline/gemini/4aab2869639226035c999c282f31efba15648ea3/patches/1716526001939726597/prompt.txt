Act as an Automatic Program Repair (APR) tool, reply only with code, without explanation.
You are specialized in breaking dependency updates, in which the failure is caused by an external dependency.
To solve the failure you can only work on the client code.

the following client code fails:
```java
  @Override
    public Policy<?> getPolicy(final PolicyConfig config) {
        final PolicyConfig sub = config.config("storage");
        try {
            return new YamlPolicy(
                new BlockingStorage(
                    new Storages().newStorage(
                        sub.string("type"), Yaml.createYamlInput(sub.toString()).readYamlMapping()
                    )
                )
            );
        } catch (final IOException err) {
            throw new UncheckedIOException(err);
        }
    }
```

with the following error message:
[ERROR] /http/src/main/java/com/artipie/security/policy/YamlPolicyFactory.java:[43,25] cannot find symbol
  symbol:   class Storages
  location: class com.artipie.security.policy.YamlPolicyFactory


the new library version includes the following changes, where `--` indicates a removal and `++` indicates an addition:
-- public com.artipie.asto.Storage com.artipie.asto.etcd.EtcdStorageFactory.newStorage(com.artipie.asto.factory.StorageConfig)
++ public abstract com.artipie.asto.Storage com.artipie.asto.factory.StorageFactory.newStorage(com.artipie.asto.factory.Config)
-- public abstract com.artipie.asto.Storage com.artipie.asto.factory.StorageFactory.newStorage(com.artipie.asto.factory.StorageConfig)
-- public Storages com.artipie.asto.factory.Storages()
-- public Storages com.artipie.asto.factory.Storages(java.util.Map)
-- public com.artipie.asto.Storage com.artipie.asto.factory.Storages.newStorage(java.lang.String,com.amihaiemil.eoyaml.YamlMapping)
-- public java.util.Set com.artipie.asto.factory.Storages.types()
++ public StoragesLoader com.artipie.asto.factory.StoragesLoader()
++ public StoragesLoader com.artipie.asto.factory.StoragesLoader(java.util.Map)
++ public java.lang.String com.artipie.asto.factory.StoragesLoader.defPackage()
++ public java.lang.String com.artipie.asto.factory.StoragesLoader.getFactoryName(java.lang.Class)
++ public com.artipie.asto.Storage com.artipie.asto.factory.StoragesLoader.newObject(java.lang.String,com.artipie.asto.factory.Config)
++ public java.lang.String com.artipie.asto.factory.StoragesLoader.scanPackagesEnv()
++ public java.util.Set com.artipie.asto.factory.StoragesLoader.types()
++ public com.artipie.asto.Storage com.artipie.asto.fs.FileStorageFactory.newStorage(com.artipie.asto.factory.Config)
-- public com.artipie.asto.Storage com.artipie.asto.fs.FileStorageFactory.newStorage(com.artipie.asto.factory.StorageConfig)
-- public com.artipie.asto.Storage com.artipie.asto.s3.S3StorageFactory.newStorage(com.artipie.asto.factory.StorageConfig)

propose a patch that I can apply to the code in order to fix the error.
Your response will be automatically parsed by an algorithm, be sure to only return the code.
be sure to return a code segment that can replace the entire failing client code.
you CANNOT change the function signature, but you can create variables if they help to make the code easier to understand.
you CAN remove the Override decorator IF AND ONLY IF the method is not overriding any method in the new version.
you CANNOT use removed library methods identified with `--`, but you CAN use added library methods identified with `++`.
DO NOT USE '--' or '++' to indicate changes you make on the code, be sure to return only code that can be compiled.
return only the fixed failing method, not the complete class code, you MUST change something in the code.
