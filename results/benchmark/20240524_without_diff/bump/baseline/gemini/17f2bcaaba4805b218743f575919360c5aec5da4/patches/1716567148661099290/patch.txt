  import org.junit.Ignore;
  import org.junit.Test;

  import static org.junit.Assert.assertEquals;
  import static org.junit.Assert.assertNotNull;
  import static org.junit.Assert.assertTrue;
  import static org.junit.Assert.fail;

  public class FastPolygonizerTests {

      private static final double EPS = 1e-8;

      @Test
      public void testFastPolygonizer() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          assertNotNull(polygonizer);

          // Test a simple polygon
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(polygon, result.get(0));

          // Test a polygon with a hole
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));

          // Test a polygon with a hole that intersects the outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with multiple holes
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.375f, 0.375f), new Vector2f(0.625f, 0.375f), new Vector2f(0.625f, 0.625f), new Vector2f(0.375f, 0.625f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(3, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));
          assertEquals(new Polygon(new Vector2f(0.375f, 0.375f), new Vector2f(0.625f, 0.375f), new Vector2f(0.625f, 0.625f), new Vector2f(0.375f, 0.625f)), result.get(2));

          // Test a polygon with a hole that is completely inside another hole
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.375f, 0.375f), new Vector2f(0.625f, 0.375f), new Vector2f(0.625f, 0.625f), new Vector2f(0.375f, 0.625f),
                                new Vector2f(0.4375f, 0.4375f), new Vector2f(0.5625f, 0.4375f), new Vector2f(0.5625f, 0.5625f), new Vector2f(0.4375f, 0.5625f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));

          // Test a polygon with a hole that is completely inside the outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.4375f, 0.4375f), new Vector2f(0.5625f, 0.4375f), new Vector2f(0.5625f, 0.5625f), new Vector2f(0.4375f, 0.5625f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with a hole that is completely outside the outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(2, 2), new Vector2f(3, 2), new Vector2f(3, 3), new Vector2f(2, 3));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with a hole that is partially outside the outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 1.5f), new Vector2f(1.5f, 1.5f), new Vector2f(1.5f, 2.5f), new Vector2f(0.5f, 2.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with a self-intersecting hole
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 1.0f), new Vector2f(1.0f, 1.0f), new Vector2f(1.0f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));

          // Test a polygon with a self-intersecting outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 1.0f), new Vector2f(1.0f, 1.0f), new Vector2f(1.0f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with a degenerate hole
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));

          // Test a polygon with a degenerate outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));

          // Test a polygon with a concave hole
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 1.0f), new Vector2f(1.0f, 1.0f), new Vector2f(1.0f, 0.5f),
                                new Vector2f(0.75f, 0.5f), new Vector2f(0.75f, 0.0f), new Vector2f(0.25f, 0.0f), new Vector2f(0.25f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(3, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));
          assertEquals(new Polygon(new Vector2f(0.75f, 0.5f), new Vector2f(0.75f, 0.0f), new Vector2f(0.25f, 0.0f), new Vector2f(0.25f, 0.5f)), result.get(2));

          // Test a polygon with a concave outer boundary
          polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 1.0f), new Vector2f(1.0f, 1.0f), new Vector2f(1.0f, 0.5f),
                                new Vector2f(0.75f, 0.5f), new Vector2f(0.75f, 0.0f), new Vector2f(0.25f, 0.0f), new Vector2f(0.25f, 0.5f));
          result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.75f, 0.5f), new Vector2f(0.75f, 0.0f), new Vector2f(0.25f, 0.0f), new Vector2f(0.25f, 0.5f)), result.get(1));
      }

      @Test
      public void testFastPolygonizerWithEmptyPolygon() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon();
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertTrue(result.isEmpty());
      }

      @Test
      public void testFastPolygonizerWithNullPolygon() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          try {
              polygonizer.fastPolygonize(null);
              fail("Expected NullPointerException");
          } catch (NullPointerException e) {
              // Expected exception
          }
      }

      @Test
      public void testFastPolygonizerWithEmptyHole() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));
      }

      @Test
      public void testFastPolygonizerWithNullHole() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                null);
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
      }

      @Test
      public void testFastPolygonizerWithColinearPoints() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
      }

      @Test
      public void testFastPolygonizerWithZeroAreaPolygon() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
      }

      @Test
      public void testFastPolygonizerWithZeroAreaHole() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));
      }

      @Test
      public void testFastPolygonizerWithZeroAreaPolygonAndHole() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1),
                                new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f),
                                new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f), new Vector2f(0.5f, 0.5f));
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(new Polygon(new Vector2f(0.25f, 0.25f), new Vector2f(0.75f, 0.25f), new Vector2f(0.75f, 0.75f), new Vector2f(0.25f, 0.75f)), result.get(1));
      }

      @Test
      public void testFastPolygonizerWithLargePolygon() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon();
          for (int i = 0; i < 10000; i++) {
              polygon.add(new Vector2f(Math.random(), Math.random()));
          }
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(polygon, result.get(0));
      }

      @Test
      public void testFastPolygonizerWithLargeHole() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1));
          Polygon hole = new Polygon();
          for (int i = 0; i < 10000; i++) {
              hole.add(new Vector2f(Math.random(), Math.random()));
          }
          polygon.addHole(hole);
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          assertNotNull(result);
          assertEquals(2, result.size());
          assertEquals(new Polygon(new Vector2f(0, 0), new Vector2f(1, 0), new Vector2f(1, 1), new Vector2f(0, 1)), result.get(0));
          assertEquals(hole, result.get(1));
      }

      @Test
      public void testFastPolygonizerWithPerformance() {
          FastPolygonizer polygonizer = new FastPolygonizer();
          Polygon polygon = new Polygon();
          for (int i = 0; i < 10000; i++) {
              polygon.add(new Vector2f(Math.random(), Math.random()));
          }
          long startTime = System.currentTimeMillis();
          List<Polygon> result = polygonizer.fastPolygonize(polygon);
          long endTime = System.currentTimeMillis();
          assertNotNull(result);
          assertEquals(1, result.size());
          assertEquals(polygon, result.get(0));
          assertTrue(endTime - startTime < 1000);
      }
  }