import org.junit.Ignore;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class FastPolygonizerTests {

    @Test
    public void testPolygonize() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }

    @Test
    public void testPolygonizeWithHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(8, 2),
                new Point(8, 8),
                new Point(2, 8)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(8, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
        assertEquals(new Point(2, 2), polygon.getPoints().get(4));
        assertEquals(new Point(8, 2), polygon.getPoints().get(5));
        assertEquals(new Point(8, 8), polygon.getPoints().get(6));
        assertEquals(new Point(2, 8), polygon.getPoints().get(7));
    }

    @Test
    public void testPolygonizeWithMultipleHoles() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(8, 2),
                new Point(8, 8),
                new Point(2, 8),
                new Point(4, 4),
                new Point(6, 4),
                new Point(6, 6),
                new Point(4, 6)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(12, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
        assertEquals(new Point(2, 2), polygon.getPoints().get(4));
        assertEquals(new Point(8, 2), polygon.getPoints().get(5));
        assertEquals(new Point(8, 8), polygon.getPoints().get(6));
        assertEquals(new Point(2, 8), polygon.getPoints().get(7));
        assertEquals(new Point(4, 4), polygon.getPoints().get(8));
        assertEquals(new Point(6, 4), polygon.getPoints().get(9));
        assertEquals(new Point(6, 6), polygon.getPoints().get(10));
        assertEquals(new Point(4, 6), polygon.getPoints().get(11));
    }

    @Test
    public void testPolygonizeWithSelfIntersectingHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(8, 2),
                new Point(8, 8),
                new Point(2, 8),
                new Point(4, 4),
                new Point(6, 4),
                new Point(6, 6),
                new Point(4, 6),
                new Point(5, 5)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(12, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
        assertEquals(new Point(2, 2), polygon.getPoints().get(4));
        assertEquals(new Point(8, 2), polygon.getPoints().get(5));
        assertEquals(new Point(8, 8), polygon.getPoints().get(6));
        assertEquals(new Point(2, 8), polygon.getPoints().get(7));
        assertEquals(new Point(4, 4), polygon.getPoints().get(8));
        assertEquals(new Point(6, 4), polygon.getPoints().get(9));
        assertEquals(new Point(6, 6), polygon.getPoints().get(10));
        assertEquals(new Point(4, 6), polygon.getPoints().get(11));
    }

    @Test
    public void testPolygonizeWithSelfIntersectingPolygon() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(5, 5)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }

    @Test
    public void testPolygonizeWithEmptyPolygon() {
        List<Point> points = Arrays.asList();

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(0, polygon.getPoints().size());
    }

    @Test
    public void testPolygonizeWithNullPolygon() {
        Polygon polygon = Polygonizer.polygonize(null);

        assertEquals(0, polygon.getPoints().size());
    }

    @Test
    public void testPolygonizeWithEmptyHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10)
        );

        Polygon polygon = Polygonizer.polygonize(points, Arrays.asList());

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }

    @Test
    public void testPolygonizeWithNullHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10)
        );

        Polygon polygon = Polygonizer.polygonize(points, null);

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }

    @Test
    @Ignore
    public void testPolygonizeWithInvalidPolygon() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(5, 5)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }

    @Test
    @Ignore
    public void testPolygonizeWithInvalidHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(8, 2),
                new Point(8, 8),
                new Point(2, 8),
                new Point(5, 5)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(8, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
        assertEquals(new Point(2, 2), polygon.getPoints().get(4));
        assertEquals(new Point(8, 2), polygon.getPoints().get(5));
        assertEquals(new Point(8, 8), polygon.getPoints().get(6));
        assertEquals(new Point(2, 8), polygon.getPoints().get(7));
    }

    @Test
    public void testPolygonizeWithCollinearPoints() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(20, 0)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(2, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(20, 0), polygon.getPoints().get(1));
    }

    @Test
    public void testPolygonizeWithCollinearPointsInHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(8, 2),
                new Point(8, 8),
                new Point(2, 8),
                new Point(5, 5),
                new Point(5, 6)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(10, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
        assertEquals(new Point(2, 2), polygon.getPoints().get(4));
        assertEquals(new Point(8, 2), polygon.getPoints().get(5));
        assertEquals(new Point(8, 8), polygon.getPoints().get(6));
        assertEquals(new Point(2, 8), polygon.getPoints().get(7));
        assertEquals(new Point(5, 5), polygon.getPoints().get(8));
        assertEquals(new Point(5, 6), polygon.getPoints().get(9));
    }

    @Test
    public void testPolygonizeWithDegeneratePolygon() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(0, 0),
                new Point(0, 0),
                new Point(0, 0)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(0, polygon.getPoints().size());
    }

    @Test
    public void testPolygonizeWithDegenerateHole() {
        List<Point> points = Arrays.asList(
                new Point(0, 0),
                new Point(10, 0),
                new Point(10, 10),
                new Point(0, 10),
                new Point(2, 2),
                new Point(2, 2),
                new Point(2, 2),
                new Point(2, 2)
        );

        Polygon polygon = Polygonizer.polygonize(points);

        assertEquals(4, polygon.getPoints().size());
        assertEquals(new Point(0, 0), polygon.getPoints().get(0));
        assertEquals(new Point(10, 0), polygon.getPoints().get(1));
        assertEquals(new Point(10, 10), polygon.getPoints().get(2));
        assertEquals(new Point(0, 10), polygon.getPoints().get(3));
    }
}