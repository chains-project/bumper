12a13,14
> 
>                 // Check if the output shape has the expected number of children.
13a16,44
> 
>                 // Check if the output shape contains the expected shapes.
>                 PShape child1 = out.getChild(0);
>                 PShape child2 = out.getChild(1);
>                 assertTrue(child1 instanceof PShape && child2 instanceof PShape);
>                 assertEquals(PShape.PATH, child1.getShapeType());
>                 assertEquals(PShape.PATH, child2.getShapeType());
> 
>                 // Check if the first child shape has the expected vertices.
>                 assertEquals(4, child1.getVertexCount());
>                 assertEquals(0f, child1.getVertexX(0), 0f);
>                 assertEquals(0f, child1.getVertexY(0), 0f);
>                 assertEquals(5f, child1.getVertexX(1), 0f);
>                 assertEquals(0f, child1.getVertexY(1), 0f);
>                 assertEquals(5f, child1.getVertexX(2), 0f);
>                 assertEquals(5f, child1.getVertexY(2), 0f);
>                 assertEquals(0f, child1.getVertexX(3), 0f);
>                 assertEquals(5f, child1.getVertexY(3), 0f);
> 
>                 // Check if the second child shape has the expected vertices.
>                 assertEquals(4, child2.getVertexCount());
>                 assertEquals(5f, child2.getVertexX(0), 0f);
>                 assertEquals(0f, child2.getVertexY(0), 0f);
>                 assertEquals(10f, child2.getVertexX(1), 0f);
>                 assertEquals(0f, child2.getVertexY(1), 0f);
>                 assertEquals(10f, child2.getVertexX(2), 0f);
>                 assertEquals(5f, child2.getVertexY(2), 0f);
>                 assertEquals(5f, child2.getVertexX(3), 0f);
>                 assertEquals(5f, child2.getVertexY(3), 0f);
