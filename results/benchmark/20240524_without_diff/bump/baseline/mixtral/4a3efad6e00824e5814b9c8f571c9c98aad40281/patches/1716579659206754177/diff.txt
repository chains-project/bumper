1c1,78
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.pades.PadesCertificationLevel;
> import eu.europa.esig.dss.pades.PadesSigner;
> import eu.europa.esig.dss.pades.PadesSigningCertificateSource;
> import eu.europa.esig.dss.pades.PadesSigningCertificateValidator;
> import eu.europa.esig.dss.pades.PadesUtils;
> import eu.europa.esig.dss.pades.PdfBoxUtils;
> import eu.europa.esig.dss.pades.validation.PdfDocumentValidator;
> import eu.europa.esig.dss.token.DSSPrivateKeyEntry;
> import eu.europa.esig.dss.token.DSSPrivateKeySource;
> import eu.europa.esig.dss.token.DSSPublicKeySource;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.CertificateVerifier;
> import eu.europa.esig.dss.validation.Processable;
> import eu.europa.esig.dss.validation.reports.Reports;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> 
> import java.io.File;
> import java.io.FileInputStream;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.security.KeyStore;
> import java.security.KeyStoreException;
> import java.security.NoSuchAlgorithmException;
> import java.security.PrivateKey;
> import java.security.UnrecoverableKeyException;
> import java.security.cert.Certificate;
> import java.security.cert.CertificateException;
> import java.util.List;
> 
> // ...
> 
> public class Signer {
> 
>     // ...
> 
>     private CertificateVerifier getCertificateVerifier() {
>         CommonCertificateVerifier certVerifier = new CommonCertificateVerifier();
>         certVerifier.setTrustedCertificates(getTrustedCertificates());
>         return certVerifier;
>     }
> 
>     private List<Certificate> getTrustedCertificates() {
>         // ...
>     }
> 
>     private DSSPublicKeySource getPublicKeySource(File keyStoreFile, String keyStorePassword) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {
>         // ...
>     }
> 
>     private DSSPrivateKeySource getPrivateKeySource(File keyStoreFile, String keyStorePassword) throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException, CertificateException, IOException {
>         // ...
>     }
> 
>     private void signPdf(File inputFile, File outputFile, String keyStorePath, String keyStorePassword, PadesCertificationLevel certificationLevel) throws Exception {
>         // ...
> 
>         // Replace the failing line
>         //CertificationPermission permission = CertificationPermission.SIGNATURE_FIELD_WITH_VISIBLE_SIGNATURE;
> 
>         // New code
>         eu.europa.esig.dss.pades.SignaturePolicyId signaturePolicyId = new eu.europa.esig.dss.pades.SignaturePolicyId(
>             eu.europa.esig.dss.enumerations.SignaturePolicyId.GOOD_POLICY_URL,
>             eu.europa.esig.dss.enumerations.SignaturePolicyId.GOOD_POLICY_ID
>         );
> 
>         PadesSigningCertificateSource certificateSource = new PadesSigningCertificateSource(getPublicKeySource(new File(keyStorePath), keyStorePassword));
>         PadesSigningCertificateValidator certificateValidator = new PadesSigningCertificateValidator(certificateSource, getCertificateVerifier());
>         PadesSigner signer = new PadesSigner(certificateSource, certificateValidator, getPrivateKeySource(new File(keyStorePath), keyStorePassword));
> 
>         signer.setSignaturePolicyId(signaturePolicyId);
>         signer.setCertificationLevel(certificationLevel);
> 
>         // ...
>     }
> 
>     // ...
> }
\ No newline at end of file
