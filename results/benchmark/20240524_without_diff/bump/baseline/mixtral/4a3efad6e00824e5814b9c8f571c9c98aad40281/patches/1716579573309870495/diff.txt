1c1,113
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.pades.PadesCertificationLevel;
> import eu.europa.esig.dss.pades.PadesSigner;
> import eu.europa.esig.dss.pades.PdfPadesSigner;
> import eu.europa.esig.dss.pades.PdfPadesSignerParameters;
> import eu.europa.esig.dss.pades.PdfSignatureFormType;
> import eu.europa.esig.dss.pades.PdfSigningCertificateSource;
> import eu.europa.esig.dss.pades.PdfSigningCertificateValidator;
> import eu.europa.esig.dss.pades.StandardSignaturePolicy;
> import eu.europa.esig.dss.pades.SignaturePolicySource;
> import eu.europa.esig.dss.pades.validation.PdfSignatureValidationContext;
> import eu.europa.esig.dss.token.DSSPrivateKeyEntry;
> import eu.europa.esig.dss.token.DSSPrivateKeySource;
> import eu.europa.esig.dss.token.DSSPublicKeySource;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.CertificateVerifierProvider;
> import eu.europa.esig.dss.validation.RejectedCertificateVerifier;
> import eu.europa.esig.dss.validation.scope.DefaultValidationScope;
> 
> //...
> 
> private void signPdf(InputStream inputStream, OutputStream outputStream, String certificate, String password) throws Exception {
>     //...
> 
>     // Replace CertificationPermission with PadesCertificationLevel
>     PadesCertificationLevel certificationLevel = PadesCertificationLevel.CERTIFY_MINOR_CHANGES;
> 
>     //...
> 
>     // Replace CertificateTokenGenerator with DSSPrivateKeySource
>     DSSPrivateKeySource keySource = new DSSPrivateKeySource() {
>         @Override
>         public DSSPrivateKeyEntry getPrivateKey() {
>             //...
>         }
>     };
> 
>     //...
> 
>     // Replace CertificateVerifier with CommonCertificateVerifier
>     CommonCertificateVerifier certificateVerifier = new CommonCertificateVerifier();
> 
>     //...
> 
>     // Replace CertificateSource with PdfSigningCertificateSource
>     PdfSigningCertificateSource certificateSource = new PdfSigningCertificateSource(certificateVerifier);
> 
>     //...
> 
>     // Replace CertificateValidator with PdfSigningCertificateValidator
>     PdfSigningCertificateValidator certificateValidator = new PdfSigningCertificateValidator(certificateVerifier);
> 
>     //...
> 
>     // Replace SignaturePolicy with StandardSignaturePolicy
>     StandardSignaturePolicy signaturePolicy = new StandardSignaturePolicy();
> 
>     //...
> 
>     // Replace SignaturePolicySource with SignaturePolicySource
>     SignaturePolicySource signaturePolicySource = new SignaturePolicySource();
> 
>     //...
> 
>     // Replace CertificateVerifierProvider with CertificateVerifierProvider
>     CertificateVerifierProvider certificateVerifierProvider = new CertificateVerifierProvider() {
>         @Override
>         public CertificateVerifier getCertificateVerifier(String id) {
>             //...
>         }
>     };
> 
>     //...
> 
>     // Replace ValidationScope with DefaultValidationScope
>     DefaultValidationScope validationScope = new DefaultValidationScope();
> 
>     //...
> 
>     // Replace SignatureValidator with PdfSignatureValidationContext
>     PdfSignatureValidationContext signatureValidationContext = new PdfSignatureValidationContext();
> 
>     //...
> 
>     // Replace Signer with PadesSigner
>     PadesSigner signer = new PadesSigner(keySource, certificateSource, certificateValidator, signaturePolicy, signaturePolicySource, signatureValidationContext, validationScope, certificateVerifierProvider);
> 
>     //...
> 
>     // Replace CertificationPermission with PadesCertificationLevel
>     signer.setCertificationLevel(certificationLevel);
> 
>     //...
> 
>     // Replace Signature with PdfPadesSigner
>     PdfPadesSigner pdfSigner = new PdfPadesSigner(signer);
> 
>     //...
> 
>     // Replace Signature with PdfPadesSignerParameters
>     PdfPadesSignerParameters parameters = new PdfPadesSignerParameters();
> 
>     //...
> 
>     // Replace Signature with PdfSignatureFormType
>     parameters.setFormType(PdfSignatureFormType.ADOBE_X);
> 
>     //...
> 
>     // Replace Signature with PdfPadesSigner
>     pdfSigner.setSigningParameters(parameters);
> 
>     //...
> }
\ No newline at end of file
