1,2c1,9
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
---
> import com.jcraft.jsch.ChannelExec;
> import com.jcraft.jsch.JSchException;
> import java.io.ByteArrayOutputStream;
> import java.io.IOException;
> import java.io.OutputStream;
> import java.util.concurrent.TimeUnit;
> 
> // ...
> 
10a18,19
>     JSch jsch = new JSch();
>     Session session = null;
12,21c21,22
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (auth with password)...",
<                 this.getLogin(), this.getAddr(), this.getPort()
<             );
<             final Session session = jsch.getSession(
<                 this.getLogin(), this.getAddr(), this.getPort()
<             );
---
>         jsch.setLogger(new JschLogger());
>         session = jsch.getSession(this.getLogin(), this.getAddr(), this.getPort());
24,26c25
<             session.setServerAliveInterval(
<                 (int) TimeUnit.SECONDS.toMillis(Tv.TEN)
<             );
---
>         session.setServerAliveInterval((int) TimeUnit.SECONDS.toMillis(Tv.TEN));
29,30c28,31
<             return session;
<         } catch (final JSchException ex) {
---
>     } catch (JSchException ex) {
>         if (session != null) {
>             session.disconnect();
>         }
32a34,62
>     return session;
> }
> 
> private String executeCommand(String command) throws IOException {
>     Session session = session();
>     ChannelExec channel = null;
>     ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
>     try {
>         channel = (ChannelExec) session.openChannel("exec");
>         channel.setCommand(command);
>         channel.setInputStream(null);
>         channel.setErrStream(System.err);
>         OutputStream inputStream = channel.getOutputStream();
>         channel.connect();
>         inputStream.write(command.getBytes());
>         inputStream.flush();
>         inputStream.close();
>         channel.join();
>         return outputStream.toString();
>     } catch (JSchException | InterruptedException e) {
>         throw new IOException(e);
>     } finally {
>         if (channel != null) {
>             channel.disconnect();
>         }
>         if (session != null) {
>             session.disconnect();
>         }
>     }
