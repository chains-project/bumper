1,2c1,24
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
---
> import com.google.common.base.Throwables;
> import com.jcabi.ssh.JSchException;
> import java.io.File;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.io.OutputStream;
> import java.nio.charset.StandardCharsets;
> import java.nio.file.Files;
> import java.nio.file.Paths;
> import java.security.KeyPair;
> import java.util.concurrent.TimeUnit;
> import javax.annotation.Nullable;
> import net.schmizz.sshj.SSHClient;
> import net.schmizz.sshj.common.SecurityUtils;
> import net.schmizz.sshj.userauth.keyprovider.KeyPairProvider;
> import net.schmizz.sshj.userauth.keyprovider.OpenSSHKeyFormat;
> import net.schmizz.sshj.userauth.keyprovider.OpenSSHKeyPair;
> import net.schmizz.sshj.userauth.keyprovider.OpenSSHKeyProvider;
> import net.schmizz.sshj.userauth.keyprovider.PublicKeyFile;
> import org.checkerframework.checker.nullness.qual.NonNull;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> import retrofit2.RetryOnFailure;
> 
12,25c34,40
<         try {
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             new Unchecked<>(
<                 new LengthOf(
<                     new TeeInput(
<                         this.key.replaceAll("\r", "")
<                             .replaceAll("\n\\s+|\n{2,}", "\n")
<                             .trim(),
<                         file
<                     )
<                 )
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
---
>     try (OutputStream outputStream = new FileOutputStream(file)) {
>         outputStream.write(this.key.getBytes(StandardCharsets.UTF_8));
>     }
>     final KeyPairProvider keyPairProvider = new OpenSSHKeyProvider(new PublicKeyFile(file));
>     final KeyPair keyPair = keyPairProvider.loadKey("jcabi-ssh");
>     final SSHClient sshClient = new SSHClient();
>     sshClient.addHostKeyVerifier((hostname, port, key) -> true);
27c42
<                 jsch.addIdentity(file.getAbsolutePath());
---
>         sshClient.loadKeys(keyPair);
29,34c44,46
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
---
>         final OpenSSHKeyFormat keyFormat = new OpenSSHKeyFormat();
>         final OpenSSHKeyPair openSSHKeyPair = keyFormat.parse(keyPair.getPrivate());
>         sshClient.loadKeys(openSSHKeyPair.toKeyPair(this.passphrase.getBytes(StandardCharsets.UTF_8)));
36c48,49
<             Logger.debug(
---
>     Logger logger = LoggerFactory.getLogger(getClass());
>     logger.debug(
38,40c51,55
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
---
>         "Opening SSH session to {}@{}:{} ({})...",
>         this.getLogin(),
>         this.getAddr(),
>         this.getPort(),
>         Files.size(file.toPath())
42,47c57
<             return this.session(jsch);
<         } catch (final JSchException ex) {
<             throw new IOException(ex);
<         } finally {
<             Files.deleteIfExists(file.toPath());
<         }
---
>     return this.session(sshClient);
