1,2c1,29
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
---
> import com.google.common.io.BaseEncoding;
> import com.jcabi.ssh.JSchException;
> import java.io.ByteArrayInputStream;
> import java.io.File;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.nio.charset.StandardCharsets;
> import java.nio.file.Files;
> import java.nio.file.Paths;
> import java.security.KeyPair;
> import java.security.spec.PKCS8EncodedKeySpec;
> import java.util.concurrent.TimeUnit;
> import javax.annotation.Nullable;
> import net.schmizz.sshj.SSHClient;
> import net.schmizz.sshj.common.SecurityUtils;
> import net.schmizz.sshj.transport.kex.DHG1;
> import net.schmizz.sshj.userauth.keyprovider.KeyPairProvider;
> import net.schmizz.sshj.userauth.keyprovider.OpenSSHKeyFormat;
> import net.schmizz.sshj.userauth.keyprovider.OpenSSHKeyProvider;
> import net.schmizz.sshj.userauth.keyprovider.PublicKeyProvider;
> import org.apache.commons.lang3.StringUtils;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> import retrofit2.RetryOnFailure;
> import static java.nio.file.StandardOpenOption.CREATE;
> import static java.nio.file.StandardOpenOption.WRITE;
> import static java.util.concurrent.TimeUnit.MINUTES;
> import static net.schmizz.sshj.transport.verification.PromiscuousVerifier.getInstance;
> 
6c33
<         unit = TimeUnit.MINUTES,
---
>     unit = MINUTES,
11,18c38
<         final File file = File.createTempFile("jcabi-ssh", ".key");
<         try {
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             new Unchecked<>(
<                 new LengthOf(
<                     new TeeInput(
<                         this.key.replaceAll("\r", "")
---
>     final String privateKey = this.key.replaceAll("\r", "")
20,34c40,47
<                             .trim(),
<                         file
<                     )
<                 )
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
<             if (this.passphrase == null) {
<                 jsch.addIdentity(file.getAbsolutePath());
<             } else {
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
---
>         .trim();
>     final byte[] decoded = BaseEncoding.base64().decode(privateKey);
>     final PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(decoded);
>     final KeyPair keyPair = KeyPair.getInstance("RSA");
>     keyPair.setPrivate(spec);
>     final File tempFile = File.createTempFile("jcabi-ssh", ".key");
>     try (FileOutputStream outputStream = new FileOutputStream(tempFile)) {
>         outputStream.write(keyPair.getPublic().getEncoded());
36,46c49,56
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
<             );
<             return this.session(jsch);
<         } catch (final JSchException ex) {
<             throw new IOException(ex);
<         } finally {
<             Files.deleteIfExists(file.toPath());
---
>     final SSHClient sshClient = new SSHClient();
>     sshClient.addHostKeyVerifier(getInstance());
>     sshClient.connect(this.getAddr(), this.getPort());
>     try (OpenSSHKeyProvider provider = new OpenSSHKeyProvider(sshClient)) {
>         provider.setHomeDir(null);
>         provider.setPublicKeysDir(null);
>         provider.setPublicKeyFiles(new File[]{tempFile});
>         sshClient.userauth().password(provider);
47a58
>     return new Session(sshClient);
