0a1,43
> import com.artipie.http.auth.AuthUser;
> import com.artipie.http.auth.Authentication;
> import com.artipie.http.auth.Authentication.Single;
> import com.artipie.http.auth.Permission;
> import com.artipie.http.auth.Permissions;
> import com.artipie.http.auth.RolePermissions;
> import com.artipie.http.slice.Slice;
> import com.artipie.http.ssl.SslUtils;
> import com.artipie.http.ssl.SslUtils.KeyManagers;
> import com.artipie.http.ssl.SslUtils.TrustManagers;
> import com.artipie.http.ssl.SslUtils.TrustManagers.Builder;
> import io.reactivex.CompletableFuture;
> import java.io.InputStream;
> import java.net.InetSocketAddress;
> import java.nio.charset.StandardCharsets;
> import java.nio.file.Files;
> import java.nio.file.Path;
> import java.nio.file.Paths;
> import java.security.KeyStore;
> import java.security.KeyStoreException;
> import java.security.NoSuchAlgorithmException;
> import java.security.SecureRandom;
> import java.security.cert.CertificateException;
> import java.security.cert.X509Certificate;
> import java.util.Base64;
> import java.util.Collections;
> import java.util.HashMap;
> import java.util.List;
> import java.util.Map;
> import java.util.Objects;
> import java.util.Optional;
> import java.util.Set;
> import java.util.UUID;
> import java.util.concurrent.ConcurrentHashMap;
> import java.util.concurrent.ExecutionException;
> import java.util.stream.Collectors;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import org.junit.jupiter.api.Test;
> import org.mockito.Mockito;
> import reactor.core.publisher.Mono;
> import reactor.test.StepVerifier;
> 
2c45
<     void testScope() {
---
> void testScope() throws Exception {
6a50,60
>     final KeyStore keyStore = KeyStore.getInstance("JKS");
>     final InputStream is = this.getClass()
>         .getClassLoader()
>         .getResourceAsStream("test.p12");
>     keyStore.load(is, "testpass".toCharArray());
>     final TrustManagers trustManagers = new Builder().addCerts(keyStore).build();
>     final SslUtils.KeyManagers keyManagers = SslUtils.keyManagers(
>         keyStore,
>         "testpass",
>         new SecureRandom()
>     );
10c64
<                 public Scope scope(final String rqline) {
---
>             public Slice scope(final String rqline) {
25,35c79,82
<                 new AuthScheme.Result() {
<                     @Override
<                     public Optional<Authentication.User> user() {
<                         return Optional.of(new Authentication.User("alice"));
<                     }
< 
<                     @Override
<                     public String challenge() {
<                         return "";
<                     }
<                 }
---
>             new Single(
>                 new AuthUser("alice", Collections.emptySet()),
>                 ""
>             )
