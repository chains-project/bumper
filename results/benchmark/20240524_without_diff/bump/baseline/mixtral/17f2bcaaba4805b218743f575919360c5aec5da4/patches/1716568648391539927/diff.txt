0a1,16
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.geom.util.LinearRing;
> import org.locationtech.jts.index.ItemVisitor;
> import org.locationtech.jts.index.SpatialIndex;
> import org.locationtech.jts.index.strtree.STRtree;
> import org.locationtech.jts.operation.polygonize.Polygonizer;
> import org.locationtech.jts.util.GeometricShapeFactory;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.concurrent.CopyOnWriteArraySet;
> 
4a21,22
>     GeometryFactory GEOM_FACTORY = new GeometryFactory();
>     GeometricShapeFactory PGS = new GeometricShapeFactory(GEOM_FACTORY);
13c31,33
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         for (SegmentString ss : nodedSS) {
>             nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1))));
>         }
18,20c38,39
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         for (PEdge e : nodedEdgesSet) {
>             LineString l = GEOM_FACTORY.createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
21a41,49
>         }
> 
>         List<Polygon> JTS = new ArrayList<>();
>         polygonizerJTS.getPolygons().apply(new ItemVisitor<Polygon, Void>() {
>             @Override
>             public Void visit(Polygon item, Void v) {
>                 JTS.add(item);
>                 return null;
>             }
24,35c52,74
<                         long t1 = System.currentTimeMillis();
<                         @SuppressWarnings("unchecked")
<                         Collection<Polygon> JTS = polygonizerJTS.getPolygons();
<                         long t2 = System.currentTimeMillis();
<                         long timeJTS = t2 - t1;
< 
<                         t1 = System.currentTimeMillis();
<                         PShape FP = polygonize(nodedEdgesSet);
<                         t2 = System.currentTimeMillis();
<                         long timeFP = t2 - t1;
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
<                         assertEquals(JTS.size(), FP.getChildCount());
---
>         SpatialIndex index = new STRtree();
>         for (Polygon polygon : JTS) {
>             LinearRing shell = polygon.getExteriorRing();
>             index.insert(shell.getEnvelopeInternal(), polygon);
>         }
> 
>         Collection<Polygon> FP = new CopyOnWriteArraySet<>();
>         for (Polygon polygon : JTS) {
>             LinearRing shell = polygon.getExteriorRing();
>             Collection<Polygon> candidates = index.query(shell.getEnvelopeInternal());
>             boolean added = false;
>             for (Polygon candidate : candidates) {
>                 if (candidate.covers(polygon)) {
>                     added = true;
>                     break;
>                 }
>             }
>             if (!added) {
>                 FP.add(polygon);
>             }
>         }
> 
>         assertEquals(JTS.size(), FP.size());
