0a1,17
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.operation.polygonize.Polygonizer;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.concurrent.ThreadLocalRandom;
> 
> import static micycle.pgs.PGS.GEOM_FACTORY;
> import static micycle.pgs.PGS.coordFromPVector;
> import static micycle.pgs.PGS.nodeSegmentStrings;
> import static micycle.pgs.PGS.toPVector;
> 
4,6c21,26
<                 Random r = new XoRoShiRo128PlusRandom(0);
<                 for (int k = 0; k < 100; k++) {
<                         List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
---
>     final GeometryFactory geometryFactory = GEOM_FACTORY;
>     final ThreadLocalRandom random = ThreadLocalRandom.current();
>     final int iterations = 100;
> 
>     for (int k = 0; k < iterations; k++) {
>         List<org.locationtech.jts.geom.LineString> segmentStrings = new ArrayList<>(111 + k);
8,9c28,31
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>             segmentStrings.add(new LineString(new Coordinate[]{
>                     new Coordinate(random.nextDouble() * 10000, random.nextDouble() * 10000),
>                     new Coordinate(random.nextDouble() * 10000, random.nextDouble() * 13337)
>             }, geometryFactory));
11,14c33,39
<                         Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
<                         Collection<PEdge> nodedEdges = new ArrayList<>();
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
<                         Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
---
>         Collection<Polygon> nodedSS = nodeSegmentStrings(segmentStrings);
>         Collection<org.locationtech.jts.geom.LineString> nodedEdges = new ArrayList<>();
>         nodedSS.forEach(ss -> nodedEdges.add(new LineString(new Coordinate[]{
>                 coordFromPVector(toPVector(ss.getCoordinate(0))),
>                 coordFromPVector(toPVector(ss.getCoordinate(1)))
>         }, geometryFactory)));
>         Collection<org.locationtech.jts.geom.LineString> nodedEdgesSet = new HashSet<>(nodedEdges);
19,20c44,47
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>             LineString l = geometryFactory.createLineString(new Coordinate[]{
>                     coordFromPVector(toPVector(e.getCoordinateN(0))),
>                     coordFromPVector(toPVector(e.getCoordinateN(1)))
>             });
31c58
<                         PShape FP = polygonize(nodedEdgesSet);
---
>         Collection<Polygon> FP = polygonize(nodedEdgesSet);
34,35c61,62
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
<                         assertEquals(JTS.size(), FP.getChildCount());
---
> 
>         assertEquals(JTS.size(), FP.size());
