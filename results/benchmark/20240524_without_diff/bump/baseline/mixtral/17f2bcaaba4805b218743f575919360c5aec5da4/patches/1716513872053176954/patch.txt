import org.tinspin.index.PointIndexMMWrapper;
import org.tinspin.index.phtree.PHTreeMMP;
import org.tinspin.index.util.MinHeap;
import org.tinspin.index.util.MinHeapI;
import org.tinspin.index.util.MinMaxHeap;
import org.tinspin.index.util.MinMaxHeapI;

// ...

public class FastPolygonizerTests {
  // ...

  @Test
  public void testIndexSize() {
    PointIndexMMWrapper index = new PointIndexMMWrapper();
    // ... add elements to index
    int size = index.size();
    assertEquals(expectedSize, size);

    PHTreeMMP phtree = new PHTreeMMP();
    // ... add elements to phtree
    int phtreeSize = phtree.size();
    assertEquals(expectedPHTreeSize, phtreeSize);

    MinHeap minHeap = new MinHeap();
    // ... add elements to minHeap
    int minHeapSize = minHeap.size();
    assertEquals(expectedMinHeapSize, minHeapSize);

    MinHeapI minHeapI = new MinHeapI() {
      // implement required methods
    };
    // ... add elements to minHeapI
    int minHeapISize = minHeapI.size();
    assertEquals(expectedMinHeapISize, minHeapISize);

    MinMaxHeap minMaxHeap = new MinMaxHeap();
    // ... add elements to minMaxHeap
    int minMaxHeapSize = minMaxHeap.size();
    assertEquals(expectedMinMaxHeapSize, minMaxHeapSize);

    MinMaxHeapI minMaxHeapI = new MinMaxHeapI() {
      // implement required methods
    };
    // ... add elements to minMaxHeapI
    int minMaxHeapISize = minMaxHeapI.size();
    assertEquals(expectedMinMaxHeapISize, minMaxHeapISize);
  }
}