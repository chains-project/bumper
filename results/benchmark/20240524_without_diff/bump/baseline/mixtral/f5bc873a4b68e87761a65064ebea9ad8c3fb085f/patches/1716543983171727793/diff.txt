1c1,36
< import org.apache.maven.artifact.DependencyResolutionRequiredException;
\ No newline at end of file
---
> import org.apache.maven.artifact.resolver.ArtifactResolver;
> import org.apache.maven.artifact.resolver.ArtifactResolutionException;
> import org.apache.maven.artifact.resolver.ArtifactResolverException, ArtifactResolutionResult;
> import org.apache.maven.plugin.AbstractMojo;
> import org.apache.maven.plugin.MojoExecutionException;
> import org.apache.maven.project.MavenProject;
> import org.codehaus.plexus.components.interactivity.Prompter;
> import org.codehaus.plexus.components.interactivity.PrompterException;
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectingDependencyResolver;
> import org.eclipse.aether.collection.DependencyCollectionException;
> import org.eclipse.aether.collection.DependencyResolver;
> import org.eclipse.aether.graph.Dependency;
> import org.eclipse.aether.graph.DependencyGraphTransformationException;
> import org.eclipse.aether.graph.DependencyNode;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.util.graph.visitor.PreorderDepthFirstVisitor;
> 
> // ...
> 
> @Override
> public void execute() throws MojoExecutionException {
>     try {
>         // ...
> 
>         RepositorySystem repoSystem = repositorySystemSession.getRepositorySystem();
>         DependencyResolver dependencyResolver = new CollectingDependencyResolver(repoSystem,
>                 repositorySystemSession, new RepositoryEventDispatcher());
> 
>         // ...
> 
>     } catch (DependencyResolutionException e) {
>         throw new MojoExecutionException("Failed to resolve dependencies: " + e.getMessage(), e);
>     }
> }
\ No newline at end of file
