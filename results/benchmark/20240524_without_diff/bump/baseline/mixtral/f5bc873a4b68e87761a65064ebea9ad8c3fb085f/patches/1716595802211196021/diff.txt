1c1,92
< import org.apache.maven.artifact.DependencyResolutionRequiredException;
\ No newline at end of file
---
> import org.apache.maven.artifact.DependencyResolutionException;
> import org.apache.maven.plugin.AbstractMojo;
> import org.apache.maven.plugin.MojoExecutionException;
> import org.apache.maven.plugins.annotations.Component;
> import org.apache.maven.plugins.annotations.Mojo;
> import org.apache.maven.plugins.annotations.Parameter;
> import org.apache.maven.project.MavenProject;
> import org.codehaus.plexus.archiver.Archiver;
> import org.codehaus.plexus.archiver.ArchiverException;
> import org.codehaus.plexus.archiver.manager.ArchiverManager;
> 
> import java.io.File;
> import java.io.IOException;
> import java.util.Collection;
> import java.util.List;
> import java.util.Objects;
> import java.util.stream.Collectors;
> 
> @Mojo(name = "unpack-theme", requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME)
> public class UnPackThemeMojo extends AbstractMojo {
> 
>     @Parameter(defaultValue = "${project}", readonly = true, required = true)
>     private MavenProject project;
> 
>     @Parameter(defaultValue = "${component.organization.archive.archiver}", readonly = true, required = true)
>     private ArchiverManager archiverManager;
> 
>     @Parameter(defaultValue = "${project.build.directory}", readonly = true, required = true)
>     private File outputDirectory;
> 
>     @Parameter(defaultValue = "${project.remotePluginRepositories}", readonly = true, required = true)
>     private List<Object> remotePluginRepositories;
> 
>     @Parameter(defaultValue = "${project.pluginArtifactRepositories}", readonly = true, required = true)
>     private List<Object> pluginArtifactRepositories;
> 
>     @Parameter(defaultValue = "${project.distributionManagement.repository.url}", readonly = true, required = true)
>     private String repositoryUrl;
> 
>     @Parameter(defaultValue = "${project.distributionManagement.snapshotRepository.url}", readonly = true, required = true)
>     private String snapshotRepositoryUrl;
> 
>     @Parameter(defaultValue = "${project.distributionManagement.downloadUrl}", readonly = true, required = true)
>     private String downloadUrl;
> 
>     @Parameter(defaultValue = "${project.remoteProjectRepositories}", readonly = true, required = true)
>     private List<Object> remoteProjectRepositories;
> 
>     @Component
>     private Archiver archiver;
> 
>     @Override
>     public void execute() throws MojoExecutionException {
>         try {
>             Collection<File> files = getThemeFiles();
>             if (files.isEmpty()) {
>                 getLog().info("No themes found.");
>                 return;
>             }
> 
>             for (File file : files) {
>                 File destDir = new File(outputDirectory, file.getName().replaceAll("\\.t?gz$", ""));
>                 getLog().info("Unpacking " + file.getName() + " to " + destDir.getAbsolutePath());
>                 archiver.extract(file, destDir);
>             }
>         } catch (DependencyResolutionRequiredException e) {
>             throw new MojoExecutionException("Dependency resolution is required for this mojo.", e);
>         } catch (ArchiverException | IOException e) {
>             throw new MojoExecutionException("Failed to unpack themes.", e);
>         }
>     }
> 
>     private Collection<File> getThemeFiles() throws DependencyResolutionRequiredException {
>         List<File> themeFiles = project.getDependencyArtifacts()
>                 .stream()
>                 .filter(Objects::nonNull)
>                 .filter(artifact -> "theme".equals(artifact.getType()))
>                 .map(artifact -> new File(artifact.getFile().getParentFile(), artifact.getFile().getName()))
>                 .collect(Collectors.toList());
> 
>         if (themeFiles.isEmpty()) {
>             themeFiles = project.getArtifacts()
>                     .stream()
>                     .filter(Objects::nonNull)
>                     .filter(artifact -> "theme".equals(artifact.getType()))
>                     .map(artifact -> new File(artifact.getFile().getParentFile(), artifact.getFile().getName()))
>                     .collect(Collectors.toList());
>         }
> 
>         return themeFiles;
>     }
> }
\ No newline at end of file
