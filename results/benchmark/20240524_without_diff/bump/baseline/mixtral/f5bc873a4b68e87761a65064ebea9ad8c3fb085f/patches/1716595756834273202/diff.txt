1c1,95
< import org.apache.maven.artifact.DependencyResolutionRequiredException;
\ No newline at end of file
---
> import org.apache.maven.artifact.Artifact;
> import org.apache.maven.artifact.factory.ArtifactFactory;
> import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;
> import org.apache.maven.artifact.repository.ArtifactRepository;
> import org.apache.maven.artifact.resolver.ArtifactResolver;
> import org.apache.maven.execution.MavenSession;
> import org.apache.maven.plugin.AbstractMojo;
> import org.apache.maven.plugin.MojoExecutionException;
> import org.apache.maven.plugin.MojoFailureException;
> import org.apache.maven.project.MavenProject;
> import org.codehaus.plexus.components.interactivity.Prompting;
> import org.codehaus.plexus.components.interactivity.Prompter;
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.DependencyCollectionException;
> import org.eclipse.aether.collection.DependencyFilter;
> import org.eclipse.aether.graph.Dependency;
> import org.eclipse.aether.graph.DependencyNode;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactResult;
> import org.eclipse.aether.resolution.DependencyResolutionException;
> import org.eclipse.aether.resolution.VersionRangeRequest;
> import org.eclipse.aether.resolution.VersionRangeResolutionException;
> import org.eclipse.aether.version.Version;
> import org.eclipse.aether.version.VersionException;
> import org.eclipse.aether.version.VersionRange;
> 
> import java.io.File;
> import java.io.IOException;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Map;
> import java.util.Objects;
> import java.util.Set;
> import java.util.function.Predicate;
> import java.util.stream.Collectors;
> 
> /**
>  * Unpacks a Tobago theme.
>  *
>  * @author Martin Marinschek
>  * @since 1.0
>  */
> public class UnPackThemeMojo extends AbstractMojo {
> 
>   // ... other method signatures ...
> 
>   @Override
>   public void execute() throws MojoExecutionException, MojoFailureException {
>     // ... other statements ...
> 
>     // Replace the failing statement:
>     final Dependency dependency = getDependency(groupId, artifactId, version);
> 
>     // ... other statements ...
>   }
> 
>   // ... other method signatures ...
> 
>   private Dependency getDependency(String groupId, String artifactId, String version) {
>     final Artifact artifact = artifactFactory.createArtifact(groupId, artifactId, "jar", version);
>     final Set<RemoteRepository> remoteRepositories = new HashSet<>(session.getRemoteRepositories());
>     final Dependency dependency = new Dependency(artifact, null);
>     final Predicate<DependencyNode> filter = node -> Objects.equals(node.getArtifact(), dependency.getArtifact());
>     try {
>       final List<DependencyNode> nodes =
>           repositorySystemSession
>               .getDependencyManager()
>               .resolveDependencies(
>                   repositorySystemSession,
>                   new CollectRequest(dependency, filter),
>                   new DependencyFilter() {
>                     @Override
>                     public boolean accept(Dependency dependency) {
>                       return true;
>                     }
>                   });
>       if (nodes.size() > 1) {
>         throw new IllegalStateException(
>             "Unable to find unique dependency for ["
>                 + groupId
>                 + ":"
>                 + artifactId
>                 + ":"
>                 + version
>                 + "].");
>       }
>       final DependencyNode node = nodes.get(0);
>       return node.getDependency();
>     } catch (DependencyResolutionException e) {
>       throw new MojoExecutionException("Failed to resolve dependency.", e);
>     }
>   }
> }
\ No newline at end of file
