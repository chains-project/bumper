0a1
> import org.apache.maven.artifact.Artifact;
1a3,71
> import org.apache.maven.plugin.AbstractMojo;
> import org.apache.maven.plugin.MojoExecutionException;
> import org.apache.maven.plugins.annotations.Component;
> import org.apache.maven.plugins.annotations.Parameter;
> import org.apache.maven.project.MavenProject;
> import org.codehaus.plexus.components.io.fileselectors.IncludeExcludeFilter;
> 
> import java.io.File;
> import java.io.FileFilter;
> import java.io.IOException;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.Set;
> 
> public class UnPackThemeMojo extends AbstractMojo {
>     // ...
> 
>     @Parameter(defaultValue = "${project}", readonly = true, required = true)
>     private MavenProject project;
> 
>     @Parameter(defaultValue = "${component.org.codehaus.plexus.components.io.fileselectors.IncludeExcludeFilter}", readonly = true, required = true)
>     private IncludeExcludeFilter includeExcludeFilter;
> 
>     @Component
>     private ArtifactFactory artifactFactory;
> 
>     // ...
> 
>     @Override
>     public void execute() throws MojoExecutionException {
>         try {
>             File themeDir = getThemeDir();
> 
>             Collection<Artifact> dependencies = getDependencies();
> 
>             Set<File> files = new HashSet<>();
> 
>             for (Artifact artifact : dependencies) {
>                 File file = artifact.getFile();
>                 if (file.isFile()) {
>                     files.add(file);
>                 }
>             }
> 
>             FileFilter fileFilter = new FileFilter() {
>                 @Override
>                 public boolean accept(File pathname) {
>                     return includeExcludeFilter.accept(pathname);
>                 }
>             };
> 
>             for (File file : files) {
>                 File[] files2 = file.listFiles(fileFilter);
>                 if (files2 != null) {
>                     for (File f : files2) {
>                         processFile(f, themeDir);
>                     }
>                 }
>             }
> 
>         } catch (DependencyResolutionRequiredException ex) {
>             throw new MojoExecutionException("Unable to resolve dependencies", ex);
>         } catch (IOException ex) {
>             throw new MojoExecutionException("Unable to read from archive", ex);
>         }
>     }
> 
>     // ...
> }
\ No newline at end of file
