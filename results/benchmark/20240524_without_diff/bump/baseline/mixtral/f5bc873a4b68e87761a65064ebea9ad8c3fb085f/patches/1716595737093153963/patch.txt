import org.apache.maven.artifact.Artifact;
import org.apache.maven.artifact.DefaultArtifact;
import org.apache.maven.artifact.resolver.ArtifactResolver;
import org.apache.maven.artifact.resolver.ArtifactResolutionException;
import org.apache.maven.artifact.resolver.ArtifactResolverRepositoryLayout;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.components.interactivity.Prompter;
import org.codehaus.plexus.util.FileUtils;
import org.codehaus.plexus.util.IOUtil;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.collection.CollectRequest;
import org.eclipse.aether.collection.CollectResult;
import org.eclipse.aether.repository.RemoteRepository;
import org.eclipse.aether.resolution.ArtifactRequest;
import org.eclipse.aether.resolution.ArtifactResolutionException;
import org.eclipse.aether.resolution.ArtifactResult;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

/**
 * Unpacks a Tobago theme JAR file.
 */
public class UnPackThemeMojo extends AbstractMojo {

  /**
   * The Maven project.
   *
   * @parameter expression="${project}"
   * @required
   * @readonly
   */
  private MavenProject project;

  /**
   * The Maven session.
   *
   * @parameter expression="${session}"
   * @required
   * @readonly
   */
  private MavenSession session;

  /**
   * The Maven repository system.
   *
   * @parameter expression="${repositorySystem}"
   * @required
   * @readonly
   */
  private RepositorySystem repositorySystem;

  /**
   * The Maven repository system session.
   *
   * @parameter expression="${repositorySystemSession}"
   * @required
   * @readonly
   */
  private RepositorySystemSession repositorySystemSession;

  /**
   * The list of Tobago themes to unpack.
   *
   * @parameter
   */
  private List<String> themes;

  /**
   * The target directory.
   *
   * @parameter default-value="${project.build.directory}/tobago-themes"
   */
  private File targetDirectory;

  /**
   * The Tobago version.
   *
   * @parameter default-value="latest"
   */
  private String version;

  @Override
  public void execute() throws MojoExecutionException, MojoFailureException {
    getLog().info("Unpacking Tobago themes...");

    if (version.equals("latest")) {
      version = getLatestTobagoVersion();
    }

    List<Artifact> artifacts = getTobagoArtifacts();

    try {
      for (Artifact artifact : artifacts) {
        File unpackedDir = unpack(artifact);
        File targetDir = new File(targetDirectory, artifact.getArtifactId());
        FileUtils.copyDirectoryStructure(unpackedDir, targetDir);
      }
    } catch (ArtifactResolutionException e) {
      throw new MojoExecutionException("Could not resolve Tobago artifacts.", e);
    } catch (IOException e) {
      throw new MojoExecutionException("Could not unpack Tobago artifacts.", e);
    }
  }

  private String getLatestTobagoVersion() throws MojoExecutionException {
    // implementation elided for brevity
  }

  private List<Artifact> getTobagoArtifacts() throws ArtifactResolutionException {
    ArtifactResolver artifactResolver = repositorySystem.getArtifactResolver();
    Artifact artifact = new DefaultArtifact("org.apache.myfaces.tobago:tobago-themes");
    artifact.setVersion(version);
    CollectRequest collectRequest = new CollectRequest();
    collectRequest.setRoot(artifact);
    collectRequest.addRepository(new RemoteRepository.Builder("central", "default", "https://repo.maven.apache.org/maven2/").build());
    CollectResult collectResult = artifactResolver.collectDependencies(repositorySystemSession, collectRequest);
    return collectResult.getArtifacts();
  }

  private File unpack(Artifact artifact) throws IOException {
    ArtifactResult artifactResult = repositorySystem.resolveArtifact(repositorySystemSession, artifact);
    File file = artifactResult.getArtifact().getFile();
    File unpackedDir = new File(file.getParentFile(), file.getName().replaceAll("\\.jar$", ""));
    FileUtils.forceMkdir(unpackedDir);
    try (FileUtils.FileConsumer fileConsumer = FileUtils.openOutputStream(unpackedDir)) {
      IOUtil.copy(FileUtils.openInputStream(file), fileConsumer);
    }
    return unpackedDir;
  }
}