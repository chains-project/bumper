import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugins.annotations.Mojo;
import org.codehaus.plexus.components.io.resources.PlexusIoResource;
import org.eclipse.aether.RepositorySystem;
import org.eclipse.aether.RepositorySystemSession;
import org.eclipse.aether.collection.CollectRequest;
import org.eclipse.aether.collection.DependencyCollectionException;
import org.eclipse.aether.collection.DependencyCollectionResult;
import org.eclipse.aether.graph.Dependency;
import org.eclipse.aether.graph.DependencyNode;
import org.eclipse.aether.repository.RemoteRepository;
import org.eclipse.aether.resolution.ArtifactResolutionException;
import org.eclipse.aether.resolution.ArtifactResult;
import org.eclipse.aether.resolution.DependencyRequest;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

@Mojo(name = "unpack-theme", threadSafe = true)
public class UnPackThemeMojo extends AbstractMojo {

    // existing code

    @Override
    public void execute() throws DependencyResolutionRequiredException {
        RepositorySystem repositorySystem = getRepositorySystem();
        RepositorySystemSession repositorySystemSession = getRepositorySystemSession();

        RemoteRepository remoteRepository = new RemoteRepository.Builder("central", "default", "https://repo.maven.apache.org/maven2/").build();

        String groupId = "org.apache.myfaces.tobago";
        String artifactId = "tobago-theme-bootstrap";
        String version = "2.0.0";
        String classifier = "";

        ArtifactResult artifactResult = resolveArtifact(repositorySystem, repositorySystemSession, remoteRepository, groupId, artifactId, version, classifier);
        File artifactFile = artifactResult.getArtifact().getFile();

        List<DependencyNode> dependencyNodes = collectDependencies(repositorySystem, repositorySystemSession, remoteRepository, groupId, artifactId, version);

        List<DependencyNode> themeNodes = findThemeNodes(dependencyNodes);

        // existing code
    }

    private ArtifactResult resolveArtifact(RepositorySystem repositorySystem, RepositorySystemSession repositorySystemSession, RemoteRepository remoteRepository, String groupId, String artifactId, String version, String classifier)
            throws ArtifactResolutionException {
        Dependency dependency = new Dependency(groupId, artifactId, version, classifier);
        DependencyRequest request = new DependencyRequest(dependency, Arrays.asList(remoteRepository));
        return repositorySystem.resolveArtifact(repositorySystemSession, request).getArtifactResult();
    }

    private List<DependencyNode> collectDependencies(RepositorySystem repositorySystem, RepositorySystemSession repositorySystemSession, RemoteRepository remoteRepository, String groupId, String artifactId, String version)
            throws DependencyCollectionException {
        Dependency dependency = new Dependency(groupId, artifactId, version);
        CollectRequest collectRequest = new CollectRequest();
        collectRequest.setRoot(dependency);
        collectRequest.setRepositories(Arrays.asList(remoteRepository));
        DependencyCollectionResult result = repositorySystem.collectDependencies(repositorySystemSession, collectRequest);
        return result.getRoot().getChildren();
    }

    private List<DependencyNode> findThemeNodes(List<DependencyNode> dependencyNodes) {
        return dependencyNodes.stream()
                .filter(node -> Objects.nonNull(node.getArtifact().getArtifactId()) && node.getArtifact().getArtifactId().startsWith("tobago-theme-"))
                .collect(Collectors.toList());
    }
}