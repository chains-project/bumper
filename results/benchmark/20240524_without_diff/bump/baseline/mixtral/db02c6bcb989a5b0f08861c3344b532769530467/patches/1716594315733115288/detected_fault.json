{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 22600334,
    "in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @Test\n    void failsOnDigestMismatch() {\n        final InMemoryStorage storage = new InMemoryStorage();\n        final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple(\"any\"));\n        final String digest = \"123\";\n        blobs.put(new CheckedBlobSource(new Content.From(\"data\".getBytes()), new Digest.Sha256(digest))).toCompletableFuture().handle((blob, throwable) -> {\n            MatcherAssert.assertThat(\"Exception thrown\", throwable, new IsNot<>(new IsNull<>()));\n            MatcherAssert.assertThat(\"Exception is InvalidDigestException\", Throwables.getRootCause(throwable), new IsInstanceOf(InvalidDigestException.class));\n            MatcherAssert.assertThat(\"Exception message contains calculated digest\", Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n            MatcherAssert.assertThat(\"Exception message contains expected digest\", Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(digest));\n            return CompletableFuture.allOf();\n        }).join();\n    }\n\n    private static class JUnit413StringContains extends BaseMatcher<String> {\n        private final String expected;\n\n        JUnit413StringContains(String expected) {\n            this.expected = expected;\n        }\n\n        // TODO: review this AI generated patch!\n        public boolean matches(Object actual) {\n            return (actual instanceof String) && ((String) (actual)).contains(expected);\n        }\n\n        @Override\n        public void describeTo(Description description) {\n            description.appendText(\"a string containing: \").appendValue(expected);\n        }\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link AstoBlobs}.\n *\n * @since 0.1\n * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n */\nfinal class AstoBlobsITCase {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.api.Test\n    void failsOnDigestMismatch() {\n        final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n        final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n        final java.lang.String digest = \"123\";\n        blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n            org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n            org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(digest));\n            return java.util.concurrent.CompletableFuture.allOf();\n        }).join();\n    }\n\n    private static class JUnit413StringContains extends com.artipie.docker.asto.BaseMatcher<java.lang.String> {\n        private final java.lang.String expected;\n\n        JUnit413StringContains(java.lang.String expected) {\n            this.expected = expected;\n        }\n\n        // TODO: review this AI generated patch!\n        public boolean matches(java.lang.Object actual) {\n            return (actual instanceof java.lang.String) && ((java.lang.String) (actual)).contains(expected);\n        }\n\n        @java.lang.Override\n        public void describeTo(com.artipie.docker.asto.Description description) {\n            description.appendText(\"a string containing: \").appendValue(expected);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "    method org.hamcrest.MatcherAssert.<T>assertThat(T,org.hamcrest.Matcher<? super T>) is not applicable\n      (cannot infer type-variable(s) T\n        (actual and formal argument lists differ in length))\n    method org.hamcrest.MatcherAssert.<T>assertThat(java.lang.String,T,org.hamcrest.Matcher<? super T>) is not applicable\n      (cannot infer type-variable(s) T\n        (argument mismatch; com.artipie.docker.asto.AstoBlobsITCase.JUnit413StringContains cannot be converted to org.hamcrest.Matcher<? super T>))\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java:[85,30] no suitable method found for assertThat(java.lang.String,java.lang.String,com.artipie.docker.asto.AstoBlobsITCase.JUnit413StringContains)",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/asto/AstoBlobsITCase.java",
        "client_line_position": "85"
    },
    "client_end_line_number": 100,
    "client_line_number": 63,
    "method_code": "// TODO: review this AI generated patch!\n@Test\nvoid failsOnDigestMismatch() {\n    final InMemoryStorage storage = new InMemoryStorage();\n    final AstoBlobs blobs = new AstoBlobs(\n            storage, new DefaultLayout(), new RepoName.Simple(\"any\")\n    );\n    final String digest = \"123\";\n    blobs.put(\n            new CheckedBlobSource(new Content.From(\"data\".getBytes()), new Digest.Sha256(digest))\n    ).toCompletableFuture().handle(\n            (blob, throwable) -> {\n                MatcherAssert.assertThat(\n                        \"Exception thrown\",\n                        throwable,\n                        new IsNot<>(new IsNull<>())\n                );\n                MatcherAssert.assertThat(\n                        \"Exception is InvalidDigestException\",\n                        Throwables.getRootCause(throwable),\n                        new IsInstanceOf(InvalidDigestException.class)\n                );\n                MatcherAssert.assertThat(\n                        \"Exception message contains calculated digest\",\n                        Throwables.getRootCause(throwable).getMessage(),\n                        new JUnit413StringContains(\n                                \"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"\n                        )\n                );\n                MatcherAssert.assertThat(\n                        \"Exception message contains expected digest\",\n                        Throwables.getRootCause(throwable).getMessage(),\n                        new JUnit413StringContains(digest)\n                );\n                return CompletableFuture.allOf();\n            }\n    ).join();\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.api.Test\nvoid failsOnDigestMismatch() {\n    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();\n    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple(\"any\"));\n    final java.lang.String digest = \"123\";\n    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From(\"data\".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {\n        org.hamcrest.MatcherAssert.assertThat(\"Exception thrown\", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception is InvalidDigestException\", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains calculated digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(\"3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7\"));\n        org.hamcrest.MatcherAssert.assertThat(\"Exception message contains expected digest\", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new com.artipie.docker.asto.JUnit413StringContains(digest));\n        return java.util.concurrent.CompletableFuture.allOf();\n    }).join();\n}",
    "method_name": "failsOnDigestMismatch"
}