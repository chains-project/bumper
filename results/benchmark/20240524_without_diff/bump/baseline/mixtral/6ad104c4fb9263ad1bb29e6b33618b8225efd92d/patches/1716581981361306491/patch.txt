import org.bouncycastle.tls.AlertDescription;
import org.bouncycastle.tls.crypto.TlsCrypto;
import org.bouncycastle.util.Arrays;

import java.io.IOException;
import java.security.SecureRandom;
import java.util.Hashtable;

public class ChachaDecoder {
    private static final int CHACHA20_POLY1305_TAG_LENGTH = 16;
    private static final int CHACHA20_POLY1305_MIN_IV_LENGTH = 12;
    private static final int CHACHA20_POLY1305_MAX_IV_LENGTH = 16;
    private static final int CHACHA20_POLY1305_MIN_NONCE_LENGTH = 8;
    private static final int CHACHA20_POLY1305_NONCE_LENGTH = 12;
    private static final int CHACHA20_POLY1305_KEY_LENGTH = 32;
    private static final int CHACHA20_POLY1305_MIN_AAD_LENGTH = 0;
    private static final int CHACHA20_POLY1305_MAX_AAD_LENGTH = (1 << 20) - 1;
    private static final int CHACHA20_POLY1305_TAG_LENGTH_BITS = 128;
    private static final int CHACHA20_POLY1305_MIN_MAC_LENGTH = 16;
    private static final int CHACHA20_POLY1305_MAX_MAC_LENGTH = 16;
    private static final int CHACHA20_POLY1305_MIN_LENGTH = 16;
    private static final int CHACHA20_POLY1305_MAX_LENGTH = (1 << 20) - 1;

    private final SecureRandom random;
    private final TlsCrypto crypto;

    public ChachaDecoder(Hashtable<String, String> config) {
        this.random = new SecureRandom();
        this.crypto = TlsCrypto.getInstance("ChaCha20Poly1305", config);
    }

    protected int decode(byte[] src, int srcOffset, int length, byte[] dst, int dstOffset) throws IOException {
        if (length < CHACHA20_POLY1305_MIN_LENGTH) {
            throw new IllegalArgumentException("input length too short");
        }

        int macLength = length - CHACHA20_POLY1305_MIN_LENGTH;
        if (macLength < CHACHA20_POLY1305_MIN_MAC_LENGTH || macLength > CHACHA20_POLY1305_MAX_MAC_LENGTH) {
            throw new IllegalArgumentException("bad MAC length");
        }

        byte[] nonce = Arrays.copyOfRange(src, srcOffset, srcOffset + CHACHA20_POLY1305_NONCE_LENGTH);
        byte[] ciphertext = Arrays.copyOfRange(src, srcOffset + CHACHA20_POLY1305_NONCE_LENGTH, srcOffset + length - macLength);
        byte[] mac = Arrays.copyOfRange(src, srcOffset + length - macLength, srcOffset + length);

        byte[] decrypted = crypto.decodeCiphertext(nonce, ciphertext, mac);

        System.arraycopy(decrypted, 0, dst, dstOffset, decrypted.length);

        return decrypted.length;
    }

    @Override
    protected void finalize() throws Throwable {
        this.crypto.close();
        super.finalize();
    }
}