import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.bouncycastle.crypto.params.KeyParameter;
import org.bouncycastle.util.Arrays;

import java.io.IOException;
import java.security.SecureRandom;

public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext)
        throws IOException {
    try {
        KeyParameter macKey = initRecordMAC(decryptCipher);

        byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);

        if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {
            throw new TlsFatalAlert(AlertDescription.bad_record_mac);
        }

        byte[] output = new byte[ciphertext.length];
        decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);

        return output;
    } catch (DataLengthException | IllegalStateException | InvalidCipherTextException e) {
        throw new IOException("Failed to decrypt ciphertext", e);
    }
}