1,10d0
< /**
<          * Computes if a given class is to be included in the post-coverage computation
<          *
<          * If we have include-exclude patterns for Jacoco:
<          * - We include the class if it matches the include patterns and does not match the excludes patterns
<          * Else:
<          * - We include the class if it is available in the binary directories
<          * @param className
<          * @return true if the class should be included in the coverage result, false otherwise
<          */
12c2,7
<         // False if it matches an excludes pattern
---
>     if (config.getJacocoIncludes().stream()
>         .map(pattern -> new WildcardMatcher(pattern))
>         .anyMatch(matcher -> matcher.matches(className))) {
>         return true;
>     }
> 
19,25d13
<         // True if it matches an includes pattern and doesn't match any excludes pattern
<         for (String pattern : config.getJacocoIncludes()) {
<             WildcardMatcher matcher = new WildcardMatcher(pattern);
<             if (matcher.matches(className)) {
<                 return true;
<             }
<         }
27,36c15,23
<         // True if it is present in the available binaries
<         for (String dir : config.getBinJavaDir()) {
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
<                 return true;
<             }
<         }
<         for (String dir : config.getBinTestDir()) {
<             DirectoryScanner directoryScanner = new DirectoryScanner(new File(dir), TestListResolver.getWildcard());
<             if (directoryScanner.scan().getClasses().contains(className)) {
---
>     File binJavaDir = new File(config.getBinJavaDir().get(0));
>     File binTestDir = new File(config.getBinTestDir().get(0));
> 
>     if (Arrays.stream(binJavaDir.listFiles((dir, name) -> name.equals(className)))
>         .findFirst()
>         .isPresent()
>         || Arrays.stream(binTestDir.listFiles((dir, name) -> name.equals(className)))
>         .findFirst()
>         .isPresent()) {
39d25
<         }
