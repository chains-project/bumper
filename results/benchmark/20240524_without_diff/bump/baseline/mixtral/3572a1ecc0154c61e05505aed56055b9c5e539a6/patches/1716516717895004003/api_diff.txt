-- public ShortStack org.apache.thrift.ShortStack(int)
-- public void org.apache.thrift.ShortStack.clear()
-- public S org.apache.thrift.ShortStack.peek()
-- public S org.apache.thrift.ShortStack.pop()
-- public void org.apache.thrift.ShortStack.push(short)
-- public java.lang.String org.apache.thrift.ShortStack.toString()
-- public abstract bool org.apache.thrift.TAsyncProcessor.process(org.apache.thrift.server.AbstractNonblockingServer$AsyncFrameBuffer)
++ public abstract void org.apache.thrift.TAsyncProcessor.process(org.apache.thrift.server.AbstractNonblockingServer$AsyncFrameBuffer)
-- public bool org.apache.thrift.TBaseAsyncProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
++ public void org.apache.thrift.TBaseAsyncProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
-- public bool org.apache.thrift.TBaseAsyncProcessor.process(org.apache.thrift.server.AbstractNonblockingServer$AsyncFrameBuffer)
++ public void org.apache.thrift.TBaseAsyncProcessor.process(org.apache.thrift.server.AbstractNonblockingServer$AsyncFrameBuffer)
-- public bool org.apache.thrift.TBaseProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
++ public void org.apache.thrift.TBaseProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
++ public java.lang.String org.apache.thrift.TByteArrayOutputStream.toString(java.nio.charset.Charset)
++ public org.apache.thrift.TConfiguration org.apache.thrift.TConfiguration$Builder.build()
++ public org.apache.thrift.TConfiguration$Builder org.apache.thrift.TConfiguration$Builder.setMaxFrameSize(int)
++ public org.apache.thrift.TConfiguration$Builder org.apache.thrift.TConfiguration$Builder.setMaxMessageSize(int)
++ public org.apache.thrift.TConfiguration$Builder org.apache.thrift.TConfiguration$Builder.setRecursionLimit(int)
++ public TConfiguration org.apache.thrift.TConfiguration()
++ public TConfiguration org.apache.thrift.TConfiguration(int,int,int)
++ public static org.apache.thrift.TConfiguration$Builder org.apache.thrift.TConfiguration.custom()
++ public int org.apache.thrift.TConfiguration.getMaxFrameSize()
++ public int org.apache.thrift.TConfiguration.getMaxMessageSize()
++ public int org.apache.thrift.TConfiguration.getRecursionLimit()
++ public void org.apache.thrift.TConfiguration.setMaxFrameSize(int)
++ public void org.apache.thrift.TConfiguration.setMaxMessageSize(int)
++ public void org.apache.thrift.TConfiguration.setRecursionLimit(int)
++ public TDeserializer org.apache.thrift.TDeserializer(java.lang.Class,java.util.Collection,org.apache.thrift.partial.ThriftFieldValueProcessor,org.apache.thrift.protocol.TProtocolFactory)
++ public TDeserializer org.apache.thrift.TDeserializer(java.lang.Class,java.util.Collection,org.apache.thrift.protocol.TProtocolFactory)
++ public org.apache.thrift.partial.ThriftMetadata$ThriftStruct org.apache.thrift.TDeserializer.getMetadata()
++ public java.lang.Object org.apache.thrift.TDeserializer.partialDeserializeObject(byte[])
++ public java.lang.Object org.apache.thrift.TDeserializer.partialDeserializeObject(byte[],int,int)
++ public java.lang.Object org.apache.thrift.TDeserializer.partialDeserializeThriftObject(org.apache.thrift.TBase,byte[],int,int)
-- public bool org.apache.thrift.TMultiplexedProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
++ public void org.apache.thrift.TMultiplexedProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
-- public abstract bool org.apache.thrift.TProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
++ public abstract void org.apache.thrift.TProcessor.process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol)
-- public java.lang.String org.apache.thrift.TSerializer.toString(org.apache.thrift.TBase,java.lang.String)
++ public EnumCache org.apache.thrift.partial.EnumCache()
++ public org.apache.thrift.TEnum org.apache.thrift.partial.EnumCache.get(java.lang.Class,int)
++ public PartialThriftComparer org.apache.thrift.partial.PartialThriftComparer(org.apache.thrift.partial.ThriftMetadata$ThriftStruct)
++ public bool org.apache.thrift.partial.PartialThriftComparer.areEqual(org.apache.thrift.TBase,org.apache.thrift.TBase,java.lang.StringBuilder)
++ public TFieldData org.apache.thrift.partial.TFieldData()
++ public static int org.apache.thrift.partial.TFieldData.encode(byte)
++ public static int org.apache.thrift.partial.TFieldData.encode(byte,short)
++ public static S org.apache.thrift.partial.TFieldData.getId(int)
++ public static B org.apache.thrift.partial.TFieldData.getType(int)
++ public bool org.apache.thrift.partial.ThriftField.equals(java.lang.Object)
++ public static java.util.List org.apache.thrift.partial.ThriftField.fromNames(java.util.Collection)
++ public java.util.List org.apache.thrift.partial.ThriftField.getFieldNames()
++ public int org.apache.thrift.partial.ThriftField.hashCode()
++ public java.lang.String org.apache.thrift.partial.ThriftField.toString()
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.createNewList(int)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.createNewMap(int)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.createNewSet(int)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.createNewStruct(org.apache.thrift.partial.ThriftMetadata$ThriftStruct)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareBinary(java.nio.ByteBuffer)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareEnum(java.lang.Class,int)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareList(java.lang.Object)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareMap(java.lang.Object)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareSet(java.lang.Object)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareString(java.nio.ByteBuffer)
++ public abstract java.lang.Object org.apache.thrift.partial.ThriftFieldValueProcessor.prepareStruct(java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setBinary(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.nio.ByteBuffer)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setBool(java.lang.Object,org.apache.thrift.TFieldIdEnum,boolean)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setByte(java.lang.Object,org.apache.thrift.TFieldIdEnum,byte)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setDouble(java.lang.Object,org.apache.thrift.TFieldIdEnum,double)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setEnumField(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setInt16(java.lang.Object,org.apache.thrift.TFieldIdEnum,short)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setInt32(java.lang.Object,org.apache.thrift.TFieldIdEnum,int)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setInt64(java.lang.Object,org.apache.thrift.TFieldIdEnum,long)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setListElement(java.lang.Object,int,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setListField(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setMapElement(java.lang.Object,int,java.lang.Object,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setMapField(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setSetElement(java.lang.Object,int,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setSetField(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setString(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.nio.ByteBuffer)
++ public abstract void org.apache.thrift.partial.ThriftFieldValueProcessor.setStructField(java.lang.Object,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public ThriftMetadata$ThriftContainer org.apache.thrift.partial.ThriftMetadata$ThriftContainer(org.apache.thrift.partial.ThriftMetadata$ThriftObject,org.apache.thrift.TFieldIdEnum,org.apache.thrift.meta_data.FieldMetaData)
++ public abstract bool org.apache.thrift.partial.ThriftMetadata$ThriftContainer.hasUnion()
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftEnum.toPrettyString(java.lang.StringBuilder,int)
++ public bool org.apache.thrift.partial.ThriftMetadata$ThriftList.hasUnion()
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftList.toPrettyString(java.lang.StringBuilder,int)
++ public bool org.apache.thrift.partial.ThriftMetadata$ThriftMap.hasUnion()
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftMap.toPrettyString(java.lang.StringBuilder,int)
++ protected transient void org.apache.thrift.partial.ThriftMetadata$ThriftObject.append(java.lang.StringBuilder,java.lang.String,java.lang.Object[])
++ protected java.lang.String org.apache.thrift.partial.ThriftMetadata$ThriftObject.getIndent(int)
++ protected java.lang.String org.apache.thrift.partial.ThriftMetadata$ThriftObject.getName()
++ protected java.lang.String org.apache.thrift.partial.ThriftMetadata$ThriftObject.getSubElementName(org.apache.thrift.TFieldIdEnum)
++ protected java.lang.String org.apache.thrift.partial.ThriftMetadata$ThriftObject.getSubElementName(org.apache.thrift.TFieldIdEnum,java.lang.String)
++ protected abstract void org.apache.thrift.partial.ThriftMetadata$ThriftObject.toPrettyString(java.lang.StringBuilder,int)
++ public bool org.apache.thrift.partial.ThriftMetadata$ThriftPrimitive.isBinary()
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftPrimitive.toPrettyString(java.lang.StringBuilder,int)
++ public bool org.apache.thrift.partial.ThriftMetadata$ThriftSet.hasUnion()
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftSet.toPrettyString(java.lang.StringBuilder,int)
++ public org.apache.thrift.TBase org.apache.thrift.partial.ThriftMetadata$ThriftStruct.createNewStruct()
++ public static org.apache.thrift.partial.ThriftMetadata$ThriftStruct org.apache.thrift.partial.ThriftMetadata$ThriftStruct.fromFieldNames(java.lang.Class,java.util.Collection)
++ public static org.apache.thrift.partial.ThriftMetadata$ThriftStruct org.apache.thrift.partial.ThriftMetadata$ThriftStruct.fromFields(java.lang.Class,java.lang.Iterable)
++ public static org.apache.thrift.partial.ThriftMetadata$ThriftStruct org.apache.thrift.partial.ThriftMetadata$ThriftStruct.of(java.lang.Class)
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftStruct.toPrettyString(java.lang.StringBuilder,int)
++ public java.lang.String org.apache.thrift.partial.ThriftMetadata$ThriftStruct.toString()
++ public ThriftMetadata$ThriftStructBase org.apache.thrift.partial.ThriftMetadata$ThriftStructBase(org.apache.thrift.partial.ThriftMetadata$ThriftObject,org.apache.thrift.TFieldIdEnum,org.apache.thrift.meta_data.FieldMetaData)
++ public static org.apache.thrift.partial.ThriftMetadata$ThriftStructBase org.apache.thrift.partial.ThriftMetadata$ThriftStructBase.create(org.apache.thrift.partial.ThriftMetadata$ThriftObject,org.apache.thrift.TFieldIdEnum,org.apache.thrift.meta_data.FieldMetaData,java.lang.Iterable)
++ public java.lang.Class org.apache.thrift.partial.ThriftMetadata$ThriftStructBase.getStructClass()
++ public static java.lang.Class org.apache.thrift.partial.ThriftMetadata$ThriftStructBase.getStructClass(org.apache.thrift.meta_data.FieldMetaData)
++ public bool org.apache.thrift.partial.ThriftMetadata$ThriftStructBase.isUnion()
++ public static bool org.apache.thrift.partial.ThriftMetadata$ThriftStructBase.isUnion(org.apache.thrift.meta_data.FieldMetaData)
++ public ThriftMetadata$ThriftUnion org.apache.thrift.partial.ThriftMetadata$ThriftUnion(org.apache.thrift.partial.ThriftMetadata$ThriftObject,org.apache.thrift.TFieldIdEnum,org.apache.thrift.meta_data.FieldMetaData,java.lang.Iterable)
++ protected void org.apache.thrift.partial.ThriftMetadata$ThriftUnion.toPrettyString(java.lang.StringBuilder,int)
++ public ThriftMetadata org.apache.thrift.partial.ThriftMetadata()
++ public ThriftStructProcessor org.apache.thrift.partial.ThriftStructProcessor()
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.createNewList(int)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.createNewMap(int)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.createNewSet(int)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.createNewStruct(org.apache.thrift.partial.ThriftMetadata$ThriftStruct)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareBinary(java.nio.ByteBuffer)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareEnum(java.lang.Class,int)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareList(java.lang.Object)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareMap(java.lang.Object)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareSet(java.lang.Object)
++ public java.lang.Object org.apache.thrift.partial.ThriftStructProcessor.prepareString(java.nio.ByteBuffer)
++ public org.apache.thrift.TBase org.apache.thrift.partial.ThriftStructProcessor.prepareStruct(java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setBinary(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.nio.ByteBuffer)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setBool(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,boolean)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setByte(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,byte)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setDouble(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,double)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setEnumField(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setInt16(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,short)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setInt32(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,int)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setInt64(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,long)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setListElement(java.lang.Object,int,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setListField(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setMapElement(java.lang.Object,int,java.lang.Object,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setMapField(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setSetElement(java.lang.Object,int,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setSetField(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setString(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.nio.ByteBuffer)
++ public void org.apache.thrift.partial.ThriftStructProcessor.setStructField(org.apache.thrift.TBase,org.apache.thrift.TFieldIdEnum,java.lang.Object)
++ public static transient void org.apache.thrift.partial.Validate.checkArgument(boolean,java.lang.String,java.lang.Object[])
++ public static void org.apache.thrift.partial.Validate.checkGreater(long,java.lang.String,long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkGreaterOrEqual(long,java.lang.String,long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkIntegerMultiple(long,java.lang.String,long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkLessOrEqual(long,java.lang.String,long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNegative(long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNull(java.lang.Object,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(byte[],java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(int[],java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(java.lang.String,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(long[],java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNotEmpty(short[],java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkNotNullAndNumberOfElements(java.util.Collection,int,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkPathExists(java.nio.file.Path,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkPathExistsAsDir(java.nio.file.Path,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkPathExistsAsFile(java.nio.file.Path,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkPositiveInteger(long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkRequired(boolean,java.lang.String)
++ public static transient void org.apache.thrift.partial.Validate.checkState(boolean,java.lang.String,java.lang.Object[])
++ public static void org.apache.thrift.partial.Validate.checkValid(boolean,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkValid(boolean,java.lang.String,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkValuesEqual(long,java.lang.String,long,java.lang.String)
++ public static void org.apache.thrift.partial.Validate.checkWithinRange(double,java.lang.String,double,double)
++ public static void org.apache.thrift.partial.Validate.checkWithinRange(long,java.lang.String,long,long)
++ public int org.apache.thrift.protocol.TBinaryProtocol.getMinSerializedSize(byte)
++ public int org.apache.thrift.protocol.TBinaryProtocol.readFieldBeginData()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readFieldEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readFieldEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readListEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readListEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readMapEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readMapEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readMessageEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readMessageEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readSetEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readSetEnd()
++ public org.apache.thrift.protocol.TStruct org.apache.thrift.protocol.TBinaryProtocol.readStructBegin()
-- public org.apache.thrift.protocol.TStruct org.apache.thrift.protocol.TBinaryProtocol.readStructBegin()
++ public void org.apache.thrift.protocol.TBinaryProtocol.readStructEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.readStructEnd()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipBinary()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipBool()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipByte()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipDouble()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipI16()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipI32()
++ protected void org.apache.thrift.protocol.TBinaryProtocol.skipI64()
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeFieldEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeFieldEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeListEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeListEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeMapEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeMapEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeMessageEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeMessageEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeSetEnd()
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeSetEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeStructBegin(org.apache.thrift.protocol.TStruct)
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeStructBegin(org.apache.thrift.protocol.TStruct)
++ public void org.apache.thrift.protocol.TBinaryProtocol.writeStructEnd()
-- public void org.apache.thrift.protocol.TBinaryProtocol.writeStructEnd()
++ public int org.apache.thrift.protocol.TCompactProtocol.getMinSerializedSize(byte)
++ protected void org.apache.thrift.protocol.TCompactProtocol.skipBinary()
++ public int org.apache.thrift.protocol.TJSONProtocol.getMinSerializedSize(byte)
++ protected void org.apache.thrift.protocol.TProtocol.checkReadBytesAvailable(org.apache.thrift.protocol.TList)
++ protected void org.apache.thrift.protocol.TProtocol.checkReadBytesAvailable(org.apache.thrift.protocol.TMap)
++ protected void org.apache.thrift.protocol.TProtocol.checkReadBytesAvailable(org.apache.thrift.protocol.TSet)
++ public abstract int org.apache.thrift.protocol.TProtocol.getMinSerializedSize(byte)
++ public int org.apache.thrift.protocol.TProtocol.readFieldBeginData()
++ public void org.apache.thrift.protocol.TProtocol.skip(byte)
++ public void org.apache.thrift.protocol.TProtocol.skip(byte,int)
++ protected void org.apache.thrift.protocol.TProtocol.skipBinary()
++ protected void org.apache.thrift.protocol.TProtocol.skipBool()
++ protected void org.apache.thrift.protocol.TProtocol.skipByte()
++ protected void org.apache.thrift.protocol.TProtocol.skipBytes(int)
++ protected void org.apache.thrift.protocol.TProtocol.skipDouble()
++ protected void org.apache.thrift.protocol.TProtocol.skipI16()
++ protected void org.apache.thrift.protocol.TProtocol.skipI32()
++ protected void org.apache.thrift.protocol.TProtocol.skipI64()
++ public int org.apache.thrift.protocol.TProtocolDecorator.getMinSerializedSize(byte)
++ public int org.apache.thrift.protocol.TSimpleJSONProtocol.getMinSerializedSize(byte)
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readFieldEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readFieldEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readListEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readListEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readMapEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readMapEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readMessageEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readMessageEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readSetEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readSetEnd()
-- public org.apache.thrift.protocol.TStruct org.apache.thrift.protocol.TSimpleJSONProtocol.readStructBegin()
++ public org.apache.thrift.protocol.TStruct org.apache.thrift.protocol.TSimpleJSONProtocol.readStructBegin()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.readStructEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.readStructEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.writeFieldEnd()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.writeFieldEnd()
-- public void org.apache.thrift.protocol.TSimpleJSONProtocol.writeFieldStop()
++ public void org.apache.thrift.protocol.TSimpleJSONProtocol.writeFieldStop()
++ public org.apache.thrift.protocol.TList org.apache.thrift.protocol.TTupleProtocol.readListBegin(byte)
++ public void org.apache.thrift.protocol.TTupleProtocol.readListEnd()
++ public org.apache.thrift.protocol.TMap org.apache.thrift.protocol.TTupleProtocol.readMapBegin(byte,byte)
++ public void org.apache.thrift.protocol.TTupleProtocol.readMapEnd()
++ public org.apache.thrift.protocol.TSet org.apache.thrift.protocol.TTupleProtocol.readSetBegin(byte)
++ public void org.apache.thrift.protocol.TTupleProtocol.readSetEnd()
++ public abstract bool org.apache.thrift.server.ServerContext.isWrapperFor(java.lang.Class)
++ public abstract java.lang.Object org.apache.thrift.server.ServerContext.unwrap(java.lang.Class)
-- protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TNonblockingServer$SelectAcceptThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
++ protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TNonblockingServer$SelectAcceptThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
++ public TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args(org.apache.thrift.transport.TNonblockingServerTransport)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.addSaslMechanism(java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.networkThreads(int)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.processingThreads(int)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.processor(org.apache.thrift.TProcessor)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.saslProcessorFactory(org.apache.thrift.transport.sasl.TSaslProcessorFactory)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.saslServerFactory(org.apache.thrift.transport.sasl.TSaslServerFactory)
++ public org.apache.thrift.server.TSaslNonblockingServer$Args org.apache.thrift.server.TSaslNonblockingServer$Args.saslThreads(int)
++ public TSaslNonblockingServer org.apache.thrift.server.TSaslNonblockingServer(org.apache.thrift.server.TSaslNonblockingServer$Args)
++ public void org.apache.thrift.server.TSaslNonblockingServer.serve()
++ public void org.apache.thrift.server.TSaslNonblockingServer.shutdown()
++ public void org.apache.thrift.server.TSaslNonblockingServer.stop()
-- public org.apache.thrift.server.TThreadPoolServer$Args org.apache.thrift.server.TThreadPoolServer$Args.beBackoffSlotLength(int)
-- public org.apache.thrift.server.TThreadPoolServer$Args org.apache.thrift.server.TThreadPoolServer$Args.beBackoffSlotLengthUnit(java.util.concurrent.TimeUnit)
-- public org.apache.thrift.server.TThreadPoolServer$Args org.apache.thrift.server.TThreadPoolServer$Args.requestTimeout(int)
-- public org.apache.thrift.server.TThreadPoolServer$Args org.apache.thrift.server.TThreadPoolServer$Args.requestTimeoutUnit(java.util.concurrent.TimeUnit)
++ protected bool org.apache.thrift.server.TThreadPoolServer.waitForShutdown()
-- protected void org.apache.thrift.server.TThreadPoolServer.waitForShutdown()
++ protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TThreadedSelectorServer$SelectorThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
-- protected org.apache.thrift.server.AbstractNonblockingServer$FrameBuffer org.apache.thrift.server.TThreadedSelectorServer$SelectorThread.createFrameBuffer(org.apache.thrift.transport.TNonblockingTransport,java.nio.channels.SelectionKey,org.apache.thrift.server.AbstractNonblockingServer$AbstractSelectThread)
++ public AutoExpandingBuffer org.apache.thrift.transport.AutoExpandingBuffer(int)
-- public AutoExpandingBuffer org.apache.thrift.transport.AutoExpandingBuffer(int,double)
-- public AutoExpandingBufferReadTransport org.apache.thrift.transport.AutoExpandingBufferReadTransport(int,double)
++ public AutoExpandingBufferReadTransport org.apache.thrift.transport.AutoExpandingBufferReadTransport(org.apache.thrift.TConfiguration,int)
-- public AutoExpandingBufferWriteTransport org.apache.thrift.transport.AutoExpandingBufferWriteTransport(int,double)
++ public AutoExpandingBufferWriteTransport org.apache.thrift.transport.AutoExpandingBufferWriteTransport(org.apache.thrift.TConfiguration,int,int)
++ public int org.apache.thrift.transport.AutoExpandingBufferWriteTransport.getLength()
-- public int org.apache.thrift.transport.AutoExpandingBufferWriteTransport.getPos()
++ public TEOFException org.apache.thrift.transport.TEOFException(java.lang.String)
++ public TEndpointTransport org.apache.thrift.transport.TEndpointTransport(org.apache.thrift.TConfiguration)
++ public void org.apache.thrift.transport.TEndpointTransport.checkReadBytesAvailable(long)
++ protected void org.apache.thrift.transport.TEndpointTransport.countConsumedMessageBytes(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.TEndpointTransport.getConfiguration()
++ protected J org.apache.thrift.transport.TEndpointTransport.getMaxMessageSize()
++ protected void org.apache.thrift.transport.TEndpointTransport.resetConsumedMessageSize(long)
++ public void org.apache.thrift.transport.TEndpointTransport.updateKnownMessageSize(long)
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory()
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory(int)
-- public TFastFramedTransport$Factory org.apache.thrift.transport.TFastFramedTransport$Factory(int,int)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TFastFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int)
-- public TFastFramedTransport org.apache.thrift.transport.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int)
-- public void org.apache.thrift.transport.TFastFramedTransport.clear()
-- public void org.apache.thrift.transport.TFastFramedTransport.close()
-- public void org.apache.thrift.transport.TFastFramedTransport.consumeBuffer(int)
-- public void org.apache.thrift.transport.TFastFramedTransport.flush()
-- public [B org.apache.thrift.transport.TFastFramedTransport.getBuffer()
-- public int org.apache.thrift.transport.TFastFramedTransport.getBufferPosition()
-- public int org.apache.thrift.transport.TFastFramedTransport.getBytesRemainingInBuffer()
-- public bool org.apache.thrift.transport.TFastFramedTransport.isOpen()
-- public void org.apache.thrift.transport.TFastFramedTransport.open()
-- public int org.apache.thrift.transport.TFastFramedTransport.read(byte[],int,int)
-- public void org.apache.thrift.transport.TFastFramedTransport.write(byte[],int,int)
++ public void org.apache.thrift.transport.TFileTransport.checkReadBytesAvailable(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.TFileTransport.getConfiguration()
++ public void org.apache.thrift.transport.TFileTransport.updateKnownMessageSize(long)
-- public TFramedTransport$Factory org.apache.thrift.transport.TFramedTransport$Factory()
-- public TFramedTransport$Factory org.apache.thrift.transport.TFramedTransport$Factory(int)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public TFramedTransport org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport)
-- public TFramedTransport org.apache.thrift.transport.TFramedTransport(org.apache.thrift.transport.TTransport,int)
-- public void org.apache.thrift.transport.TFramedTransport.clear()
-- public void org.apache.thrift.transport.TFramedTransport.close()
-- public void org.apache.thrift.transport.TFramedTransport.consumeBuffer(int)
-- public static final int org.apache.thrift.transport.TFramedTransport.decodeFrameSize(byte[])
-- public static final void org.apache.thrift.transport.TFramedTransport.encodeFrameSize(int,byte[])
-- public void org.apache.thrift.transport.TFramedTransport.flush()
-- public [B org.apache.thrift.transport.TFramedTransport.getBuffer()
-- public int org.apache.thrift.transport.TFramedTransport.getBufferPosition()
-- public int org.apache.thrift.transport.TFramedTransport.getBytesRemainingInBuffer()
-- public bool org.apache.thrift.transport.TFramedTransport.isOpen()
-- public void org.apache.thrift.transport.TFramedTransport.open()
-- public int org.apache.thrift.transport.TFramedTransport.read(byte[],int,int)
-- public void org.apache.thrift.transport.TFramedTransport.write(byte[],int,int)
++ public THttpClient org.apache.thrift.transport.THttpClient(org.apache.thrift.TConfiguration,java.lang.String)
++ public THttpClient org.apache.thrift.transport.THttpClient(org.apache.thrift.TConfiguration,java.lang.String,org.apache.http.client.HttpClient)
++ protected TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.InputStream,java.io.OutputStream)
++ public TIOStreamTransport org.apache.thrift.transport.TIOStreamTransport(org.apache.thrift.TConfiguration,java.io.OutputStream)
++ public TMemoryBuffer org.apache.thrift.transport.TMemoryBuffer(org.apache.thrift.TConfiguration,int)
-- public int org.apache.thrift.transport.TMemoryBuffer.read(byte[],int,int)
++ public int org.apache.thrift.transport.TMemoryBuffer.read(byte[],int,int)
-- public java.lang.String org.apache.thrift.transport.TMemoryBuffer.toString(java.lang.String)
++ public java.lang.String org.apache.thrift.transport.TMemoryBuffer.toString(java.nio.charset.Charset)
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration)
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration,byte[])
++ public TMemoryInputTransport org.apache.thrift.transport.TMemoryInputTransport(org.apache.thrift.TConfiguration,byte[],int,int)
++ public TMemoryTransport org.apache.thrift.transport.TMemoryTransport(byte[])
++ public TMemoryTransport org.apache.thrift.transport.TMemoryTransport(org.apache.thrift.TConfiguration,byte[])
++ public void org.apache.thrift.transport.TMemoryTransport.close()
++ public org.apache.thrift.TByteArrayOutputStream org.apache.thrift.transport.TMemoryTransport.getOutput()
++ public bool org.apache.thrift.transport.TMemoryTransport.isOpen()
++ public void org.apache.thrift.transport.TMemoryTransport.open()
++ public int org.apache.thrift.transport.TMemoryTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.TMemoryTransport.write(byte[],int,int)
++ public org.apache.thrift.transport.TNonblockingSocket org.apache.thrift.transport.TNonblockingServerSocket.accept()
-- protected org.apache.thrift.transport.TNonblockingSocket org.apache.thrift.transport.TNonblockingServerSocket.acceptImpl()
++ public abstract org.apache.thrift.transport.TNonblockingTransport org.apache.thrift.transport.TNonblockingServerTransport.accept()
-- public int org.apache.thrift.transport.TNonblockingSocket.read(java.nio.ByteBuffer)
++ public int org.apache.thrift.transport.TNonblockingSocket.read(java.nio.ByteBuffer)
++ public java.lang.String org.apache.thrift.transport.TNonblockingSocket.toString()
++ public int org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer)
-- public int org.apache.thrift.transport.TNonblockingSocket.write(java.nio.ByteBuffer)
-- public TNonblockingTransport org.apache.thrift.transport.TNonblockingTransport()
++ public TNonblockingTransport org.apache.thrift.transport.TNonblockingTransport(org.apache.thrift.TConfiguration)
-- public abstract int org.apache.thrift.transport.TNonblockingTransport.read(java.nio.ByteBuffer)
-- public abstract int org.apache.thrift.transport.TNonblockingTransport.write(java.nio.ByteBuffer)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TSaslServerTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TSaslServerTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.byValue(byte)
-- public B org.apache.thrift.transport.TSaslTransport$NegotiationStatus.getValue()
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.valueOf(java.lang.String)
-- public static org.apache.thrift.transport.TSaslTransport$NegotiationStatus org.apache.thrift.transport.TSaslTransport$NegotiationStatus.values()
-- public TSaslTransport$SaslResponse org.apache.thrift.transport.TSaslTransport$SaslResponse(org.apache.thrift.transport.TSaslTransport$NegotiationStatus,byte[])
++ public TSaslTransport$SaslResponse org.apache.thrift.transport.TSaslTransport$SaslResponse(org.apache.thrift.transport.sasl.NegotiationStatus,byte[])
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException()
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.String)
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.String,java.lang.Throwable)
-- public TSaslTransportException org.apache.thrift.transport.TSaslTransportException(java.lang.Throwable)
++ public org.apache.thrift.transport.TSocket org.apache.thrift.transport.TServerSocket.accept()
-- protected org.apache.thrift.transport.TSocket org.apache.thrift.transport.TServerSocket.acceptImpl()
++ public abstract org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.accept()
-- public final org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.accept()
-- protected abstract org.apache.thrift.transport.TTransport org.apache.thrift.transport.TServerTransport.acceptImpl()
++ public TSimpleFileTransport org.apache.thrift.transport.TSimpleFileTransport(org.apache.thrift.TConfiguration,java.lang.String,boolean,boolean,boolean)
-- public TSocket org.apache.thrift.transport.TSocket(java.lang.String,int,int,int)
++ public TSocket org.apache.thrift.transport.TSocket(org.apache.thrift.TConfiguration,java.lang.String,int)
++ public TSocket org.apache.thrift.transport.TSocket(org.apache.thrift.TConfiguration,java.lang.String,int,int)
++ public TSocket org.apache.thrift.transport.TSocket(org.apache.thrift.TConfiguration,java.lang.String,int,int,int)
++ public abstract void org.apache.thrift.transport.TTransport.checkReadBytesAvailable(long)
++ public abstract org.apache.thrift.TConfiguration org.apache.thrift.transport.TTransport.getConfiguration()
++ public int org.apache.thrift.transport.TTransport.read(java.nio.ByteBuffer)
++ public abstract void org.apache.thrift.transport.TTransport.updateKnownMessageSize(long)
++ public int org.apache.thrift.transport.TTransport.write(java.nio.ByteBuffer)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TTransportFactory.getTransport(org.apache.thrift.transport.TTransport)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TTransportFactory.getTransport(org.apache.thrift.transport.TTransport)
-- public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TZlibTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.TZlibTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory()
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory(int)
++ public TFastFramedTransport$Factory org.apache.thrift.transport.layered.TFastFramedTransport$Factory(int,int)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TFastFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int)
++ public TFastFramedTransport org.apache.thrift.transport.layered.TFastFramedTransport(org.apache.thrift.transport.TTransport,int,int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.clear()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.close()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.consumeBuffer(int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.flush()
++ public [B org.apache.thrift.transport.layered.TFastFramedTransport.getBuffer()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.getBufferPosition()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.getBytesRemainingInBuffer()
++ public bool org.apache.thrift.transport.layered.TFastFramedTransport.isOpen()
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.open()
++ public int org.apache.thrift.transport.layered.TFastFramedTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.layered.TFastFramedTransport.write(byte[],int,int)
++ public TFramedTransport$Factory org.apache.thrift.transport.layered.TFramedTransport$Factory()
++ public TFramedTransport$Factory org.apache.thrift.transport.layered.TFramedTransport$Factory(int)
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TFramedTransport$Factory.getTransport(org.apache.thrift.transport.TTransport)
++ public TFramedTransport org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport)
++ public TFramedTransport org.apache.thrift.transport.layered.TFramedTransport(org.apache.thrift.transport.TTransport,int)
++ public void org.apache.thrift.transport.layered.TFramedTransport.clear()
++ public void org.apache.thrift.transport.layered.TFramedTransport.close()
++ public void org.apache.thrift.transport.layered.TFramedTransport.consumeBuffer(int)
++ public static final int org.apache.thrift.transport.layered.TFramedTransport.decodeFrameSize(byte[])
++ public static final void org.apache.thrift.transport.layered.TFramedTransport.encodeFrameSize(int,byte[])
++ public void org.apache.thrift.transport.layered.TFramedTransport.flush()
++ public [B org.apache.thrift.transport.layered.TFramedTransport.getBuffer()
++ public int org.apache.thrift.transport.layered.TFramedTransport.getBufferPosition()
++ public int org.apache.thrift.transport.layered.TFramedTransport.getBytesRemainingInBuffer()
++ public bool org.apache.thrift.transport.layered.TFramedTransport.isOpen()
++ public void org.apache.thrift.transport.layered.TFramedTransport.open()
++ public int org.apache.thrift.transport.layered.TFramedTransport.read(byte[],int,int)
++ public void org.apache.thrift.transport.layered.TFramedTransport.write(byte[],int,int)
++ public TLayeredTransport org.apache.thrift.transport.layered.TLayeredTransport(org.apache.thrift.transport.TTransport)
++ public void org.apache.thrift.transport.layered.TLayeredTransport.checkReadBytesAvailable(long)
++ public org.apache.thrift.TConfiguration org.apache.thrift.transport.layered.TLayeredTransport.getConfiguration()
++ public org.apache.thrift.transport.TTransport org.apache.thrift.transport.layered.TLayeredTransport.getInnerTransport()
++ public void org.apache.thrift.transport.layered.TLayeredTransport.updateKnownMessageSize(long)
++ public DataFrameHeaderReader org.apache.thrift.transport.sasl.DataFrameHeaderReader()
++ protected int org.apache.thrift.transport.sasl.DataFrameHeaderReader.headerSize()
++ protected void org.apache.thrift.transport.sasl.DataFrameHeaderReader.onComplete()
++ public int org.apache.thrift.transport.sasl.DataFrameHeaderReader.payloadSize()
++ public DataFrameReader org.apache.thrift.transport.sasl.DataFrameReader()
++ public DataFrameWriter org.apache.thrift.transport.sasl.DataFrameWriter()
++ protected java.nio.ByteBuffer org.apache.thrift.transport.sasl.DataFrameWriter.buildFrame(byte[],int,int,byte[],int,int)
++ public void org.apache.thrift.transport.sasl.DataFrameWriter.withOnlyPayload(byte[],int,int)
++ public FixedSizeHeaderReader org.apache.thrift.transport.sasl.FixedSizeHeaderReader()
++ public void org.apache.thrift.transport.sasl.FixedSizeHeaderReader.clear()
++ protected abstract int org.apache.thrift.transport.sasl.FixedSizeHeaderReader.headerSize()
++ public bool org.apache.thrift.transport.sasl.FixedSizeHeaderReader.isComplete()
++ protected abstract void org.apache.thrift.transport.sasl.FixedSizeHeaderReader.onComplete()
++ public bool org.apache.thrift.transport.sasl.FixedSizeHeaderReader.read(org.apache.thrift.transport.TTransport)
++ public [B org.apache.thrift.transport.sasl.FixedSizeHeaderReader.toBytes()
++ public abstract void org.apache.thrift.transport.sasl.FrameHeaderReader.clear()
++ public abstract bool org.apache.thrift.transport.sasl.FrameHeaderReader.isComplete()
++ public abstract int org.apache.thrift.transport.sasl.FrameHeaderReader.payloadSize()
++ public abstract bool org.apache.thrift.transport.sasl.FrameHeaderReader.read(org.apache.thrift.transport.TTransport)
++ public abstract [B org.apache.thrift.transport.sasl.FrameHeaderReader.toBytes()
++ protected FrameReader org.apache.thrift.transport.sasl.FrameReader(org.apache.thrift.transport.sasl.FrameHeaderReader)
++ public void org.apache.thrift.transport.sasl.FrameReader.clear()
++ public org.apache.thrift.transport.sasl.FrameHeaderReader org.apache.thrift.transport.sasl.FrameReader.getHeader()
++ public int org.apache.thrift.transport.sasl.FrameReader.getHeaderSize()
++ public [B org.apache.thrift.transport.sasl.FrameReader.getPayload()
++ public int org.apache.thrift.transport.sasl.FrameReader.getPayloadSize()
++ public bool org.apache.thrift.transport.sasl.FrameReader.isComplete()
++ public bool org.apache.thrift.transport.sasl.FrameReader.read(org.apache.thrift.transport.TTransport)
++ public FrameWriter org.apache.thrift.transport.sasl.FrameWriter()
++ protected abstract java.nio.ByteBuffer org.apache.thrift.transport.sasl.FrameWriter.buildFrame(byte[],int,int,byte[],int,int)
++ public void org.apache.thrift.transport.sasl.FrameWriter.clear()
++ public bool org.apache.thrift.transport.sasl.FrameWriter.isComplete()
++ public void org.apache.thrift.transport.sasl.FrameWriter.withHeaderAndPayload(byte[],byte[])
++ public void org.apache.thrift.transport.sasl.FrameWriter.withHeaderAndPayload(byte[],int,int,byte[],int,int)
++ public void org.apache.thrift.transport.sasl.FrameWriter.withOnlyPayload(byte[])
++ public abstract void org.apache.thrift.transport.sasl.FrameWriter.withOnlyPayload(byte[],int,int)
++ public void org.apache.thrift.transport.sasl.FrameWriter.write(org.apache.thrift.transport.TNonblockingTransport)
++ public static org.apache.thrift.transport.sasl.NegotiationStatus org.apache.thrift.transport.sasl.NegotiationStatus.byValue(byte)
++ public B org.apache.thrift.transport.sasl.NegotiationStatus.getValue()
++ public static org.apache.thrift.transport.sasl.NegotiationStatus org.apache.thrift.transport.sasl.NegotiationStatus.valueOf(java.lang.String)
++ public static org.apache.thrift.transport.sasl.NegotiationStatus org.apache.thrift.transport.sasl.NegotiationStatus.values()
++ public static org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase.valueOf(java.lang.String)
++ public static org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase.values()
++ public NonblockingSaslHandler org.apache.thrift.transport.sasl.NonblockingSaslHandler(java.nio.channels.SelectionKey,org.apache.thrift.transport.TNonblockingTransport,org.apache.thrift.transport.sasl.TSaslServerFactory,org.apache.thrift.transport.sasl.TSaslProcessorFactory,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.server.TServerEventHandler)
++ public void org.apache.thrift.transport.sasl.NonblockingSaslHandler.close()
++ public org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase org.apache.thrift.transport.sasl.NonblockingSaslHandler.getCurrentPhase()
++ public org.apache.thrift.transport.sasl.NonblockingSaslHandler$Phase org.apache.thrift.transport.sasl.NonblockingSaslHandler.getNextPhase()
++ public javax.security.sasl.SaslServer org.apache.thrift.transport.sasl.NonblockingSaslHandler.getSaslServer()
++ public org.apache.thrift.transport.TNonblockingTransport org.apache.thrift.transport.sasl.NonblockingSaslHandler.getUnderlyingTransport()
++ public void org.apache.thrift.transport.sasl.NonblockingSaslHandler.handleRead()
++ public void org.apache.thrift.transport.sasl.NonblockingSaslHandler.handleWrite()
++ public bool org.apache.thrift.transport.sasl.NonblockingSaslHandler.isCurrentPhaseDone()
++ public void org.apache.thrift.transport.sasl.NonblockingSaslHandler.runCurrentPhase()
++ public void org.apache.thrift.transport.sasl.NonblockingSaslHandler.stepToNextPhase()
++ public SaslNegotiationFrameReader org.apache.thrift.transport.sasl.SaslNegotiationFrameReader()
++ public SaslNegotiationFrameWriter org.apache.thrift.transport.sasl.SaslNegotiationFrameWriter()
++ protected java.nio.ByteBuffer org.apache.thrift.transport.sasl.SaslNegotiationFrameWriter.buildFrame(byte[],int,int,byte[],int,int)
++ public void org.apache.thrift.transport.sasl.SaslNegotiationFrameWriter.withOnlyPayload(byte[],int,int)
++ public SaslNegotiationHeaderReader org.apache.thrift.transport.sasl.SaslNegotiationHeaderReader()
++ public org.apache.thrift.transport.sasl.NegotiationStatus org.apache.thrift.transport.sasl.SaslNegotiationHeaderReader.getStatus()
++ protected int org.apache.thrift.transport.sasl.SaslNegotiationHeaderReader.headerSize()
++ protected void org.apache.thrift.transport.sasl.SaslNegotiationHeaderReader.onComplete()
++ public int org.apache.thrift.transport.sasl.SaslNegotiationHeaderReader.payloadSize()
++ public abstract void org.apache.thrift.transport.sasl.SaslPeer.dispose()
++ public abstract [B org.apache.thrift.transport.sasl.SaslPeer.evaluate(byte[])
++ public abstract bool org.apache.thrift.transport.sasl.SaslPeer.isAuthenticated()
++ public abstract bool org.apache.thrift.transport.sasl.SaslPeer.isDataProtected()
++ public [B org.apache.thrift.transport.sasl.SaslPeer.unwrap(byte[])
++ public abstract [B org.apache.thrift.transport.sasl.SaslPeer.unwrap(byte[],int,int)
++ public [B org.apache.thrift.transport.sasl.SaslPeer.wrap(byte[])
++ public abstract [B org.apache.thrift.transport.sasl.SaslPeer.wrap(byte[],int,int)
++ public ServerSaslPeer org.apache.thrift.transport.sasl.ServerSaslPeer(javax.security.sasl.SaslServer)
++ public void org.apache.thrift.transport.sasl.ServerSaslPeer.dispose()
++ public [B org.apache.thrift.transport.sasl.ServerSaslPeer.evaluate(byte[])
++ public bool org.apache.thrift.transport.sasl.ServerSaslPeer.isAuthenticated()
++ public bool org.apache.thrift.transport.sasl.ServerSaslPeer.isDataProtected()
++ public [B org.apache.thrift.transport.sasl.ServerSaslPeer.unwrap(byte[],int,int)
++ public [B org.apache.thrift.transport.sasl.ServerSaslPeer.wrap(byte[],int,int)
++ public TBaseSaslProcessorFactory org.apache.thrift.transport.sasl.TBaseSaslProcessorFactory(org.apache.thrift.TProcessor)
++ public org.apache.thrift.TProcessor org.apache.thrift.transport.sasl.TBaseSaslProcessorFactory.getProcessor(org.apache.thrift.transport.sasl.NonblockingSaslHandler)
++ public TInvalidSaslFrameException org.apache.thrift.transport.sasl.TInvalidSaslFrameException(java.lang.String)
++ public static org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType.valueOf(java.lang.String)
++ public static org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType.values()
++ public TSaslNegotiationException org.apache.thrift.transport.sasl.TSaslNegotiationException(org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType,java.lang.String)
++ public TSaslNegotiationException org.apache.thrift.transport.sasl.TSaslNegotiationException(org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType,java.lang.String,java.lang.Throwable)
++ public java.lang.String org.apache.thrift.transport.sasl.TSaslNegotiationException.getDetails()
++ public org.apache.thrift.transport.sasl.TSaslNegotiationException$ErrorType org.apache.thrift.transport.sasl.TSaslNegotiationException.getErrorType()
++ public java.lang.String org.apache.thrift.transport.sasl.TSaslNegotiationException.getSummary()
++ public abstract org.apache.thrift.TProcessor org.apache.thrift.transport.sasl.TSaslProcessorFactory.getProcessor(org.apache.thrift.transport.sasl.NonblockingSaslHandler)
++ public TSaslServerDefinition org.apache.thrift.transport.sasl.TSaslServerDefinition(java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)
++ public TSaslServerFactory org.apache.thrift.transport.sasl.TSaslServerFactory()
++ public void org.apache.thrift.transport.sasl.TSaslServerFactory.addSaslMechanism(java.lang.String,java.lang.String,java.lang.String,java.util.Map,javax.security.auth.callback.CallbackHandler)
++ public org.apache.thrift.transport.sasl.ServerSaslPeer org.apache.thrift.transport.sasl.TSaslServerFactory.getSaslPeer(java.lang.String)
++ public static java.lang.String org.apache.thrift.utils.StringUtils.bytesToHexString(byte[])
++ public static java.lang.String org.apache.thrift.utils.StringUtils.bytesToHexString(byte[],int,int)