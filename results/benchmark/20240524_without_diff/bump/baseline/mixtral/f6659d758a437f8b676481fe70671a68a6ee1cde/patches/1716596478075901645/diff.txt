0a1,10
> import java.io.BufferedReader;
> import java.io.FileReader;
> import java.time.LocalDate;
> import java.time.ZoneId;
> import com.fasterxml.jackson.core.type.TypeReference;
> import com.fasterxml.jackson.databind.DeserializationFeature;
> import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
> import com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;
> import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
> 
2,3c12,14
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
>     YAMLFactory yamlFactory = new YAMLFactory()
>             .disable(YAMLGenerator.Feature.WRITE_DOUBLES_AS_STRINGS)
>             .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES);
5,17c16,18
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
<         representer.addClassTag(ZoneId.class, zoneIdTag);
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
< 
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
---
>     JavaTimeModule javaTimeModule = new JavaTimeModule();
>     javaTimeModule.addDeserializer(LocalDate.class, new LocalDateDeserializer());
>     javaTimeModule.addDeserializer(ZoneId.class, new ZoneIdDeserializer());
19c20,24
<         Yaml yaml = new Yaml(constructor, representer);
---
>     Yaml yaml = new Yaml(new YAMLFactory()
>             .disable(YAMLGenerator.Feature.WRITE_DOUBLES_AS_STRINGS)
>             .enable(YAMLGenerator.Feature.MINIMIZE_QUOTES))
>             .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
>             .registerModule(javaTimeModule);
22,23c27,28
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
---
>         return yaml.readValue(new BufferedReader(new FileReader(path)), new TypeReference<T>() {});
>     } catch (Exception e) {
26a32,62
> 
> // Add deserializers for LocalDate and ZoneId
> static class LocalDateDeserializer extends StdDeserializer<LocalDate> {
>     public LocalDateDeserializer() {
>         this(null);
>     }
> 
>     public LocalDateDeserializer(Class<?> vc) {
>         super(vc);
>     }
> 
>     @Override
>     public LocalDate deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
>         return LocalDate.parse(p.getValueAsString());
>     }
> }
> 
> static class ZoneIdDeserializer extends StdDeserializer<ZoneId> {
>     public ZoneIdDeserializer() {
>         this(null);
>     }
> 
>     public ZoneIdDeserializer(Class<?> vc) {
>         super(vc);
>     }
> 
>     @Override
>     public ZoneId deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
>         return ZoneId.of(p.getValueAsString());
>     }
> }
\ No newline at end of file
