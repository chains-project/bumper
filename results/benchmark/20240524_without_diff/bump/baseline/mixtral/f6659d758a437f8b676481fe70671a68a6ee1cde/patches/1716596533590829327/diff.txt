0a1,21
> import org.yaml.snakeyaml.DumperOptions;
> import org.yaml.snakeyaml.LoaderOptions;
> import org.yaml.snakeyaml.Node;
> import org.yaml.snakeyaml.TypeDescription;
> import org.yaml.snakeyaml.Yaml;
> import org.yaml.snakeyaml.constructor.Constructor;
> import org.yaml.snakeyaml.introspector.Property;
> import org.yaml.snakeyaml.introspector.PropertyUtils;
> import org.yaml.snakeyaml.nodes.Tag;
> import org.yaml.snakeyaml.representer.Representer;
> import org.yaml.snakeyaml.resolver.Resolver;
> 
> import java.io.BufferedReader;
> import java.io.FileReader;
> import java.io.IOException;
> import java.lang.reflect.Field;
> import java.time.ZoneId;
> import java.time.LocalDate;
> import java.util.HashMap;
> import java.util.Map;
> 
3c24,37
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
>     loadingConfig.setAllowDuplicateKeys(true);
>     loadingConfig.setMaxAliasesForCollections(0);
>     loadingConfig.setPropertyUtils(new PropertyUtils() {
>         @Override
>         public Property getProperty(Class<?> type, String name) {
>             try {
>                 Field field = type.getDeclaredField(name);
>                 field.setAccessible(true);
>                 return new Property(field);
>             } catch (NoSuchFieldException e) {
>                 return super.getProperty(type, name);
>             }
>         }
>     });
22,23c56,57
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
---
>         return yaml.loadAs(new BufferedReader(new FileReader(path)), clazz);
>     } catch (IOException e) {
26a61,123
> 
> private static class JavaZoneIdConstruct extends Constructor.ConstructJavaBean {
>     @Override
>     public Object construct(Node node) {
>         if (node.getTag().equals(new Tag("!ZoneId"))) {
>             return ZoneId.of(node.getValue());
>         }
>         return super.construct(node);
>     }
> }
> 
> private static class JavaLocalDateConstruct extends Constructor.ConstructJavaBean {
>     @Override
>     public Object construct(Node node) {
>         if (node.getTag().equals(new Tag("!LocalDate"))) {
>             return LocalDate.parse(node.getValue());
>         }
>         return super.construct(node);
>     }
> }
> 
> private static class YamlMapper extends org.yaml.snakeyaml.Yaml {
>     private final Map<Tag, Object> yamlConstructors = new HashMap<>();
> 
>     public YamlMapper(Constructor constructor) {
>         this(constructor, new Representer(new DumperOptions()));
>     }
> 
>     public YamlMapper(Constructor constructor, Representer representer) {
>         super(constructor, representer);
>         for (Map.Entry<Tag, Object> entry : constructor.getYamlConstructors().entrySet()) {
>             yamlConstructors.put(entry.getKey(), entry.getValue());
>         }
>         this.setConstructor(new Constructor(constructor.getJavaClass(), constructor.getLoaderOptions()) {
>             @Override
>             protected Object constructObject(Node node) {
>                 Object object = super.constructObject(node);
>                 PropertyUtils propertyUtils = getPropertyUtils();
>                 for (Map.Entry<Tag, Object> entry : yamlConstructors.entrySet()) {
>                     if (entry.getKey().equals(node.getTag())) {
>                         if (object != null) {
>                             for (Property property : propertyUtils.getProperties(object.getClass())) {
>                                 try {
>                                     Object value = entry.getValue().getClass().getMethod(property.getName()).invoke(entry.getValue());
>                                     propertyUtils.setProperty(object, property.getName(), value);
>                                 } catch (Exception e) {
>                                     throw new RuntimeException(e);
>                                 }
>                             }
>                         }
>                     }
>                 }
>                 return object;
>             }
>         });
>     }
> }
> 
> private static class YamlFactory {
>     public static Yaml createYaml(Constructor constructor, Representer representer) {
>         return new YamlMapper(constructor, representer);
>     }
> }
\ No newline at end of file
