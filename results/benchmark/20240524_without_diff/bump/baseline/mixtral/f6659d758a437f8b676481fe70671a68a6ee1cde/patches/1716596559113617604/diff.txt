1,3c1,2
< public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
> import com.fasterxml.jackson.databind.ObjectMapper;
> import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
5,9c4,6
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
<         representer.addClassTag(ZoneId.class, zoneIdTag);
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
---
> public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) throws IOException {
>     ObjectMapper mapper = new ObjectMapper();
>     mapper.registerModule(new JavaTimeModule());
11,25c8
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
< 
<         Yaml yaml = new Yaml(constructor, representer);
< 
<         try {
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
<             throw new RuntimeException(e);
<         }
---
>     return mapper.readValue(new File(path), clazz);
