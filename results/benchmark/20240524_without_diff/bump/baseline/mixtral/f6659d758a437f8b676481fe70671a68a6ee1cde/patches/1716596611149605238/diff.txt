0a1,21
> import com.fasterxml.jackson.databind.JavaType;
> import com.fasterxml.jackson.databind.JsonNode;
> import com.fasterxml.jackson.databind.ObjectMapper;
> import com.fasterxml.jackson.databind.SerializationFeature;
> import com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBasedJavaType;
> import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
> import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
> import com.fasterxml.jackson.module.paramnames.ParameterNamesModule;
> import org.yaml.snakeyaml.Loader;
> import org.yaml.snakeyaml.Yaml;
> import org.yaml.snakeyaml.constructor.Constructor;
> import org.yaml.snakeyaml.nodes.Tag;
> 
> import java.io.BufferedReader;
> import java.io.FileReader;
> import java.io.IOException;
> import java.time.ZoneId;
> import java.time.LocalDate;
> import java.util.LinkedHashMap;
> import java.util.Map;
> 
2,3c23,30
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
---
>     ObjectMapper objectMapper = new ObjectMapper()
>             .registerModule(new ParameterNamesModule())
>             .registerModule(new Jdk8Module())
>             .registerModule(new JavaTimeModule());
> 
>     LoaderOptions loadingConfig = new LoaderOptions();
>     loadingConfig.setAllowDuplicateKeys(true);
>     loadingConfig.setMaxAliasesForCollections(1024);
5,17c32,45
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
<         representer.addClassTag(ZoneId.class, zoneIdTag);
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
< 
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
---
>     Map<Class<?>, Tag> tagToClass = new LinkedHashMap<>();
>     tagToClass.put(ZoneId.class, new Tag("!ZoneId"));
>     tagToClass.put(LocalDate.class, new Tag("!LocalDate"));
> 
>     Loader loader = new Loader(new Constructor(loadingConfig) {
>         @Override
>         protected JavaType _typeFromId(Tag tag) {
>             Class<?> type = tagToClass.get(tag.getValue());
>             if (type != null) {
>                 return TypeDeserializerBasedJavaType._from(objectMapper.getTypeFactory(), type);
>             }
>             return super._typeFromId(tag);
>         }
>     });
19c47
<         Yaml yaml = new Yaml(constructor, representer);
---
>     Yaml yaml = new Yaml(loader);
22,23c50,52
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
---
>         JsonNode jsonNode = yaml.load(new BufferedReader(new FileReader(path)));
>         return objectMapper.treeToValue(jsonNode, clazz);
>     } catch (IOException e) {
