import org.apache.maven.doxia.sink.Sink;
import org.apache.maven.doxia.sink.SinkEventAttributes;
import org.apache.maven.doxia.sink.impl.AbstractContentBuilder;
import org.apache.maven.doxia.sink.impl.switchable.MavenReportSwitchable;
import org.apache.maven.doxia.sink.impl.switchable.SwitchableContentBuilder;
import org.apache.maven.doxia.sink.impl.switchable.SwitchableContentBuilderDecorator;
import org.apache.maven.plugins.annotations.ResolutionScope;
import org.apache.maven.project.MavenProject;

import java.io.File;
import java.util.Locale;

/**
 * Generates SCoverage report.
 * 
 * @throws MojoExecutionException if unexpected problem occurs
 */
@Override
public void execute()
    throws MojoExecutionException
{
    if ( !canGenerateReport() )
    {
        getLog().info( "Skipping SCoverage report generation" );
        return;
    }

    try
    {
        File outputDirectory = new File( this.outputDirectory );
        String outputName = getOutputName();
        Sink sink = new SiteRendererSink( new RenderingContext( outputDirectory, outputName + ".html" ) );
        MavenProject project = (MavenProject) getProject();
        Locale locale = Locale.getDefault();
        generate( new SwitchableContentBuilderDecorator(
                new MavenReportSwitchable( new SwitchableContentBuilder( new AbstractContentBuilder( sink ) ) ),
                new ReportContentBuilderFactory( project, locale ) ),
                locale );
    }
    catch ( MavenReportException e )
    {
        String prefix = "An error has occurred in " + getName( Locale.ENGLISH ) + " report generation";
        throw new MojoExecutionException( prefix + ": " + e.getMessage(), e );
    }
}

private static class ReportContentBuilderFactory implements SwitchableContentBuilderFactory {
    private final MavenProject project;
    private final Locale locale;

    public ReportContentBuilderFactory(MavenProject project, Locale locale) {
        this.project = project;
        this.locale = locale;
    }

    @Override
    public Sink createSink() {
        return new SiteRendererSink( new RenderingContext( project.getBuild().getDirectory(), "index.html" ) );
    }

    @Override
    public SinkEventAttributes createAttributes() {
        return new SinkEventAttributes();
    }

    @Override
    public Locale getLocale() {
        return locale;
    }
}