private void registerHard(final MOGroup group) {
    try {
        final Field registry = server.getClass().getDeclaredField("registry");
        registry.setAccessible(true);
        SortedMap<MOScope, ManagedObject<?>> reg = server.getRegistry();
        DefaultMOContextScope contextScope = new DefaultMOContextScope(new OctetString(""), group.getScope());
        reg.put(contextScope, group);
        Type genericType = server.getRegistry().entrySet().iterator().next().getValue().getClass().getGenericInterfaces()[0];
        SortedMap<MOScope, ManagedObject> safeReg = new TreeMap<MOScope, ManagedObject>() {
            private static final long serialVersionUID = 1L;
            @SuppressWarnings("unchecked")
            @Override
            public Map<MOScope, ManagedObject> putAll(Map<? extends MOScope, ? extends ManagedObject> m) {
                return super.putAll(m);
            }
            @Override
            public Map<MOScope, ManagedObject> clone() {
                return new TreeMap<MOScope, ManagedObject>(this);
            }
            @Override
            public Set<Entry<MOScope, ManagedObject>> entrySet() {
                return new AbstractSet<Entry<MOScope, ManagedObject>>() {
                    @Override
                    public Iterator<Entry<MOScope, ManagedObject>> iterator() {
                        return new Iterator<Entry<MOScope, ManagedObject>>() {
                            private final Iterator<Entry<MOScope, ManagedObject<?>>> it = reg.entrySet().iterator();

                            @Override
                            public boolean hasNext() {
                                return it.hasNext();
                            }

                            @Override
                            public Entry<MOScope, ManagedObject> next() {
                                Entry<MOScope, ManagedObject<?>> next = it.next();
                                return new SimpleEntry<MOScope, ManagedObject>(next.getKey(), (ManagedObject) next.getValue().getValues().get(0));
                            }

                            @Override
                            public void remove() {
                                it.remove();
                            }
                        };
                    }

                    @Override
                    public int size() {
                        return reg.size();
                    }
                };
            }
        };
        safeReg.putAll(reg);
        registry.set(server, safeReg);
    } catch (NoSuchFieldException | IllegalAccessException e) {
        log.warn("could not set server registry", e);
    }
}