import org.jfrog.artifactory.client.ArtifactoryServer;
import org.jfrog.artifactory.client.distribution.DistributionServer;
import org.jfrog.artifactory.client.distribution.DistributionServer.DistributionServerBuilder;
import org.jfrog.artifactory.client.distribution.DistributionServer.Token;
import org.jfrog.artifactory.client.impl.ArtifactoryServerImpl;
import org.jfrog.artifactory.client.impl.auth.BasicAuthentication;
import org.jfrog.artifactory.client.impl.auth.AuthenticationInfo;
import org.jfrog.artifactory.client.okhttp.OkHttpClientConfig;
import org.jfrog.artifactory.client.okhttp.OkHttpClientConfig.Builder;
import org.jfrog.hudson.pipeline.common.types.ArtifactoryServerContext;
import org.jfrog.hudson.pipeline.common.types.DistributionServerContext;
import org.jfrog.hudson.pipeline.common.types.UsernamePasswordCredentials;
import org.jfrog.hudson.pipeline.scripted.steps.CreateJFrogPlatformInstanceStep;
import org.jfrog.hudson.pipeline.scripted.steps.CreateJFrogPlatformInstanceStep.JFrogPlatformInstance;

import java.io.IOException;
import java.net.URL;
import java.util.Objects;

@Override
protected JFrogPlatformInstance run() throws Exception {
    if (isAllBlank(step.url, step.artifactoryUrl, step.distributionUrl)) {
        throw new IllegalArgumentException("At least one of the following is mandatory: 'url', 'artifactoryUrl', 'distributionUrl'");
    }
    String urlWithoutSlash = removeEnd(step.url, "/");
    String artifactoryUrl = defaultIfBlank(step.artifactoryUrl, urlWithoutSlash + "/" + "artifactory");
    String distributionUrl = defaultIfBlank(step.distributionUrl, urlWithoutSlash + "/" + "distribution");

    ArtifactoryServer artifactoryServer;
    DistributionServer distributionServer;
    OkHttpClientConfig.Builder httpClientBuilder = new Builder();
    if (!isEmpty(step.credentialsId)) {
        AuthenticationInfo authInfo = new BasicAuthentication(step.username, step.password);
        artifactoryServer = new ArtifactoryServerImpl(artifactoryUrl, new ArtifactoryServerContext(step.credentialsId, authInfo), httpClientBuilder);
        DistributionServerContext distributionServerContext = new DistributionServerContext(step.credentialsId, authInfo);
        DistributionServerBuilder distributionServerBuilder = new DistributionServer.DistributionServerBuilder(distributionUrl, distributionServerContext);
        Token token = new Token(Token.TokenType.BEARER, "some-token");
        distributionServer = distributionServerBuilder.withToken(token).build();
    } else {
        artifactoryServer = new ArtifactoryServerImpl(artifactoryUrl, new ArtifactoryServerContext(step.username, step.password), httpClientBuilder);
        DistributionServerContext distributionServerContext = new DistributionServerContext(step.username, step.password);
        DistributionServerBuilder distributionServerBuilder = new DistributionServer.DistributionServerBuilder(distributionUrl, distributionServerContext);
        Token token = new Token(Token.TokenType.BEARER, "some-token");
        distributionServer = distributionServerBuilder.withToken(token).build();
    }
    artifactoryServer.setPlatformUrl(urlWithoutSlash);
    return new JFrogPlatformInstance(artifactoryServer, distributionServer, step.url, "");
}