{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1261153343,
    "in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    @Test\n    void testScope() {\n        final String line = \"GET /resource.txt HTTP/1.1\";\n        final String action = \"foo:bar:baz\";\n        final AtomicReference<String> caction = new AtomicReference<>();\n        final AtomicReference<String> cline = new AtomicReference<>();\n        new AuthScopeSlice(new ScopeSlice() {\n            @Override\n            public Scope scope(final String rqline) {\n                cline.set(rqline);\n                return new Scope.FromString(action);\n            }\n\n            @Override\n            public Response response(final String line, final Iterable<Map.Entry<String, String>> headers, final Publisher<ByteBuffer> body) {\n                return StandardRs.OK;\n            }\n        }, (headers, rline) -> CompletableFuture.completedFuture(new AuthScheme.Result() {\n            @Override\n            public Optional<Authentication.User> user() {\n                return Optional.of(new Authentication.User(\"alice\"));\n            }\n\n            @Override\n            public String challenge() {\n                return \"\";\n            }\n        }), (user, act) -> {\n            caction.set(act);\n            return true;\n        }).response(line, Headers.EMPTY, Content.EMPTY).send((status, headers, body) -> CompletableFuture.allOf()).toCompletableFuture().join();\n        MatcherAssert.assertThat(\"Request line passed to slice\", cline.get(), new IsEqual<>(line));\n        MatcherAssert.assertThat(\"Scope passed as action to permissions\", caction.get(), new IsEqual<>(action));\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link AuthScopeSlice}.\n *\n * @since 0.11\n */\nclass AuthScopeSliceTest {\n    @org.junit.jupiter.api.Test\n    void testScope() {\n        final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n        final java.lang.String action = \"foo:bar:baz\";\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n        final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n        new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {\n            @java.lang.Override\n            public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {\n                cline.set(rqline);\n                return new com.artipie.docker.http.Scope.FromString(action);\n            }\n\n            @java.lang.Override\n            public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {\n                return com.artipie.http.rs.StandardRs.OK;\n            }\n        }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.AuthScheme.Result() {\n            @java.lang.Override\n            public Optional<com.artipie.http.auth.Authentication.User> user() {\n                return java.util.Optional.of(new com.artipie.http.auth.Authentication.User(\"alice\"));\n            }\n\n            @java.lang.Override\n            public java.lang.String challenge() {\n                return \"\";\n            }\n        }), ( user, act) -> {\n            caction.set(act);\n            return true;\n        }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();\n        org.hamcrest.MatcherAssert.assertThat(\"Request line passed to slice\", cline.get(), new org.hamcrest.core.IsEqual<>(line));\n        org.hamcrest.MatcherAssert.assertThat(\"Scope passed as action to permissions\", caction.get(), new org.hamcrest.core.IsEqual<>(action));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   class User\n  location: interface com.artipie.http.auth.Authentication\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java:[57,62] cannot find symbol",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/http/AuthScopeSliceTest.java",
        "client_line_position": "57"
    },
    "client_end_line_number": 83,
    "client_line_number": 30,
    "method_code": "@Test\n    void testScope() {\n        final String line = \"GET /resource.txt HTTP/1.1\";\n        final String action = \"foo:bar:baz\";\n        final AtomicReference<String> caction = new AtomicReference<>();\n        final AtomicReference<String> cline = new AtomicReference<>();\n        new AuthScopeSlice(\n            new ScopeSlice() {\n                @Override\n                public Scope scope(final String rqline) {\n                    cline.set(rqline);\n                    return new Scope.FromString(action);\n                }\n\n                @Override\n                public Response response(\n                    final String line,\n                    final Iterable<Map.Entry<String, String>> headers,\n                    final Publisher<ByteBuffer> body\n                ) {\n                    return StandardRs.OK;\n                }\n            },\n            (headers, rline) -> CompletableFuture.completedFuture(\n                new AuthScheme.Result() {\n                    @Override\n                    public Optional<Authentication.User> user() {\n                        return Optional.of(new Authentication.User(\"alice\"));\n                    }\n\n                    @Override\n                    public String challenge() {\n                        return \"\";\n                    }\n                }\n            ),\n            (user, act) -> {\n                caction.set(act);\n                return true;\n            }\n        ).response(line, Headers.EMPTY, Content.EMPTY).send(\n            (status, headers, body) -> CompletableFuture.allOf()\n        ).toCompletableFuture().join();\n        MatcherAssert.assertThat(\n            \"Request line passed to slice\",\n            cline.get(),\n            new IsEqual<>(line)\n        );\n        MatcherAssert.assertThat(\n            \"Scope passed as action to permissions\",\n            caction.get(),\n            new IsEqual<>(action)\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid testScope() {\n    final java.lang.String line = \"GET /resource.txt HTTP/1.1\";\n    final java.lang.String action = \"foo:bar:baz\";\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();\n    final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();\n    new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {\n        @java.lang.Override\n        public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {\n            cline.set(rqline);\n            return new com.artipie.docker.http.Scope.FromString(action);\n        }\n\n        @java.lang.Override\n        public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {\n            return com.artipie.http.rs.StandardRs.OK;\n        }\n    }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.AuthScheme.Result() {\n        @java.lang.Override\n        public Optional<com.artipie.http.auth.Authentication.User> user() {\n            return java.util.Optional.of(new com.artipie.http.auth.Authentication.User(\"alice\"));\n        }\n\n        @java.lang.Override\n        public java.lang.String challenge() {\n            return \"\";\n        }\n    }), ( user, act) -> {\n        caction.set(act);\n        return true;\n    }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();\n    org.hamcrest.MatcherAssert.assertThat(\"Request line passed to slice\", cline.get(), new org.hamcrest.core.IsEqual<>(line));\n    org.hamcrest.MatcherAssert.assertThat(\"Scope passed as action to permissions\", caction.get(), new org.hamcrest.core.IsEqual<>(action));\n}",
    "method_name": "testScope"
}