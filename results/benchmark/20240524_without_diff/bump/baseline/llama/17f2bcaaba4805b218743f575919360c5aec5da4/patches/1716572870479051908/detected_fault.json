{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 838449246,
    "in_class_code": "public class PGS_MeshingTests {\n    @Test\n    void testAreaMerge() {\n        PShape mesh = PGS_Triangulation.delaunayTriangulation(PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));\n        List<PShape> faces = PGS_Conversion.getChildren(mesh);\n        faces.sort((a, b) -> Double.compare(PGS_ShapePredicates.area(a), PGS_ShapePredicates.area(b)));\n        double areaThreshold = PGS_ShapePredicates.area(faces.get(faces.size() / 2));\n        PShape mergedMesh = PGS_Meshing.areaMerge(mesh, areaThreshold);\n        assertTrue(PGS_Conversion.getChildren(mergedMesh).stream().allMatch(f -> PGS_ShapePredicates.area(f) >= areaThreshold));\n        assertTrue(faces.size() >= mergedMesh.getChildCount());\n        assertEquals(PGS_ShapePredicates.area(mesh), PGS_ShapePredicates.area(mergedMesh), 1.0E-6);\n    }\n}",
    "qualified_in_class_code": "public class PGS_MeshingTests {\n    @org.junit.jupiter.api.Test\n    void testAreaMerge() {\n        processing.core.PShape mesh = micycle.pgs.PGS_Triangulation.delaunayTriangulation(micycle.pgs.PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));\n        java.util.List<processing.core.PShape> faces = micycle.pgs.PGS_Conversion.getChildren(mesh);\n        faces.sort(( a, b) -> java.lang.Double.compare(micycle.pgs.PGS_ShapePredicates.area(a), micycle.pgs.PGS_ShapePredicates.area(b)));\n        double areaThreshold = micycle.pgs.PGS_ShapePredicates.area(faces.get(faces.size() / 2));\n        processing.core.PShape mergedMesh = micycle.pgs.PGS_Meshing.areaMerge(mesh, areaThreshold);\n        assertTrue(micycle.pgs.PGS_Conversion.getChildren(mergedMesh).stream().allMatch(( f) -> micycle.pgs.PGS_ShapePredicates.area(f) >= areaThreshold));\n        assertTrue(faces.size() >= mergedMesh.getChildCount());\n        Assert.assertEquals(micycle.pgs.PGS_ShapePredicates.area(mesh), micycle.pgs.PGS_ShapePredicates.area(mergedMesh), 1.0E-6);\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   method assertTrue(boolean)\n  location: class micycle.pgs.PGS_MeshingTests\n",
        "error_message": "[ERROR] /PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java:[23,17] cannot find symbol",
        "client_file_path": "/PGS/src/test/java/micycle/pgs/PGS_MeshingTests.java",
        "client_line_position": "23"
    },
    "client_end_line_number": 26,
    "client_line_number": 15,
    "method_code": "@Test\n\tvoid testAreaMerge() {\n\t\tPShape mesh = PGS_Triangulation.delaunayTriangulation(PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));\n\t\tList<PShape> faces = PGS_Conversion.getChildren(mesh);\n\t\tfaces.sort((a, b) -> Double.compare(PGS_ShapePredicates.area(a), PGS_ShapePredicates.area(b)));\n\t\tdouble areaThreshold = PGS_ShapePredicates.area(faces.get(faces.size() / 2));\n\n\t\tPShape mergedMesh = PGS_Meshing.areaMerge(mesh, areaThreshold);\n\t\tassertTrue(PGS_Conversion.getChildren(mergedMesh).stream().allMatch(f -> PGS_ShapePredicates.area(f) >= areaThreshold));\n\t\tassertTrue(faces.size() >= mergedMesh.getChildCount());\n\t\tassertEquals(PGS_ShapePredicates.area(mesh), PGS_ShapePredicates.area(mergedMesh), 1e-6);\n\t}",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid testAreaMerge() {\n    processing.core.PShape mesh = micycle.pgs.PGS_Triangulation.delaunayTriangulation(micycle.pgs.PGS_PointSet.random(0, 0, 1000, 1000, 1111, 0));\n    java.util.List<processing.core.PShape> faces = micycle.pgs.PGS_Conversion.getChildren(mesh);\n    faces.sort(( a, b) -> java.lang.Double.compare(micycle.pgs.PGS_ShapePredicates.area(a), micycle.pgs.PGS_ShapePredicates.area(b)));\n    double areaThreshold = micycle.pgs.PGS_ShapePredicates.area(faces.get(faces.size() / 2));\n    processing.core.PShape mergedMesh = micycle.pgs.PGS_Meshing.areaMerge(mesh, areaThreshold);\n    assertTrue(micycle.pgs.PGS_Conversion.getChildren(mergedMesh).stream().allMatch(( f) -> micycle.pgs.PGS_ShapePredicates.area(f) >= areaThreshold));\n    assertTrue(faces.size() >= mergedMesh.getChildCount());\n    Assert.assertEquals(micycle.pgs.PGS_ShapePredicates.area(mesh), micycle.pgs.PGS_ShapePredicates.area(mergedMesh), 1.0E-6);\n}",
    "method_name": "testAreaMerge"
}