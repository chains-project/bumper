{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 854587510,
    "in_class_code": "/**\n * Integration test for {@link DockerSlice}.\n *\n * @since 0.2\n */\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@DockerClientSupport\nfinal class DockerSliceITCase {\n    /**\n     * Example docker image to use in tests.\n     */\n    private Image image;\n\n    /**\n     * Docker client.\n     */\n    private DockerClient client;\n\n    /**\n     * Docker repository.\n     */\n    private DockerRepository repository;\n\n    @Test\n    void shouldPullPushedByDigest() throws Exception {\n        this.client.run(\"push\", this.image.remote());\n        this.client.run(\"image\", \"rm\", this.image.name());\n        this.client.run(\"image\", \"rm\", this.image.remote());\n        final String output = this.client.run(\"pull\", this.image.remoteByDigest());\n        MatcherAssert.assertThat(output, new StringContains(false, String.format(\"Status: Downloaded newer image for %s\", this.image.remoteByDigest())));\n    }\n}",
    "qualified_in_class_code": "/**\n * Integration test for {@link DockerSlice}.\n *\n * @since 0.2\n */\n@java.lang.SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@com.artipie.docker.junit.DockerClientSupport\nfinal class DockerSliceITCase {\n    /**\n     * Example docker image to use in tests.\n     */\n    private com.artipie.docker.http.Image image;\n\n    /**\n     * Docker client.\n     */\n    private com.artipie.docker.junit.DockerClient client;\n\n    /**\n     * Docker repository.\n     */\n    private com.artipie.docker.junit.DockerRepository repository;\n\n    @org.junit.jupiter.api.Test\n    void shouldPullPushedByDigest() throws java.lang.Exception {\n        this.client.run(\"push\", this.image.remote());\n        this.client.run(\"image\", \"rm\", this.image.name());\n        this.client.run(\"image\", \"rm\", this.image.remote());\n        final java.lang.String output = this.client.run(\"pull\", this.image.remoteByDigest());\n        org.hamcrest.MatcherAssert.assertThat(output, new org.hamcrest.core.StringContains(false, java.lang.String.format(\"Status: Downloaded newer image for %s\", this.image.remoteByDigest())));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  required: java.lang.String\n  found: boolean,java.lang.String\n  reason: actual and formal argument lists differ in length\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/http/DockerSliceITCase.java:[97,13] constructor StringContains in class org.hamcrest.core.StringContains cannot be applied to given types;",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/http/DockerSliceITCase.java",
        "client_line_position": "97"
    },
    "client_end_line_number": 102,
    "client_line_number": 89,
    "method_code": "@Test\n    void shouldPullPushedByDigest() throws Exception {\n        this.client.run(\"push\", this.image.remote());\n        this.client.run(\"image\", \"rm\", this.image.name());\n        this.client.run(\"image\", \"rm\", this.image.remote());\n        final String output = this.client.run(\"pull\", this.image.remoteByDigest());\n        MatcherAssert.assertThat(\n            output,\n            new StringContains(\n                false,\n                String.format(\"Status: Downloaded newer image for %s\", this.image.remoteByDigest())\n            )\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.api.Test\nvoid shouldPullPushedByDigest() throws java.lang.Exception {\n    this.client.run(\"push\", this.image.remote());\n    this.client.run(\"image\", \"rm\", this.image.name());\n    this.client.run(\"image\", \"rm\", this.image.remote());\n    final java.lang.String output = this.client.run(\"pull\", this.image.remoteByDigest());\n    org.hamcrest.MatcherAssert.assertThat(output, new org.hamcrest.core.StringContains(false, java.lang.String.format(\"Status: Downloaded newer image for %s\", this.image.remoteByDigest())));\n}",
    "method_name": "shouldPullPushedByDigest"
}