{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1390869998,
    "in_class_code": "/**\n * Tests for {@link Tag.Valid}.\n *\n * @since 0.2\n */\nclass TagValidTest {\n    @ParameterizedTest\n    @ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\n    void shouldFailToGetValueWhenInvalid(final String original) {\n        final Tag.Valid tag = new Tag.Valid(original);\n        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));\n        final Throwable throwable = Assertions.assertThrows(InvalidTagNameException.class, tag::value);\n        MatcherAssert.assertThat(throwable.getMessage(), new AllOf<>(Arrays.asList(new StringContains(true, \"Invalid tag\"), new StringContains(false, original))));\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link Tag.Valid}.\n *\n * @since 0.2\n */\nclass TagValidTest {\n    @org.junit.jupiter.params.ParameterizedTest\n    @org.junit.jupiter.params.provider.ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\n    void shouldFailToGetValueWhenInvalid(final java.lang.String original) {\n        final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);\n        org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual<>(false));\n        final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);\n        org.hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new org.hamcrest.core.AllOf<>(java.util.Arrays.asList(new org.hamcrest.core.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains(false, original))));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  required: java.lang.String\n  found: boolean,java.lang.String\n  reason: actual and formal argument lists differ in length\n",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/TagValidTest.java:[63,21] constructor StringContains in class org.hamcrest.core.StringContains cannot be applied to given types;",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/TagValidTest.java",
        "client_line_position": "63"
    },
    "client_end_line_number": 67,
    "client_line_number": 41,
    "method_code": "@ParameterizedTest\n    @ValueSource(strings = {\n        \"\",\n        \".0\",\n        \"*\",\n        \"\\u00ea\",\n        \"-my-tag\",\n        //@checkstyle LineLengthCheck (1 line)\n        \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\"\n    })\n    void shouldFailToGetValueWhenInvalid(final String original) {\n        final Tag.Valid tag = new Tag.Valid(original);\n        MatcherAssert.assertThat(tag.valid(), new IsEqual<>(false));\n        final Throwable throwable = Assertions.assertThrows(\n            InvalidTagNameException.class,\n            tag::value\n        );\n        MatcherAssert.assertThat(\n            throwable.getMessage(),\n            new AllOf<>(\n                Arrays.asList(\n                    new StringContains(true, \"Invalid tag\"),\n                    new StringContains(false, original)\n                )\n            )\n        );\n    }",
    "qualified_code": "@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n\"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\nvoid shouldFailToGetValueWhenInvalid(final java.lang.String original) {\n    final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);\n    org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual<>(false));\n    final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);\n    org.hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new org.hamcrest.core.AllOf<>(java.util.Arrays.asList(new org.hamcrest.core.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains(false, original))));\n}",
    "method_name": "shouldFailToGetValueWhenInvalid"
}