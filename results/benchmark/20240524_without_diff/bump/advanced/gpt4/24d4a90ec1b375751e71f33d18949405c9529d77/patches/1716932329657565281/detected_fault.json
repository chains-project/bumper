{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1637061418,
    "in_class_code": "/**\n * Rule that creates and drops an AWS subj.\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: 49d563c1e0af9dae0fbd7d9a97be7c07e52e6612 $\n * @since 0.3\n */\nfinal class BucketRule implements TestRule {\n    /**\n     * AWS key.\n     */\n    private static final String KEY = System.getProperty(\"failsafe.s3.key\");\n\n    /**\n     * AWS secret.\n     */\n    private static final String SECRET = System.getProperty(\"failsafe.s3.secret\");\n\n    /**\n     * Bucket we're working with.\n     */\n    private transient Bucket subj;\n\n    /**\n     * Create S3 subj.\n     *\n     * @throws Exception\n     * \t\tIf fails\n     */\n    private void create() throws Exception {\n        final Region region = new CdRegion(new ReRegion(new Region.Simple(BucketRule.KEY, BucketRule.SECRET)));\n        final String name = String.format(\"%s.s3.jcabi.com\", RandomStringUtils.randomAlphabetic(Tv.FIVE).toLowerCase(Locale.ENGLISH));\n        this.subj = region.bucket(name);\n        final AmazonS3 aws = this.subj.region().aws();\n        aws.createBucket(name);\n        Logger.info(this, \"S3 bucket %s created\", name);\n    }\n}",
    "qualified_in_class_code": "/**\n * Rule that creates and drops an AWS subj.\n *\n * @author Yegor Bugayenko (yegor256@gmail.com)\n * @version $Id: 49d563c1e0af9dae0fbd7d9a97be7c07e52e6612 $\n * @since 0.3\n */\nfinal class BucketRule implements org.junit.rules.TestRule {\n    /**\n     * AWS key.\n     */\n    private static final java.lang.String KEY = java.lang.System.getProperty(\"failsafe.s3.key\");\n\n    /**\n     * AWS secret.\n     */\n    private static final java.lang.String SECRET = java.lang.System.getProperty(\"failsafe.s3.secret\");\n\n    /**\n     * Bucket we're working with.\n     */\n    private transient com.jcabi.s3.Bucket subj;\n\n    /**\n     * Create S3 subj.\n     *\n     * @throws Exception\n     * \t\tIf fails\n     */\n    private void create() throws java.lang.Exception {\n        final com.jcabi.s3.Region region = new com.jcabi.s3.cached.CdRegion(new com.jcabi.s3.retry.ReRegion(new com.jcabi.s3.Region.Simple(com.jcabi.s3.BucketRule.KEY, com.jcabi.s3.BucketRule.SECRET)));\n        final java.lang.String name = java.lang.String.format(\"%s.s3.jcabi.com\", org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(Tv.FIVE).toLowerCase(java.util.Locale.ENGLISH));\n        this.subj = region.bucket(name);\n        final com.amazonaws.services.s3.AmazonS3 aws = this.subj.region().aws();\n        aws.createBucket(name);\n        com.jcabi.log.Logger.info(this, \"S3 bucket %s created\", name);\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable Tv\n  location: class com.jcabi.s3.BucketRule\n",
        "error_message": "[ERROR] /jcabi-s3/src/test/java/com/jcabi/s3/BucketRule.java:[113,48] cannot find symbol",
        "client_file_path": "/jcabi-s3/src/test/java/com/jcabi/s3/BucketRule.java",
        "client_line_position": "113"
    },
    "client_end_line_number": 120,
    "client_line_number": 101,
    "method_code": "/**\n     * Create S3 subj.\n     * @throws Exception If fails\n     */\n    private void create() throws Exception {\n        final Region region = new CdRegion(\n            new ReRegion(\n                new Region.Simple(BucketRule.KEY, BucketRule.SECRET)\n            )\n        );\n        final String name = String.format(\n            \"%s.s3.jcabi.com\",\n            RandomStringUtils.randomAlphabetic(Tv.FIVE)\n                .toLowerCase(Locale.ENGLISH)\n        );\n        this.subj = region.bucket(name);\n        final AmazonS3 aws = this.subj.region().aws();\n        aws.createBucket(name);\n        Logger.info(this, \"S3 bucket %s created\", name);\n    }",
    "qualified_code": "/**\n * Create S3 subj.\n *\n * @throws Exception\n * \t\tIf fails\n */\nprivate void create() throws java.lang.Exception {\n    final com.jcabi.s3.Region region = new com.jcabi.s3.cached.CdRegion(new com.jcabi.s3.retry.ReRegion(new com.jcabi.s3.Region.Simple(com.jcabi.s3.BucketRule.KEY, com.jcabi.s3.BucketRule.SECRET)));\n    final java.lang.String name = java.lang.String.format(\"%s.s3.jcabi.com\", org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(Tv.FIVE).toLowerCase(java.util.Locale.ENGLISH));\n    this.subj = region.bucket(name);\n    final com.amazonaws.services.s3.AmazonS3 aws = this.subj.region().aws();\n    aws.createBucket(name);\n    com.jcabi.log.Logger.info(this, \"S3 bucket %s created\", name);\n}",
    "method_name": "create"
}