{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1637290981,
    "in_class_code": "/**\n * Scans the current Classpath and passes to all the scanners passed.\n */\npublic class ClasspathScanner {\n    private Reflections reflections;\n\n    private boolean shouldScan(String s) {\n        final String packagesToScan = System.getenv(PACKAGE_TO_SCAN);\n        if ((packagesToScan == null) || packagesToScan.isEmpty()) {\n            return new FilterBuilder().include(\".+\\\\.class\").apply(s);\n        }\n        final String[] packages = packagesToScan.split(\",\");\n        for (String packageToScan : packages) {\n            String regex = String.format(\".?\\\\.??%s\\\\..+\\\\.class\", packageToScan);\n            if (new FilterBuilder().include(regex).apply(s)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "qualified_in_class_code": "/**\n * Scans the current Classpath and passes to all the scanners passed.\n */\npublic class ClasspathScanner {\n    private org.reflections.Reflections reflections;\n\n    private boolean shouldScan(java.lang.String s) {\n        final java.lang.String packagesToScan = java.lang.System.getenv(com.thoughtworks.gauge.GaugeConstant.PACKAGE_TO_SCAN);\n        if ((packagesToScan == null) || packagesToScan.isEmpty()) {\n            return new org.reflections.util.FilterBuilder().include(\".+\\\\.class\").apply(s);\n        }\n        final java.lang.String[] packages = packagesToScan.split(\",\");\n        for (java.lang.String packageToScan : packages) {\n            java.lang.String regex = java.lang.String.format(\".?\\\\.??%s\\\\..+\\\\.class\", packageToScan);\n            if (new org.reflections.util.FilterBuilder().include(regex).apply(s)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   method apply(java.lang.String)\n  location: class org.reflections.util.FilterBuilder\n",
        "error_message": "[ERROR] /gauge-java/src/main/java/com/thoughtworks/gauge/scan/ClasspathScanner.java:[69,51] cannot find symbol",
        "client_file_path": "/gauge-java/src/main/java/com/thoughtworks/gauge/scan/ClasspathScanner.java",
        "client_line_position": "69"
    },
    "client_end_line_number": 74,
    "client_line_number": 61,
    "method_code": "private boolean shouldScan(String s) {\n        final String packagesToScan = System.getenv(PACKAGE_TO_SCAN);\n        if (packagesToScan == null || packagesToScan.isEmpty()) {\n            return new FilterBuilder().include(\".+\\\\.class\").apply(s);\n        }\n        final String[] packages = packagesToScan.split(\",\");\n        for (String packageToScan : packages) {\n            String regex = String.format(\".?\\\\.??%s\\\\..+\\\\.class\", packageToScan);\n            if (new FilterBuilder().include(regex).apply(s)) {\n                return true;\n            }\n        }\n        return false;\n    }",
    "qualified_code": "private boolean shouldScan(java.lang.String s) {\n    final java.lang.String packagesToScan = java.lang.System.getenv(com.thoughtworks.gauge.GaugeConstant.PACKAGE_TO_SCAN);\n    if ((packagesToScan == null) || packagesToScan.isEmpty()) {\n        return new org.reflections.util.FilterBuilder().include(\".+\\\\.class\").apply(s);\n    }\n    final java.lang.String[] packages = packagesToScan.split(\",\");\n    for (java.lang.String packageToScan : packages) {\n        java.lang.String regex = java.lang.String.format(\".?\\\\.??%s\\\\..+\\\\.class\", packageToScan);\n        if (new org.reflections.util.FilterBuilder().include(regex).apply(s)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "method_name": "shouldScan"
}