1,20c1,27
< public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {
<         final LoaderOptions loadingConfig = new LoaderOptions();
<         loadingConfig.setTagInspector(new TrustedTagInspector());
< 
<         final Representer representer = new Representer(new DumperOptions());
<         final Tag zoneIdTag = new Tag("!ZoneId");
<         representer.addClassTag(ZoneId.class, zoneIdTag);
<         final Tag localDateTag = new Tag("!LocalDate");
<         representer.addClassTag(LocalDate.class, localDateTag);
< 
<         final Constructor constructor = new Constructor(clazz, loadingConfig) {{
<             this.addTypeDescription(new TypeDescription(ZoneId.class, "ZoneId"));
<             this.addTypeDescription(new TypeDescription(LocalDate.class, "LocalDate"));
< 
<             this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());
<             this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());
<         }};
< 
<         Yaml yaml = new Yaml(constructor, representer);
< 
---
> public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {
>     final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();
>     loadingConfig.setTagInspector(new com.premiumminds.billy.core.test.fixtures.TrustedTagInspector());
>     final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());
>     final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag("!ZoneId");
>     representer.addClassTag(java.time.ZoneId.class, zoneIdTag);
>     final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag("!LocalDate");
>     representer.addClassTag(java.time.LocalDate.class, localDateTag);
>     final org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(clazz, loadingConfig) {
>         {
>             this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, "ZoneId"));
>             this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, "LocalDate"));
>             this.yamlConstructors.put(zoneIdTag, new org.yaml.snakeyaml.constructor.Constructor.Construct(java.time.ZoneId.class) {
>                 @Override
>                 public Object construct(org.yaml.snakeyaml.constructor.Constructor constructor, org.yaml.snakeyaml.nodes.Node node) {
>                     return java.time.ZoneId.of(constructor.constructScalar(node).toString());
>                 }
>             });
>             this.yamlConstructors.put(localDateTag, new org.yaml.snakeyaml.constructor.Constructor.Construct(java.time.LocalDate.class) {
>                 @Override
>                 public Object construct(org.yaml.snakeyaml.constructor.Constructor constructor, org.yaml.snakeyaml.nodes.Node node) {
>                     return java.time.LocalDate.parse(constructor.constructScalar(node).toString());
>                 }
>             });
>         }
>     };
>     org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);
22,24c29,31
<             return yaml.load(new BufferedReader(new FileReader(path)));
<         } catch (FileNotFoundException e) {
<             throw new RuntimeException(e);
---
>         return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));
>     } catch (java.io.FileNotFoundException e) {
>         throw new java.lang.RuntimeException(e);
