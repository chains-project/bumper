0a1,14
> import eu.europa.esig.dss.enumerations.CertificationPermission;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import eu.europa.esig.dss.validation.SignedDocumentValidator;
> 
> import java.io.IOException;
> import java.nio.file.Path;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.util.logging.Logger;
> 
> public class Signer {
> 
>     private static final Logger log = Logger.getLogger(Signer.class.getName());
> 
2d15
<         boolean visibleSignature = params.getPage() != null;
7d19
< 
10d21
< 
12,13c23
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
20c30
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>             keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d31
<         ;
25c34
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
---
>         if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
31d39
< 
36d43
< 
38d44
< 
40c46
<         if (visibleSignature) {
---
>         if (params.getPage() != null) {
44d49
< 
46c51
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
---
>                 imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));
48c53
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>                 imageParameters.setImage(new InMemoryDocument(org.apache.commons.io.IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d54
< 
52c56
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
---
>                 org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());
57d60
< 
61,64c64,66
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
---
>             fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
>             fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
>             fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
79d80
< 
81,82d81
< 
< 
87d85
< 
92c90
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>         if (params.getUseTimestamp() || (params.getTSA() != null)) {
97c95
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach((source) -> {
101c99
<                 params.getTSA().stream().forEach(source -> {
---
>                 params.getTSA().stream().forEach((source) -> {
107d104
< 
109d105
< 
115d110
< 
118c113,114
<         }*/
---
>         }
>          */
120d115
< 
128a124
> }
\ No newline at end of file
