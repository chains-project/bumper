1,10c1,17
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
< void testScope() {
<     final java.lang.String line = "GET /resource.txt HTTP/1.1";
<     final java.lang.String action = "foo:bar:baz";
<     final java.util.concurrent.atomic.AtomicReference<java.lang.String> caction = new java.util.concurrent.atomic.AtomicReference<>();
<     final java.util.concurrent.atomic.AtomicReference<java.lang.String> cline = new java.util.concurrent.atomic.AtomicReference<>();
<     new com.artipie.docker.http.AuthScopeSlice(new com.artipie.docker.http.ScopeSlice() {
<         @java.lang.Override
<         public com.artipie.docker.http.Scope scope(final java.lang.String rqline) {
---
> import com.artipie.http.auth.Authentication;
> import com.artipie.http.auth.Authentication.User;
> import java.util.concurrent.CompletableFuture;
> import java.util.concurrent.ExecutionException;
> import org.junit.jupiter.api.Test;
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.equalTo;
> 
> @Test
> void testScope() throws ExecutionException, InterruptedException {
>     final String line = "GET /resource.txt HTTP/1.1";
>     final String action = "foo:bar:baz";
>     final AtomicReference<String> caction = new AtomicReference<>();
>     final AtomicReference<String> cline = new AtomicReference<>();
>     new AuthScopeSlice(new ScopeSlice() {
>         @Override
>         public Scope scope(final String rqline) {
12c19
<             return new com.artipie.docker.http.Scope.FromString(action);
---
>             return new Scope.FromString(action);
15,17c22,24
<         @java.lang.Override
<         public com.artipie.http.Response response(final java.lang.String line, final java.lang.Iterable<java.util.Map.Entry<java.lang.String, java.lang.String>> headers, final org.reactivestreams.Publisher<java.nio.ByteBuffer> body) {
<             return com.artipie.http.rs.StandardRs.OK;
---
>         @Override
>         public Response response(final String line, final Iterable<Map.Entry<String, String>> headers, final Publisher<ByteBuffer> body) {
>             return StandardRs.OK;
19c26
<     }, ( headers, rline) -> java.util.concurrent.CompletableFuture.completedFuture(new com.artipie.http.auth.Authentication.SimpleUser("alice")), ( user, act) -> {
---
>     }, (headers, rline) -> CompletableFuture.completedFuture(new SimpleUser("alice")), (user, act) -> {
22,24c29,31
<     }).response(line, com.artipie.http.Headers.EMPTY, com.artipie.asto.Content.EMPTY).send(( status, headers, body) -> java.util.concurrent.CompletableFuture.allOf()).toCompletableFuture().join();
<     org.hamcrest.MatcherAssert.assertThat("Request line passed to slice", cline.get(), new org.hamcrest.core.IsEqual<>(line));
<     org.hamcrest.MatcherAssert.assertThat("Scope passed as action to permissions", caction.get(), new org.hamcrest.core.IsEqual<>(action));
---
>     }).response(line, Headers.EMPTY, Content.EMPTY).send((status, headers, body) -> CompletableFuture.allOf()).toCompletableFuture().join();
>     assertThat("Request line passed to slice", cline.get(), equalTo(line));
>     assertThat("Scope passed as action to permissions", caction.get(), equalTo(action));
