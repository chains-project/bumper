import com.artipie.asto.Content;
import com.artipie.asto.memory.InMemoryStorage;
import com.artipie.docker.asto.AstoBlobs;
import com.artipie.docker.asto.CheckedBlobSource;
import com.artipie.docker.Digest;
import com.artipie.docker.RepoName;
import com.artipie.docker.error.InvalidDigestException;
import com.google.common.base.Throwables;
import java.nio.charset.StandardCharsets;
import java.util.concurrent.CompletableFuture;
import org.hamcrest.MatcherAssert;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;

@Test
void fixesDigestMismatch() {
    final InMemoryStorage storage = new InMemoryStorage();
    final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
    final String digest = "123";
    CompletableFuture.supplyAsync(() -> {
        try {
            blobs.put(new CheckedBlobSource(Content.From("data".getBytes(StandardCharsets.UTF_8)), new Digest.Sha256(digest)))
                 .toCompletableFuture()
                 .join();
            return null;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    })
    .exceptionally(throwable -> {
        MatcherAssert.assertThat("Exception thrown", throwable, Matchers.notNullValue());
        MatcherAssert.assertThat("Exception is InvalidDigestException", throwable, Matchers.instanceOf(InvalidDigestException.class));
        MatcherAssert.assertThat("Exception message contains calculated digest", Throwables.getRootCause(throwable).getMessage(), Matchers.startsWith("3a6eb0790f39ac87c94f3856b2dd2c5d110e68111602261a9a923d3bb23adc8b7"));
        return null;
    });
    MatcherAssert.assertThat("Exception message contains expected digest", Throwables.getRootCause(throwable).getMessage(), Matchers.containsString(digest));
}