0a1,17
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.Digest;
> import com.artipie.docker.RepoName;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> 
3c20
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new Memory.InMemoryStorage();
5c22,24
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
9,10c28,33
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
---
>         new CheckedBlobSource(
>             Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
>         )
>     ).toCompletableFuture()
>         .handle(
12,22c35,38
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
---
>                 assertThat("Exception thrown", throwable, not(nullValue()));
>                 assertThat("Exception is InvalidDigestException", throwable, instanceOf(InvalidDigestException.class));
>                 final String message = Throwables.getRootCause(throwable).getMessage();
>                 assertThat(
24,28c40,41
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                     message,
>                     new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
30c43
<                 MatcherAssert.assertThat(
---
>                 assertThat(
32,33c45,46
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>                     message,
>                     new StringContains(digest)
37c50,65
<         ).join();
---
>         )
>         .join();
> }
> 
> static class StringContains extends org.hamcrest.core.StringContains {
>     StringContains(boolean sensitive, String substring) {
>         super(substring);
>         this.sensitive = sensitive;
>     }
> 
>     @Override
>     protected boolean matchSubstring(String substring) {
>         return sensitive ? super.matchSubstring(substring) : substring.contains(this.substring);
>     }
> 
>     private final boolean sensitive;
