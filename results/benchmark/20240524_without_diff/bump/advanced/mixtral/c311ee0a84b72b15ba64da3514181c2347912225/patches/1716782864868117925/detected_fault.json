{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1636182655,
    "in_class_code": "/**\n * Tests for {@link Tag.Valid}.\n *\n * @since 0.2\n */\nclass TagValidTest {\n    // TODO: review this AI generated patch!\n    @ParameterizedTest\n    @ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\n    void shouldFailToGetValueWhenInvalid(final String original) {\n        final Tag.Valid tag = new Tag.Valid(original);\n        hamcrest.MatcherAssert.assertThat(tag.valid(), new IsEqual(false));\n        final Throwable throwable = api.Assertions.assertThrows(InvalidTagNameException.class, tag::value);\n        hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new MatcherAssert.CoreMatchers().<String>allOf(new org.hamcrest.core.StringContains.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains.StringContains(false, original)));\n    }\n}",
    "qualified_in_class_code": "/**\n * Tests for {@link Tag.Valid}.\n *\n * @since 0.2\n */\nclass TagValidTest {\n    // TODO: review this AI generated patch!\n    @org.junit.jupiter.params.ParameterizedTest\n    @org.junit.jupiter.params.provider.ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\n    void shouldFailToGetValueWhenInvalid(final java.lang.String original) {\n        final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);\n        org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual(false));\n        final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);\n        org.hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new org.hamcrest.MatcherAssert.CoreMatchers().<java.lang.String>allOf(new org.hamcrest.core.StringContains.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains.StringContains(false, original)));\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "",
        "error_message": "[ERROR] /docker-adapter/src/test/java/com/artipie/docker/TagValidTest.java:[49,111] <identifier> expected",
        "client_file_path": "/docker-adapter/src/test/java/com/artipie/docker/TagValidTest.java",
        "client_line_position": "49"
    },
    "client_end_line_number": 50,
    "client_line_number": 41,
    "method_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n\"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\nvoid shouldFailToGetValueWhenInvalid(final java.lang.String original) {\n    final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);\n    org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual<>(false));\n    final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);\n    org.hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new org.hamcrest.MatcherAssert.CoreMatchers.<java.lang.String>allOf(new org.hamcrest.core.StringContains.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains.StringContains(false, original)));\n}",
    "qualified_code": "// TODO: review this AI generated patch!\n@org.junit.jupiter.params.ParameterizedTest\n@org.junit.jupiter.params.provider.ValueSource(strings = { \"\", \".0\", \"*\", \"\u00ea\", \"-my-tag\", // @checkstyle LineLengthCheck (1 line)\n\"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\" })\nvoid shouldFailToGetValueWhenInvalid(final java.lang.String original) {\n    final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);\n    org.hamcrest.MatcherAssert.assertThat(tag.valid(), new org.hamcrest.core.IsEqual(false));\n    final java.lang.Throwable throwable = org.junit.jupiter.api.Assertions.assertThrows(com.artipie.docker.error.InvalidTagNameException.class, tag::value);\n    org.hamcrest.MatcherAssert.assertThat(throwable.getMessage(), new org.hamcrest.MatcherAssert.CoreMatchers().<java.lang.String>allOf(new org.hamcrest.core.StringContains.StringContains(true, \"Invalid tag\"), new org.hamcrest.core.StringContains.StringContains(false, original)));\n}",
    "method_name": "shouldFailToGetValueWhenInvalid"
}