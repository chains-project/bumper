import org.hamcrest.CoreMatchers;
import org.hamcrest.MatcherAssert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

import java.util.regex.Pattern;

import static java.lang.String.format;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.hamcrest.core.StringContains.stringContains;

public class TagValidTest {
    @ParameterizedTest
    @ValueSource(strings = { "", ".0", "*", "Ãª", "-my-tag", // @checkstyle LineLengthCheck (1 line)
            "01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678" })
    void shouldFailToGetValueWhenInvalid(final String original) {
        final com.artipie.docker.Tag.Valid tag = new com.artipie.docker.Tag.Valid(original);
        assertThat(tag.valid(), equalTo(false));
        final InvalidTagNameException exception = Assertions.assertThrows(InvalidTagNameException.class, tag::value);
        final String expectedMessage = format("Invalid tag: '%s'.", original);
        final String actualMessage = exception.getMessage();
        final Pattern pattern = Pattern.compile(expectedMessage);
        assertThat(actualMessage, stringContains(pattern));
    }
}