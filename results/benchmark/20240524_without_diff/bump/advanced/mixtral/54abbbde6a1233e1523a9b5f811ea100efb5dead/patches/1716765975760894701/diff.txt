1,11c1,8
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
<     @RetryOnFailure(
<         attempts = Tv.SEVEN,
<         delay = 1,
<         unit = TimeUnit.MINUTES,
<         verbose = false,
<         types = IOException.class
<     )
<     protected Session session() throws IOException {
<         final File file = File.createTempFile("jcabi-ssh", ".key");
---
> import com.jcabi.aspects.RetryOnFailure.Tv;
> 
> // ...
> 
> @java.lang.Override
> @com.jcabi.aspects.RetryOnFailure(attempts = Tv.SEVEN, delay = 1, unit = java.util.concurrent.TimeUnit.MINUTES, verbose = false, types = java.io.IOException.class)
> protected com.jcraft.jsch.Session session() throws java.io.IOException {
>     final java.io.File file = java.io.File.createTempFile("jcabi-ssh", ".key");
13,25c10,13
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             new Unchecked<>(
<                 new LengthOf(
<                     new TeeInput(
<                         this.key.replaceAll("\r", "")
<                             .replaceAll("\n\\s+|\n{2,}", "\n")
<                             .trim(),
<                         file
<                     )
<                 )
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
---
>         com.jcraft.jsch.JSch.setLogger(new com.jcabi.ssh.JschLogger());
>         final com.jcraft.jsch.JSch jsch = new com.jcraft.jsch.JSch();
>         new org.cactoos.scalar.Unchecked<>(new org.cactoos.scalar.LengthOf(new org.cactoos.io.TeeInput(this.key.replaceAll("\r", "").replaceAll("\n\\s+|\n{2,}", "\n").trim(), file))).value();
>         jsch.setHostKeyRepository(new com.jcabi.ssh.EasyRepo());
29,34c17
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
---
>             jsch.addIdentity(this.getLogin(), this.key.getBytes(java.nio.charset.StandardCharsets.UTF_8), null, this.passphrase.getBytes(java.nio.charset.StandardCharsets.UTF_8));
36,41c19
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
<             );
---
>         com.jcabi.log.Logger.debug(this, "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...", this.getLogin(), this.getAddr(), this.getPort(), file.length());
43,44c21,22
<         } catch (final JSchException ex) {
<             throw new IOException(ex);
---
>     } catch (final com.jcraft.jsch.JSchException ex) {
>         throw new java.io.IOException(ex);
46c24
<             Files.deleteIfExists(file.toPath());
---
>         java.nio.file.Files.deleteIfExists(file.toPath());
