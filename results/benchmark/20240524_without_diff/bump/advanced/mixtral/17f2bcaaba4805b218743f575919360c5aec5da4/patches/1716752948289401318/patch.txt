import org.junit.jupiter.api.Test;
import micycle.pgs.commons.PEdge;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.geom.PrecisionModel;
import org.locationtech.jts.index.strtree.STRtree;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import org.locationtech.jts.operation.polygonize.Polygonizer;
import processing.core.PShape;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Iterator;
import java.util.Random;

@Test
void testRobustnessRandomly() {
    Random r = new Random();
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        STRtree nodedSS = new STRtree();
        for (SegmentString ss : segmentStrings) {
            nodedSS.insert(ss.getEnvelopeInternal(), ss);
        }
        for (Iterator<SegmentString> i = segmentStrings.iterator(); i.hasNext(); ) {
            SegmentString ss = i.next();
            List<SegmentString> intersecting = nodedSS.query(ss.getEnvelopeInternal());
            for (SegmentString intersectingSS : intersecting) {
                if (ss != intersectingSS) {
                    List<Coordinate> nodes = ss.getIntersectionPoints(intersectingSS);
                    if (nodes.size() > 0) {
                        i.remove();
                        intersecting.remove();
                        segmentStrings.add(new NodedSegmentString(new Coordinate[]{ ss.getCoordinateN(0), nodes.get(0) }, ss.getUserData()));
                        segmentStrings.add(new NodedSegmentString(new Coordinate[]{ nodes.get(nodes.size() - 1), ss.getCoordinateN(ss.getNumPoints() - 1) }, ss.getUserData()));
                        for (Iterator<SegmentString> j = intersectingSS.getSubStrings().iterator(); j.hasNext(); ) {
                            SegmentString subSS = j.next();
                            if (subSS.getUserData() != intersectingSS.getUserData()) {
                                j.remove();
                                segmentStrings.add(subSS);
                            }
                        }
                        break;
                    }
                }
            }
        }
        Collection<PEdge> nodedEdges = new ArrayList<>();
        for (SegmentString ss : segmentStrings) {
            nodedEdges.add(new PEdge(ss.getCoordinateN(0), ss.getCoordinateN(ss.getNumPoints() - 1)));
        }
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
        Polygonizer polygonizerJTS = new Polygonizer();
        polygonizerJTS.setCheckRingsValid(false);
        for (PEdge e : nodedEdgesSet) {
            LineString l = PGS.GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
            polygonizerJTS.add(l);
        }
        long t1 = System.currentTimeMillis();
        Collection<Polygon> JTS = polygonizerJTS.getPolygons();
        long t2 = System.currentTimeMillis();
        long timeJTS = t2 - t1;
        t1 = System.currentTimeMillis();
        PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
        t2 = System.currentTimeMillis();
        long timeFP = t2 - t1;
        // System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
        assertEquals(JTS.size(), FP.getChildCount());
    }
}