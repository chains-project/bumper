0a1,18
> import org.junit.jupiter.api.Test;
> import static org.junit.jupiter.api.Assertions.assertEquals;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> 
> import processing.core.PShape;
> 
> import micycle.pgs.commons.PEdge;
> import micycle.pgs.PGS;
> import micycle.pgs.FastPolygonizer;
> import org.locationtech.jts.geom.*;
> import org.locationtech.jts.noding.*;
> import org.locationtech.jts.operation.polygonize.*;
> 
2d19
<         @Ignore
6,9c23,25
<                         List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         List<NodedSegmentString> segmentStrings = new ArrayList<>(111 + k);
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
13c29
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
15d30
< 
18,20c33,34
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach(( e) -> {
>             final LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ coordFromPVector(e.a), coordFromPVector(e.b) });
23d36
< 
29d41
< 
31c43
<                         PShape FP = polygonize(nodedEdgesSet);
---
>         PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
34d45
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
