import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.geom.util.GeometryFactory;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import processing.core.PShape;
import micycle.pgs.commons.PEdge;
import micycle.pgs.FastPolygonizer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;

@Test
void testRobustnessRandomly() {
    Random r = new Random();
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        Collection<SegmentString> nodedSS = FastPolygonizer.nodeSegmentStrings(segmentStrings);
        Collection<PEdge> nodedEdges = new ArrayList<>();
        nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(FastPolygonizer.toPVector(ss.getCoordinate(0)), FastPolygonizer.toPVector(ss.getCoordinate(1)))));
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
        GeometryFactory GEOM_FACTORY = new GeometryFactory();
        PShape processing = new PShape();
        Collection<Polygon> JTS = new ArrayList<>();
        for (SegmentString ss : nodedSS) {
            LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ FastPolygonizer.coordFromPVector(nodedEdges.iterator().next().a), FastPolygonizer.coordFromPVector(nodedEdges.iterator().next().b) });
            JTS.add(l.getFactory().createPolygon(l.getBoundary()));
        }
        long t1 = System.currentTimeMillis();
        Collection<Polygon> JTS = polygonizerJTS.getPolygons();
        long t2 = System.currentTimeMillis();
        long timeJTS = t2 - t1;
        t1 = System.currentTimeMillis();
        PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
        t2 = System.currentTimeMillis();
        long timeFP = t2 - t1;
        assertEquals(JTS.size(), FP.getChildCount());
    }
}