0a1,13
> import org.junit.jupiter.api.Test;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.geom.util.GeometryFactory;
> import processing.core.PShape;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> import java.util.stream.Collectors;
> 
2d14
<         @Ignore
4c16
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>     Random r = new Random();
6,9c18,20
<                         List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         List<NodedSegmentString> segmentStrings = new ArrayList<>(111 + k);
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
11c22
<                         Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
---
>         Collection<NodedSegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
13c24
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
15,16c26,27
< 
<                         final Polygonizer polygonizerJTS = new Polygonizer();
---
>         GeometryFactory GEOM_FACTORY = new GeometryFactory();
>         final org.locationtech.jts.operation.polygonize.Polygonizer polygonizerJTS = new org.locationtech.jts.operation.polygonize.Polygonizer();
18,20c29,30
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach(( e) -> {
>             final LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
23d32
< 
29d37
< 
31c39
<                         PShape FP = polygonize(nodedEdgesSet);
---
>         PShape FP = FastPolygonizer.polygonize(nodedEdgesSet.stream().map(e -> new LineString(new Coordinate[]{PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b)})).collect(Collectors.toList()));
34d41
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
