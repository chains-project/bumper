import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import org.junit.jupiter.api.Test;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.CoordinateList;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.Polygon;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import processing.core.PShape;
import micycle.pgs.FastPolygonizer;
import micycle.pgs.PEdge;
import micycle.pgs.PGS;

@Test
void testRobustnessRandomly() {
    Random r = new Random(0);
    for (int k = 0; k < 100; k++) {
        List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
        for (int i = 0; i < (111 + k); i++) {
            segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
        }
        Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
        Collection<PEdge> nodedEdges = new ArrayList<>();
        nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
        Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
        GeometryFactory GEOM_FACTORY = new GeometryFactory();
        Envelope env = new Envelope();
        for (SegmentString ss : nodedSS) {
            env.expandToInclude(ss.getEnvelopeInternal());
        }
        CoordinateList list = new CoordinateList();
        for (PEdge edge : nodedEdgesSet) {
            list.add(PGS.coordFromPVector(edge.a));
            list.add(PGS.coordFromPVector(edge.b));
        }
        LineString ls = GEOM_FACTORY.createLineString(list.toCoordinateArray());
        ls.setUserData(nodedEdgesSet);
        env.expandToInclude(ls.getEnvelopeInternal());
        final org.locationtech.jts.operation.polygonize.Polygonizer polygonizerJTS = new org.locationtech.jts.operation.polygonize.Polygonizer();
        polygonizerJTS.setCheckRingsValid(false);
        polygonizerJTS.add(ls);
        Collection<Polygon> JTS = polygonizerJTS.getPolygons();
        PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
        assertEquals(JTS.size(), FP.getChildCount());
    }
}