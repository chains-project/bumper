import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import micycle.pgs.commons.PEdge;
import org.locationtech.jts.geom.Coordinate;
import org.locationtech.jts.geom.CoordinateSequence;
import org.locationtech.jts.geom.Envelope;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.geom.GeometryFactory;
import org.locationtech.jts.geom.LineString;
import org.locationtech.jts.geom.PrecisionModel;
import org.locationtech.jts.noding.NodedSegmentString;
import org.locationtech.jts.noding.SegmentString;
import org.locationtech.jts.operation.polygonize.Polygonizer;
import processing.core.PApplet;
import processing.core.PShape;

public class FastPolygonizerTests {

    // ... other methods ...

    @Test
    void testRobustnessRandomly() {
        GeometryFactory GEOM_FACTORY = new GeometryFactory(new PrecisionModel(), 4326);
        Random r = new Random(0);
        for (int k = 0; k < 100; k++) {
            List<SegmentString> segmentStrings = new ArrayList<>(111 + k);
            for (int i = 0; i < (111 + k); i++) {
                Coordinate[] coords = new Coordinate[2];
                coords[0] = new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000);
                coords[1] = new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337);
                segmentStrings.add(new NodedSegmentString(coords, null));
            }
            Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
            Collection<PEdge> nodedEdges = new ArrayList<>();
            nodedSS.forEach((ss) -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
            Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
            Polygonizer polygonizerJTS = new Polygonizer();
            polygonizerJTS.setCheckRingsValid(false);
            nodedEdgesSet.forEach((e) -> {
                LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
                polygonizerJTS.add(l);
            });
            long t1 = System.currentTimeMillis();
            @SuppressWarnings("unchecked")
            Collection<Geometry> JTS = polygonizerJTS.getPolygons();
            long t2 = System.currentTimeMillis();
            long timeJTS = t2 - t1;
            t1 = System.currentTimeMillis();
            PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
            t2 = System.currentTimeMillis();
            long timeFP = t2 - t1;
            assertEquals(JTS.size(), FP.getChildCount());
        }
    }
}