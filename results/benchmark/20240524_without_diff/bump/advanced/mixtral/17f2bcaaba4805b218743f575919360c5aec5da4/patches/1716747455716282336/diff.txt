0a1,17
> import org.junit.jupiter.api.Test;
> import static org.junit.jupiter.api.Assertions.assertEquals;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> 
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.geom.Polygonizer;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.SegmentString;
> 
> public class FastPolygonizerTests {
2d18
<         @Ignore
4c20
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>         Random r = new Random();
7,9c23,24
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>             for (int i = 0; i < (111 + k); i++) {
>                 segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
12,15c27,29
<                         Collection<PEdge> nodedEdges = new ArrayList<>();
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
<                         Collection<PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
< 
---
>             Collection<micycle.pgs.commons.PEdge> nodedEdges = new ArrayList<>();
>             nodedSS.forEach(( ss) -> nodedEdges.add(new micycle.pgs.commons.PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
>             Collection<micycle.pgs.commons.PEdge> nodedEdgesSet = new HashSet<>(nodedEdges);
18,20c32,33
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>             nodedEdgesSet.forEach(( e) -> {
>                 final LineString l = PGS.GEOM_FACTORY.createLineString(new Coordinate[]{ PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
23d35
< 
29d40
< 
31c42
<                         PShape FP = polygonize(nodedEdgesSet);
---
>             processing.core.PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
34d44
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
37a48
> }
\ No newline at end of file
