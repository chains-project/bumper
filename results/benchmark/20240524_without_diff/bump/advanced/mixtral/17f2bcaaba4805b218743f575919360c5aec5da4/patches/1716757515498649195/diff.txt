0a1,20
> import org.junit.jupiter.api.Test;
> import static org.junit.jupiter.api.Assertions.assertEquals;
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Random;
> import org.locationtech.jts.geom.Coordinate;
> import org.locationtech.jts.geom.LineString;
> import org.locationtech.jts.geom.Polygon;
> import org.locationtech.jts.geom.PrecisionModel;
> import org.locationtech.jts.noding.NodedSegmentString;
> import org.locationtech.jts.noding.SegmentString;
> import org.locationtech.jts.operation.polygonize.Polygonizer;
> import processing.core.PShape;
> import micycle.pgs.FastPolygonizer;
> import micycle.pgs.GEOM_FACTORY;
> import micycle.pgs.PVector;
> import micycle.pgs.commons.PEdge;
> 
2d21
<         @Ignore
4c23
<                 Random r = new XoRoShiRo128PlusRandom(0);
---
>     Random r = new Random(0);
7,9c26,27
<                         for (int i = 0; i < 111 + k; i++) {
<                                 segmentStrings.add(new NodedSegmentString(new Coordinate[] { new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000),
<                                                 new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
---
>         for (int i = 0; i < (111 + k); i++) {
>             segmentStrings.add(new NodedSegmentString(new Coordinate[]{ new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 10000), new Coordinate(r.nextDouble() * 10000, r.nextDouble() * 13337) }, null));
11c29
<                         Collection<SegmentString> nodedSS = PGS.nodeSegmentStrings(segmentStrings);
---
>         Collection<SegmentString> nodedSS = FastPolygonizer.nodeSegmentStrings(segmentStrings);
13c31
<                         nodedSS.forEach(ss -> nodedEdges.add(new PEdge(PGS.toPVector(ss.getCoordinate(0)), PGS.toPVector(ss.getCoordinate(1)))));
---
>         nodedSS.forEach(( ss) -> nodedEdges.add(new PEdge(GEOM_FACTORY.createLineString(new Coordinate[]{ GEOM_FACTORY.createCoordinate(ss.getCoordinate(0).x, ss.getCoordinate(0).y), GEOM_FACTORY.createCoordinate(ss.getCoordinate(1).x, ss.getCoordinate(1).y) }), null)));
15,16c33,34
< 
<                         final Polygonizer polygonizerJTS = new Polygonizer();
---
>         Polygonizer polygonizerJTS = new Polygonizer();
>         polygonizerJTS.setPrecisionModel(new PrecisionModel(PrecisionModel.FLOATING_SINGLE));
18,20c36,37
<                         nodedEdgesSet.forEach(e -> {
<                                 final LineString l = PGS.GEOM_FACTORY
<                                                 .createLineString(new Coordinate[] { PGS.coordFromPVector(e.a), PGS.coordFromPVector(e.b) });
---
>         nodedEdgesSet.forEach(( e) -> {
>             LineString l = GEOM_FACTORY.createLineString(new Coordinate[]{ GEOM_FACTORY.createCoordinate(e.a.x, e.a.y), GEOM_FACTORY.createCoordinate(e.b.x, e.b.y) });
23d39
< 
25d40
<                         @SuppressWarnings("unchecked")
29d43
< 
31c45
<                         PShape FP = polygonize(nodedEdgesSet);
---
>         PShape FP = FastPolygonizer.polygonize(nodedEdgesSet);
34d47
< //                      System.out.println(timeJTS + " " + timeFP + " " + JTS.size());
