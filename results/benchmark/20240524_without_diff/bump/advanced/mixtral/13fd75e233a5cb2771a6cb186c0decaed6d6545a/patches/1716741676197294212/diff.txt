0a1,19
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.BlobId;
> import com.artipie.asto.ext.Blobs;
> import com.artipie.docker.Digest;
> import com.artipie.docker.Digest.Sha256;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.error.InvalidDigestException;
> import io.reactivex.Completable;
> import org.hamcrest.Matcher;
> 
3,6c22,23
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final Storage storage = new Memory.InMemoryStorage();
>     final Blobs blobs = new Blobs(storage, new BlobId.Simple(), Completable.complete());
9,27c26,28
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
---
>         new CheckedBlobSource(
>             Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Sha256(digest)
29,34c30,38
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     ).toCompletableFuture()
>     .handle(
>         (BlobId blobId, Throwable throwable) -> {
>             final Matcher<Throwable> notNull = not(nullValue());
>             final Matcher<Throwable> isInvalidDigest = instanceOf(InvalidDigestException.class);
>             final Matcher<Throwable> hasMessage = hasMessage(containsDigest(digest, blobId.string()));
>             assertThat("Exception thrown", throwable, notNull);
>             assertThat("Exception is InvalidDigestException", throwable, isInvalidDigest);
>             assertThat("Exception message contains calculated digest", throwable, hasMessage);
38a43,60
> 
> private Matcher<Throwable> hasMessage(Matcher<String> matcher) {
>     return new org.hamcrest.Matcher<Throwable>() {
>         @Override
>         public boolean matches(Throwable throwable) {
>             return matcher.matches(throwable.getMessage());
>         }
>     };
> }
> 
> private Matcher<String> containsDigest(String digest, String blobId) {
>     return new org.hamcrest.Matcher<String>() {
>         @Override
>         public boolean matches(String message) {
>             return message.contains(digest) && message.contains(blobId);
>         }
>     };
> }
\ No newline at end of file
