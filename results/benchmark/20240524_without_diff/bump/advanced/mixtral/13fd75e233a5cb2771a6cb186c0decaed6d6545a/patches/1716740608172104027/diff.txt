0a1,19
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Key;
> import com.artipie.asto.Storage;
> import com.artipie.asto.ext.ExtendedStorage;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.Digest;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> import io.reactivex.Single;
> 
3,6c22,23
<         final InMemoryStorage storage = new InMemoryStorage();
<         final AstoBlobs blobs = new AstoBlobs(
<             storage, new DefaultLayout(), new RepoName.Simple("any")
<         );
---
>     final Storage storage = new InMemoryStorage();
>     final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
9,10c26,32
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
---
>         new CheckedBlobSource(
>             Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
>         )
>     )
>     .toCompletableFuture()
>     .handle(
12,17c34,35
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
---
>             assertThat("Exception thrown", throwable, not(nullValue()));
>             assertThat(
19,20c37,38
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
---
>                 throwable,
>                 instanceOf(InvalidDigestException.class)
22c40,41
<                 MatcherAssert.assertThat(
---
>             final InvalidDigestException ex = (InvalidDigestException) Throwables.getRootCause(throwable);
>             assertThat(
24,28c43,44
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
<                     )
---
>                 ex.message(),
>                 new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7")
30c46
<                 MatcherAssert.assertThat(
---
>             assertThat(
32,33c48,49
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
---
>                 ex.message(),
>                 new StringContains(digest)
37c53,58
<         ).join();
---
>     )
>     .join();
> }
> 
> interface StringContains extends org.hamcrest.Matcher<String> {
>     StringContains contains(String substring);
