-- public CBZip2InputStream org.bouncycastle.apache.bzip2.CBZip2InputStream(java.io.InputStream)
-- public int org.bouncycastle.apache.bzip2.CBZip2InputStream.read()
-- public CBZip2OutputStream org.bouncycastle.apache.bzip2.CBZip2OutputStream(java.io.OutputStream)
-- public CBZip2OutputStream org.bouncycastle.apache.bzip2.CBZip2OutputStream(java.io.OutputStream,int)
-- public void org.bouncycastle.apache.bzip2.CBZip2OutputStream.close()
-- protected void org.bouncycastle.apache.bzip2.CBZip2OutputStream.finalize()
-- public void org.bouncycastle.apache.bzip2.CBZip2OutputStream.finish()
-- public void org.bouncycastle.apache.bzip2.CBZip2OutputStream.flush()
-- protected static void org.bouncycastle.apache.bzip2.CBZip2OutputStream.hbMakeCodeLengths(char[],int[],int,int)
-- public void org.bouncycastle.apache.bzip2.CBZip2OutputStream.write(int)
++ public int org.bouncycastle.asn1.ASN1ApplicationSpecific.getApplicationTag()
++ public [B org.bouncycastle.asn1.ASN1ApplicationSpecific.getContents()
++ public static org.bouncycastle.asn1.ASN1ApplicationSpecific org.bouncycastle.asn1.ASN1ApplicationSpecific.getInstance(java.lang.Object)
++ protected static int org.bouncycastle.asn1.ASN1ApplicationSpecific.getLengthOfHeader(byte[])
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1ApplicationSpecific.getObject()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1ApplicationSpecific.getObject(int)
++ public int org.bouncycastle.asn1.ASN1ApplicationSpecific.hashCode()
++ public bool org.bouncycastle.asn1.ASN1ApplicationSpecific.isConstructed()
++ public java.lang.String org.bouncycastle.asn1.ASN1ApplicationSpecific.toString()
++ protected ASN1BitString org.bouncycastle.asn1.ASN1BitString(byte,int)
++ public ASN1BitString org.bouncycastle.asn1.ASN1BitString(byte[],int)
++ public [B org.bouncycastle.asn1.ASN1BitString.getBytes()
++ protected static [B org.bouncycastle.asn1.ASN1BitString.getBytes(int)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1BitString.getLoadedObject()
++ public [B org.bouncycastle.asn1.ASN1BitString.getOctets()
++ public int org.bouncycastle.asn1.ASN1BitString.getPadBits()
++ protected static int org.bouncycastle.asn1.ASN1BitString.getPadBits(int)
++ public java.lang.String org.bouncycastle.asn1.ASN1BitString.getString()
++ public int org.bouncycastle.asn1.ASN1BitString.hashCode()
++ public int org.bouncycastle.asn1.ASN1BitString.intValue()
++ public java.lang.String org.bouncycastle.asn1.ASN1BitString.toString()
-- public ASN1Boolean org.bouncycastle.asn1.ASN1Boolean(boolean)
++  bool org.bouncycastle.asn1.ASN1Boolean.asn1Equals(org.bouncycastle.asn1.ASN1Primitive)
-- protected bool org.bouncycastle.asn1.ASN1Boolean.asn1Equals(org.bouncycastle.asn1.ASN1Primitive)
++ public ASN1EncodableVector org.bouncycastle.asn1.ASN1EncodableVector(int)
++ public bool org.bouncycastle.asn1.ASN1Enumerated.hasValue(java.math.BigInteger)
++ public int org.bouncycastle.asn1.ASN1Enumerated.intValueExact()
++ public ASN1External org.bouncycastle.asn1.ASN1External(org.bouncycastle.asn1.ASN1EncodableVector)
++ public ASN1External org.bouncycastle.asn1.ASN1External(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.ASN1Primitive,int,org.bouncycastle.asn1.ASN1Primitive)
++ public ASN1External org.bouncycastle.asn1.ASN1External(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.ASN1Primitive,org.bouncycastle.asn1.DERTaggedObject)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1External.getDataValueDescriptor()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.ASN1External.getDirectReference()
++ public int org.bouncycastle.asn1.ASN1External.getEncoding()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1External.getExternalContent()
++ public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.asn1.ASN1External.getIndirectReference()
++ public int org.bouncycastle.asn1.ASN1External.hashCode()
-- private bool org.bouncycastle.asn1.ASN1GeneralizedTime.hasFractionalSeconds()
++ protected bool org.bouncycastle.asn1.ASN1GeneralizedTime.hasFractionalSeconds()
++ protected bool org.bouncycastle.asn1.ASN1GeneralizedTime.hasMinutes()
++ protected bool org.bouncycastle.asn1.ASN1GeneralizedTime.hasSeconds()
++ public bool org.bouncycastle.asn1.ASN1Integer.hasValue(java.math.BigInteger)
++ public int org.bouncycastle.asn1.ASN1Integer.intPositiveValueExact()
++ public int org.bouncycastle.asn1.ASN1Integer.intValueExact()
++ public J org.bouncycastle.asn1.ASN1Integer.longValueExact()
++ public void org.bouncycastle.asn1.ASN1Object.encodeTo(java.io.OutputStream)
++ public void org.bouncycastle.asn1.ASN1Object.encodeTo(java.io.OutputStream,java.lang.String)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1Object.toASN1Object()
-- protected synchronized [B org.bouncycastle.asn1.ASN1ObjectIdentifier.getBody()
++ private synchronized [B org.bouncycastle.asn1.ASN1ObjectIdentifier.getBody()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.ASN1ObjectIdentifier.intern()
++ public static org.bouncycastle.asn1.ASN1OutputStream org.bouncycastle.asn1.ASN1OutputStream.create(java.io.OutputStream)
++ public static org.bouncycastle.asn1.ASN1OutputStream org.bouncycastle.asn1.ASN1OutputStream.create(java.io.OutputStream,java.lang.String)
-- protected void org.bouncycastle.asn1.ASN1OutputStream.writeNull()
++ public void org.bouncycastle.asn1.ASN1OutputStream.writeObject(org.bouncycastle.asn1.ASN1Primitive)
++ public void org.bouncycastle.asn1.ASN1Primitive.encodeTo(java.io.OutputStream)
++ public void org.bouncycastle.asn1.ASN1Primitive.encodeTo(java.io.OutputStream,java.lang.String)
++ public final bool org.bouncycastle.asn1.ASN1Primitive.equals(org.bouncycastle.asn1.ASN1Encodable)
++ public final bool org.bouncycastle.asn1.ASN1Primitive.equals(org.bouncycastle.asn1.ASN1Primitive)
++ public final org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1Primitive.toASN1Primitive()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.ASN1Primitive.toASN1Primitive()
++ public java.util.Iterator org.bouncycastle.asn1.ASN1Sequence.iterator()
++ public java.util.Iterator org.bouncycastle.asn1.ASN1Set.iterator()
-- protected void org.bouncycastle.asn1.ASN1Set.sort()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.ASN1TaggedObject.getObjectParser(int,boolean)
-- public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.ASN1TaggedObject.getObjectParser(int,boolean)
-- public bool org.bouncycastle.asn1.ASN1TaggedObject.isEmpty()
++ public BERApplicationSpecific org.bouncycastle.asn1.BERApplicationSpecific(boolean,int,org.bouncycastle.asn1.ASN1Encodable)
++ public BERApplicationSpecific org.bouncycastle.asn1.BERApplicationSpecific(int,org.bouncycastle.asn1.ASN1Encodable)
-- public BERConstructedOctetString org.bouncycastle.asn1.BERConstructedOctetString(byte[])
-- public BERConstructedOctetString org.bouncycastle.asn1.BERConstructedOctetString(java.util.Vector)
-- public BERConstructedOctetString org.bouncycastle.asn1.BERConstructedOctetString(org.bouncycastle.asn1.ASN1Encodable)
-- public BERConstructedOctetString org.bouncycastle.asn1.BERConstructedOctetString(org.bouncycastle.asn1.ASN1Primitive)
-- public static org.bouncycastle.asn1.BEROctetString org.bouncycastle.asn1.BERConstructedOctetString.fromSequence(org.bouncycastle.asn1.ASN1Sequence)
-- public java.util.Enumeration org.bouncycastle.asn1.BERConstructedOctetString.getObjects()
-- public [B org.bouncycastle.asn1.BERConstructedOctetString.getOctets()
-- protected void org.bouncycastle.asn1.BERGenerator.writeBERBody(java.io.InputStream)
++ public BEROctetString org.bouncycastle.asn1.BEROctetString(byte[],int)
++ public BEROctetString org.bouncycastle.asn1.BEROctetString(org.bouncycastle.asn1.ASN1OctetString[],int)
-- public void org.bouncycastle.asn1.BEROctetString.encode(org.bouncycastle.asn1.ASN1OutputStream)
-- public [B org.bouncycastle.asn1.BEROctetString.getOctets()
-- public void org.bouncycastle.asn1.BEROutputStream.writeObject(java.lang.Object)
-- public int org.bouncycastle.asn1.DERApplicationSpecific.getApplicationTag()
-- public [B org.bouncycastle.asn1.DERApplicationSpecific.getContents()
-- public static org.bouncycastle.asn1.DERApplicationSpecific org.bouncycastle.asn1.DERApplicationSpecific.getInstance(java.lang.Object)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERApplicationSpecific.getObject()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERApplicationSpecific.getObject(int)
-- public int org.bouncycastle.asn1.DERApplicationSpecific.hashCode()
-- public bool org.bouncycastle.asn1.DERApplicationSpecific.isConstructed()
-- protected bool org.bouncycastle.asn1.DERBitString.asn1Equals(org.bouncycastle.asn1.ASN1Primitive)
-- public [B org.bouncycastle.asn1.DERBitString.getBytes()
-- protected static [B org.bouncycastle.asn1.DERBitString.getBytes(int)
-- public int org.bouncycastle.asn1.DERBitString.getPadBits()
-- protected static int org.bouncycastle.asn1.DERBitString.getPadBits(int)
-- public java.lang.String org.bouncycastle.asn1.DERBitString.getString()
-- public int org.bouncycastle.asn1.DERBitString.hashCode()
-- public int org.bouncycastle.asn1.DERBitString.intValue()
-- public java.lang.String org.bouncycastle.asn1.DERBitString.toString()
-- public DERBoolean org.bouncycastle.asn1.DERBoolean(boolean)
-- public DEREncodableVector org.bouncycastle.asn1.DEREncodableVector()
-- public DEREnumerated org.bouncycastle.asn1.DEREnumerated(int)
-- public DEREnumerated org.bouncycastle.asn1.DEREnumerated(java.math.BigInteger)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERExternal.getDataValueDescriptor()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.DERExternal.getDirectReference()
-- public int org.bouncycastle.asn1.DERExternal.getEncoding()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERExternal.getExternalContent()
-- public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.asn1.DERExternal.getIndirectReference()
-- public int org.bouncycastle.asn1.DERExternal.hashCode()
++ public DERGraphicString org.bouncycastle.asn1.DERGraphicString(byte[])
++ public static org.bouncycastle.asn1.DERGraphicString org.bouncycastle.asn1.DERGraphicString.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.DERGraphicString org.bouncycastle.asn1.DERGraphicString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public [B org.bouncycastle.asn1.DERGraphicString.getOctets()
++ public java.lang.String org.bouncycastle.asn1.DERGraphicString.getString()
++ public int org.bouncycastle.asn1.DERGraphicString.hashCode()
-- public DERInteger org.bouncycastle.asn1.DERInteger(byte[])
-- public DERInteger org.bouncycastle.asn1.DERInteger(java.math.BigInteger)
-- public DERInteger org.bouncycastle.asn1.DERInteger(long)
-- public DERObjectIdentifier org.bouncycastle.asn1.DERObjectIdentifier(java.lang.String)
-- public void org.bouncycastle.asn1.DEROutputStream.writeObject(org.bouncycastle.asn1.ASN1Encodable)
++ public static org.bouncycastle.asn1.DERSequence org.bouncycastle.asn1.DERSequence.convert(org.bouncycastle.asn1.ASN1Sequence)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERSequenceParser.getLoadedObject()
-- public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.DERSequenceParser.readObject()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERSequenceParser.toASN1Primitive()
++ public static org.bouncycastle.asn1.DERSet org.bouncycastle.asn1.DERSet.convert(org.bouncycastle.asn1.ASN1Set)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERSetParser.getLoadedObject()
-- public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.DERSetParser.readObject()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DERSetParser.toASN1Primitive()
-- public DERT61UTF8String org.bouncycastle.asn1.DERT61UTF8String(byte[])
-- public DERT61UTF8String org.bouncycastle.asn1.DERT61UTF8String(java.lang.String)
-- public static org.bouncycastle.asn1.DERT61UTF8String org.bouncycastle.asn1.DERT61UTF8String.getInstance(java.lang.Object)
-- public static org.bouncycastle.asn1.DERT61UTF8String org.bouncycastle.asn1.DERT61UTF8String.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
-- public [B org.bouncycastle.asn1.DERT61UTF8String.getOctets()
-- public java.lang.String org.bouncycastle.asn1.DERT61UTF8String.getString()
-- public int org.bouncycastle.asn1.DERT61UTF8String.hashCode()
-- public java.lang.String org.bouncycastle.asn1.DERT61UTF8String.toString()
++ public DERVideotexString org.bouncycastle.asn1.DERVideotexString(byte[])
++ public static org.bouncycastle.asn1.DERVideotexString org.bouncycastle.asn1.DERVideotexString.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.DERVideotexString org.bouncycastle.asn1.DERVideotexString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public [B org.bouncycastle.asn1.DERVideotexString.getOctets()
++ public java.lang.String org.bouncycastle.asn1.DERVideotexString.getString()
++ public int org.bouncycastle.asn1.DERVideotexString.hashCode()
++ public DLApplicationSpecific org.bouncycastle.asn1.DLApplicationSpecific(boolean,int,org.bouncycastle.asn1.ASN1Encodable)
++ public DLApplicationSpecific org.bouncycastle.asn1.DLApplicationSpecific(int,byte[])
++ public DLApplicationSpecific org.bouncycastle.asn1.DLApplicationSpecific(int,org.bouncycastle.asn1.ASN1Encodable)
++ public DLApplicationSpecific org.bouncycastle.asn1.DLApplicationSpecific(int,org.bouncycastle.asn1.ASN1EncodableVector)
++ protected DLBitString org.bouncycastle.asn1.DLBitString(byte,int)
++ public DLBitString org.bouncycastle.asn1.DLBitString(byte[])
++ public DLBitString org.bouncycastle.asn1.DLBitString(byte[],int)
++ public DLBitString org.bouncycastle.asn1.DLBitString(int)
++ public DLBitString org.bouncycastle.asn1.DLBitString(org.bouncycastle.asn1.ASN1Encodable)
++ public static org.bouncycastle.asn1.ASN1BitString org.bouncycastle.asn1.DLBitString.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.ASN1BitString org.bouncycastle.asn1.DLBitString.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public DLExternal org.bouncycastle.asn1.DLExternal(org.bouncycastle.asn1.ASN1EncodableVector)
++ public DLExternal org.bouncycastle.asn1.DLExternal(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.ASN1Primitive,int,org.bouncycastle.asn1.ASN1Primitive)
++ public DLExternal org.bouncycastle.asn1.DLExternal(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.ASN1Primitive,org.bouncycastle.asn1.DERTaggedObject)
-- public void org.bouncycastle.asn1.DLOutputStream.writeObject(org.bouncycastle.asn1.ASN1Encodable)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DLSequenceParser.getLoadedObject()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.DLSequenceParser.readObject()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DLSequenceParser.toASN1Primitive()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DLSetParser.getLoadedObject()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.DLSetParser.readObject()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.DLSetParser.toASN1Primitive()
++ public ANSSINamedCurves org.bouncycastle.asn1.anssi.ANSSINamedCurves()
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.anssi.ANSSINamedCurves.getByName(java.lang.String)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.anssi.ANSSINamedCurves.getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static java.lang.String org.bouncycastle.asn1.anssi.ANSSINamedCurves.getName(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static java.util.Enumeration org.bouncycastle.asn1.anssi.ANSSINamedCurves.getNames()
++ public static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.anssi.ANSSINamedCurves.getOID(java.lang.String)
++ public EncryptedObjectStoreData org.bouncycastle.asn1.bc.EncryptedObjectStoreData(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public org.bouncycastle.asn1.ASN1OctetString org.bouncycastle.asn1.bc.EncryptedObjectStoreData.getEncryptedContent()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.bc.EncryptedObjectStoreData.getEncryptionAlgorithm()
++ public static org.bouncycastle.asn1.bc.EncryptedObjectStoreData org.bouncycastle.asn1.bc.EncryptedObjectStoreData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.EncryptedObjectStoreData.toASN1Primitive()
++ public EncryptedPrivateKeyData org.bouncycastle.asn1.bc.EncryptedPrivateKeyData(org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo,org.bouncycastle.asn1.x509.Certificate[])
++ public org.bouncycastle.asn1.x509.Certificate org.bouncycastle.asn1.bc.EncryptedPrivateKeyData.getCertificateChain()
++ public org.bouncycastle.asn1.pkcs.EncryptedPrivateKeyInfo org.bouncycastle.asn1.bc.EncryptedPrivateKeyData.getEncryptedPrivateKeyInfo()
++ public static org.bouncycastle.asn1.bc.EncryptedPrivateKeyData org.bouncycastle.asn1.bc.EncryptedPrivateKeyData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.EncryptedPrivateKeyData.toASN1Primitive()
++ public EncryptedSecretKeyData org.bouncycastle.asn1.bc.EncryptedSecretKeyData(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public [B org.bouncycastle.asn1.bc.EncryptedSecretKeyData.getEncryptedKeyData()
++ public static org.bouncycastle.asn1.bc.EncryptedSecretKeyData org.bouncycastle.asn1.bc.EncryptedSecretKeyData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.bc.EncryptedSecretKeyData.getKeyEncryptionAlgorithm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.EncryptedSecretKeyData.toASN1Primitive()
++ public LinkedCertificate org.bouncycastle.asn1.bc.LinkedCertificate(org.bouncycastle.asn1.x509.DigestInfo,org.bouncycastle.asn1.x509.GeneralName)
++ public LinkedCertificate org.bouncycastle.asn1.bc.LinkedCertificate(org.bouncycastle.asn1.x509.DigestInfo,org.bouncycastle.asn1.x509.GeneralName,org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x509.GeneralNames)
++ public org.bouncycastle.asn1.x509.GeneralNames org.bouncycastle.asn1.bc.LinkedCertificate.getCACerts()
++ public org.bouncycastle.asn1.x500.X500Name org.bouncycastle.asn1.bc.LinkedCertificate.getCertIssuer()
++ public org.bouncycastle.asn1.x509.GeneralName org.bouncycastle.asn1.bc.LinkedCertificate.getCertLocation()
++ public org.bouncycastle.asn1.x509.DigestInfo org.bouncycastle.asn1.bc.LinkedCertificate.getDigest()
++ public static org.bouncycastle.asn1.bc.LinkedCertificate org.bouncycastle.asn1.bc.LinkedCertificate.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.LinkedCertificate.toASN1Primitive()
++ public ObjectData org.bouncycastle.asn1.bc.ObjectData(java.math.BigInteger,java.lang.String,java.util.Date,java.util.Date,byte[],java.lang.String)
++ public java.lang.String org.bouncycastle.asn1.bc.ObjectData.getComment()
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.bc.ObjectData.getCreationDate()
++ public [B org.bouncycastle.asn1.bc.ObjectData.getData()
++ public java.lang.String org.bouncycastle.asn1.bc.ObjectData.getIdentifier()
++ public static org.bouncycastle.asn1.bc.ObjectData org.bouncycastle.asn1.bc.ObjectData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.bc.ObjectData.getLastModifiedDate()
++ public java.math.BigInteger org.bouncycastle.asn1.bc.ObjectData.getType()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.ObjectData.toASN1Primitive()
++ public ObjectDataSequence org.bouncycastle.asn1.bc.ObjectDataSequence(org.bouncycastle.asn1.bc.ObjectData[])
++ public static org.bouncycastle.asn1.bc.ObjectDataSequence org.bouncycastle.asn1.bc.ObjectDataSequence.getInstance(java.lang.Object)
++ public java.util.Iterator org.bouncycastle.asn1.bc.ObjectDataSequence.iterator()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.ObjectDataSequence.toASN1Primitive()
++ public ObjectStore org.bouncycastle.asn1.bc.ObjectStore(org.bouncycastle.asn1.bc.EncryptedObjectStoreData,org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck)
++ public ObjectStore org.bouncycastle.asn1.bc.ObjectStore(org.bouncycastle.asn1.bc.ObjectStoreData,org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck)
++ public static org.bouncycastle.asn1.bc.ObjectStore org.bouncycastle.asn1.bc.ObjectStore.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck org.bouncycastle.asn1.bc.ObjectStore.getIntegrityCheck()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.bc.ObjectStore.getStoreData()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.ObjectStore.toASN1Primitive()
++ public ObjectStoreData org.bouncycastle.asn1.bc.ObjectStoreData(org.bouncycastle.asn1.x509.AlgorithmIdentifier,java.util.Date,java.util.Date,org.bouncycastle.asn1.bc.ObjectDataSequence,java.lang.String)
++ public java.lang.String org.bouncycastle.asn1.bc.ObjectStoreData.getComment()
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.bc.ObjectStoreData.getCreationDate()
++ public static org.bouncycastle.asn1.bc.ObjectStoreData org.bouncycastle.asn1.bc.ObjectStoreData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.bc.ObjectStoreData.getIntegrityAlgorithm()
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.bc.ObjectStoreData.getLastModifiedDate()
++ public org.bouncycastle.asn1.bc.ObjectDataSequence org.bouncycastle.asn1.bc.ObjectStoreData.getObjectDataSequence()
++ public java.math.BigInteger org.bouncycastle.asn1.bc.ObjectStoreData.getVersion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.ObjectStoreData.toASN1Primitive()
++ public ObjectStoreIntegrityCheck org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck(org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck)
++ public ObjectStoreIntegrityCheck org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck(org.bouncycastle.asn1.bc.SignatureCheck)
++ public static org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Object org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck.getIntegrityCheck()
++ public int org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck.getType()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.ObjectStoreIntegrityCheck.toASN1Primitive()
++ public PbkdMacIntegrityCheck org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.pkcs.KeyDerivationFunc,byte[])
++ public static org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck.getInstance(java.lang.Object)
++ public [B org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck.getMac()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck.getMacAlgorithm()
++ public org.bouncycastle.asn1.pkcs.KeyDerivationFunc org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck.getPbkdAlgorithm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.PbkdMacIntegrityCheck.toASN1Primitive()
++ public SecretKeyData org.bouncycastle.asn1.bc.SecretKeyData(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[])
++ public static org.bouncycastle.asn1.bc.SecretKeyData org.bouncycastle.asn1.bc.SecretKeyData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.bc.SecretKeyData.getKeyAlgorithm()
++ public [B org.bouncycastle.asn1.bc.SecretKeyData.getKeyBytes()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.SecretKeyData.toASN1Primitive()
++ public SignatureCheck org.bouncycastle.asn1.bc.SignatureCheck(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public SignatureCheck org.bouncycastle.asn1.bc.SignatureCheck(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.Certificate[],byte[])
++ public org.bouncycastle.asn1.x509.Certificate org.bouncycastle.asn1.bc.SignatureCheck.getCertificates()
++ public static org.bouncycastle.asn1.bc.SignatureCheck org.bouncycastle.asn1.bc.SignatureCheck.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1BitString org.bouncycastle.asn1.bc.SignatureCheck.getSignature()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.bc.SignatureCheck.getSignatureAlgorithm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.bc.SignatureCheck.toASN1Primitive()
++ public BodyPartID org.bouncycastle.asn1.cmc.BodyPartID(long)
++ public J org.bouncycastle.asn1.cmc.BodyPartID.getID()
++ public static org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.BodyPartID.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.BodyPartID.toASN1Primitive()
++ public BodyPartList org.bouncycastle.asn1.cmc.BodyPartList(org.bouncycastle.asn1.cmc.BodyPartID)
++ public BodyPartList org.bouncycastle.asn1.cmc.BodyPartList(org.bouncycastle.asn1.cmc.BodyPartID[])
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.BodyPartList.getBodyPartIDs()
++ public static org.bouncycastle.asn1.cmc.BodyPartList org.bouncycastle.asn1.cmc.BodyPartList.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.BodyPartList org.bouncycastle.asn1.cmc.BodyPartList.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.BodyPartList.toASN1Primitive()
++ public BodyPartPath org.bouncycastle.asn1.cmc.BodyPartPath(org.bouncycastle.asn1.cmc.BodyPartID)
++ public BodyPartPath org.bouncycastle.asn1.cmc.BodyPartPath(org.bouncycastle.asn1.cmc.BodyPartID[])
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.BodyPartPath.getBodyPartIDs()
++ public static org.bouncycastle.asn1.cmc.BodyPartPath org.bouncycastle.asn1.cmc.BodyPartPath.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.BodyPartPath org.bouncycastle.asn1.cmc.BodyPartPath.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.BodyPartPath.toASN1Primitive()
++ public BodyPartReference org.bouncycastle.asn1.cmc.BodyPartReference(org.bouncycastle.asn1.cmc.BodyPartID)
++ public BodyPartReference org.bouncycastle.asn1.cmc.BodyPartReference(org.bouncycastle.asn1.cmc.BodyPartPath)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.BodyPartReference.getBodyPartID()
++ public org.bouncycastle.asn1.cmc.BodyPartPath org.bouncycastle.asn1.cmc.BodyPartReference.getBodyPartPath()
++ public static org.bouncycastle.asn1.cmc.BodyPartReference org.bouncycastle.asn1.cmc.BodyPartReference.getInstance(java.lang.Object)
++ public bool org.bouncycastle.asn1.cmc.BodyPartReference.isBodyPartID()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.BodyPartReference.toASN1Primitive()
++ public static org.bouncycastle.asn1.cmc.CMCFailInfo org.bouncycastle.asn1.cmc.CMCFailInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCFailInfo.toASN1Primitive()
++ public CMCPublicationInfo org.bouncycastle.asn1.cmc.CMCPublicationInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[][],org.bouncycastle.asn1.crmf.PKIPublicationInfo)
++ public [[B org.bouncycastle.asn1.cmc.CMCPublicationInfo.getCertHashes()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.CMCPublicationInfo.getHashAlg()
++ public static org.bouncycastle.asn1.cmc.CMCPublicationInfo org.bouncycastle.asn1.cmc.CMCPublicationInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.crmf.PKIPublicationInfo org.bouncycastle.asn1.cmc.CMCPublicationInfo.getPubInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCPublicationInfo.toASN1Primitive()
++ public static org.bouncycastle.asn1.cmc.CMCStatus org.bouncycastle.asn1.cmc.CMCStatus.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCStatus.toASN1Primitive()
++ public bool org.bouncycastle.asn1.cmc.CMCStatusInfo$OtherInfo.isFailInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCStatusInfo$OtherInfo.toASN1Primitive()
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.CMCStatusInfo.getBodyList()
++ public org.bouncycastle.asn1.cmc.CMCStatus org.bouncycastle.asn1.cmc.CMCStatusInfo.getCMCStatus()
++ public static org.bouncycastle.asn1.cmc.CMCStatusInfo org.bouncycastle.asn1.cmc.CMCStatusInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfo$OtherInfo org.bouncycastle.asn1.cmc.CMCStatusInfo.getOtherInfo()
++ public org.bouncycastle.asn1.DERUTF8String org.bouncycastle.asn1.cmc.CMCStatusInfo.getStatusString()
++ public bool org.bouncycastle.asn1.cmc.CMCStatusInfo.hasOtherInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCStatusInfo.toASN1Primitive()
++ public CMCStatusInfoBuilder org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder(org.bouncycastle.asn1.cmc.CMCStatus,org.bouncycastle.asn1.cmc.BodyPartID)
++ public CMCStatusInfoBuilder org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder(org.bouncycastle.asn1.cmc.CMCStatus,org.bouncycastle.asn1.cmc.BodyPartID[])
++ public org.bouncycastle.asn1.cmc.CMCStatusInfo org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder.build()
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder.setOtherInfo(org.bouncycastle.asn1.cmc.CMCFailInfo)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder.setOtherInfo(org.bouncycastle.asn1.cmc.PendInfo)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder org.bouncycastle.asn1.cmc.CMCStatusInfoBuilder.setStatusString(java.lang.String)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.CMCStatusInfoV2.getBodyList()
++ public static org.bouncycastle.asn1.cmc.CMCStatusInfoV2 org.bouncycastle.asn1.cmc.CMCStatusInfoV2.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.OtherStatusInfo org.bouncycastle.asn1.cmc.CMCStatusInfoV2.getOtherStatusInfo()
++ public org.bouncycastle.asn1.DERUTF8String org.bouncycastle.asn1.cmc.CMCStatusInfoV2.getStatusString()
++ public org.bouncycastle.asn1.cmc.CMCStatus org.bouncycastle.asn1.cmc.CMCStatusInfoV2.getcMCStatus()
++ public bool org.bouncycastle.asn1.cmc.CMCStatusInfoV2.hasOtherInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCStatusInfoV2.toASN1Primitive()
++ public CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder(org.bouncycastle.asn1.cmc.CMCStatus,org.bouncycastle.asn1.cmc.BodyPartID)
++ public CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder(org.bouncycastle.asn1.cmc.CMCStatus,org.bouncycastle.asn1.cmc.BodyPartID[])
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoV2 org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder.build()
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder.setOtherInfo(org.bouncycastle.asn1.cmc.CMCFailInfo)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder.setOtherInfo(org.bouncycastle.asn1.cmc.ExtendedFailInfo)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder.setOtherInfo(org.bouncycastle.asn1.cmc.PendInfo)
++ public org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder org.bouncycastle.asn1.cmc.CMCStatusInfoV2Builder.setStatusString(java.lang.String)
++ public CMCUnsignedData org.bouncycastle.asn1.cmc.CMCUnsignedData(org.bouncycastle.asn1.cmc.BodyPartPath,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public org.bouncycastle.asn1.cmc.BodyPartPath org.bouncycastle.asn1.cmc.CMCUnsignedData.getBodyPartPath()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.cmc.CMCUnsignedData.getContent()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cmc.CMCUnsignedData.getIdentifier()
++ public static org.bouncycastle.asn1.cmc.CMCUnsignedData org.bouncycastle.asn1.cmc.CMCUnsignedData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CMCUnsignedData.toASN1Primitive()
++ public CertificationRequest org.bouncycastle.asn1.cmc.CertificationRequest(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.DERBitString,org.bouncycastle.asn1.ASN1Set,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.DERBitString)
++ public org.bouncycastle.asn1.ASN1Set org.bouncycastle.asn1.cmc.CertificationRequest.getAttributes()
++ public static org.bouncycastle.asn1.cmc.CertificationRequest org.bouncycastle.asn1.cmc.CertificationRequest.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.DERBitString org.bouncycastle.asn1.cmc.CertificationRequest.getSignature()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.CertificationRequest.getSignatureAlgorithm()
++ public org.bouncycastle.asn1.x500.X500Name org.bouncycastle.asn1.cmc.CertificationRequest.getSubject()
++ public org.bouncycastle.asn1.DERBitString org.bouncycastle.asn1.cmc.CertificationRequest.getSubjectPublicKey()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.CertificationRequest.getSubjectPublicKeyAlgorithm()
++ public java.math.BigInteger org.bouncycastle.asn1.cmc.CertificationRequest.getVersion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CertificationRequest.parsePublicKey()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.CertificationRequest.toASN1Primitive()
++ public ControlsProcessed org.bouncycastle.asn1.cmc.ControlsProcessed(org.bouncycastle.asn1.cmc.BodyPartReference)
++ public ControlsProcessed org.bouncycastle.asn1.cmc.ControlsProcessed(org.bouncycastle.asn1.cmc.BodyPartReference[])
++ public org.bouncycastle.asn1.cmc.BodyPartReference org.bouncycastle.asn1.cmc.ControlsProcessed.getBodyList()
++ public static org.bouncycastle.asn1.cmc.ControlsProcessed org.bouncycastle.asn1.cmc.ControlsProcessed.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.ControlsProcessed.toASN1Primitive()
++ public DecryptedPOP org.bouncycastle.asn1.cmc.DecryptedPOP(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.DecryptedPOP.getBodyPartID()
++ public static org.bouncycastle.asn1.cmc.DecryptedPOP org.bouncycastle.asn1.cmc.DecryptedPOP.getInstance(java.lang.Object)
++ public [B org.bouncycastle.asn1.cmc.DecryptedPOP.getThePOP()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.DecryptedPOP.getThePOPAlgID()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.DecryptedPOP.toASN1Primitive()
++ public EncryptedPOP org.bouncycastle.asn1.cmc.EncryptedPOP(org.bouncycastle.asn1.cmc.TaggedRequest,org.bouncycastle.asn1.cms.ContentInfo,org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public org.bouncycastle.asn1.cms.ContentInfo org.bouncycastle.asn1.cmc.EncryptedPOP.getCms()
++ public static org.bouncycastle.asn1.cmc.EncryptedPOP org.bouncycastle.asn1.cmc.EncryptedPOP.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.TaggedRequest org.bouncycastle.asn1.cmc.EncryptedPOP.getRequest()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.EncryptedPOP.getThePOPAlgID()
++ public [B org.bouncycastle.asn1.cmc.EncryptedPOP.getWitness()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.EncryptedPOP.getWitnessAlgID()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.EncryptedPOP.toASN1Primitive()
++ public ExtendedFailInfo org.bouncycastle.asn1.cmc.ExtendedFailInfo(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cmc.ExtendedFailInfo.getFailInfoOID()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.cmc.ExtendedFailInfo.getFailInfoValue()
++ public static org.bouncycastle.asn1.cmc.ExtendedFailInfo org.bouncycastle.asn1.cmc.ExtendedFailInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.ExtendedFailInfo.toASN1Primitive()
++ public ExtensionReq org.bouncycastle.asn1.cmc.ExtensionReq(org.bouncycastle.asn1.x509.Extension)
++ public ExtensionReq org.bouncycastle.asn1.cmc.ExtensionReq(org.bouncycastle.asn1.x509.Extension[])
++ public org.bouncycastle.asn1.x509.Extension org.bouncycastle.asn1.cmc.ExtensionReq.getExtensions()
++ public static org.bouncycastle.asn1.cmc.ExtensionReq org.bouncycastle.asn1.cmc.ExtensionReq.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.ExtensionReq org.bouncycastle.asn1.cmc.ExtensionReq.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.ExtensionReq.toASN1Primitive()
++ public GetCRL org.bouncycastle.asn1.cmc.GetCRL(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.x509.GeneralName,org.bouncycastle.asn1.ASN1GeneralizedTime,org.bouncycastle.asn1.x509.ReasonFlags)
++ public static org.bouncycastle.asn1.cmc.GetCRL org.bouncycastle.asn1.cmc.GetCRL.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x500.X500Name org.bouncycastle.asn1.cmc.GetCRL.getIssuerName()
++ public org.bouncycastle.asn1.x509.ReasonFlags org.bouncycastle.asn1.cmc.GetCRL.getReasons()
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.cmc.GetCRL.getTime()
++ public org.bouncycastle.asn1.x509.GeneralName org.bouncycastle.asn1.cmc.GetCRL.getcRLName()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.GetCRL.toASN1Primitive()
++ public GetCert org.bouncycastle.asn1.cmc.GetCert(org.bouncycastle.asn1.x509.GeneralName,java.math.BigInteger)
++ public static org.bouncycastle.asn1.cmc.GetCert org.bouncycastle.asn1.cmc.GetCert.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.GeneralName org.bouncycastle.asn1.cmc.GetCert.getIssuerName()
++ public java.math.BigInteger org.bouncycastle.asn1.cmc.GetCert.getSerialNumber()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.GetCert.toASN1Primitive()
++ public IdentityProofV2 org.bouncycastle.asn1.cmc.IdentityProofV2(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public static org.bouncycastle.asn1.cmc.IdentityProofV2 org.bouncycastle.asn1.cmc.IdentityProofV2.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.IdentityProofV2.getMacAlgId()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.IdentityProofV2.getProofAlgID()
++ public [B org.bouncycastle.asn1.cmc.IdentityProofV2.getWitness()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.IdentityProofV2.toASN1Primitive()
++ public LraPopWitness org.bouncycastle.asn1.cmc.LraPopWitness(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.ASN1Sequence)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.LraPopWitness.getBodyIds()
++ public static org.bouncycastle.asn1.cmc.LraPopWitness org.bouncycastle.asn1.cmc.LraPopWitness.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.LraPopWitness.getPkiDataBodyid()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.LraPopWitness.toASN1Primitive()
++ public ModCertTemplate org.bouncycastle.asn1.cmc.ModCertTemplate(org.bouncycastle.asn1.cmc.BodyPartPath,org.bouncycastle.asn1.cmc.BodyPartList,boolean,org.bouncycastle.asn1.crmf.CertTemplate)
++ public org.bouncycastle.asn1.cmc.BodyPartList org.bouncycastle.asn1.cmc.ModCertTemplate.getCertReferences()
++ public org.bouncycastle.asn1.crmf.CertTemplate org.bouncycastle.asn1.cmc.ModCertTemplate.getCertTemplate()
++ public static org.bouncycastle.asn1.cmc.ModCertTemplate org.bouncycastle.asn1.cmc.ModCertTemplate.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.BodyPartPath org.bouncycastle.asn1.cmc.ModCertTemplate.getPkiDataReference()
++ public bool org.bouncycastle.asn1.cmc.ModCertTemplate.isReplacingFields()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.ModCertTemplate.toASN1Primitive()
++ public OtherMsg org.bouncycastle.asn1.cmc.OtherMsg(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.OtherMsg.getBodyPartID()
++ public static org.bouncycastle.asn1.cmc.OtherMsg org.bouncycastle.asn1.cmc.OtherMsg.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.OtherMsg org.bouncycastle.asn1.cmc.OtherMsg.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cmc.OtherMsg.getOtherMsgType()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.cmc.OtherMsg.getOtherMsgValue()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.OtherMsg.toASN1Primitive()
++ public static org.bouncycastle.asn1.cmc.OtherStatusInfo org.bouncycastle.asn1.cmc.OtherStatusInfo.getInstance(java.lang.Object)
++ public bool org.bouncycastle.asn1.cmc.OtherStatusInfo.isExtendedFailInfo()
++ public bool org.bouncycastle.asn1.cmc.OtherStatusInfo.isFailInfo()
++ public bool org.bouncycastle.asn1.cmc.OtherStatusInfo.isPendingInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.OtherStatusInfo.toASN1Primitive()
++ public PKIData org.bouncycastle.asn1.cmc.PKIData(org.bouncycastle.asn1.cmc.TaggedAttribute[],org.bouncycastle.asn1.cmc.TaggedRequest[],org.bouncycastle.asn1.cmc.TaggedContentInfo[],org.bouncycastle.asn1.cmc.OtherMsg[])
++ public org.bouncycastle.asn1.cmc.TaggedContentInfo org.bouncycastle.asn1.cmc.PKIData.getCmsSequence()
++ public org.bouncycastle.asn1.cmc.TaggedAttribute org.bouncycastle.asn1.cmc.PKIData.getControlSequence()
++ public static org.bouncycastle.asn1.cmc.PKIData org.bouncycastle.asn1.cmc.PKIData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cmc.OtherMsg org.bouncycastle.asn1.cmc.PKIData.getOtherMsgSequence()
++ public org.bouncycastle.asn1.cmc.TaggedRequest org.bouncycastle.asn1.cmc.PKIData.getReqSequence()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.PKIData.toASN1Primitive()
++ public org.bouncycastle.asn1.ASN1Sequence org.bouncycastle.asn1.cmc.PKIResponse.getCmsSequence()
++ public org.bouncycastle.asn1.ASN1Sequence org.bouncycastle.asn1.cmc.PKIResponse.getControlSequence()
++ public static org.bouncycastle.asn1.cmc.PKIResponse org.bouncycastle.asn1.cmc.PKIResponse.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.PKIResponse org.bouncycastle.asn1.cmc.PKIResponse.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Sequence org.bouncycastle.asn1.cmc.PKIResponse.getOtherMsgSequence()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.PKIResponse.toASN1Primitive()
++ public PendInfo org.bouncycastle.asn1.cmc.PendInfo(byte[],org.bouncycastle.asn1.ASN1GeneralizedTime)
++ public static org.bouncycastle.asn1.cmc.PendInfo org.bouncycastle.asn1.cmc.PendInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.cmc.PendInfo.getPendTime()
++ public [B org.bouncycastle.asn1.cmc.PendInfo.getPendToken()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.PendInfo.toASN1Primitive()
++ public PopLinkWitnessV2 org.bouncycastle.asn1.cmc.PopLinkWitnessV2(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public static org.bouncycastle.asn1.cmc.PopLinkWitnessV2 org.bouncycastle.asn1.cmc.PopLinkWitnessV2.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.PopLinkWitnessV2.getKeyGenAlgorithm()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.PopLinkWitnessV2.getMacAlgorithm()
++ public [B org.bouncycastle.asn1.cmc.PopLinkWitnessV2.getWitness()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.PopLinkWitnessV2.toASN1Primitive()
++ public PublishTrustAnchors org.bouncycastle.asn1.cmc.PublishTrustAnchors(java.math.BigInteger,org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[][])
++ public [[B org.bouncycastle.asn1.cmc.PublishTrustAnchors.getAnchorHashes()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cmc.PublishTrustAnchors.getHashAlgorithm()
++ public static org.bouncycastle.asn1.cmc.PublishTrustAnchors org.bouncycastle.asn1.cmc.PublishTrustAnchors.getInstance(java.lang.Object)
++ public java.math.BigInteger org.bouncycastle.asn1.cmc.PublishTrustAnchors.getSeqNumber()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.PublishTrustAnchors.toASN1Primitive()
++ public RevokeRequest org.bouncycastle.asn1.cmc.RevokeRequest(org.bouncycastle.asn1.x500.X500Name,org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.CRLReason,org.bouncycastle.asn1.ASN1GeneralizedTime,org.bouncycastle.asn1.ASN1OctetString,org.bouncycastle.asn1.DERUTF8String)
++ public org.bouncycastle.asn1.DERUTF8String org.bouncycastle.asn1.cmc.RevokeRequest.getComment()
++ public static org.bouncycastle.asn1.cmc.RevokeRequest org.bouncycastle.asn1.cmc.RevokeRequest.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1GeneralizedTime org.bouncycastle.asn1.cmc.RevokeRequest.getInvalidityDate()
++ public org.bouncycastle.asn1.x500.X500Name org.bouncycastle.asn1.cmc.RevokeRequest.getName()
++ public [B org.bouncycastle.asn1.cmc.RevokeRequest.getPassPhrase()
++ public org.bouncycastle.asn1.ASN1OctetString org.bouncycastle.asn1.cmc.RevokeRequest.getPassphrase()
++ public org.bouncycastle.asn1.x509.CRLReason org.bouncycastle.asn1.cmc.RevokeRequest.getReason()
++ public java.math.BigInteger org.bouncycastle.asn1.cmc.RevokeRequest.getSerialNumber()
++ public void org.bouncycastle.asn1.cmc.RevokeRequest.setComment(org.bouncycastle.asn1.DERUTF8String)
++ public void org.bouncycastle.asn1.cmc.RevokeRequest.setInvalidityDate(org.bouncycastle.asn1.ASN1GeneralizedTime)
++ public void org.bouncycastle.asn1.cmc.RevokeRequest.setPassphrase(org.bouncycastle.asn1.ASN1OctetString)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.RevokeRequest.toASN1Primitive()
++ public TaggedAttribute org.bouncycastle.asn1.cmc.TaggedAttribute(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Set)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cmc.TaggedAttribute.getAttrType()
++ public org.bouncycastle.asn1.ASN1Set org.bouncycastle.asn1.cmc.TaggedAttribute.getAttrValues()
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.TaggedAttribute.getBodyPartID()
++ public static org.bouncycastle.asn1.cmc.TaggedAttribute org.bouncycastle.asn1.cmc.TaggedAttribute.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.TaggedAttribute.toASN1Primitive()
++ public TaggedCertificationRequest org.bouncycastle.asn1.cmc.TaggedCertificationRequest(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.cmc.CertificationRequest)
++ public static org.bouncycastle.asn1.cmc.TaggedCertificationRequest org.bouncycastle.asn1.cmc.TaggedCertificationRequest.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.TaggedCertificationRequest org.bouncycastle.asn1.cmc.TaggedCertificationRequest.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.TaggedCertificationRequest.toASN1Primitive()
++ public TaggedContentInfo org.bouncycastle.asn1.cmc.TaggedContentInfo(org.bouncycastle.asn1.cmc.BodyPartID,org.bouncycastle.asn1.cms.ContentInfo)
++ public org.bouncycastle.asn1.cmc.BodyPartID org.bouncycastle.asn1.cmc.TaggedContentInfo.getBodyPartID()
++ public org.bouncycastle.asn1.cms.ContentInfo org.bouncycastle.asn1.cmc.TaggedContentInfo.getContentInfo()
++ public static org.bouncycastle.asn1.cmc.TaggedContentInfo org.bouncycastle.asn1.cmc.TaggedContentInfo.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cmc.TaggedContentInfo org.bouncycastle.asn1.cmc.TaggedContentInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.TaggedContentInfo.toASN1Primitive()
++ public TaggedRequest org.bouncycastle.asn1.cmc.TaggedRequest(org.bouncycastle.asn1.cmc.TaggedCertificationRequest)
++ public TaggedRequest org.bouncycastle.asn1.cmc.TaggedRequest(org.bouncycastle.asn1.crmf.CertReqMsg)
++ public static org.bouncycastle.asn1.cmc.TaggedRequest org.bouncycastle.asn1.cmc.TaggedRequest.getInstance(java.lang.Object)
++ public int org.bouncycastle.asn1.cmc.TaggedRequest.getTagNo()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.cmc.TaggedRequest.getValue()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cmc.TaggedRequest.toASN1Primitive()
++ public CMPCertificate org.bouncycastle.asn1.cmp.CMPCertificate(int,org.bouncycastle.asn1.ASN1Object)
++ public org.bouncycastle.asn1.ASN1Object org.bouncycastle.asn1.cmp.CMPCertificate.getOtherCert()
++ public int org.bouncycastle.asn1.cmp.CMPCertificate.getOtherCertTag()
++ public CertOrEncCert org.bouncycastle.asn1.cmp.CertOrEncCert(org.bouncycastle.asn1.crmf.EncryptedKey)
++ public org.bouncycastle.asn1.crmf.EncryptedKey org.bouncycastle.asn1.cmp.CertOrEncCert.getEncryptedCert()
-- public org.bouncycastle.asn1.crmf.EncryptedValue org.bouncycastle.asn1.cmp.CertOrEncCert.getEncryptedCert()
++ public CertifiedKeyPair org.bouncycastle.asn1.cmp.CertifiedKeyPair(org.bouncycastle.asn1.cmp.CertOrEncCert,org.bouncycastle.asn1.crmf.EncryptedKey,org.bouncycastle.asn1.crmf.PKIPublicationInfo)
++ public org.bouncycastle.asn1.crmf.EncryptedKey org.bouncycastle.asn1.cmp.CertifiedKeyPair.getPrivateKey()
-- public org.bouncycastle.asn1.crmf.EncryptedValue org.bouncycastle.asn1.cmp.CertifiedKeyPair.getPrivateKey()
++ public org.bouncycastle.asn1.cmp.PKIHeaderBuilder org.bouncycastle.asn1.cmp.PKIHeaderBuilder.setRecipKID(org.bouncycastle.asn1.ASN1OctetString)
-- public org.bouncycastle.asn1.cmp.PKIHeaderBuilder org.bouncycastle.asn1.cmp.PKIHeaderBuilder.setRecipKID(org.bouncycastle.asn1.DEROctetString)
++ public PollReqContent org.bouncycastle.asn1.cmp.PollReqContent(java.math.BigInteger)
++ public PollReqContent org.bouncycastle.asn1.cmp.PollReqContent(java.math.BigInteger[])
++ public PollReqContent org.bouncycastle.asn1.cmp.PollReqContent(org.bouncycastle.asn1.ASN1Integer[])
++ public java.math.BigInteger org.bouncycastle.asn1.cmp.PollReqContent.getCertReqIdValues()
++ public static org.bouncycastle.asn1.cms.Attributes org.bouncycastle.asn1.cms.Attributes.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
-- public org.bouncycastle.asn1.cms.ContentInfoParser org.bouncycastle.asn1.cms.AuthenticatedDataParser.getEnapsulatedContentInfo()
++ public CMSAlgorithmProtection org.bouncycastle.asn1.cms.CMSAlgorithmProtection(org.bouncycastle.asn1.x509.AlgorithmIdentifier,int,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.CMSAlgorithmProtection.getDigestAlgorithm()
++ public static org.bouncycastle.asn1.cms.CMSAlgorithmProtection org.bouncycastle.asn1.cms.CMSAlgorithmProtection.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.CMSAlgorithmProtection.getMacAlgorithm()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.CMSAlgorithmProtection.getSignatureAlgorithm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cms.CMSAlgorithmProtection.toASN1Primitive()
++ public Evidence org.bouncycastle.asn1.cms.Evidence(org.bouncycastle.asn1.tsp.EvidenceRecord)
++ public org.bouncycastle.asn1.tsp.EvidenceRecord org.bouncycastle.asn1.cms.Evidence.getErsEvidence()
++ public static org.bouncycastle.asn1.cms.Evidence org.bouncycastle.asn1.cms.Evidence.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public GenericHybridParameters org.bouncycastle.asn1.cms.GenericHybridParameters(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.GenericHybridParameters.getDem()
++ public static org.bouncycastle.asn1.cms.GenericHybridParameters org.bouncycastle.asn1.cms.GenericHybridParameters.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.GenericHybridParameters.getKem()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cms.GenericHybridParameters.toASN1Primitive()
++ public RsaKemParameters org.bouncycastle.asn1.cms.RsaKemParameters(org.bouncycastle.asn1.x509.AlgorithmIdentifier,int)
++ public static org.bouncycastle.asn1.cms.RsaKemParameters org.bouncycastle.asn1.cms.RsaKemParameters.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.cms.RsaKemParameters.getKeyDerivationFunction()
++ public java.math.BigInteger org.bouncycastle.asn1.cms.RsaKemParameters.getKeyLength()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cms.RsaKemParameters.toASN1Primitive()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cms.TimeStampedDataParser.toASN1Primitive()
++ public ECCCMSSharedInfo org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[])
++ public ECCCMSSharedInfo org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[])
++ public static org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cms.ecc.ECCCMSSharedInfo.toASN1Primitive()
++ public static org.bouncycastle.asn1.crmf.CertReqMsg org.bouncycastle.asn1.crmf.CertReqMsg.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public DhSigStatic org.bouncycastle.asn1.crmf.DhSigStatic(byte[])
++ public DhSigStatic org.bouncycastle.asn1.crmf.DhSigStatic(org.bouncycastle.asn1.cms.IssuerAndSerialNumber,byte[])
++ public [B org.bouncycastle.asn1.crmf.DhSigStatic.getHashValue()
++ public static org.bouncycastle.asn1.crmf.DhSigStatic org.bouncycastle.asn1.crmf.DhSigStatic.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cms.IssuerAndSerialNumber org.bouncycastle.asn1.crmf.DhSigStatic.getIssuerAndSerial()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.crmf.DhSigStatic.toASN1Primitive()
++ public PKIPublicationInfo org.bouncycastle.asn1.crmf.PKIPublicationInfo(java.math.BigInteger)
++ public PKIPublicationInfo org.bouncycastle.asn1.crmf.PKIPublicationInfo(org.bouncycastle.asn1.ASN1Integer)
++ public PKIPublicationInfo org.bouncycastle.asn1.crmf.PKIPublicationInfo(org.bouncycastle.asn1.crmf.SinglePubInfo)
++ public PKIPublicationInfo org.bouncycastle.asn1.crmf.PKIPublicationInfo(org.bouncycastle.asn1.crmf.SinglePubInfo[])
++ public POPOPrivKey org.bouncycastle.asn1.crmf.POPOPrivKey(org.bouncycastle.asn1.crmf.PKMACValue)
++ public SinglePubInfo org.bouncycastle.asn1.crmf.SinglePubInfo(org.bouncycastle.asn1.ASN1Integer,org.bouncycastle.asn1.x509.GeneralName)
++ public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.asn1.crmf.SinglePubInfo.getPubMethod()
++ public CryptlibObjectIdentifiers org.bouncycastle.asn1.cryptlib.CryptlibObjectIdentifiers()
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves.getByNameX9(java.lang.String)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.cryptopro.ECGOST3410NamedCurves.getByOIDX9(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public GOST28147Parameters org.bouncycastle.asn1.cryptopro.GOST28147Parameters(byte[],org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public Gost2814789EncryptedKey org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey(byte[],byte[])
++ public Gost2814789EncryptedKey org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey(byte[],byte[],byte[])
++ public [B org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey.getEncryptedKey()
++ public static org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey.getInstance(java.lang.Object)
++ public [B org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey.getMacKey()
++ public [B org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey.getMaskKey()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey.toASN1Primitive()
++ public Gost2814789KeyWrapParameters org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public Gost2814789KeyWrapParameters org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[])
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters.getEncryptionParamSet()
++ public static org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters.getInstance(java.lang.Object)
++ public [B org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters.getUkm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cryptopro.Gost2814789KeyWrapParameters.toASN1Primitive()
++ public GostR3410KeyTransport org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport(org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey,org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters)
++ public static org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.cryptopro.Gost2814789EncryptedKey org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport.getSessionEncryptedKey()
++ public org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport.getTransportParameters()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cryptopro.GostR3410KeyTransport.toASN1Primitive()
++ public GostR3410TransportParameters org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x509.SubjectPublicKeyInfo,byte[])
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.getEncryptionParamSet()
++ public org.bouncycastle.asn1.x509.SubjectPublicKeyInfo org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.getEphemeralPublicKey()
++ public static org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public [B org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.getUkm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.cryptopro.GostR3410TransportParameters.toASN1Primitive()
++ public CertificateBody org.bouncycastle.asn1.eac.CertificateBody(org.bouncycastle.asn1.ASN1ApplicationSpecific,org.bouncycastle.asn1.eac.CertificationAuthorityReference,org.bouncycastle.asn1.eac.PublicKeyDataObject,org.bouncycastle.asn1.eac.CertificateHolderReference,org.bouncycastle.asn1.eac.CertificateHolderAuthorization,org.bouncycastle.asn1.eac.PackedDate,org.bouncycastle.asn1.eac.PackedDate)
-- public CertificateBody org.bouncycastle.asn1.eac.CertificateBody(org.bouncycastle.asn1.DERApplicationSpecific,org.bouncycastle.asn1.eac.CertificationAuthorityReference,org.bouncycastle.asn1.eac.PublicKeyDataObject,org.bouncycastle.asn1.eac.CertificateHolderReference,org.bouncycastle.asn1.eac.CertificateHolderAuthorization,org.bouncycastle.asn1.eac.PackedDate,org.bouncycastle.asn1.eac.PackedDate)
++ public org.bouncycastle.asn1.ASN1ApplicationSpecific org.bouncycastle.asn1.eac.CertificateBody.getCertificateProfileIdentifier()
-- public org.bouncycastle.asn1.DERApplicationSpecific org.bouncycastle.asn1.eac.CertificateBody.getCertificateProfileIdentifier()
++ public CertificateHolderAuthorization org.bouncycastle.asn1.eac.CertificateHolderAuthorization(org.bouncycastle.asn1.ASN1ApplicationSpecific)
-- public CertificateHolderAuthorization org.bouncycastle.asn1.eac.CertificateHolderAuthorization(org.bouncycastle.asn1.DERApplicationSpecific)
-- public static int org.bouncycastle.asn1.eac.CertificateHolderAuthorization.GetFlag(java.lang.String)
-- public static java.lang.String org.bouncycastle.asn1.eac.CertificateHolderAuthorization.GetRoleDescription(int)
++ public static int org.bouncycastle.asn1.eac.CertificateHolderAuthorization.getFlag(java.lang.String)
++ public static java.lang.String org.bouncycastle.asn1.eac.CertificateHolderAuthorization.getRoleDescription(int)
++ public static int org.bouncycastle.asn1.eac.EACTags.encodeTag(org.bouncycastle.asn1.ASN1ApplicationSpecific)
-- public static int org.bouncycastle.asn1.eac.EACTags.encodeTag(org.bouncycastle.asn1.DERApplicationSpecific)
++ public SignerLocation org.bouncycastle.asn1.esf.SignerLocation(org.bouncycastle.asn1.x500.DirectoryString,org.bouncycastle.asn1.x500.DirectoryString,org.bouncycastle.asn1.x500.DirectoryString[])
++ public org.bouncycastle.asn1.x500.DirectoryString org.bouncycastle.asn1.esf.SignerLocation.getCountry()
++ public org.bouncycastle.asn1.x500.DirectoryString org.bouncycastle.asn1.esf.SignerLocation.getLocality()
++ public org.bouncycastle.asn1.x500.DirectoryString org.bouncycastle.asn1.esf.SignerLocation.getPostal()
++ public AttrOrOID org.bouncycastle.asn1.est.AttrOrOID(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public AttrOrOID org.bouncycastle.asn1.est.AttrOrOID(org.bouncycastle.asn1.pkcs.Attribute)
++ public org.bouncycastle.asn1.pkcs.Attribute org.bouncycastle.asn1.est.AttrOrOID.getAttribute()
++ public static org.bouncycastle.asn1.est.AttrOrOID org.bouncycastle.asn1.est.AttrOrOID.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.est.AttrOrOID.getOid()
++ public bool org.bouncycastle.asn1.est.AttrOrOID.isOid()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.est.AttrOrOID.toASN1Primitive()
++ public CsrAttrs org.bouncycastle.asn1.est.CsrAttrs(org.bouncycastle.asn1.est.AttrOrOID)
++ public CsrAttrs org.bouncycastle.asn1.est.CsrAttrs(org.bouncycastle.asn1.est.AttrOrOID[])
++ public org.bouncycastle.asn1.est.AttrOrOID org.bouncycastle.asn1.est.CsrAttrs.getAttrOrOIDs()
++ public static org.bouncycastle.asn1.est.CsrAttrs org.bouncycastle.asn1.est.CsrAttrs.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.est.CsrAttrs org.bouncycastle.asn1.est.CsrAttrs.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public int org.bouncycastle.asn1.est.CsrAttrs.size()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.est.CsrAttrs.toASN1Primitive()
++ public GMNamedCurves org.bouncycastle.asn1.gm.GMNamedCurves()
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.gm.GMNamedCurves.getByName(java.lang.String)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.asn1.gm.GMNamedCurves.getByOID(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static java.lang.String org.bouncycastle.asn1.gm.GMNamedCurves.getName(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static java.util.Enumeration org.bouncycastle.asn1.gm.GMNamedCurves.getNames()
++ public static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.gm.GMNamedCurves.getOID(java.lang.String)
++ public ScryptParams org.bouncycastle.asn1.misc.ScryptParams(byte[],int,int,int)
++ public ScryptParams org.bouncycastle.asn1.misc.ScryptParams(byte[],int,int,int,int)
++ public ScryptParams org.bouncycastle.asn1.misc.ScryptParams(byte[],java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.asn1.misc.ScryptParams.getBlockSize()
++ public java.math.BigInteger org.bouncycastle.asn1.misc.ScryptParams.getCostParameter()
++ public static org.bouncycastle.asn1.misc.ScryptParams org.bouncycastle.asn1.misc.ScryptParams.getInstance(java.lang.Object)
++ public java.math.BigInteger org.bouncycastle.asn1.misc.ScryptParams.getKeyLength()
++ public java.math.BigInteger org.bouncycastle.asn1.misc.ScryptParams.getParallelizationParameter()
++ public [B org.bouncycastle.asn1.misc.ScryptParams.getSalt()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.misc.ScryptParams.toASN1Primitive()
++ public static org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.mozilla.PublicKeyAndChallenge org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge.getPublicKeyAndChallenge()
++ public org.bouncycastle.asn1.DERBitString org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge.getSignature()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge.getSignatureAlgorithm()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.mozilla.SignedPublicKeyAndChallenge.toASN1Primitive()
++ public KMACwithSHAKE128_params org.bouncycastle.asn1.nist.KMACwithSHAKE128_params(int)
++ public KMACwithSHAKE128_params org.bouncycastle.asn1.nist.KMACwithSHAKE128_params(int,byte[])
++ public [B org.bouncycastle.asn1.nist.KMACwithSHAKE128_params.getCustomizationString()
++ public static org.bouncycastle.asn1.nist.KMACwithSHAKE128_params org.bouncycastle.asn1.nist.KMACwithSHAKE128_params.getInstance(java.lang.Object)
++ public int org.bouncycastle.asn1.nist.KMACwithSHAKE128_params.getOutputLength()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.nist.KMACwithSHAKE128_params.toASN1Primitive()
++ public KMACwithSHAKE256_params org.bouncycastle.asn1.nist.KMACwithSHAKE256_params(int)
++ public KMACwithSHAKE256_params org.bouncycastle.asn1.nist.KMACwithSHAKE256_params(int,byte[])
++ public [B org.bouncycastle.asn1.nist.KMACwithSHAKE256_params.getCustomizationString()
++ public static org.bouncycastle.asn1.nist.KMACwithSHAKE256_params org.bouncycastle.asn1.nist.KMACwithSHAKE256_params.getInstance(java.lang.Object)
++ public int org.bouncycastle.asn1.nist.KMACwithSHAKE256_params.getOutputLength()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.nist.KMACwithSHAKE256_params.toASN1Primitive()
++ public int org.bouncycastle.asn1.ocsp.OCSPResponseStatus.getIntValue()
-- public ServiceLocator org.bouncycastle.asn1.ocsp.ServiceLocator()
++ public static org.bouncycastle.asn1.ocsp.ServiceLocator org.bouncycastle.asn1.ocsp.ServiceLocator.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x500.X500Name org.bouncycastle.asn1.ocsp.ServiceLocator.getIssuer()
++ public org.bouncycastle.asn1.x509.AuthorityInformationAccess org.bouncycastle.asn1.ocsp.ServiceLocator.getLocator()
-- public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.pkcs.CRLBag.getCRLValue()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.pkcs.CRLBag.getCrlId()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.pkcs.CRLBag.getCrlValue()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.pkcs.CRLBag.getcrlId()
++ public EncryptionScheme org.bouncycastle.asn1.pkcs.EncryptionScheme(org.bouncycastle.asn1.ASN1ObjectIdentifier)
-- public PBES2Algorithms org.bouncycastle.asn1.pkcs.PBES2Algorithms(org.bouncycastle.asn1.ASN1Sequence)
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.pkcs.PBES2Algorithms.getASN1Primitive()
-- public org.bouncycastle.asn1.pkcs.EncryptionScheme org.bouncycastle.asn1.pkcs.PBES2Algorithms.getEncryptionScheme()
-- public org.bouncycastle.asn1.pkcs.KeyDerivationFunc org.bouncycastle.asn1.pkcs.PBES2Algorithms.getKeyDerivationFunc()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.pkcs.PBES2Algorithms.getObjectId()
++ public PrivateKeyInfo org.bouncycastle.asn1.pkcs.PrivateKeyInfo(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.ASN1Encodable,org.bouncycastle.asn1.ASN1Set,byte[])
-- public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getAlgorithmId()
++ public org.bouncycastle.asn1.ASN1OctetString org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getPrivateKey()
-- public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getPrivateKey()
++ public org.bouncycastle.asn1.ASN1BitString org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getPublicKeyData()
++ public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.asn1.pkcs.PrivateKeyInfo.getVersion()
++ public bool org.bouncycastle.asn1.pkcs.PrivateKeyInfo.hasPublicKey()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.pkcs.PrivateKeyInfo.parsePublicKey()
++ public ECPrivateKey org.bouncycastle.asn1.sec.ECPrivateKey(int,java.math.BigInteger)
++ public ECPrivateKey org.bouncycastle.asn1.sec.ECPrivateKey(int,java.math.BigInteger,org.bouncycastle.asn1.ASN1Encodable)
++ public ECPrivateKey org.bouncycastle.asn1.sec.ECPrivateKey(int,java.math.BigInteger,org.bouncycastle.asn1.DERBitString,org.bouncycastle.asn1.ASN1Encodable)
++ public ArchiveTimeStamp org.bouncycastle.asn1.tsp.ArchiveTimeStamp(org.bouncycastle.asn1.cms.ContentInfo)
++ public ArchiveTimeStamp org.bouncycastle.asn1.tsp.ArchiveTimeStamp(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.cms.Attributes,org.bouncycastle.asn1.tsp.PartialHashtree[],org.bouncycastle.asn1.cms.ContentInfo)
++ public ArchiveTimeStamp org.bouncycastle.asn1.tsp.ArchiveTimeStamp(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.asn1.tsp.PartialHashtree[],org.bouncycastle.asn1.cms.ContentInfo)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.tsp.ArchiveTimeStamp.getDigestAlgorithm()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.tsp.ArchiveTimeStamp.getDigestAlgorithmIdentifier()
++ public static org.bouncycastle.asn1.tsp.ArchiveTimeStamp org.bouncycastle.asn1.tsp.ArchiveTimeStamp.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.tsp.PartialHashtree org.bouncycastle.asn1.tsp.ArchiveTimeStamp.getReducedHashTree()
++ public org.bouncycastle.asn1.cms.ContentInfo org.bouncycastle.asn1.tsp.ArchiveTimeStamp.getTimeStamp()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.ArchiveTimeStamp.toASN1Primitive()
++ public ArchiveTimeStampChain org.bouncycastle.asn1.tsp.ArchiveTimeStampChain(org.bouncycastle.asn1.tsp.ArchiveTimeStamp)
++ public ArchiveTimeStampChain org.bouncycastle.asn1.tsp.ArchiveTimeStampChain(org.bouncycastle.asn1.tsp.ArchiveTimeStamp[])
++ public org.bouncycastle.asn1.tsp.ArchiveTimeStampChain org.bouncycastle.asn1.tsp.ArchiveTimeStampChain.append(org.bouncycastle.asn1.tsp.ArchiveTimeStamp)
++ public org.bouncycastle.asn1.tsp.ArchiveTimeStamp org.bouncycastle.asn1.tsp.ArchiveTimeStampChain.getArchiveTimestamps()
++ public static org.bouncycastle.asn1.tsp.ArchiveTimeStampChain org.bouncycastle.asn1.tsp.ArchiveTimeStampChain.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.ArchiveTimeStampChain.toASN1Primitive()
++ public ArchiveTimeStampSequence org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence(org.bouncycastle.asn1.tsp.ArchiveTimeStampChain)
++ public ArchiveTimeStampSequence org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence(org.bouncycastle.asn1.tsp.ArchiveTimeStampChain[])
++ public org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence.append(org.bouncycastle.asn1.tsp.ArchiveTimeStampChain)
++ public org.bouncycastle.asn1.tsp.ArchiveTimeStampChain org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence.getArchiveTimeStampChains()
++ public static org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence.getInstance(java.lang.Object)
++ public int org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence.size()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence.toASN1Primitive()
++ public CryptoInfos org.bouncycastle.asn1.tsp.CryptoInfos(org.bouncycastle.asn1.cms.Attribute[])
++ public org.bouncycastle.asn1.cms.Attribute org.bouncycastle.asn1.tsp.CryptoInfos.getAttributes()
++ public static org.bouncycastle.asn1.tsp.CryptoInfos org.bouncycastle.asn1.tsp.CryptoInfos.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.tsp.CryptoInfos org.bouncycastle.asn1.tsp.CryptoInfos.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.CryptoInfos.toASN1Primitive()
++ public EncryptionInfo org.bouncycastle.asn1.tsp.EncryptionInfo(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public static org.bouncycastle.asn1.tsp.EncryptionInfo org.bouncycastle.asn1.tsp.EncryptionInfo.getInstance(org.bouncycastle.asn1.ASN1Object)
++ public static org.bouncycastle.asn1.tsp.EncryptionInfo org.bouncycastle.asn1.tsp.EncryptionInfo.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.EncryptionInfo.toASN1Primitive()
++ public EvidenceRecord org.bouncycastle.asn1.tsp.EvidenceRecord(org.bouncycastle.asn1.x509.AlgorithmIdentifier[],org.bouncycastle.asn1.tsp.CryptoInfos,org.bouncycastle.asn1.tsp.EncryptionInfo,org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence)
++ public org.bouncycastle.asn1.tsp.EvidenceRecord org.bouncycastle.asn1.tsp.EvidenceRecord.addArchiveTimeStamp(org.bouncycastle.asn1.tsp.ArchiveTimeStamp,boolean)
++ public org.bouncycastle.asn1.tsp.ArchiveTimeStampSequence org.bouncycastle.asn1.tsp.EvidenceRecord.getArchiveTimeStampSequence()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.asn1.tsp.EvidenceRecord.getDigestAlgorithms()
++ public static org.bouncycastle.asn1.tsp.EvidenceRecord org.bouncycastle.asn1.tsp.EvidenceRecord.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.tsp.EvidenceRecord org.bouncycastle.asn1.tsp.EvidenceRecord.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.EvidenceRecord.toASN1Primitive()
++ public java.lang.String org.bouncycastle.asn1.tsp.EvidenceRecord.toString()
++ public PartialHashtree org.bouncycastle.asn1.tsp.PartialHashtree(byte[])
++ public PartialHashtree org.bouncycastle.asn1.tsp.PartialHashtree(byte[][])
++ public static org.bouncycastle.asn1.tsp.PartialHashtree org.bouncycastle.asn1.tsp.PartialHashtree.getInstance(java.lang.Object)
++ public [[B org.bouncycastle.asn1.tsp.PartialHashtree.getValues()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.tsp.PartialHashtree.toASN1Primitive()
++ public DSTU4145Params org.bouncycastle.asn1.ua.DSTU4145Params(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[])
++ public static java.lang.String org.bouncycastle.asn1.x500.style.IETFUtils.canonicalString(org.bouncycastle.asn1.ASN1Encodable)
-- public AlgorithmIdentifier org.bouncycastle.asn1.x509.AlgorithmIdentifier(java.lang.String)
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.x509.AlgorithmIdentifier.getObjectId()
++ public AuthorityInformationAccess org.bouncycastle.asn1.x509.AuthorityInformationAccess(org.bouncycastle.asn1.x509.AccessDescription[])
++ public static org.bouncycastle.asn1.x509.AuthorityInformationAccess org.bouncycastle.asn1.x509.AuthorityInformationAccess.fromExtensions(org.bouncycastle.asn1.x509.Extensions)
++ public static org.bouncycastle.asn1.x509.CRLDistPoint org.bouncycastle.asn1.x509.CRLDistPoint.fromExtensions(org.bouncycastle.asn1.x509.Extensions)
++ public static org.bouncycastle.asn1.x509.Extension org.bouncycastle.asn1.x509.Extension.create(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable)
++ public static org.bouncycastle.asn1.x509.Extension org.bouncycastle.asn1.x509.Extensions.getExtension(org.bouncycastle.asn1.x509.Extensions,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.x509.Extensions.getExtensionParsedValue(org.bouncycastle.asn1.x509.Extensions,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public void org.bouncycastle.asn1.x509.ExtensionsGenerator.addExtension(org.bouncycastle.asn1.x509.Extension)
++ public org.bouncycastle.asn1.x509.Extension org.bouncycastle.asn1.x509.ExtensionsGenerator.getExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public bool org.bouncycastle.asn1.x509.ExtensionsGenerator.hasExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public void org.bouncycastle.asn1.x509.ExtensionsGenerator.removeExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public void org.bouncycastle.asn1.x509.ExtensionsGenerator.replaceExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,byte[])
++ public void org.bouncycastle.asn1.x509.ExtensionsGenerator.replaceExtension(org.bouncycastle.asn1.ASN1ObjectIdentifier,boolean,org.bouncycastle.asn1.ASN1Encodable)
++ public void org.bouncycastle.asn1.x509.ExtensionsGenerator.replaceExtension(org.bouncycastle.asn1.x509.Extension)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.x509.KeyPurposeId.toOID()
++ public java.lang.String org.bouncycastle.asn1.x509.KeyPurposeId.toString()
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.addExcludedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree)
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.checkExcluded(org.bouncycastle.asn1.x509.GeneralName)
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.checkPermitted(org.bouncycastle.asn1.x509.GeneralName)
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.intersectEmptyPermittedSubtree(int)
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree)
++ public abstract void org.bouncycastle.asn1.x509.NameConstraintValidator.intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree[])
++ public NameConstraintValidatorException org.bouncycastle.asn1.x509.NameConstraintValidatorException(java.lang.String)
++ public OtherName org.bouncycastle.asn1.x509.OtherName(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public static org.bouncycastle.asn1.x509.OtherName org.bouncycastle.asn1.x509.OtherName.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.asn1.x509.OtherName.getTypeID()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.asn1.x509.OtherName.getValue()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.x509.OtherName.toASN1Primitive()
++ public PKIXNameConstraintValidator org.bouncycastle.asn1.x509.PKIXNameConstraintValidator()
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.addExcludedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.checkExcluded(org.bouncycastle.asn1.x509.GeneralName)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.checkExcludedDN(org.bouncycastle.asn1.x500.X500Name)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.checkPermitted(org.bouncycastle.asn1.x509.GeneralName)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.checkPermittedDN(org.bouncycastle.asn1.x500.X500Name)
++ public bool org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.equals(java.lang.Object)
++ public int org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.hashCode()
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.intersectEmptyPermittedSubtree(int)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree)
++ public void org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.intersectPermittedSubtree(org.bouncycastle.asn1.x509.GeneralSubtree[])
++ public java.lang.String org.bouncycastle.asn1.x509.PKIXNameConstraintValidator.toString()
++ public java.lang.String org.bouncycastle.asn1.x509.PolicyInformation.toString()
++ public DHPublicKey org.bouncycastle.asn1.x9.DHPublicKey(java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.asn1.x9.DHPublicKey.getY()
-- public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.asn1.x9.DHPublicKey.getY()
++ public DomainParameters org.bouncycastle.asn1.x9.DomainParameters(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.asn1.x9.ValidationParams)
++ public java.math.BigInteger org.bouncycastle.asn1.x9.DomainParameters.getG()
++ public static org.bouncycastle.asn1.x9.DomainParameters org.bouncycastle.asn1.x9.DomainParameters.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.x9.DomainParameters org.bouncycastle.asn1.x9.DomainParameters.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public java.math.BigInteger org.bouncycastle.asn1.x9.DomainParameters.getJ()
++ public java.math.BigInteger org.bouncycastle.asn1.x9.DomainParameters.getP()
++ public java.math.BigInteger org.bouncycastle.asn1.x9.DomainParameters.getQ()
++ public org.bouncycastle.asn1.x9.ValidationParams org.bouncycastle.asn1.x9.DomainParameters.getValidationParams()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.x9.DomainParameters.toASN1Primitive()
++ public static java.lang.String org.bouncycastle.asn1.x9.ECNamedCurveTable.getName(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static org.bouncycastle.asn1.x9.KeySpecificInfo org.bouncycastle.asn1.x9.KeySpecificInfo.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.x9.OtherInfo org.bouncycastle.asn1.x9.OtherInfo.getInstance(java.lang.Object)
++ public ValidationParams org.bouncycastle.asn1.x9.ValidationParams(byte[],int)
++ public ValidationParams org.bouncycastle.asn1.x9.ValidationParams(org.bouncycastle.asn1.DERBitString,org.bouncycastle.asn1.ASN1Integer)
++ public static org.bouncycastle.asn1.x9.ValidationParams org.bouncycastle.asn1.x9.ValidationParams.getInstance(java.lang.Object)
++ public static org.bouncycastle.asn1.x9.ValidationParams org.bouncycastle.asn1.x9.ValidationParams.getInstance(org.bouncycastle.asn1.ASN1TaggedObject,boolean)
++ public java.math.BigInteger org.bouncycastle.asn1.x9.ValidationParams.getPgenCounter()
++ public [B org.bouncycastle.asn1.x9.ValidationParams.getSeed()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.asn1.x9.ValidationParams.toASN1Primitive()
++ public X962Parameters org.bouncycastle.asn1.x9.X962Parameters(org.bouncycastle.asn1.ASN1Null)
++ public X9Curve org.bouncycastle.asn1.x9.X9Curve(org.bouncycastle.asn1.x9.X9FieldID,java.math.BigInteger,java.math.BigInteger,org.bouncycastle.asn1.ASN1Sequence)
-- public X9Curve org.bouncycastle.asn1.x9.X9Curve(org.bouncycastle.asn1.x9.X9FieldID,org.bouncycastle.asn1.ASN1Sequence)
++ public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.asn1.x9.X9ECPoint,java.math.BigInteger)
++ public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.asn1.x9.X9ECPoint,java.math.BigInteger,java.math.BigInteger)
++ public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.asn1.x9.X9ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])
-- public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
-- public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger)
-- public X9ECParameters org.bouncycastle.asn1.x9.X9ECParameters(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint,java.math.BigInteger,java.math.BigInteger,byte[])
++ public org.bouncycastle.asn1.x9.X9ECPoint org.bouncycastle.asn1.x9.X9ECParameters.getBaseEntry()
++ public org.bouncycastle.asn1.x9.X9Curve org.bouncycastle.asn1.x9.X9ECParameters.getCurveEntry()
++ public org.bouncycastle.asn1.x9.X9FieldID org.bouncycastle.asn1.x9.X9ECParameters.getFieldIDEntry()
++ public bool org.bouncycastle.asn1.x9.X9ECParameters.hasSeed()
++ public X9ECPoint org.bouncycastle.asn1.x9.X9ECPoint(org.bouncycastle.math.ec.ECCurve,byte[])
-- public X9ECPoint org.bouncycastle.asn1.x9.X9ECPoint(org.bouncycastle.math.ec.ECPoint)
++ public X9ECPoint org.bouncycastle.asn1.x9.X9ECPoint(org.bouncycastle.math.ec.ECPoint,boolean)
++ public [B org.bouncycastle.asn1.x9.X9ECPoint.getPointEncoding()
++ public bool org.bouncycastle.asn1.x9.X9ECPoint.isPointCompressed()
++ public abstract [B org.bouncycastle.crypto.CharToByteConverter.convert(char[])
++ public abstract java.lang.String org.bouncycastle.crypto.CharToByteConverter.getType()
++ public CryptoServicesPermission org.bouncycastle.crypto.CryptoServicesPermission(java.lang.String)
++ public bool org.bouncycastle.crypto.CryptoServicesPermission.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.crypto.CryptoServicesPermission.getActions()
++ public int org.bouncycastle.crypto.CryptoServicesPermission.hashCode()
++ public bool org.bouncycastle.crypto.CryptoServicesPermission.implies(java.security.Permission)
++ public static java.lang.Object org.bouncycastle.crypto.CryptoServicesRegistrar.clearGlobalProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)
++ public static java.lang.Object org.bouncycastle.crypto.CryptoServicesRegistrar.clearThreadProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)
++ public static java.lang.Object org.bouncycastle.crypto.CryptoServicesRegistrar.getProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)
++ public static java.security.SecureRandom org.bouncycastle.crypto.CryptoServicesRegistrar.getSecureRandom()
++ public static java.security.SecureRandom org.bouncycastle.crypto.CryptoServicesRegistrar.getSecureRandom(java.security.SecureRandom)
++ public static java.lang.Object org.bouncycastle.crypto.CryptoServicesRegistrar.getSizedProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property)
++ public static java.lang.Object org.bouncycastle.crypto.CryptoServicesRegistrar.getSizedProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,int)
++ public static transient void org.bouncycastle.crypto.CryptoServicesRegistrar.setGlobalProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])
++ public static void org.bouncycastle.crypto.CryptoServicesRegistrar.setSecureRandom(java.security.SecureRandom)
++ public static transient void org.bouncycastle.crypto.CryptoServicesRegistrar.setThreadProperty(org.bouncycastle.crypto.CryptoServicesRegistrar$Property,java.lang.Object[])
++ public abstract java.math.BigInteger org.bouncycastle.crypto.DSAExt.getOrder()
++ public static org.bouncycastle.crypto.PasswordConverter org.bouncycastle.crypto.PasswordConverter.valueOf(java.lang.String)
++ public static org.bouncycastle.crypto.PasswordConverter org.bouncycastle.crypto.PasswordConverter.values()
++ public abstract void org.bouncycastle.crypto.RawAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters,byte[],int)
++ public abstract int org.bouncycastle.crypto.RawAgreement.getAgreementSize()
++ public abstract void org.bouncycastle.crypto.RawAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public abstract org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.StagedAgreement.calculateStage(org.bouncycastle.crypto.CipherParameters)
++ public abstract int org.bouncycastle.crypto.Xof.doFinal(byte[],int,int)
++ public abstract int org.bouncycastle.crypto.Xof.doOutput(byte[],int,int)
++ public DHUnifiedAgreement org.bouncycastle.crypto.agreement.DHUnifiedAgreement()
++ public [B org.bouncycastle.crypto.agreement.DHUnifiedAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.agreement.DHUnifiedAgreement.getFieldSize()
++ public void org.bouncycastle.crypto.agreement.DHUnifiedAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public ECDHCStagedAgreement org.bouncycastle.crypto.agreement.ECDHCStagedAgreement()
++ public java.math.BigInteger org.bouncycastle.crypto.agreement.ECDHCStagedAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.agreement.ECDHCStagedAgreement.calculateStage(org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.agreement.ECDHCStagedAgreement.getFieldSize()
++ public void org.bouncycastle.crypto.agreement.ECDHCStagedAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public ECDHCUnifiedAgreement org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement()
++ public [B org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement.getFieldSize()
++ public void org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public ECVKOAgreement org.bouncycastle.crypto.agreement.ECVKOAgreement(org.bouncycastle.crypto.Digest)
++ public [B org.bouncycastle.crypto.agreement.ECVKOAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.agreement.ECVKOAgreement.getFieldSize()
++ public void org.bouncycastle.crypto.agreement.ECVKOAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public MQVBasicAgreement org.bouncycastle.crypto.agreement.MQVBasicAgreement()
++ public java.math.BigInteger org.bouncycastle.crypto.agreement.MQVBasicAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.agreement.MQVBasicAgreement.getFieldSize()
++ public void org.bouncycastle.crypto.agreement.MQVBasicAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public SM2KeyExchange org.bouncycastle.crypto.agreement.SM2KeyExchange()
++ public SM2KeyExchange org.bouncycastle.crypto.agreement.SM2KeyExchange(org.bouncycastle.crypto.Digest)
++ public [B org.bouncycastle.crypto.agreement.SM2KeyExchange.calculateKey(int,org.bouncycastle.crypto.CipherParameters)
++ public [[B org.bouncycastle.crypto.agreement.SM2KeyExchange.calculateKeyWithConfirmation(int,byte[],org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.agreement.SM2KeyExchange.init(org.bouncycastle.crypto.CipherParameters)
++ public X25519Agreement org.bouncycastle.crypto.agreement.X25519Agreement()
++ public void org.bouncycastle.crypto.agreement.X25519Agreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters,byte[],int)
++ public int org.bouncycastle.crypto.agreement.X25519Agreement.getAgreementSize()
++ public void org.bouncycastle.crypto.agreement.X25519Agreement.init(org.bouncycastle.crypto.CipherParameters)
++ public X448Agreement org.bouncycastle.crypto.agreement.X448Agreement()
++ public void org.bouncycastle.crypto.agreement.X448Agreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters,byte[],int)
++ public int org.bouncycastle.crypto.agreement.X448Agreement.getAgreementSize()
++ public void org.bouncycastle.crypto.agreement.X448Agreement.init(org.bouncycastle.crypto.CipherParameters)
++ public XDHUnifiedAgreement org.bouncycastle.crypto.agreement.XDHUnifiedAgreement(org.bouncycastle.crypto.RawAgreement)
++ public void org.bouncycastle.crypto.agreement.XDHUnifiedAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters,byte[],int)
++ public int org.bouncycastle.crypto.agreement.XDHUnifiedAgreement.getAgreementSize()
++ public void org.bouncycastle.crypto.agreement.XDHUnifiedAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public ConcatenationKDFGenerator org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator(org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator.generateBytes(byte[],int,int)
++ public org.bouncycastle.crypto.Digest org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator.getDigest()
++ public void org.bouncycastle.crypto.agreement.kdf.ConcatenationKDFGenerator.init(org.bouncycastle.crypto.DerivationParameters)
++ public GSKKDFParameters org.bouncycastle.crypto.agreement.kdf.GSKKDFParameters(byte[],int)
++ public GSKKDFParameters org.bouncycastle.crypto.agreement.kdf.GSKKDFParameters(byte[],int,byte[])
++ public [B org.bouncycastle.crypto.agreement.kdf.GSKKDFParameters.getNonce()
++ public int org.bouncycastle.crypto.agreement.kdf.GSKKDFParameters.getStartCounter()
++ public [B org.bouncycastle.crypto.agreement.kdf.GSKKDFParameters.getZ()
++ public GSKKFDGenerator org.bouncycastle.crypto.agreement.kdf.GSKKFDGenerator(org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.crypto.agreement.kdf.GSKKFDGenerator.generateBytes(byte[],int,int)
++ public org.bouncycastle.crypto.Digest org.bouncycastle.crypto.agreement.kdf.GSKKFDGenerator.getDigest()
++ public void org.bouncycastle.crypto.agreement.kdf.GSKKFDGenerator.init(org.bouncycastle.crypto.DerivationParameters)
++ public void org.bouncycastle.crypto.agreement.srp.SRP6Client.init(org.bouncycastle.crypto.params.SRP6GroupParameters,org.bouncycastle.crypto.Digest,java.security.SecureRandom)
++ public void org.bouncycastle.crypto.agreement.srp.SRP6Server.init(org.bouncycastle.crypto.params.SRP6GroupParameters,java.math.BigInteger,org.bouncycastle.crypto.Digest,java.security.SecureRandom)
++ public SRP6StandardGroups org.bouncycastle.crypto.agreement.srp.SRP6StandardGroups()
++ public void org.bouncycastle.crypto.agreement.srp.SRP6VerifierGenerator.init(org.bouncycastle.crypto.params.SRP6GroupParameters,org.bouncycastle.crypto.Digest)
++ public Blake2bDigest org.bouncycastle.crypto.digests.Blake2bDigest()
++ public Blake2bDigest org.bouncycastle.crypto.digests.Blake2bDigest(byte[])
++ public Blake2bDigest org.bouncycastle.crypto.digests.Blake2bDigest(byte[],int,byte[],byte[])
++ public Blake2bDigest org.bouncycastle.crypto.digests.Blake2bDigest(int)
++ public Blake2bDigest org.bouncycastle.crypto.digests.Blake2bDigest(org.bouncycastle.crypto.digests.Blake2bDigest)
++ public void org.bouncycastle.crypto.digests.Blake2bDigest.clearKey()
++ public void org.bouncycastle.crypto.digests.Blake2bDigest.clearSalt()
++ public int org.bouncycastle.crypto.digests.Blake2bDigest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.Blake2bDigest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.Blake2bDigest.getByteLength()
++ public int org.bouncycastle.crypto.digests.Blake2bDigest.getDigestSize()
++ public void org.bouncycastle.crypto.digests.Blake2bDigest.reset()
++ public void org.bouncycastle.crypto.digests.Blake2bDigest.update(byte)
++ public void org.bouncycastle.crypto.digests.Blake2bDigest.update(byte[],int,int)
++ public Blake2sDigest org.bouncycastle.crypto.digests.Blake2sDigest()
++ public Blake2sDigest org.bouncycastle.crypto.digests.Blake2sDigest(byte[])
++ public Blake2sDigest org.bouncycastle.crypto.digests.Blake2sDigest(byte[],int,byte[],byte[])
++ public Blake2sDigest org.bouncycastle.crypto.digests.Blake2sDigest(int)
++ public Blake2sDigest org.bouncycastle.crypto.digests.Blake2sDigest(org.bouncycastle.crypto.digests.Blake2sDigest)
++ public void org.bouncycastle.crypto.digests.Blake2sDigest.clearKey()
++ public void org.bouncycastle.crypto.digests.Blake2sDigest.clearSalt()
++ public int org.bouncycastle.crypto.digests.Blake2sDigest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.Blake2sDigest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.Blake2sDigest.getByteLength()
++ public int org.bouncycastle.crypto.digests.Blake2sDigest.getDigestSize()
++ public void org.bouncycastle.crypto.digests.Blake2sDigest.reset()
++ public void org.bouncycastle.crypto.digests.Blake2sDigest.update(byte)
++ public void org.bouncycastle.crypto.digests.Blake2sDigest.update(byte[],int,int)
++ public Blake2xsDigest org.bouncycastle.crypto.digests.Blake2xsDigest()
++ public Blake2xsDigest org.bouncycastle.crypto.digests.Blake2xsDigest(int)
++ public Blake2xsDigest org.bouncycastle.crypto.digests.Blake2xsDigest(int,byte[])
++ public Blake2xsDigest org.bouncycastle.crypto.digests.Blake2xsDigest(int,byte[],byte[],byte[])
++ public Blake2xsDigest org.bouncycastle.crypto.digests.Blake2xsDigest(org.bouncycastle.crypto.digests.Blake2xsDigest)
++ public int org.bouncycastle.crypto.digests.Blake2xsDigest.doFinal(byte[],int)
++ public int org.bouncycastle.crypto.digests.Blake2xsDigest.doFinal(byte[],int,int)
++ public int org.bouncycastle.crypto.digests.Blake2xsDigest.doOutput(byte[],int,int)
++ public java.lang.String org.bouncycastle.crypto.digests.Blake2xsDigest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.Blake2xsDigest.getByteLength()
++ public int org.bouncycastle.crypto.digests.Blake2xsDigest.getDigestSize()
++ public J org.bouncycastle.crypto.digests.Blake2xsDigest.getUnknownMaxLength()
++ public void org.bouncycastle.crypto.digests.Blake2xsDigest.reset()
++ public void org.bouncycastle.crypto.digests.Blake2xsDigest.update(byte)
++ public void org.bouncycastle.crypto.digests.Blake2xsDigest.update(byte[],int,int)
++ public CSHAKEDigest org.bouncycastle.crypto.digests.CSHAKEDigest(int,byte[],byte[])
++ public int org.bouncycastle.crypto.digests.CSHAKEDigest.doOutput(byte[],int,int)
++ public java.lang.String org.bouncycastle.crypto.digests.CSHAKEDigest.getAlgorithmName()
++ public void org.bouncycastle.crypto.digests.CSHAKEDigest.reset()
++ public DSTU7564Digest org.bouncycastle.crypto.digests.DSTU7564Digest(int)
++ public DSTU7564Digest org.bouncycastle.crypto.digests.DSTU7564Digest(org.bouncycastle.crypto.digests.DSTU7564Digest)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.digests.DSTU7564Digest.copy()
++ public int org.bouncycastle.crypto.digests.DSTU7564Digest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.DSTU7564Digest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.DSTU7564Digest.getByteLength()
++ public int org.bouncycastle.crypto.digests.DSTU7564Digest.getDigestSize()
++ public void org.bouncycastle.crypto.digests.DSTU7564Digest.reset()
++ public void org.bouncycastle.crypto.digests.DSTU7564Digest.reset(org.bouncycastle.util.Memoable)
++ public void org.bouncycastle.crypto.digests.DSTU7564Digest.update(byte)
++ public void org.bouncycastle.crypto.digests.DSTU7564Digest.update(byte[],int,int)
++ public GOST3411_2012Digest org.bouncycastle.crypto.digests.GOST3411_2012Digest(byte[])
++ public abstract org.bouncycastle.util.Memoable org.bouncycastle.crypto.digests.GOST3411_2012Digest.copy()
++ public int org.bouncycastle.crypto.digests.GOST3411_2012Digest.doFinal(byte[],int)
++ public abstract java.lang.String org.bouncycastle.crypto.digests.GOST3411_2012Digest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.GOST3411_2012Digest.getByteLength()
++ public abstract int org.bouncycastle.crypto.digests.GOST3411_2012Digest.getDigestSize()
++ public void org.bouncycastle.crypto.digests.GOST3411_2012Digest.reset()
++ public void org.bouncycastle.crypto.digests.GOST3411_2012Digest.reset(org.bouncycastle.util.Memoable)
++ public void org.bouncycastle.crypto.digests.GOST3411_2012Digest.update(byte)
++ public void org.bouncycastle.crypto.digests.GOST3411_2012Digest.update(byte[],int,int)
++ public GOST3411_2012_256Digest org.bouncycastle.crypto.digests.GOST3411_2012_256Digest()
++ public GOST3411_2012_256Digest org.bouncycastle.crypto.digests.GOST3411_2012_256Digest(org.bouncycastle.crypto.digests.GOST3411_2012_256Digest)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.digests.GOST3411_2012_256Digest.copy()
++ public int org.bouncycastle.crypto.digests.GOST3411_2012_256Digest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.GOST3411_2012_256Digest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.GOST3411_2012_256Digest.getDigestSize()
++ public GOST3411_2012_512Digest org.bouncycastle.crypto.digests.GOST3411_2012_512Digest()
++ public GOST3411_2012_512Digest org.bouncycastle.crypto.digests.GOST3411_2012_512Digest(org.bouncycastle.crypto.digests.GOST3411_2012_512Digest)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.digests.GOST3411_2012_512Digest.copy()
++ public java.lang.String org.bouncycastle.crypto.digests.GOST3411_2012_512Digest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.GOST3411_2012_512Digest.getDigestSize()
++ public Haraka256Digest org.bouncycastle.crypto.digests.Haraka256Digest()
++ public Haraka256Digest org.bouncycastle.crypto.digests.Haraka256Digest(org.bouncycastle.crypto.digests.Haraka256Digest)
++ public int org.bouncycastle.crypto.digests.Haraka256Digest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.Haraka256Digest.getAlgorithmName()
++ public void org.bouncycastle.crypto.digests.Haraka256Digest.reset()
++ public void org.bouncycastle.crypto.digests.Haraka256Digest.update(byte)
++ public void org.bouncycastle.crypto.digests.Haraka256Digest.update(byte[],int,int)
++ public Haraka512Digest org.bouncycastle.crypto.digests.Haraka512Digest()
++ public Haraka512Digest org.bouncycastle.crypto.digests.Haraka512Digest(org.bouncycastle.crypto.digests.Haraka512Digest)
++ public int org.bouncycastle.crypto.digests.Haraka512Digest.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.digests.Haraka512Digest.getAlgorithmName()
++ public void org.bouncycastle.crypto.digests.Haraka512Digest.reset()
++ public void org.bouncycastle.crypto.digests.Haraka512Digest.update(byte)
++ public void org.bouncycastle.crypto.digests.Haraka512Digest.update(byte[],int,int)
++ public HarakaBase org.bouncycastle.crypto.digests.HarakaBase()
++ public int org.bouncycastle.crypto.digests.HarakaBase.getDigestSize()
++ public KeccakDigest org.bouncycastle.crypto.digests.KeccakDigest()
++ public KeccakDigest org.bouncycastle.crypto.digests.KeccakDigest(int)
++ public KeccakDigest org.bouncycastle.crypto.digests.KeccakDigest(org.bouncycastle.crypto.digests.KeccakDigest)
++ protected void org.bouncycastle.crypto.digests.KeccakDigest.absorb(byte)
++ protected void org.bouncycastle.crypto.digests.KeccakDigest.absorb(byte[],int,int)
++ protected void org.bouncycastle.crypto.digests.KeccakDigest.absorbBits(int,int)
++ public int org.bouncycastle.crypto.digests.KeccakDigest.doFinal(byte[],int)
++ protected int org.bouncycastle.crypto.digests.KeccakDigest.doFinal(byte[],int,byte,int)
++ protected [B org.bouncycastle.crypto.digests.KeccakDigest.dumpState()
++ public java.lang.String org.bouncycastle.crypto.digests.KeccakDigest.getAlgorithmName()
++ public int org.bouncycastle.crypto.digests.KeccakDigest.getByteLength()
++ public int org.bouncycastle.crypto.digests.KeccakDigest.getDigestSize()
++ public void org.bouncycastle.crypto.digests.KeccakDigest.reset()
++ protected void org.bouncycastle.crypto.digests.KeccakDigest.squeeze(byte[],int,long)
++ public void org.bouncycastle.crypto.digests.KeccakDigest.update(byte)
++ public void org.bouncycastle.crypto.digests.KeccakDigest.update(byte[],int,int)
++ public MD5Digest org.bouncycastle.crypto.digests.MD5Digest(byte[])
++ public [B org.bouncycastle.crypto.digests.MD5Digest.getEncodedState()
++ protected int org.bouncycastle.crypto.digests.SHA3Digest.doFinal(byte[],int,byte,int)
-- public int org.bouncycastle.crypto.digests.SHA3Digest.getByteLength()
-- public int org.bouncycastle.crypto.digests.SHA3Digest.getDigestSize()
-- public void org.bouncycastle.crypto.digests.SHA3Digest.reset()
-- public void org.bouncycastle.crypto.digests.SHA3Digest.update(byte)
-- public void org.bouncycastle.crypto.digests.SHA3Digest.update(byte[],int,int)
++ public SHAKEDigest org.bouncycastle.crypto.digests.SHAKEDigest()
++ public SHAKEDigest org.bouncycastle.crypto.digests.SHAKEDigest(int)
++ public SHAKEDigest org.bouncycastle.crypto.digests.SHAKEDigest(org.bouncycastle.crypto.digests.SHAKEDigest)
++ public int org.bouncycastle.crypto.digests.SHAKEDigest.doFinal(byte[],int)
++ protected int org.bouncycastle.crypto.digests.SHAKEDigest.doFinal(byte[],int,byte,int)
++ public int org.bouncycastle.crypto.digests.SHAKEDigest.doFinal(byte[],int,int)
++ protected int org.bouncycastle.crypto.digests.SHAKEDigest.doFinal(byte[],int,int,byte,int)
++ public int org.bouncycastle.crypto.digests.SHAKEDigest.doOutput(byte[],int,int)
++ public java.lang.String org.bouncycastle.crypto.digests.SHAKEDigest.getAlgorithmName()
++ public XofUtils org.bouncycastle.crypto.digests.XofUtils()
++ public static [B org.bouncycastle.crypto.digests.XofUtils.leftEncode(long)
++ public static [B org.bouncycastle.crypto.digests.XofUtils.rightEncode(long)
++ public AESWrapEngine org.bouncycastle.crypto.engines.AESWrapEngine(boolean)
++ public ARIAEngine org.bouncycastle.crypto.engines.ARIAEngine()
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.A(byte[])
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.FE(byte[],byte[])
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.FO(byte[],byte[])
++ protected static B org.bouncycastle.crypto.engines.ARIAEngine.SB1(byte)
++ protected static B org.bouncycastle.crypto.engines.ARIAEngine.SB2(byte)
++ protected static B org.bouncycastle.crypto.engines.ARIAEngine.SB3(byte)
++ protected static B org.bouncycastle.crypto.engines.ARIAEngine.SB4(byte)
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.SL1(byte[])
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.SL2(byte[])
++ public java.lang.String org.bouncycastle.crypto.engines.ARIAEngine.getAlgorithmName()
++ public int org.bouncycastle.crypto.engines.ARIAEngine.getBlockSize()
++ public void org.bouncycastle.crypto.engines.ARIAEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ protected static [[B org.bouncycastle.crypto.engines.ARIAEngine.keySchedule(boolean,byte[])
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.keyScheduleRound(byte[],byte[],byte[],int)
++ public int org.bouncycastle.crypto.engines.ARIAEngine.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.engines.ARIAEngine.reset()
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.reverseKeys(byte[][])
++ protected static void org.bouncycastle.crypto.engines.ARIAEngine.xor(byte[],byte[])
++ public ARIAWrapEngine org.bouncycastle.crypto.engines.ARIAWrapEngine()
++ public ARIAWrapEngine org.bouncycastle.crypto.engines.ARIAWrapEngine(boolean)
++ public ARIAWrapPadEngine org.bouncycastle.crypto.engines.ARIAWrapPadEngine()
++ public ChaCha7539Engine org.bouncycastle.crypto.engines.ChaCha7539Engine()
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.advanceCounter()
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.advanceCounter(long)
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.generateKeyStream(byte[])
++ public java.lang.String org.bouncycastle.crypto.engines.ChaCha7539Engine.getAlgorithmName()
++ protected J org.bouncycastle.crypto.engines.ChaCha7539Engine.getCounter()
++ protected int org.bouncycastle.crypto.engines.ChaCha7539Engine.getNonceSize()
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.resetCounter()
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.retreatCounter()
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.retreatCounter(long)
++ protected void org.bouncycastle.crypto.engines.ChaCha7539Engine.setKey(byte[],byte[])
++ protected void org.bouncycastle.crypto.engines.ChaChaEngine.advanceCounter(long)
++ protected void org.bouncycastle.crypto.engines.ChaChaEngine.retreatCounter(long)
++ public CryptoProWrapEngine org.bouncycastle.crypto.engines.CryptoProWrapEngine()
++ public void org.bouncycastle.crypto.engines.CryptoProWrapEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public DSTU7624Engine org.bouncycastle.crypto.engines.DSTU7624Engine(int)
++ public java.lang.String org.bouncycastle.crypto.engines.DSTU7624Engine.getAlgorithmName()
++ public int org.bouncycastle.crypto.engines.DSTU7624Engine.getBlockSize()
++ public void org.bouncycastle.crypto.engines.DSTU7624Engine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.engines.DSTU7624Engine.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.engines.DSTU7624Engine.reset()
++ public DSTU7624WrapEngine org.bouncycastle.crypto.engines.DSTU7624WrapEngine(int)
++ public java.lang.String org.bouncycastle.crypto.engines.DSTU7624WrapEngine.getAlgorithmName()
++ public void org.bouncycastle.crypto.engines.DSTU7624WrapEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public [B org.bouncycastle.crypto.engines.DSTU7624WrapEngine.unwrap(byte[],int,int)
++ public [B org.bouncycastle.crypto.engines.DSTU7624WrapEngine.wrap(byte[],int,int)
++ public EthereumIESEngine$HandshakeKDFFunction org.bouncycastle.crypto.engines.EthereumIESEngine$HandshakeKDFFunction(int,org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.crypto.engines.EthereumIESEngine$HandshakeKDFFunction.generateBytes(byte[],int,int)
++ public org.bouncycastle.crypto.Digest org.bouncycastle.crypto.engines.EthereumIESEngine$HandshakeKDFFunction.getDigest()
++ public void org.bouncycastle.crypto.engines.EthereumIESEngine$HandshakeKDFFunction.init(org.bouncycastle.crypto.DerivationParameters)
++ public EthereumIESEngine org.bouncycastle.crypto.engines.EthereumIESEngine(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac,byte[])
++ public EthereumIESEngine org.bouncycastle.crypto.engines.EthereumIESEngine(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac,byte[],org.bouncycastle.crypto.BufferedBlockCipher)
++ public org.bouncycastle.crypto.BufferedBlockCipher org.bouncycastle.crypto.engines.EthereumIESEngine.getCipher()
++ protected [B org.bouncycastle.crypto.engines.EthereumIESEngine.getLengthTag(byte[])
++ public org.bouncycastle.crypto.Mac org.bouncycastle.crypto.engines.EthereumIESEngine.getMac()
++ public void org.bouncycastle.crypto.engines.EthereumIESEngine.init(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.engines.EthereumIESEngine.init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.KeyParser)
++ public void org.bouncycastle.crypto.engines.EthereumIESEngine.init(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.crypto.generators.EphemeralKeyPairGenerator)
++ public [B org.bouncycastle.crypto.engines.EthereumIESEngine.processBlock(byte[],int,int)
++ public static java.lang.String org.bouncycastle.crypto.engines.GOST28147Engine.getSBoxName(byte[])
++ public GOST28147WrapEngine org.bouncycastle.crypto.engines.GOST28147WrapEngine()
++ public java.lang.String org.bouncycastle.crypto.engines.GOST28147WrapEngine.getAlgorithmName()
++ public void org.bouncycastle.crypto.engines.GOST28147WrapEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public [B org.bouncycastle.crypto.engines.GOST28147WrapEngine.unwrap(byte[],int,int)
++ public [B org.bouncycastle.crypto.engines.GOST28147WrapEngine.wrap(byte[],int,int)
++ public GOST3412_2015Engine org.bouncycastle.crypto.engines.GOST3412_2015Engine()
++ public java.lang.String org.bouncycastle.crypto.engines.GOST3412_2015Engine.getAlgorithmName()
++ public int org.bouncycastle.crypto.engines.GOST3412_2015Engine.getBlockSize()
++ public void org.bouncycastle.crypto.engines.GOST3412_2015Engine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.engines.GOST3412_2015Engine.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.engines.GOST3412_2015Engine.reset()
++ protected [B org.bouncycastle.crypto.engines.IESEngine.getLengthTag(byte[])
++ public OldIESEngine org.bouncycastle.crypto.engines.OldIESEngine(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac)
++ public OldIESEngine org.bouncycastle.crypto.engines.OldIESEngine(org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction,org.bouncycastle.crypto.Mac,org.bouncycastle.crypto.BufferedBlockCipher)
++ protected [B org.bouncycastle.crypto.engines.OldIESEngine.getLengthTag(byte[])
++ public RFC3394WrapEngine org.bouncycastle.crypto.engines.RFC3394WrapEngine(org.bouncycastle.crypto.BlockCipher,boolean)
++ public static org.bouncycastle.crypto.engines.SM2Engine$Mode org.bouncycastle.crypto.engines.SM2Engine$Mode.valueOf(java.lang.String)
++ public static org.bouncycastle.crypto.engines.SM2Engine$Mode org.bouncycastle.crypto.engines.SM2Engine$Mode.values()
++ public SM2Engine org.bouncycastle.crypto.engines.SM2Engine()
++ public SM2Engine org.bouncycastle.crypto.engines.SM2Engine(org.bouncycastle.crypto.Digest)
++ public SM2Engine org.bouncycastle.crypto.engines.SM2Engine(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.engines.SM2Engine$Mode)
++ public SM2Engine org.bouncycastle.crypto.engines.SM2Engine(org.bouncycastle.crypto.engines.SM2Engine$Mode)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.crypto.engines.SM2Engine.createBasePointMultiplier()
++ public int org.bouncycastle.crypto.engines.SM2Engine.getOutputSize(int)
++ public void org.bouncycastle.crypto.engines.SM2Engine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public [B org.bouncycastle.crypto.engines.SM2Engine.processBlock(byte[],int,int)
++ public SM4Engine org.bouncycastle.crypto.engines.SM4Engine()
++ public java.lang.String org.bouncycastle.crypto.engines.SM4Engine.getAlgorithmName()
++ public int org.bouncycastle.crypto.engines.SM4Engine.getBlockSize()
++ public void org.bouncycastle.crypto.engines.SM4Engine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.engines.SM4Engine.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.engines.SM4Engine.reset()
++ protected void org.bouncycastle.crypto.engines.Salsa20Engine.advanceCounter(long)
++ protected void org.bouncycastle.crypto.engines.Salsa20Engine.packTauOrSigma(int,int[],int)
++ protected void org.bouncycastle.crypto.engines.Salsa20Engine.retreatCounter(long)
-- protected static int org.bouncycastle.crypto.engines.Salsa20Engine.rotl(int,int)
++ protected void org.bouncycastle.crypto.engines.SerpentEngine.decryptBlock(byte[],int,byte[],int)
-- private void org.bouncycastle.crypto.engines.SerpentEngine.decryptBlock(byte[],int,byte[],int)
++ protected void org.bouncycastle.crypto.engines.SerpentEngine.encryptBlock(byte[],int,byte[],int)
-- private void org.bouncycastle.crypto.engines.SerpentEngine.encryptBlock(byte[],int,byte[],int)
-- public java.lang.String org.bouncycastle.crypto.engines.SerpentEngine.getAlgorithmName()
-- public int org.bouncycastle.crypto.engines.SerpentEngine.getBlockSize()
-- public void org.bouncycastle.crypto.engines.SerpentEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ protected [I org.bouncycastle.crypto.engines.SerpentEngine.makeWorkingKey(byte[])
-- private [I org.bouncycastle.crypto.engines.SerpentEngine.makeWorkingKey(byte[])
-- public final int org.bouncycastle.crypto.engines.SerpentEngine.processBlock(byte[],int,byte[],int)
-- public void org.bouncycastle.crypto.engines.SerpentEngine.reset()
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.LT()
++ protected abstract void org.bouncycastle.crypto.engines.SerpentEngineBase.decryptBlock(byte[],int,byte[],int)
++ protected abstract void org.bouncycastle.crypto.engines.SerpentEngineBase.encryptBlock(byte[],int,byte[],int)
++ public java.lang.String org.bouncycastle.crypto.engines.SerpentEngineBase.getAlgorithmName()
++ public int org.bouncycastle.crypto.engines.SerpentEngineBase.getBlockSize()
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib0(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib1(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib2(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib3(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib4(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib5(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib6(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.ib7(int,int,int,int)
++ public void org.bouncycastle.crypto.engines.SerpentEngineBase.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.inverseLT()
++ protected abstract [I org.bouncycastle.crypto.engines.SerpentEngineBase.makeWorkingKey(byte[])
++ public final int org.bouncycastle.crypto.engines.SerpentEngineBase.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.engines.SerpentEngineBase.reset()
++ protected static int org.bouncycastle.crypto.engines.SerpentEngineBase.rotateLeft(int,int)
++ protected static int org.bouncycastle.crypto.engines.SerpentEngineBase.rotateRight(int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb0(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb1(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb2(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb3(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb4(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb5(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb6(int,int,int,int)
++ protected final void org.bouncycastle.crypto.engines.SerpentEngineBase.sb7(int,int,int,int)
-- public void org.bouncycastle.crypto.engines.Shacal2Engine.decryptBlock(byte[],int,byte[],int)
++ private void org.bouncycastle.crypto.engines.Shacal2Engine.decryptBlock(byte[],int,byte[],int)
++ private void org.bouncycastle.crypto.engines.Shacal2Engine.encryptBlock(byte[],int,byte[],int)
-- public void org.bouncycastle.crypto.engines.Shacal2Engine.encryptBlock(byte[],int,byte[],int)
++ public TnepresEngine org.bouncycastle.crypto.engines.TnepresEngine()
++ protected void org.bouncycastle.crypto.engines.TnepresEngine.decryptBlock(byte[],int,byte[],int)
++ protected void org.bouncycastle.crypto.engines.TnepresEngine.encryptBlock(byte[],int,byte[],int)
++ public java.lang.String org.bouncycastle.crypto.engines.TnepresEngine.getAlgorithmName()
++ protected [I org.bouncycastle.crypto.engines.TnepresEngine.makeWorkingKey(byte[])
++ protected Zuc128CoreEngine org.bouncycastle.crypto.engines.Zuc128CoreEngine()
++ protected Zuc128CoreEngine org.bouncycastle.crypto.engines.Zuc128CoreEngine(org.bouncycastle.crypto.engines.Zuc128CoreEngine)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.engines.Zuc128CoreEngine.copy()
++ public static void org.bouncycastle.crypto.engines.Zuc128CoreEngine.encode32be(int,byte[],int)
++ public java.lang.String org.bouncycastle.crypto.engines.Zuc128CoreEngine.getAlgorithmName()
++ protected int org.bouncycastle.crypto.engines.Zuc128CoreEngine.getMaxIterations()
++ public void org.bouncycastle.crypto.engines.Zuc128CoreEngine.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ protected int org.bouncycastle.crypto.engines.Zuc128CoreEngine.makeKeyStreamWord()
++ public int org.bouncycastle.crypto.engines.Zuc128CoreEngine.processBytes(byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.engines.Zuc128CoreEngine.reset()
++ public void org.bouncycastle.crypto.engines.Zuc128CoreEngine.reset(org.bouncycastle.util.Memoable)
++ public B org.bouncycastle.crypto.engines.Zuc128CoreEngine.returnByte(byte)
++ protected void org.bouncycastle.crypto.engines.Zuc128CoreEngine.setKeyAndIV(int[],byte[],byte[])
++ public Zuc128Engine org.bouncycastle.crypto.engines.Zuc128Engine()
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.engines.Zuc128Engine.copy()
++ protected Zuc256CoreEngine org.bouncycastle.crypto.engines.Zuc256CoreEngine()
++ protected Zuc256CoreEngine org.bouncycastle.crypto.engines.Zuc256CoreEngine(int)
++ protected Zuc256CoreEngine org.bouncycastle.crypto.engines.Zuc256CoreEngine(org.bouncycastle.crypto.engines.Zuc256CoreEngine)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.engines.Zuc256CoreEngine.copy()
++ public java.lang.String org.bouncycastle.crypto.engines.Zuc256CoreEngine.getAlgorithmName()
++ protected int org.bouncycastle.crypto.engines.Zuc256CoreEngine.getMaxIterations()
++ public void org.bouncycastle.crypto.engines.Zuc256CoreEngine.reset(org.bouncycastle.util.Memoable)
++ protected void org.bouncycastle.crypto.engines.Zuc256CoreEngine.setKeyAndIV(int[],byte[],byte[])
++ public Zuc256Engine org.bouncycastle.crypto.engines.Zuc256Engine()
++ public Zuc256Engine org.bouncycastle.crypto.engines.Zuc256Engine(int)
++ public org.bouncycastle.util.Memoable org.bouncycastle.crypto.engines.Zuc256Engine.copy()
++ public Argon2BytesGenerator org.bouncycastle.crypto.generators.Argon2BytesGenerator()
++ public int org.bouncycastle.crypto.generators.Argon2BytesGenerator.generateBytes(byte[],byte[])
++ public int org.bouncycastle.crypto.generators.Argon2BytesGenerator.generateBytes(byte[],byte[],int,int)
++ public int org.bouncycastle.crypto.generators.Argon2BytesGenerator.generateBytes(char[],byte[])
++ public int org.bouncycastle.crypto.generators.Argon2BytesGenerator.generateBytes(char[],byte[],int,int)
++ public void org.bouncycastle.crypto.generators.Argon2BytesGenerator.init(org.bouncycastle.crypto.params.Argon2Parameters)
++ public static [B org.bouncycastle.crypto.generators.BCrypt.generate(byte[],byte[],int)
++ public static [B org.bouncycastle.crypto.generators.BCrypt.passwordToByteArray(char[])
++ public Ed25519KeyPairGenerator org.bouncycastle.crypto.generators.Ed25519KeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.generators.Ed25519KeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.crypto.generators.Ed25519KeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public Ed448KeyPairGenerator org.bouncycastle.crypto.generators.Ed448KeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.generators.Ed448KeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.crypto.generators.Ed448KeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public static bool org.bouncycastle.crypto.generators.OpenBSDBCrypt.checkPassword(java.lang.String,byte[])
++ public static bool org.bouncycastle.crypto.generators.OpenBSDBCrypt.checkPassword(java.lang.String,char[])
++ public static java.lang.String org.bouncycastle.crypto.generators.OpenBSDBCrypt.generate(byte[],byte[],int)
++ public static java.lang.String org.bouncycastle.crypto.generators.OpenBSDBCrypt.generate(char[],byte[],int)
++ public static java.lang.String org.bouncycastle.crypto.generators.OpenBSDBCrypt.generate(java.lang.String,byte[],byte[],int)
++ public static java.lang.String org.bouncycastle.crypto.generators.OpenBSDBCrypt.generate(java.lang.String,char[],byte[],int)
-- protected java.math.BigInteger org.bouncycastle.crypto.generators.RSAKeyPairGenerator.chooseRandomPrime(int,java.math.BigInteger)
++ protected java.math.BigInteger org.bouncycastle.crypto.generators.RSAKeyPairGenerator.chooseRandomPrime(int,java.math.BigInteger,java.math.BigInteger)
++ protected bool org.bouncycastle.crypto.generators.RSAKeyPairGenerator.isProbablePrime(java.math.BigInteger)
++ public X25519KeyPairGenerator org.bouncycastle.crypto.generators.X25519KeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.generators.X25519KeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.crypto.generators.X25519KeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public X448KeyPairGenerator org.bouncycastle.crypto.generators.X448KeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.generators.X448KeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.crypto.generators.X448KeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ protected org.bouncycastle.crypto.params.KeyParameter org.bouncycastle.crypto.kems.ECIESKeyEncapsulation.deriveKey(int,byte[],byte[])
++ public DSTU7564Mac org.bouncycastle.crypto.macs.DSTU7564Mac(int)
++ public int org.bouncycastle.crypto.macs.DSTU7564Mac.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.DSTU7564Mac.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.DSTU7564Mac.getMacSize()
++ public void org.bouncycastle.crypto.macs.DSTU7564Mac.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.DSTU7564Mac.reset()
++ public void org.bouncycastle.crypto.macs.DSTU7564Mac.update(byte)
++ public void org.bouncycastle.crypto.macs.DSTU7564Mac.update(byte[],int,int)
++ public DSTU7624Mac org.bouncycastle.crypto.macs.DSTU7624Mac(int,int)
++ public int org.bouncycastle.crypto.macs.DSTU7624Mac.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.DSTU7624Mac.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.DSTU7624Mac.getMacSize()
++ public void org.bouncycastle.crypto.macs.DSTU7624Mac.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.DSTU7624Mac.reset()
++ public void org.bouncycastle.crypto.macs.DSTU7624Mac.update(byte)
++ public void org.bouncycastle.crypto.macs.DSTU7624Mac.update(byte[],int,int)
++ public KGMac org.bouncycastle.crypto.macs.KGMac(org.bouncycastle.crypto.modes.KGCMBlockCipher)
++ public KGMac org.bouncycastle.crypto.macs.KGMac(org.bouncycastle.crypto.modes.KGCMBlockCipher,int)
++ public int org.bouncycastle.crypto.macs.KGMac.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.KGMac.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.KGMac.getMacSize()
++ public void org.bouncycastle.crypto.macs.KGMac.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.KGMac.reset()
++ public void org.bouncycastle.crypto.macs.KGMac.update(byte)
++ public void org.bouncycastle.crypto.macs.KGMac.update(byte[],int,int)
++ public KMAC org.bouncycastle.crypto.macs.KMAC(int,byte[])
++ public int org.bouncycastle.crypto.macs.KMAC.doFinal(byte[],int)
++ public int org.bouncycastle.crypto.macs.KMAC.doFinal(byte[],int,int)
++ public int org.bouncycastle.crypto.macs.KMAC.doOutput(byte[],int,int)
++ public java.lang.String org.bouncycastle.crypto.macs.KMAC.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.KMAC.getByteLength()
++ public int org.bouncycastle.crypto.macs.KMAC.getDigestSize()
++ public int org.bouncycastle.crypto.macs.KMAC.getMacSize()
++ public void org.bouncycastle.crypto.macs.KMAC.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.KMAC.reset()
++ public void org.bouncycastle.crypto.macs.KMAC.update(byte)
++ public void org.bouncycastle.crypto.macs.KMAC.update(byte[],int,int)
++ public SipHash128 org.bouncycastle.crypto.macs.SipHash128()
++ public SipHash128 org.bouncycastle.crypto.macs.SipHash128(int,int)
++ public J org.bouncycastle.crypto.macs.SipHash128.doFinal()
++ public int org.bouncycastle.crypto.macs.SipHash128.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.SipHash128.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.SipHash128.getMacSize()
++ public void org.bouncycastle.crypto.macs.SipHash128.reset()
++ public Zuc128Mac org.bouncycastle.crypto.macs.Zuc128Mac()
++ public int org.bouncycastle.crypto.macs.Zuc128Mac.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.Zuc128Mac.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.Zuc128Mac.getMacSize()
++ public void org.bouncycastle.crypto.macs.Zuc128Mac.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.Zuc128Mac.reset()
++ public void org.bouncycastle.crypto.macs.Zuc128Mac.update(byte)
++ public void org.bouncycastle.crypto.macs.Zuc128Mac.update(byte[],int,int)
++ public Zuc256Mac org.bouncycastle.crypto.macs.Zuc256Mac(int)
++ public int org.bouncycastle.crypto.macs.Zuc256Mac.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.macs.Zuc256Mac.getAlgorithmName()
++ public int org.bouncycastle.crypto.macs.Zuc256Mac.getMacSize()
++ public void org.bouncycastle.crypto.macs.Zuc256Mac.init(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.macs.Zuc256Mac.reset()
++ public void org.bouncycastle.crypto.macs.Zuc256Mac.update(byte)
++ public void org.bouncycastle.crypto.macs.Zuc256Mac.update(byte[],int,int)
-- public abstract int org.bouncycastle.crypto.modes.AEADBlockCipher.doFinal(byte[],int)
-- public abstract java.lang.String org.bouncycastle.crypto.modes.AEADBlockCipher.getAlgorithmName()
-- public abstract [B org.bouncycastle.crypto.modes.AEADBlockCipher.getMac()
-- public abstract int org.bouncycastle.crypto.modes.AEADBlockCipher.getOutputSize(int)
-- public abstract int org.bouncycastle.crypto.modes.AEADBlockCipher.getUpdateOutputSize(int)
-- public abstract void org.bouncycastle.crypto.modes.AEADBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public abstract void org.bouncycastle.crypto.modes.AEADBlockCipher.processAADByte(byte)
-- public abstract void org.bouncycastle.crypto.modes.AEADBlockCipher.processAADBytes(byte[],int,int)
-- public abstract int org.bouncycastle.crypto.modes.AEADBlockCipher.processByte(byte,byte[],int)
-- public abstract int org.bouncycastle.crypto.modes.AEADBlockCipher.processBytes(byte[],int,int,byte[],int)
-- public abstract void org.bouncycastle.crypto.modes.AEADBlockCipher.reset()
++ public abstract int org.bouncycastle.crypto.modes.AEADCipher.doFinal(byte[],int)
++ public abstract java.lang.String org.bouncycastle.crypto.modes.AEADCipher.getAlgorithmName()
++ public abstract [B org.bouncycastle.crypto.modes.AEADCipher.getMac()
++ public abstract int org.bouncycastle.crypto.modes.AEADCipher.getOutputSize(int)
++ public abstract int org.bouncycastle.crypto.modes.AEADCipher.getUpdateOutputSize(int)
++ public abstract void org.bouncycastle.crypto.modes.AEADCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public abstract void org.bouncycastle.crypto.modes.AEADCipher.processAADByte(byte)
++ public abstract void org.bouncycastle.crypto.modes.AEADCipher.processAADBytes(byte[],int,int)
++ public abstract int org.bouncycastle.crypto.modes.AEADCipher.processByte(byte,byte[],int)
++ public abstract int org.bouncycastle.crypto.modes.AEADCipher.processBytes(byte[],int,int,byte[],int)
++ public abstract void org.bouncycastle.crypto.modes.AEADCipher.reset()
++ public ChaCha20Poly1305 org.bouncycastle.crypto.modes.ChaCha20Poly1305()
++ public ChaCha20Poly1305 org.bouncycastle.crypto.modes.ChaCha20Poly1305(org.bouncycastle.crypto.Mac)
++ public int org.bouncycastle.crypto.modes.ChaCha20Poly1305.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.modes.ChaCha20Poly1305.getAlgorithmName()
++ public [B org.bouncycastle.crypto.modes.ChaCha20Poly1305.getMac()
++ public int org.bouncycastle.crypto.modes.ChaCha20Poly1305.getOutputSize(int)
++ public int org.bouncycastle.crypto.modes.ChaCha20Poly1305.getUpdateOutputSize(int)
++ public void org.bouncycastle.crypto.modes.ChaCha20Poly1305.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.modes.ChaCha20Poly1305.processAADByte(byte)
++ public void org.bouncycastle.crypto.modes.ChaCha20Poly1305.processAADBytes(byte[],int,int)
++ public int org.bouncycastle.crypto.modes.ChaCha20Poly1305.processByte(byte,byte[],int)
++ public int org.bouncycastle.crypto.modes.ChaCha20Poly1305.processBytes(byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.modes.ChaCha20Poly1305.reset()
++ public G3413CBCBlockCipher org.bouncycastle.crypto.modes.G3413CBCBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public java.lang.String org.bouncycastle.crypto.modes.G3413CBCBlockCipher.getAlgorithmName()
++ public int org.bouncycastle.crypto.modes.G3413CBCBlockCipher.getBlockSize()
++ public void org.bouncycastle.crypto.modes.G3413CBCBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.G3413CBCBlockCipher.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.modes.G3413CBCBlockCipher.reset()
++ public G3413CFBBlockCipher org.bouncycastle.crypto.modes.G3413CFBBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public G3413CFBBlockCipher org.bouncycastle.crypto.modes.G3413CFBBlockCipher(org.bouncycastle.crypto.BlockCipher,int)
++ protected B org.bouncycastle.crypto.modes.G3413CFBBlockCipher.calculateByte(byte)
++ public java.lang.String org.bouncycastle.crypto.modes.G3413CFBBlockCipher.getAlgorithmName()
++ public int org.bouncycastle.crypto.modes.G3413CFBBlockCipher.getBlockSize()
++ public void org.bouncycastle.crypto.modes.G3413CFBBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.G3413CFBBlockCipher.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.modes.G3413CFBBlockCipher.reset()
++ public G3413CTRBlockCipher org.bouncycastle.crypto.modes.G3413CTRBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public G3413CTRBlockCipher org.bouncycastle.crypto.modes.G3413CTRBlockCipher(org.bouncycastle.crypto.BlockCipher,int)
++ protected B org.bouncycastle.crypto.modes.G3413CTRBlockCipher.calculateByte(byte)
++ public java.lang.String org.bouncycastle.crypto.modes.G3413CTRBlockCipher.getAlgorithmName()
++ public int org.bouncycastle.crypto.modes.G3413CTRBlockCipher.getBlockSize()
++ public void org.bouncycastle.crypto.modes.G3413CTRBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.G3413CTRBlockCipher.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.modes.G3413CTRBlockCipher.reset()
++ public G3413OFBBlockCipher org.bouncycastle.crypto.modes.G3413OFBBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ protected B org.bouncycastle.crypto.modes.G3413OFBBlockCipher.calculateByte(byte)
++ public java.lang.String org.bouncycastle.crypto.modes.G3413OFBBlockCipher.getAlgorithmName()
++ public int org.bouncycastle.crypto.modes.G3413OFBBlockCipher.getBlockSize()
++ public void org.bouncycastle.crypto.modes.G3413OFBBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.G3413OFBBlockCipher.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.modes.G3413OFBBlockCipher.reset()
++ public KCCMBlockCipher org.bouncycastle.crypto.modes.KCCMBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public KCCMBlockCipher org.bouncycastle.crypto.modes.KCCMBlockCipher(org.bouncycastle.crypto.BlockCipher,int)
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.modes.KCCMBlockCipher.getAlgorithmName()
++ public [B org.bouncycastle.crypto.modes.KCCMBlockCipher.getMac()
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.getOutputSize(int)
++ public org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.modes.KCCMBlockCipher.getUnderlyingCipher()
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.getUpdateOutputSize(int)
++ public void org.bouncycastle.crypto.modes.KCCMBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.modes.KCCMBlockCipher.processAADByte(byte)
++ public void org.bouncycastle.crypto.modes.KCCMBlockCipher.processAADBytes(byte[],int,int)
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.processByte(byte,byte[],int)
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.processBytes(byte[],int,int,byte[],int)
++ public int org.bouncycastle.crypto.modes.KCCMBlockCipher.processPacket(byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.modes.KCCMBlockCipher.reset()
++ public KCTRBlockCipher org.bouncycastle.crypto.modes.KCTRBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ protected B org.bouncycastle.crypto.modes.KCTRBlockCipher.calculateByte(byte)
++ public java.lang.String org.bouncycastle.crypto.modes.KCTRBlockCipher.getAlgorithmName()
++ public int org.bouncycastle.crypto.modes.KCTRBlockCipher.getBlockSize()
++ public void org.bouncycastle.crypto.modes.KCTRBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.KCTRBlockCipher.processBlock(byte[],int,byte[],int)
++ public void org.bouncycastle.crypto.modes.KCTRBlockCipher.reset()
++ public KGCMBlockCipher org.bouncycastle.crypto.modes.KGCMBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public int org.bouncycastle.crypto.modes.KGCMBlockCipher.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.crypto.modes.KGCMBlockCipher.getAlgorithmName()
++ public [B org.bouncycastle.crypto.modes.KGCMBlockCipher.getMac()
++ public int org.bouncycastle.crypto.modes.KGCMBlockCipher.getOutputSize(int)
++ public org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.modes.KGCMBlockCipher.getUnderlyingCipher()
++ public int org.bouncycastle.crypto.modes.KGCMBlockCipher.getUpdateOutputSize(int)
++ public void org.bouncycastle.crypto.modes.KGCMBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.modes.KGCMBlockCipher.processAADByte(byte)
++ public void org.bouncycastle.crypto.modes.KGCMBlockCipher.processAADBytes(byte[],int,int)
++ public int org.bouncycastle.crypto.modes.KGCMBlockCipher.processByte(byte,byte[],int)
++ public int org.bouncycastle.crypto.modes.KGCMBlockCipher.processBytes(byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.modes.KGCMBlockCipher.reset()
++ public KXTSBlockCipher org.bouncycastle.crypto.modes.KXTSBlockCipher(org.bouncycastle.crypto.BlockCipher)
++ public int org.bouncycastle.crypto.modes.KXTSBlockCipher.doFinal(byte[],int)
++ public int org.bouncycastle.crypto.modes.KXTSBlockCipher.getOutputSize(int)
++ protected static J org.bouncycastle.crypto.modes.KXTSBlockCipher.getReductionPolynomial(int)
++ public int org.bouncycastle.crypto.modes.KXTSBlockCipher.getUpdateOutputSize(int)
++ public void org.bouncycastle.crypto.modes.KXTSBlockCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public int org.bouncycastle.crypto.modes.KXTSBlockCipher.processByte(byte,byte[],int)
++ public int org.bouncycastle.crypto.modes.KXTSBlockCipher.processBytes(byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.modes.KXTSBlockCipher.reset()
++ public NISTCTSBlockCipher org.bouncycastle.crypto.modes.NISTCTSBlockCipher(int,org.bouncycastle.crypto.BlockCipher)
++ public int org.bouncycastle.crypto.modes.NISTCTSBlockCipher.doFinal(byte[],int)
++ public int org.bouncycastle.crypto.modes.NISTCTSBlockCipher.getOutputSize(int)
++ public int org.bouncycastle.crypto.modes.NISTCTSBlockCipher.getUpdateOutputSize(int)
++ public int org.bouncycastle.crypto.modes.NISTCTSBlockCipher.processByte(byte,byte[],int)
++ public int org.bouncycastle.crypto.modes.NISTCTSBlockCipher.processBytes(byte[],int,int,byte[],int)
++ public static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(int[])
-- static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(int[],byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(int[],byte[])
-- static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(long[])
++ public static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(long[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(long[],byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asBytes(long[],byte[])
-- static [I org.bouncycastle.crypto.modes.gcm.GCMUtil.asInts(byte[])
++ public static [I org.bouncycastle.crypto.modes.gcm.GCMUtil.asInts(byte[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asInts(byte[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asInts(byte[],int[])
++ public static [J org.bouncycastle.crypto.modes.gcm.GCMUtil.asLongs(byte[])
-- static [J org.bouncycastle.crypto.modes.gcm.GCMUtil.asLongs(byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asLongs(byte[],long[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.asLongs(byte[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.copy(int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.copy(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.divideP(long[],long[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(byte[],byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(byte[],byte[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(int[],int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiply(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP3(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP4(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP7(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(int[],int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.multiplyP8(long[],long[])
++ public static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsBytes()
-- static [B org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsBytes()
++ public static [I org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsInts()
-- static [I org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsInts()
-- static [J org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsLongs()
++ public static [J org.bouncycastle.crypto.modes.gcm.GCMUtil.oneAsLongs()
++ public static [J org.bouncycastle.crypto.modes.gcm.GCMUtil.pAsLongs()
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.square(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[],byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[],byte[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[],int)
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[],int,int)
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],byte[],int,int)
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],int,byte[],int,byte[],int)
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(byte[],int,byte[],int,int)
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(int[],int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(int[],int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(int[],int[],int[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(int[],int[],int[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(long[],long[])
++ public static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(long[],long[],long[])
-- static void org.bouncycastle.crypto.modes.gcm.GCMUtil.xor(long[],long[],long[])
++ public Tables4kGCMMultiplier org.bouncycastle.crypto.modes.gcm.Tables4kGCMMultiplier()
++ public void org.bouncycastle.crypto.modes.gcm.Tables4kGCMMultiplier.init(byte[])
++ public void org.bouncycastle.crypto.modes.gcm.Tables4kGCMMultiplier.multiplyH(byte[])
++ public BasicKGCMMultiplier_128 org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_128()
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_128.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_128.multiplyH(long[])
++ public BasicKGCMMultiplier_256 org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_256()
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_256.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_256.multiplyH(long[])
++ public BasicKGCMMultiplier_512 org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_512()
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_512.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.BasicKGCMMultiplier_512.multiplyH(long[])
++ public abstract void org.bouncycastle.crypto.modes.kgcm.KGCMMultiplier.init(long[])
++ public abstract void org.bouncycastle.crypto.modes.kgcm.KGCMMultiplier.multiplyH(long[])
++ public KGCMUtil_128 org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128()
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.add(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.copy(long[],long[])
++ public static bool org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.equal(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.multiply(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.multiplyX(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.multiplyX8(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.one(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.square(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.x(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_128.zero(long[])
++ public KGCMUtil_256 org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256()
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.add(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.copy(long[],long[])
++ public static bool org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.equal(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.multiply(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.multiplyX(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.multiplyX8(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.one(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.square(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.x(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_256.zero(long[])
++ public KGCMUtil_512 org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512()
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.add(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.copy(long[],long[])
++ public static bool org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.equal(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.multiply(long[],long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.multiplyX(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.multiplyX8(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.one(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.square(long[],long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.x(long[])
++ public static void org.bouncycastle.crypto.modes.kgcm.KGCMUtil_512.zero(long[])
++ public Tables16kKGCMMultiplier_512 org.bouncycastle.crypto.modes.kgcm.Tables16kKGCMMultiplier_512()
++ public void org.bouncycastle.crypto.modes.kgcm.Tables16kKGCMMultiplier_512.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.Tables16kKGCMMultiplier_512.multiplyH(long[])
++ public Tables4kKGCMMultiplier_128 org.bouncycastle.crypto.modes.kgcm.Tables4kKGCMMultiplier_128()
++ public void org.bouncycastle.crypto.modes.kgcm.Tables4kKGCMMultiplier_128.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.Tables4kKGCMMultiplier_128.multiplyH(long[])
++ public Tables8kKGCMMultiplier_256 org.bouncycastle.crypto.modes.kgcm.Tables8kKGCMMultiplier_256()
++ public void org.bouncycastle.crypto.modes.kgcm.Tables8kKGCMMultiplier_256.init(long[])
++ public void org.bouncycastle.crypto.modes.kgcm.Tables8kKGCMMultiplier_256.multiplyH(long[])
++ public Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder()
++ public Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder(int)
++ public org.bouncycastle.crypto.params.Argon2Parameters org.bouncycastle.crypto.params.Argon2Parameters$Builder.build()
++ public void org.bouncycastle.crypto.params.Argon2Parameters$Builder.clear()
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withAdditional(byte[])
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withCharToByteConverter(org.bouncycastle.crypto.CharToByteConverter)
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withIterations(int)
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withMemoryAsKB(int)
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withMemoryPowOfTwo(int)
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withParallelism(int)
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withSalt(byte[])
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withSecret(byte[])
++ public org.bouncycastle.crypto.params.Argon2Parameters$Builder org.bouncycastle.crypto.params.Argon2Parameters$Builder.withVersion(int)
++ public void org.bouncycastle.crypto.params.Argon2Parameters.clear()
++ public [B org.bouncycastle.crypto.params.Argon2Parameters.getAdditional()
++ public org.bouncycastle.crypto.CharToByteConverter org.bouncycastle.crypto.params.Argon2Parameters.getCharToByteConverter()
++ public int org.bouncycastle.crypto.params.Argon2Parameters.getIterations()
++ public int org.bouncycastle.crypto.params.Argon2Parameters.getLanes()
++ public int org.bouncycastle.crypto.params.Argon2Parameters.getMemory()
++ public [B org.bouncycastle.crypto.params.Argon2Parameters.getSalt()
++ public [B org.bouncycastle.crypto.params.Argon2Parameters.getSecret()
++ public int org.bouncycastle.crypto.params.Argon2Parameters.getType()
++ public int org.bouncycastle.crypto.params.Argon2Parameters.getVersion()
++ public static bool org.bouncycastle.crypto.params.DESedeParameters.isReal2Key(byte[],int)
++ public static bool org.bouncycastle.crypto.params.DESedeParameters.isReal3Key(byte[],int)
++ public static bool org.bouncycastle.crypto.params.DESedeParameters.isRealEDEKey(byte[],int)
++ public DHMQVPrivateParameters org.bouncycastle.crypto.params.DHMQVPrivateParameters(org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters)
++ public DHMQVPrivateParameters org.bouncycastle.crypto.params.DHMQVPrivateParameters(org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPublicKeyParameters)
++ public org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.params.DHMQVPrivateParameters.getEphemeralPrivateKey()
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHMQVPrivateParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.params.DHMQVPrivateParameters.getStaticPrivateKey()
++ public DHMQVPublicParameters org.bouncycastle.crypto.params.DHMQVPublicParameters(org.bouncycastle.crypto.params.DHPublicKeyParameters,org.bouncycastle.crypto.params.DHPublicKeyParameters)
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHMQVPublicParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHMQVPublicParameters.getStaticPublicKey()
++ public DHUPrivateParameters org.bouncycastle.crypto.params.DHUPrivateParameters(org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters)
++ public DHUPrivateParameters org.bouncycastle.crypto.params.DHUPrivateParameters(org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters,org.bouncycastle.crypto.params.DHPublicKeyParameters)
++ public org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.params.DHUPrivateParameters.getEphemeralPrivateKey()
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHUPrivateParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.params.DHUPrivateParameters.getStaticPrivateKey()
++ public DHUPublicParameters org.bouncycastle.crypto.params.DHUPublicParameters(org.bouncycastle.crypto.params.DHPublicKeyParameters,org.bouncycastle.crypto.params.DHPublicKeyParameters)
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHUPublicParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.params.DHUPublicParameters.getStaticPublicKey()
++ public DSTU4145Parameters org.bouncycastle.crypto.params.DSTU4145Parameters(org.bouncycastle.crypto.params.ECDomainParameters,byte[])
++ public [B org.bouncycastle.crypto.params.DSTU4145Parameters.getDKE()
++ public ECDHUPrivateParameters org.bouncycastle.crypto.params.ECDHUPrivateParameters(org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters)
++ public ECDHUPrivateParameters org.bouncycastle.crypto.params.ECDHUPrivateParameters(org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)
++ public org.bouncycastle.crypto.params.ECPrivateKeyParameters org.bouncycastle.crypto.params.ECDHUPrivateParameters.getEphemeralPrivateKey()
++ public org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.params.ECDHUPrivateParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.ECPrivateKeyParameters org.bouncycastle.crypto.params.ECDHUPrivateParameters.getStaticPrivateKey()
++ public ECDHUPublicParameters org.bouncycastle.crypto.params.ECDHUPublicParameters(org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)
++ public org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.params.ECDHUPublicParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.params.ECDHUPublicParameters.getStaticPublicKey()
++ public ECDomainParameters org.bouncycastle.crypto.params.ECDomainParameters(org.bouncycastle.asn1.x9.X9ECParameters)
++ public bool org.bouncycastle.crypto.params.ECDomainParameters.equals(java.lang.Object)
++ public synchronized java.math.BigInteger org.bouncycastle.crypto.params.ECDomainParameters.getHInv()
++ public int org.bouncycastle.crypto.params.ECDomainParameters.hashCode()
++ public java.math.BigInteger org.bouncycastle.crypto.params.ECDomainParameters.validatePrivateScalar(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.crypto.params.ECDomainParameters.validatePublicPoint(org.bouncycastle.math.ec.ECPoint)
++ public ECGOST3410Parameters org.bouncycastle.crypto.params.ECGOST3410Parameters(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public ECGOST3410Parameters org.bouncycastle.crypto.params.ECGOST3410Parameters(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.params.ECGOST3410Parameters.getDigestParamSet()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.params.ECGOST3410Parameters.getEncryptionParamSet()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.params.ECGOST3410Parameters.getPublicKeyParamSet()
++ public ECNamedDomainParameters org.bouncycastle.crypto.params.ECNamedDomainParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.x9.X9ECParameters)
++ public ECNamedDomainParameters org.bouncycastle.crypto.params.ECNamedDomainParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.crypto.params.ECDomainParameters)
++ public Ed25519KeyGenerationParameters org.bouncycastle.crypto.params.Ed25519KeyGenerationParameters(java.security.SecureRandom)
++ public Ed25519PrivateKeyParameters org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters(byte[],int)
++ public Ed25519PrivateKeyParameters org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters(java.io.InputStream)
++ public Ed25519PrivateKeyParameters org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters(java.security.SecureRandom)
++ public void org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters.encode(byte[],int)
++ public org.bouncycastle.crypto.params.Ed25519PublicKeyParameters org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters.generatePublicKey()
++ public [B org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters.getEncoded()
++ public void org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters.sign(int,byte[],byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.params.Ed25519PrivateKeyParameters.sign(int,org.bouncycastle.crypto.params.Ed25519PublicKeyParameters,byte[],byte[],int,int,byte[],int)
++ public Ed25519PublicKeyParameters org.bouncycastle.crypto.params.Ed25519PublicKeyParameters(byte[],int)
++ public Ed25519PublicKeyParameters org.bouncycastle.crypto.params.Ed25519PublicKeyParameters(java.io.InputStream)
++ public void org.bouncycastle.crypto.params.Ed25519PublicKeyParameters.encode(byte[],int)
++ public [B org.bouncycastle.crypto.params.Ed25519PublicKeyParameters.getEncoded()
++ public Ed448KeyGenerationParameters org.bouncycastle.crypto.params.Ed448KeyGenerationParameters(java.security.SecureRandom)
++ public Ed448PrivateKeyParameters org.bouncycastle.crypto.params.Ed448PrivateKeyParameters(byte[],int)
++ public Ed448PrivateKeyParameters org.bouncycastle.crypto.params.Ed448PrivateKeyParameters(java.io.InputStream)
++ public Ed448PrivateKeyParameters org.bouncycastle.crypto.params.Ed448PrivateKeyParameters(java.security.SecureRandom)
++ public void org.bouncycastle.crypto.params.Ed448PrivateKeyParameters.encode(byte[],int)
++ public org.bouncycastle.crypto.params.Ed448PublicKeyParameters org.bouncycastle.crypto.params.Ed448PrivateKeyParameters.generatePublicKey()
++ public [B org.bouncycastle.crypto.params.Ed448PrivateKeyParameters.getEncoded()
++ public void org.bouncycastle.crypto.params.Ed448PrivateKeyParameters.sign(int,byte[],byte[],int,int,byte[],int)
++ public void org.bouncycastle.crypto.params.Ed448PrivateKeyParameters.sign(int,org.bouncycastle.crypto.params.Ed448PublicKeyParameters,byte[],byte[],int,int,byte[],int)
++ public Ed448PublicKeyParameters org.bouncycastle.crypto.params.Ed448PublicKeyParameters(byte[],int)
++ public Ed448PublicKeyParameters org.bouncycastle.crypto.params.Ed448PublicKeyParameters(java.io.InputStream)
++ public void org.bouncycastle.crypto.params.Ed448PublicKeyParameters.encode(byte[],int)
++ public [B org.bouncycastle.crypto.params.Ed448PublicKeyParameters.getEncoded()
++ public ParametersWithID org.bouncycastle.crypto.params.ParametersWithID(org.bouncycastle.crypto.CipherParameters,byte[])
++ public [B org.bouncycastle.crypto.params.ParametersWithID.getID()
++ public org.bouncycastle.crypto.CipherParameters org.bouncycastle.crypto.params.ParametersWithID.getParameters()
++ public ParametersWithUKM org.bouncycastle.crypto.params.ParametersWithUKM(org.bouncycastle.crypto.CipherParameters,byte[])
++ public ParametersWithUKM org.bouncycastle.crypto.params.ParametersWithUKM(org.bouncycastle.crypto.CipherParameters,byte[],int,int)
++ public org.bouncycastle.crypto.CipherParameters org.bouncycastle.crypto.params.ParametersWithUKM.getParameters()
++ public [B org.bouncycastle.crypto.params.ParametersWithUKM.getUKM()
-- public [B org.bouncycastle.crypto.params.RC2Parameters.getKey()
++ public SM2KeyExchangePrivateParameters org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters(boolean,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters)
++ public org.bouncycastle.crypto.params.ECPrivateKeyParameters org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters.getEphemeralPrivateKey()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters.getEphemeralPublicPoint()
++ public org.bouncycastle.crypto.params.ECPrivateKeyParameters org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters.getStaticPrivateKey()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters.getStaticPublicPoint()
++ public bool org.bouncycastle.crypto.params.SM2KeyExchangePrivateParameters.isInitiator()
++ public SM2KeyExchangePublicParameters org.bouncycastle.crypto.params.SM2KeyExchangePublicParameters(org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPublicKeyParameters)
++ public org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.params.SM2KeyExchangePublicParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.params.SM2KeyExchangePublicParameters.getStaticPublicKey()
++ public SRP6GroupParameters org.bouncycastle.crypto.params.SRP6GroupParameters(java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.crypto.params.SRP6GroupParameters.getG()
++ public java.math.BigInteger org.bouncycastle.crypto.params.SRP6GroupParameters.getN()
++ public X25519KeyGenerationParameters org.bouncycastle.crypto.params.X25519KeyGenerationParameters(java.security.SecureRandom)
++ public X25519PrivateKeyParameters org.bouncycastle.crypto.params.X25519PrivateKeyParameters(byte[],int)
++ public X25519PrivateKeyParameters org.bouncycastle.crypto.params.X25519PrivateKeyParameters(java.io.InputStream)
++ public X25519PrivateKeyParameters org.bouncycastle.crypto.params.X25519PrivateKeyParameters(java.security.SecureRandom)
++ public void org.bouncycastle.crypto.params.X25519PrivateKeyParameters.encode(byte[],int)
++ public org.bouncycastle.crypto.params.X25519PublicKeyParameters org.bouncycastle.crypto.params.X25519PrivateKeyParameters.generatePublicKey()
++ public void org.bouncycastle.crypto.params.X25519PrivateKeyParameters.generateSecret(org.bouncycastle.crypto.params.X25519PublicKeyParameters,byte[],int)
++ public [B org.bouncycastle.crypto.params.X25519PrivateKeyParameters.getEncoded()
++ public X25519PublicKeyParameters org.bouncycastle.crypto.params.X25519PublicKeyParameters(byte[],int)
++ public X25519PublicKeyParameters org.bouncycastle.crypto.params.X25519PublicKeyParameters(java.io.InputStream)
++ public void org.bouncycastle.crypto.params.X25519PublicKeyParameters.encode(byte[],int)
++ public [B org.bouncycastle.crypto.params.X25519PublicKeyParameters.getEncoded()
++ public X448KeyGenerationParameters org.bouncycastle.crypto.params.X448KeyGenerationParameters(java.security.SecureRandom)
++ public X448PrivateKeyParameters org.bouncycastle.crypto.params.X448PrivateKeyParameters(byte[],int)
++ public X448PrivateKeyParameters org.bouncycastle.crypto.params.X448PrivateKeyParameters(java.io.InputStream)
++ public X448PrivateKeyParameters org.bouncycastle.crypto.params.X448PrivateKeyParameters(java.security.SecureRandom)
++ public void org.bouncycastle.crypto.params.X448PrivateKeyParameters.encode(byte[],int)
++ public org.bouncycastle.crypto.params.X448PublicKeyParameters org.bouncycastle.crypto.params.X448PrivateKeyParameters.generatePublicKey()
++ public void org.bouncycastle.crypto.params.X448PrivateKeyParameters.generateSecret(org.bouncycastle.crypto.params.X448PublicKeyParameters,byte[],int)
++ public [B org.bouncycastle.crypto.params.X448PrivateKeyParameters.getEncoded()
++ public X448PublicKeyParameters org.bouncycastle.crypto.params.X448PublicKeyParameters(byte[],int)
++ public X448PublicKeyParameters org.bouncycastle.crypto.params.X448PublicKeyParameters(java.io.InputStream)
++ public void org.bouncycastle.crypto.params.X448PublicKeyParameters.encode(byte[],int)
++ public [B org.bouncycastle.crypto.params.X448PublicKeyParameters.getEncoded()
++ public XDHUPrivateParameters org.bouncycastle.crypto.params.XDHUPrivateParameters(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public XDHUPrivateParameters org.bouncycastle.crypto.params.XDHUPrivateParameters(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.params.XDHUPrivateParameters.getEphemeralPrivateKey()
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.params.XDHUPrivateParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.params.XDHUPrivateParameters.getStaticPrivateKey()
++ public XDHUPublicParameters org.bouncycastle.crypto.params.XDHUPublicParameters(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.params.XDHUPublicParameters.getEphemeralPublicKey()
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.params.XDHUPublicParameters.getStaticPublicKey()
++ public EntropyUtil org.bouncycastle.crypto.prng.EntropyUtil()
++ public static [B org.bouncycastle.crypto.prng.EntropyUtil.generateSeed(org.bouncycastle.crypto.prng.EntropySource,int)
++ public java.lang.String org.bouncycastle.crypto.prng.SP800SecureRandom.getAlgorithm()
++ public void org.bouncycastle.crypto.prng.SP800SecureRandom.reseed(byte[])
-- public org.bouncycastle.crypto.prng.SP800SecureRandom org.bouncycastle.crypto.prng.SP800SecureRandomBuilder.buildDualEC(org.bouncycastle.crypto.Digest,byte[],boolean)
-- public org.bouncycastle.crypto.prng.SP800SecureRandom org.bouncycastle.crypto.prng.SP800SecureRandomBuilder.buildDualEC(org.bouncycastle.crypto.prng.drbg.DualECPoints[],org.bouncycastle.crypto.Digest,byte[],boolean)
++ public X931RNG org.bouncycastle.crypto.prng.X931RNG(org.bouncycastle.crypto.BlockCipher,byte[],org.bouncycastle.crypto.prng.EntropySource)
++ public [B org.bouncycastle.crypto.prng.X931SecureRandom.generateSeed(int)
++ public void org.bouncycastle.crypto.prng.X931SecureRandom.nextBytes(byte[])
++ public void org.bouncycastle.crypto.prng.X931SecureRandom.setSeed(byte[])
++ public void org.bouncycastle.crypto.prng.X931SecureRandom.setSeed(long)
++ public X931SecureRandomBuilder org.bouncycastle.crypto.prng.X931SecureRandomBuilder()
++ public X931SecureRandomBuilder org.bouncycastle.crypto.prng.X931SecureRandomBuilder(java.security.SecureRandom,boolean)
++ public X931SecureRandomBuilder org.bouncycastle.crypto.prng.X931SecureRandomBuilder(org.bouncycastle.crypto.prng.EntropySourceProvider)
++ public org.bouncycastle.crypto.prng.X931SecureRandom org.bouncycastle.crypto.prng.X931SecureRandomBuilder.build(org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.params.KeyParameter,boolean)
++ public org.bouncycastle.crypto.prng.X931SecureRandomBuilder org.bouncycastle.crypto.prng.X931SecureRandomBuilder.setDateTimeVector(byte[])
++ public DSADigestSigner org.bouncycastle.crypto.signers.DSADigestSigner(org.bouncycastle.crypto.DSAExt,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.signers.DSAEncoding)
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.DSADigestSigner.getOrder()
++ public abstract java.math.BigInteger org.bouncycastle.crypto.signers.DSAEncoding.decode(java.math.BigInteger,byte[])
++ public abstract [B org.bouncycastle.crypto.signers.DSAEncoding.encode(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.crypto.signers.DSASigner.getOrder()
++ public java.math.BigInteger org.bouncycastle.crypto.signers.DSTU4145Signer.getOrder()
++ protected org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.crypto.signers.ECDSASigner.getDenominator(int,org.bouncycastle.math.ec.ECPoint)
++ public java.math.BigInteger org.bouncycastle.crypto.signers.ECDSASigner.getOrder()
++ public java.math.BigInteger org.bouncycastle.crypto.signers.ECGOST3410Signer.getOrder()
++ public ECGOST3410_2012Signer org.bouncycastle.crypto.signers.ECGOST3410_2012Signer()
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.crypto.signers.ECGOST3410_2012Signer.createBasePointMultiplier()
++ public java.math.BigInteger org.bouncycastle.crypto.signers.ECGOST3410_2012Signer.generateSignature(byte[])
++ public java.math.BigInteger org.bouncycastle.crypto.signers.ECGOST3410_2012Signer.getOrder()
++ public void org.bouncycastle.crypto.signers.ECGOST3410_2012Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.crypto.signers.ECGOST3410_2012Signer.verifySignature(byte[],java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.crypto.signers.ECNRSigner.getOrder()
++ public [B org.bouncycastle.crypto.signers.ECNRSigner.getRecoveredMessage(java.math.BigInteger,java.math.BigInteger)
++ public Ed25519Signer org.bouncycastle.crypto.signers.Ed25519Signer()
++ public [B org.bouncycastle.crypto.signers.Ed25519Signer.generateSignature()
++ public void org.bouncycastle.crypto.signers.Ed25519Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.Ed25519Signer.reset()
++ public void org.bouncycastle.crypto.signers.Ed25519Signer.update(byte)
++ public void org.bouncycastle.crypto.signers.Ed25519Signer.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.Ed25519Signer.verifySignature(byte[])
++ public Ed25519ctxSigner org.bouncycastle.crypto.signers.Ed25519ctxSigner(byte[])
++ public [B org.bouncycastle.crypto.signers.Ed25519ctxSigner.generateSignature()
++ public void org.bouncycastle.crypto.signers.Ed25519ctxSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.Ed25519ctxSigner.reset()
++ public void org.bouncycastle.crypto.signers.Ed25519ctxSigner.update(byte)
++ public void org.bouncycastle.crypto.signers.Ed25519ctxSigner.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.Ed25519ctxSigner.verifySignature(byte[])
++ public Ed25519phSigner org.bouncycastle.crypto.signers.Ed25519phSigner(byte[])
++ public [B org.bouncycastle.crypto.signers.Ed25519phSigner.generateSignature()
++ public void org.bouncycastle.crypto.signers.Ed25519phSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.Ed25519phSigner.reset()
++ public void org.bouncycastle.crypto.signers.Ed25519phSigner.update(byte)
++ public void org.bouncycastle.crypto.signers.Ed25519phSigner.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.Ed25519phSigner.verifySignature(byte[])
++ public Ed448Signer org.bouncycastle.crypto.signers.Ed448Signer(byte[])
++ public [B org.bouncycastle.crypto.signers.Ed448Signer.generateSignature()
++ public void org.bouncycastle.crypto.signers.Ed448Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.Ed448Signer.reset()
++ public void org.bouncycastle.crypto.signers.Ed448Signer.update(byte)
++ public void org.bouncycastle.crypto.signers.Ed448Signer.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.Ed448Signer.verifySignature(byte[])
++ public Ed448phSigner org.bouncycastle.crypto.signers.Ed448phSigner(byte[])
++ public [B org.bouncycastle.crypto.signers.Ed448phSigner.generateSignature()
++ public void org.bouncycastle.crypto.signers.Ed448phSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.Ed448phSigner.reset()
++ public void org.bouncycastle.crypto.signers.Ed448phSigner.update(byte)
++ public void org.bouncycastle.crypto.signers.Ed448phSigner.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.Ed448phSigner.verifySignature(byte[])
++ public java.math.BigInteger org.bouncycastle.crypto.signers.GOST3410Signer.getOrder()
++ public ISOTrailers org.bouncycastle.crypto.signers.ISOTrailers()
++ public static java.lang.Integer org.bouncycastle.crypto.signers.ISOTrailers.getTrailer(org.bouncycastle.crypto.Digest)
++ public static bool org.bouncycastle.crypto.signers.ISOTrailers.noTrailerAvailable(org.bouncycastle.crypto.Digest)
++ public PSSSigner org.bouncycastle.crypto.signers.PSSSigner(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,byte[])
++ public PSSSigner org.bouncycastle.crypto.signers.PSSSigner(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,byte[])
++ public PSSSigner org.bouncycastle.crypto.signers.PSSSigner(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,byte[],byte)
++ public PlainDSAEncoding org.bouncycastle.crypto.signers.PlainDSAEncoding()
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.PlainDSAEncoding.checkValue(java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.crypto.signers.PlainDSAEncoding.decode(java.math.BigInteger,byte[])
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.PlainDSAEncoding.decodeValue(java.math.BigInteger,byte[],int,int)
++ public [B org.bouncycastle.crypto.signers.PlainDSAEncoding.encode(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)
++ public SM2Signer org.bouncycastle.crypto.signers.SM2Signer()
++ public SM2Signer org.bouncycastle.crypto.signers.SM2Signer(org.bouncycastle.crypto.Digest)
++ public SM2Signer org.bouncycastle.crypto.signers.SM2Signer(org.bouncycastle.crypto.signers.DSAEncoding)
++ public SM2Signer org.bouncycastle.crypto.signers.SM2Signer(org.bouncycastle.crypto.signers.DSAEncoding,org.bouncycastle.crypto.Digest)
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.SM2Signer.calculateE(java.math.BigInteger,byte[])
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.crypto.signers.SM2Signer.createBasePointMultiplier()
++ public [B org.bouncycastle.crypto.signers.SM2Signer.generateSignature()
++ public void org.bouncycastle.crypto.signers.SM2Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.SM2Signer.reset()
++ public void org.bouncycastle.crypto.signers.SM2Signer.update(byte)
++ public void org.bouncycastle.crypto.signers.SM2Signer.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.SM2Signer.verifySignature(byte[])
++ public StandardDSAEncoding org.bouncycastle.crypto.signers.StandardDSAEncoding()
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.StandardDSAEncoding.checkValue(java.math.BigInteger,java.math.BigInteger)
++ public java.math.BigInteger org.bouncycastle.crypto.signers.StandardDSAEncoding.decode(java.math.BigInteger,byte[])
++ protected java.math.BigInteger org.bouncycastle.crypto.signers.StandardDSAEncoding.decodeValue(java.math.BigInteger,org.bouncycastle.asn1.ASN1Sequence,int)
++ public [B org.bouncycastle.crypto.signers.StandardDSAEncoding.encode(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)
++ protected void org.bouncycastle.crypto.signers.StandardDSAEncoding.encodeValue(java.math.BigInteger,org.bouncycastle.asn1.ASN1EncodableVector,java.math.BigInteger)
++ public X931Signer org.bouncycastle.crypto.signers.X931Signer(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest)
++ public X931Signer org.bouncycastle.crypto.signers.X931Signer(org.bouncycastle.crypto.AsymmetricBlockCipher,org.bouncycastle.crypto.Digest,boolean)
++ public [B org.bouncycastle.crypto.signers.X931Signer.generateSignature()
++ public void org.bouncycastle.crypto.signers.X931Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.crypto.signers.X931Signer.reset()
++ public void org.bouncycastle.crypto.signers.X931Signer.update(byte)
++ public void org.bouncycastle.crypto.signers.X931Signer.update(byte[],int,int)
++ public bool org.bouncycastle.crypto.signers.X931Signer.verifySignature(byte[])
-- public AbstractTlsAgreementCredentials org.bouncycastle.crypto.tls.AbstractTlsAgreementCredentials()
-- public AbstractTlsCipherFactory org.bouncycastle.crypto.tls.AbstractTlsCipherFactory()
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.AbstractTlsCipherFactory.createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- public AbstractTlsClient org.bouncycastle.crypto.tls.AbstractTlsClient()
-- public AbstractTlsClient org.bouncycastle.crypto.tls.AbstractTlsClient(org.bouncycastle.crypto.tls.TlsCipherFactory)
-- public java.util.Hashtable org.bouncycastle.crypto.tls.AbstractTlsClient.getClientExtensions()
-- public org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsClient.getClientHelloRecordLayerVersion()
-- public java.util.Vector org.bouncycastle.crypto.tls.AbstractTlsClient.getClientSupplementalData()
-- public org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsClient.getClientVersion()
-- public org.bouncycastle.crypto.tls.TlsCompression org.bouncycastle.crypto.tls.AbstractTlsClient.getCompression()
-- public [S org.bouncycastle.crypto.tls.AbstractTlsClient.getCompressionMethods()
-- public org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsClient.getMinimumVersion()
-- public org.bouncycastle.crypto.tls.TlsSession org.bouncycastle.crypto.tls.AbstractTlsClient.getSessionToResume()
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.init(org.bouncycastle.crypto.tls.TlsClientContext)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.notifyNewSessionTicket(org.bouncycastle.crypto.tls.NewSessionTicket)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.notifySelectedCipherSuite(int)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.notifySelectedCompressionMethod(short)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.notifyServerVersion(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.notifySessionID(byte[])
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.processServerExtensions(java.util.Hashtable)
-- public void org.bouncycastle.crypto.tls.AbstractTlsClient.processServerSupplementalData(java.util.Vector)
-- public AbstractTlsCredentials org.bouncycastle.crypto.tls.AbstractTlsCredentials()
-- public AbstractTlsEncryptionCredentials org.bouncycastle.crypto.tls.AbstractTlsEncryptionCredentials()
-- protected AbstractTlsKeyExchange org.bouncycastle.crypto.tls.AbstractTlsKeyExchange(int,java.util.Vector)
-- public [B org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.generateServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.init(org.bouncycastle.crypto.tls.TlsContext)
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.processClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.processClientKeyExchange(java.io.InputStream)
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public bool org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.requiresServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.skipClientCredentials()
-- public void org.bouncycastle.crypto.tls.AbstractTlsKeyExchange.skipServerKeyExchange()
-- public AbstractTlsPeer org.bouncycastle.crypto.tls.AbstractTlsPeer()
-- public void org.bouncycastle.crypto.tls.AbstractTlsPeer.notifyAlertRaised(short,short,java.lang.String,java.lang.Exception)
-- public void org.bouncycastle.crypto.tls.AbstractTlsPeer.notifyAlertReceived(short,short)
-- public void org.bouncycastle.crypto.tls.AbstractTlsPeer.notifyHandshakeComplete()
-- public void org.bouncycastle.crypto.tls.AbstractTlsPeer.notifySecureRenegotiation(boolean)
-- public bool org.bouncycastle.crypto.tls.AbstractTlsPeer.shouldUseGMTUnixTime()
-- public AbstractTlsServer org.bouncycastle.crypto.tls.AbstractTlsServer()
-- public AbstractTlsServer org.bouncycastle.crypto.tls.AbstractTlsServer(org.bouncycastle.crypto.tls.TlsCipherFactory)
-- protected bool org.bouncycastle.crypto.tls.AbstractTlsServer.allowEncryptThenMAC()
-- protected bool org.bouncycastle.crypto.tls.AbstractTlsServer.allowTruncatedHMac()
-- protected java.util.Hashtable org.bouncycastle.crypto.tls.AbstractTlsServer.checkServerExtensions()
-- public org.bouncycastle.crypto.tls.CertificateRequest org.bouncycastle.crypto.tls.AbstractTlsServer.getCertificateRequest()
-- public org.bouncycastle.crypto.tls.CertificateStatus org.bouncycastle.crypto.tls.AbstractTlsServer.getCertificateStatus()
-- protected abstract [I org.bouncycastle.crypto.tls.AbstractTlsServer.getCipherSuites()
-- public org.bouncycastle.crypto.tls.TlsCompression org.bouncycastle.crypto.tls.AbstractTlsServer.getCompression()
-- protected [S org.bouncycastle.crypto.tls.AbstractTlsServer.getCompressionMethods()
-- protected org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsServer.getMaximumVersion()
-- protected org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsServer.getMinimumVersion()
-- public org.bouncycastle.crypto.tls.NewSessionTicket org.bouncycastle.crypto.tls.AbstractTlsServer.getNewSessionTicket()
-- public int org.bouncycastle.crypto.tls.AbstractTlsServer.getSelectedCipherSuite()
-- public S org.bouncycastle.crypto.tls.AbstractTlsServer.getSelectedCompressionMethod()
-- public java.util.Hashtable org.bouncycastle.crypto.tls.AbstractTlsServer.getServerExtensions()
-- public java.util.Vector org.bouncycastle.crypto.tls.AbstractTlsServer.getServerSupplementalData()
-- public org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.AbstractTlsServer.getServerVersion()
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.init(org.bouncycastle.crypto.tls.TlsServerContext)
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.notifyClientVersion(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.notifyOfferedCipherSuites(int[])
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.notifyOfferedCompressionMethods(short[])
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.processClientExtensions(java.util.Hashtable)
-- public void org.bouncycastle.crypto.tls.AbstractTlsServer.processClientSupplementalData(java.util.Vector)
-- protected bool org.bouncycastle.crypto.tls.AbstractTlsServer.supportsClientECCCapabilities(int[],short[])
-- public AbstractTlsSigner org.bouncycastle.crypto.tls.AbstractTlsSigner()
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.AbstractTlsSigner.createSigner(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.AbstractTlsSigner.createVerifyer(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public [B org.bouncycastle.crypto.tls.AbstractTlsSigner.generateRawSignature(org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public void org.bouncycastle.crypto.tls.AbstractTlsSigner.init(org.bouncycastle.crypto.tls.TlsContext)
-- public bool org.bouncycastle.crypto.tls.AbstractTlsSigner.verifyRawSignature(byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public AbstractTlsSignerCredentials org.bouncycastle.crypto.tls.AbstractTlsSignerCredentials()
-- public org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.AbstractTlsSignerCredentials.getSignatureAndHashAlgorithm()
-- public AlertDescription org.bouncycastle.crypto.tls.AlertDescription()
-- public AlertLevel org.bouncycastle.crypto.tls.AlertLevel()
-- public AlwaysValidVerifyer org.bouncycastle.crypto.tls.AlwaysValidVerifyer()
-- public bool org.bouncycastle.crypto.tls.AlwaysValidVerifyer.isValid(org.bouncycastle.asn1.x509.Certificate[])
-- public BulkCipherAlgorithm org.bouncycastle.crypto.tls.BulkCipherAlgorithm()
-- public ByteQueue org.bouncycastle.crypto.tls.ByteQueue()
-- public ByteQueue org.bouncycastle.crypto.tls.ByteQueue(int)
-- public void org.bouncycastle.crypto.tls.ByteQueue.addData(byte[],int,int)
-- public static int org.bouncycastle.crypto.tls.ByteQueue.nextTwoPow(int)
-- public void org.bouncycastle.crypto.tls.ByteQueue.read(byte[],int,int,int)
-- public void org.bouncycastle.crypto.tls.ByteQueue.removeData(byte[],int,int,int)
-- public void org.bouncycastle.crypto.tls.ByteQueue.removeData(int)
-- public [B org.bouncycastle.crypto.tls.ByteQueue.removeData(int,int)
-- public int org.bouncycastle.crypto.tls.ByteQueue.size()
-- public CertChainType org.bouncycastle.crypto.tls.CertChainType()
-- public static bool org.bouncycastle.crypto.tls.CertChainType.isValid(short)
-- public Certificate org.bouncycastle.crypto.tls.Certificate(org.bouncycastle.asn1.x509.Certificate[])
-- protected org.bouncycastle.asn1.x509.Certificate org.bouncycastle.crypto.tls.Certificate.cloneCertificateList()
-- public void org.bouncycastle.crypto.tls.Certificate.encode(java.io.OutputStream)
-- public org.bouncycastle.asn1.x509.Certificate org.bouncycastle.crypto.tls.Certificate.getCertificateAt(int)
-- public org.bouncycastle.asn1.x509.Certificate org.bouncycastle.crypto.tls.Certificate.getCertificateList()
-- public org.bouncycastle.asn1.x509.Certificate org.bouncycastle.crypto.tls.Certificate.getCerts()
-- public int org.bouncycastle.crypto.tls.Certificate.getLength()
-- public bool org.bouncycastle.crypto.tls.Certificate.isEmpty()
-- public static org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.Certificate.parse(java.io.InputStream)
-- public CertificateRequest org.bouncycastle.crypto.tls.CertificateRequest(short[],java.util.Vector,java.util.Vector)
-- public void org.bouncycastle.crypto.tls.CertificateRequest.encode(java.io.OutputStream)
-- public java.util.Vector org.bouncycastle.crypto.tls.CertificateRequest.getCertificateAuthorities()
-- public [S org.bouncycastle.crypto.tls.CertificateRequest.getCertificateTypes()
-- public java.util.Vector org.bouncycastle.crypto.tls.CertificateRequest.getSupportedSignatureAlgorithms()
-- public static org.bouncycastle.crypto.tls.CertificateRequest org.bouncycastle.crypto.tls.CertificateRequest.parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream)
-- public CertificateStatus org.bouncycastle.crypto.tls.CertificateStatus(short,java.lang.Object)
-- public void org.bouncycastle.crypto.tls.CertificateStatus.encode(java.io.OutputStream)
-- public org.bouncycastle.asn1.ocsp.OCSPResponse org.bouncycastle.crypto.tls.CertificateStatus.getOCSPResponse()
-- public java.lang.Object org.bouncycastle.crypto.tls.CertificateStatus.getResponse()
-- public S org.bouncycastle.crypto.tls.CertificateStatus.getStatusType()
-- protected static bool org.bouncycastle.crypto.tls.CertificateStatus.isCorrectType(short,java.lang.Object)
-- public static org.bouncycastle.crypto.tls.CertificateStatus org.bouncycastle.crypto.tls.CertificateStatus.parse(java.io.InputStream)
-- public CertificateStatusRequest org.bouncycastle.crypto.tls.CertificateStatusRequest(short,java.lang.Object)
-- public void org.bouncycastle.crypto.tls.CertificateStatusRequest.encode(java.io.OutputStream)
-- public org.bouncycastle.crypto.tls.OCSPStatusRequest org.bouncycastle.crypto.tls.CertificateStatusRequest.getOCSPStatusRequest()
-- public java.lang.Object org.bouncycastle.crypto.tls.CertificateStatusRequest.getRequest()
-- public S org.bouncycastle.crypto.tls.CertificateStatusRequest.getStatusType()
-- protected static bool org.bouncycastle.crypto.tls.CertificateStatusRequest.isCorrectType(short,java.lang.Object)
-- public static org.bouncycastle.crypto.tls.CertificateStatusRequest org.bouncycastle.crypto.tls.CertificateStatusRequest.parse(java.io.InputStream)
-- public CertificateStatusType org.bouncycastle.crypto.tls.CertificateStatusType()
-- public CertificateURL org.bouncycastle.crypto.tls.CertificateURL(short,java.util.Vector)
-- public void org.bouncycastle.crypto.tls.CertificateURL.encode(java.io.OutputStream)
-- public S org.bouncycastle.crypto.tls.CertificateURL.getType()
-- public java.util.Vector org.bouncycastle.crypto.tls.CertificateURL.getURLAndHashList()
-- public static org.bouncycastle.crypto.tls.CertificateURL org.bouncycastle.crypto.tls.CertificateURL.parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream)
-- public abstract bool org.bouncycastle.crypto.tls.CertificateVerifyer.isValid(org.bouncycastle.asn1.x509.Certificate[])
-- public Chacha20Poly1305 org.bouncycastle.crypto.tls.Chacha20Poly1305(org.bouncycastle.crypto.tls.TlsContext)
-- protected [B org.bouncycastle.crypto.tls.Chacha20Poly1305.calculateRecordMAC(org.bouncycastle.crypto.params.KeyParameter,byte[],byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.Chacha20Poly1305.decodeCiphertext(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.Chacha20Poly1305.encodePlaintext(long,short,byte[],int,int)
-- protected [B org.bouncycastle.crypto.tls.Chacha20Poly1305.getAdditionalData(long,short,int)
-- public int org.bouncycastle.crypto.tls.Chacha20Poly1305.getPlaintextLimit(int)
-- protected org.bouncycastle.crypto.params.KeyParameter org.bouncycastle.crypto.tls.Chacha20Poly1305.initRecordMAC(org.bouncycastle.crypto.engines.ChaChaEngine,boolean,long)
-- protected void org.bouncycastle.crypto.tls.Chacha20Poly1305.updateRecordMAC(org.bouncycastle.crypto.Mac,byte[],int,int)
-- public ChangeCipherSpec org.bouncycastle.crypto.tls.ChangeCipherSpec()
-- public CipherSuite org.bouncycastle.crypto.tls.CipherSuite()
-- public CipherType org.bouncycastle.crypto.tls.CipherType()
-- public ClientAuthenticationType org.bouncycastle.crypto.tls.ClientAuthenticationType()
-- public ClientCertificateType org.bouncycastle.crypto.tls.ClientCertificateType()
-- public CompressionMethod org.bouncycastle.crypto.tls.CompressionMethod()
-- public ConnectionEnd org.bouncycastle.crypto.tls.ConnectionEnd()
-- public ContentType org.bouncycastle.crypto.tls.ContentType()
-- protected DTLSClientProtocol$ClientHandshakeState org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState()
-- public DTLSClientProtocol org.bouncycastle.crypto.tls.DTLSClientProtocol(java.security.SecureRandom)
-- protected org.bouncycastle.crypto.tls.DTLSTransport org.bouncycastle.crypto.tls.DTLSClientProtocol.clientHandshake(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.DTLSRecordLayer)
-- public org.bouncycastle.crypto.tls.DTLSTransport org.bouncycastle.crypto.tls.DTLSClientProtocol.connect(org.bouncycastle.crypto.tls.TlsClient,org.bouncycastle.crypto.tls.DatagramTransport)
-- protected [B org.bouncycastle.crypto.tls.DTLSClientProtocol.generateCertificateVerify(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.DigitallySigned)
-- protected [B org.bouncycastle.crypto.tls.DTLSClientProtocol.generateClientHello(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.TlsClient)
-- protected [B org.bouncycastle.crypto.tls.DTLSClientProtocol.generateClientKeyExchange(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState)
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.invalidateSession(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState)
-- protected static [B org.bouncycastle.crypto.tls.DTLSClientProtocol.patchClientHelloWithCookie(byte[],byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processCertificateRequest(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processCertificateStatus(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected [B org.bouncycastle.crypto.tls.DTLSClientProtocol.processHelloVerifyRequest(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processNewSessionTicket(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.DTLSClientProtocol.processServerCertificate(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processServerHello(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processServerKeyExchange(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.processServerSupplementalData(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSClientProtocol.reportServerVersion(org.bouncycastle.crypto.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.crypto.tls.ProtocolVersion)
-- protected DTLSProtocol org.bouncycastle.crypto.tls.DTLSProtocol(java.security.SecureRandom)
-- protected static S org.bouncycastle.crypto.tls.DTLSProtocol.evaluateMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short)
-- protected static [B org.bouncycastle.crypto.tls.DTLSProtocol.generateCertificate(org.bouncycastle.crypto.tls.Certificate)
-- protected static [B org.bouncycastle.crypto.tls.DTLSProtocol.generateSupplementalData(java.util.Vector)
-- protected void org.bouncycastle.crypto.tls.DTLSProtocol.processFinished(byte[],byte[])
-- protected static void org.bouncycastle.crypto.tls.DTLSProtocol.validateSelectedCipherSuite(int,short)
-- protected DTLSServerProtocol$ServerHandshakeState org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState()
-- public DTLSServerProtocol org.bouncycastle.crypto.tls.DTLSServerProtocol(java.security.SecureRandom)
-- public org.bouncycastle.crypto.tls.DTLSTransport org.bouncycastle.crypto.tls.DTLSServerProtocol.accept(org.bouncycastle.crypto.tls.TlsServer,org.bouncycastle.crypto.tls.DatagramTransport)
-- protected bool org.bouncycastle.crypto.tls.DTLSServerProtocol.expectCertificateVerifyMessage(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState)
-- protected [B org.bouncycastle.crypto.tls.DTLSServerProtocol.generateCertificateRequest(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.CertificateRequest)
-- protected [B org.bouncycastle.crypto.tls.DTLSServerProtocol.generateCertificateStatus(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.CertificateStatus)
-- protected [B org.bouncycastle.crypto.tls.DTLSServerProtocol.generateNewSessionTicket(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.NewSessionTicket)
-- protected [B org.bouncycastle.crypto.tls.DTLSServerProtocol.generateServerHello(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState)
-- public bool org.bouncycastle.crypto.tls.DTLSServerProtocol.getVerifyRequests()
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.notifyClientCertificate(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.Certificate)
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.processCertificateVerify(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[],org.bouncycastle.crypto.tls.TlsHandshakeHash)
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.processClientCertificate(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.processClientHello(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.processClientKeyExchange(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[])
-- protected void org.bouncycastle.crypto.tls.DTLSServerProtocol.processClientSupplementalData(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,byte[])
-- protected org.bouncycastle.crypto.tls.DTLSTransport org.bouncycastle.crypto.tls.DTLSServerProtocol.serverHandshake(org.bouncycastle.crypto.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.crypto.tls.DTLSRecordLayer)
-- public void org.bouncycastle.crypto.tls.DTLSServerProtocol.setVerifyRequests(boolean)
-- public void org.bouncycastle.crypto.tls.DTLSTransport.close()
-- public int org.bouncycastle.crypto.tls.DTLSTransport.getReceiveLimit()
-- public int org.bouncycastle.crypto.tls.DTLSTransport.getSendLimit()
-- public int org.bouncycastle.crypto.tls.DTLSTransport.receive(byte[],int,int,int)
-- public void org.bouncycastle.crypto.tls.DTLSTransport.send(byte[],int,int)
-- public abstract void org.bouncycastle.crypto.tls.DatagramTransport.close()
-- public abstract int org.bouncycastle.crypto.tls.DatagramTransport.getReceiveLimit()
-- public abstract int org.bouncycastle.crypto.tls.DatagramTransport.getSendLimit()
-- public abstract int org.bouncycastle.crypto.tls.DatagramTransport.receive(byte[],int,int,int)
-- public abstract void org.bouncycastle.crypto.tls.DatagramTransport.send(byte[],int,int)
-- public DefaultTlsAgreementCredentials org.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials(org.bouncycastle.crypto.tls.Certificate,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public [B org.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials.generateAgreement(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.DefaultTlsAgreementCredentials.getCertificate()
-- public DefaultTlsCipherFactory org.bouncycastle.crypto.tls.DefaultTlsCipherFactory()
-- protected org.bouncycastle.crypto.modes.AEADBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAEADBlockCipher_AES_CCM()
-- protected org.bouncycastle.crypto.modes.AEADBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAEADBlockCipher_AES_GCM()
-- protected org.bouncycastle.crypto.modes.AEADBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAEADBlockCipher_Camellia_GCM()
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAESBlockCipher()
-- protected org.bouncycastle.crypto.tls.TlsBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAESCipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createAESEngine()
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCamelliaBlockCipher()
-- protected org.bouncycastle.crypto.tls.TlsBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCamelliaCipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCamelliaEngine()
-- protected org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createChaCha20Poly1305(org.bouncycastle.crypto.tls.TlsContext)
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.tls.TlsAEADCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCipher_AES_CCM(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.tls.TlsAEADCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCipher_AES_GCM(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.tls.TlsAEADCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createCipher_Camellia_GCM(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createDESedeBlockCipher()
-- protected org.bouncycastle.crypto.tls.TlsBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createDESedeCipher(org.bouncycastle.crypto.tls.TlsContext,int)
-- protected org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createHMACDigest(int)
-- protected org.bouncycastle.crypto.tls.TlsNullCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createNullCipher(org.bouncycastle.crypto.tls.TlsContext,int)
-- protected org.bouncycastle.crypto.tls.TlsStreamCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createRC4Cipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- protected org.bouncycastle.crypto.StreamCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createRC4StreamCipher()
-- protected org.bouncycastle.crypto.BlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createSEEDBlockCipher()
-- protected org.bouncycastle.crypto.tls.TlsBlockCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createSEEDCipher(org.bouncycastle.crypto.tls.TlsContext,int)
-- protected org.bouncycastle.crypto.tls.TlsStreamCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createSalsa20Cipher(org.bouncycastle.crypto.tls.TlsContext,int,int,int)
-- protected org.bouncycastle.crypto.StreamCipher org.bouncycastle.crypto.tls.DefaultTlsCipherFactory.createSalsa20StreamCipher(int)
-- public DefaultTlsClient org.bouncycastle.crypto.tls.DefaultTlsClient()
-- public DefaultTlsClient org.bouncycastle.crypto.tls.DefaultTlsClient(org.bouncycastle.crypto.tls.TlsCipherFactory)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.createDHEKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.createDHKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.createECDHEKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.createECDHKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.createRSAKeyExchange()
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.DefaultTlsClient.getCipher()
-- public [I org.bouncycastle.crypto.tls.DefaultTlsClient.getCipherSuites()
-- public org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsClient.getKeyExchange()
-- public DefaultTlsEncryptionCredentials org.bouncycastle.crypto.tls.DefaultTlsEncryptionCredentials(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.Certificate,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public [B org.bouncycastle.crypto.tls.DefaultTlsEncryptionCredentials.decryptPreMasterSecret(byte[])
-- public org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.DefaultTlsEncryptionCredentials.getCertificate()
-- public DefaultTlsServer org.bouncycastle.crypto.tls.DefaultTlsServer()
-- public DefaultTlsServer org.bouncycastle.crypto.tls.DefaultTlsServer(org.bouncycastle.crypto.tls.TlsCipherFactory)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.createDHEKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.createDHKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.createECDHEKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.createECDHKeyExchange(int)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.createRSAKeyExchange()
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.DefaultTlsServer.getCipher()
-- protected [I org.bouncycastle.crypto.tls.DefaultTlsServer.getCipherSuites()
-- public org.bouncycastle.crypto.tls.TlsCredentials org.bouncycastle.crypto.tls.DefaultTlsServer.getCredentials()
-- protected org.bouncycastle.crypto.params.DHParameters org.bouncycastle.crypto.tls.DefaultTlsServer.getDHParameters()
-- public org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.DefaultTlsServer.getKeyExchange()
-- protected org.bouncycastle.crypto.tls.TlsEncryptionCredentials org.bouncycastle.crypto.tls.DefaultTlsServer.getRSAEncryptionCredentials()
-- protected org.bouncycastle.crypto.tls.TlsSignerCredentials org.bouncycastle.crypto.tls.DefaultTlsServer.getRSASignerCredentials()
-- public DefaultTlsSignerCredentials org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.Certificate,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public DefaultTlsSignerCredentials org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.Certificate,org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm)
-- public [B org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials.generateCertificateSignature(byte[])
-- public org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials.getCertificate()
-- public org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.DefaultTlsSignerCredentials.getSignatureAndHashAlgorithm()
-- public DigestAlgorithm org.bouncycastle.crypto.tls.DigestAlgorithm()
-- public DigitallySigned org.bouncycastle.crypto.tls.DigitallySigned(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[])
-- public void org.bouncycastle.crypto.tls.DigitallySigned.encode(java.io.OutputStream)
-- public org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.DigitallySigned.getAlgorithm()
-- public [B org.bouncycastle.crypto.tls.DigitallySigned.getSignature()
-- public static org.bouncycastle.crypto.tls.DigitallySigned org.bouncycastle.crypto.tls.DigitallySigned.parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream)
-- public ECBasisType org.bouncycastle.crypto.tls.ECBasisType()
-- public static bool org.bouncycastle.crypto.tls.ECBasisType.isValid(short)
-- public ECCurveType org.bouncycastle.crypto.tls.ECCurveType()
-- public ECPointFormat org.bouncycastle.crypto.tls.ECPointFormat()
-- public EncryptionAlgorithm org.bouncycastle.crypto.tls.EncryptionAlgorithm()
-- public ExporterLabel org.bouncycastle.crypto.tls.ExporterLabel()
-- public ExtensionType org.bouncycastle.crypto.tls.ExtensionType()
-- public HandshakeType org.bouncycastle.crypto.tls.HandshakeType()
-- public HashAlgorithm org.bouncycastle.crypto.tls.HashAlgorithm()
-- public HeartbeatExtension org.bouncycastle.crypto.tls.HeartbeatExtension(short)
-- public void org.bouncycastle.crypto.tls.HeartbeatExtension.encode(java.io.OutputStream)
-- public S org.bouncycastle.crypto.tls.HeartbeatExtension.getMode()
-- public static org.bouncycastle.crypto.tls.HeartbeatExtension org.bouncycastle.crypto.tls.HeartbeatExtension.parse(java.io.InputStream)
-- public HeartbeatMessage org.bouncycastle.crypto.tls.HeartbeatMessage(short,byte[],int)
-- public void org.bouncycastle.crypto.tls.HeartbeatMessage.encode(org.bouncycastle.crypto.tls.TlsContext,java.io.OutputStream)
-- public static org.bouncycastle.crypto.tls.HeartbeatMessage org.bouncycastle.crypto.tls.HeartbeatMessage.parse(java.io.InputStream)
-- public HeartbeatMessageType org.bouncycastle.crypto.tls.HeartbeatMessageType()
-- public static bool org.bouncycastle.crypto.tls.HeartbeatMessageType.isValid(short)
-- public HeartbeatMode org.bouncycastle.crypto.tls.HeartbeatMode()
-- public static bool org.bouncycastle.crypto.tls.HeartbeatMode.isValid(short)
-- public KeyExchangeAlgorithm org.bouncycastle.crypto.tls.KeyExchangeAlgorithm()
-- public LegacyTlsAuthentication org.bouncycastle.crypto.tls.LegacyTlsAuthentication(org.bouncycastle.crypto.tls.CertificateVerifyer)
-- public void org.bouncycastle.crypto.tls.LegacyTlsAuthentication.notifyServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public LegacyTlsClient org.bouncycastle.crypto.tls.LegacyTlsClient(org.bouncycastle.crypto.tls.CertificateVerifyer)
-- public org.bouncycastle.crypto.tls.TlsAuthentication org.bouncycastle.crypto.tls.LegacyTlsClient.getAuthentication()
-- public MACAlgorithm org.bouncycastle.crypto.tls.MACAlgorithm()
-- public MaxFragmentLength org.bouncycastle.crypto.tls.MaxFragmentLength()
-- public static bool org.bouncycastle.crypto.tls.MaxFragmentLength.isValid(short)
-- public NameType org.bouncycastle.crypto.tls.NameType()
-- public NamedCurve org.bouncycastle.crypto.tls.NamedCurve()
-- public static bool org.bouncycastle.crypto.tls.NamedCurve.isValid(int)
-- public static bool org.bouncycastle.crypto.tls.NamedCurve.refersToASpecificNamedCurve(int)
-- public NewSessionTicket org.bouncycastle.crypto.tls.NewSessionTicket(long,byte[])
-- public void org.bouncycastle.crypto.tls.NewSessionTicket.encode(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.NewSessionTicket.getTicket()
-- public J org.bouncycastle.crypto.tls.NewSessionTicket.getTicketLifetimeHint()
-- public static org.bouncycastle.crypto.tls.NewSessionTicket org.bouncycastle.crypto.tls.NewSessionTicket.parse(java.io.InputStream)
-- public OCSPStatusRequest org.bouncycastle.crypto.tls.OCSPStatusRequest(java.util.Vector,org.bouncycastle.asn1.x509.Extensions)
-- public void org.bouncycastle.crypto.tls.OCSPStatusRequest.encode(java.io.OutputStream)
-- public org.bouncycastle.asn1.x509.Extensions org.bouncycastle.crypto.tls.OCSPStatusRequest.getRequestExtensions()
-- public java.util.Vector org.bouncycastle.crypto.tls.OCSPStatusRequest.getResponderIDList()
-- public static org.bouncycastle.crypto.tls.OCSPStatusRequest org.bouncycastle.crypto.tls.OCSPStatusRequest.parse(java.io.InputStream)
-- public PRFAlgorithm org.bouncycastle.crypto.tls.PRFAlgorithm()
-- public PSKTlsClient org.bouncycastle.crypto.tls.PSKTlsClient(org.bouncycastle.crypto.tls.TlsCipherFactory,org.bouncycastle.crypto.tls.TlsPSKIdentity)
-- public PSKTlsClient org.bouncycastle.crypto.tls.PSKTlsClient(org.bouncycastle.crypto.tls.TlsPSKIdentity)
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.PSKTlsClient.createPSKKeyExchange(int)
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.PSKTlsClient.getCipher()
-- public [I org.bouncycastle.crypto.tls.PSKTlsClient.getCipherSuites()
-- public org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.PSKTlsClient.getKeyExchange()
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.equals(java.lang.Object)
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.equals(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public static org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.ProtocolVersion.get(int,int)
-- public org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.ProtocolVersion.getEquivalentTLSVersion()
-- public int org.bouncycastle.crypto.tls.ProtocolVersion.getFullVersion()
-- public int org.bouncycastle.crypto.tls.ProtocolVersion.getMajorVersion()
-- public int org.bouncycastle.crypto.tls.ProtocolVersion.getMinorVersion()
-- public int org.bouncycastle.crypto.tls.ProtocolVersion.hashCode()
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.isDTLS()
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.isEqualOrEarlierVersionOf(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.isLaterVersionOf(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.isSSL()
-- public bool org.bouncycastle.crypto.tls.ProtocolVersion.isTLS()
-- public java.lang.String org.bouncycastle.crypto.tls.ProtocolVersion.toString()
-- public SRPTlsClient org.bouncycastle.crypto.tls.SRPTlsClient(byte[],byte[])
-- public SRPTlsClient org.bouncycastle.crypto.tls.SRPTlsClient(org.bouncycastle.crypto.tls.TlsCipherFactory,byte[],byte[])
-- protected org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.SRPTlsClient.createSRPKeyExchange(int)
-- public org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.SRPTlsClient.getCipher()
-- public [I org.bouncycastle.crypto.tls.SRPTlsClient.getCipherSuites()
-- public java.util.Hashtable org.bouncycastle.crypto.tls.SRPTlsClient.getClientExtensions()
-- public org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.SRPTlsClient.getKeyExchange()
-- public void org.bouncycastle.crypto.tls.SRPTlsClient.processServerExtensions(java.util.Hashtable)
-- public SRTPProtectionProfile org.bouncycastle.crypto.tls.SRTPProtectionProfile()
-- public SSL3Mac org.bouncycastle.crypto.tls.SSL3Mac(org.bouncycastle.crypto.Digest)
-- public int org.bouncycastle.crypto.tls.SSL3Mac.doFinal(byte[],int)
-- public java.lang.String org.bouncycastle.crypto.tls.SSL3Mac.getAlgorithmName()
-- public int org.bouncycastle.crypto.tls.SSL3Mac.getMacSize()
-- public org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.SSL3Mac.getUnderlyingDigest()
-- public void org.bouncycastle.crypto.tls.SSL3Mac.init(org.bouncycastle.crypto.CipherParameters)
-- public void org.bouncycastle.crypto.tls.SSL3Mac.reset()
-- public void org.bouncycastle.crypto.tls.SSL3Mac.update(byte)
-- public void org.bouncycastle.crypto.tls.SSL3Mac.update(byte[],int,int)
-- public SecurityParameters org.bouncycastle.crypto.tls.SecurityParameters()
-- public int org.bouncycastle.crypto.tls.SecurityParameters.getCipherSuite()
-- public [B org.bouncycastle.crypto.tls.SecurityParameters.getClientRandom()
-- public S org.bouncycastle.crypto.tls.SecurityParameters.getCompressionAlgorithm()
-- public int org.bouncycastle.crypto.tls.SecurityParameters.getEntity()
-- public [B org.bouncycastle.crypto.tls.SecurityParameters.getMasterSecret()
-- public int org.bouncycastle.crypto.tls.SecurityParameters.getPrfAlgorithm()
-- public [B org.bouncycastle.crypto.tls.SecurityParameters.getServerRandom()
-- public int org.bouncycastle.crypto.tls.SecurityParameters.getVerifyDataLength()
-- public ServerDHParams org.bouncycastle.crypto.tls.ServerDHParams(org.bouncycastle.crypto.params.DHPublicKeyParameters)
-- public void org.bouncycastle.crypto.tls.ServerDHParams.encode(java.io.OutputStream)
-- public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.tls.ServerDHParams.getPublicKey()
-- public static org.bouncycastle.crypto.tls.ServerDHParams org.bouncycastle.crypto.tls.ServerDHParams.parse(java.io.InputStream)
-- public ServerName org.bouncycastle.crypto.tls.ServerName(short,java.lang.Object)
-- public void org.bouncycastle.crypto.tls.ServerName.encode(java.io.OutputStream)
-- public java.lang.String org.bouncycastle.crypto.tls.ServerName.getHostName()
-- public java.lang.Object org.bouncycastle.crypto.tls.ServerName.getName()
-- public S org.bouncycastle.crypto.tls.ServerName.getNameType()
-- protected static bool org.bouncycastle.crypto.tls.ServerName.isCorrectType(short,java.lang.Object)
-- public static org.bouncycastle.crypto.tls.ServerName org.bouncycastle.crypto.tls.ServerName.parse(java.io.InputStream)
-- public ServerNameList org.bouncycastle.crypto.tls.ServerNameList(java.util.Vector)
-- public void org.bouncycastle.crypto.tls.ServerNameList.encode(java.io.OutputStream)
-- public java.util.Vector org.bouncycastle.crypto.tls.ServerNameList.getServerNameList()
-- public static org.bouncycastle.crypto.tls.ServerNameList org.bouncycastle.crypto.tls.ServerNameList.parse(java.io.InputStream)
-- public ServerOnlyTlsAuthentication org.bouncycastle.crypto.tls.ServerOnlyTlsAuthentication()
-- public final org.bouncycastle.crypto.tls.TlsCredentials org.bouncycastle.crypto.tls.ServerOnlyTlsAuthentication.getClientCredentials(org.bouncycastle.crypto.tls.CertificateRequest)
-- public SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder()
-- public org.bouncycastle.crypto.tls.SessionParameters org.bouncycastle.crypto.tls.SessionParameters$Builder.build()
-- public org.bouncycastle.crypto.tls.SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder.setCipherSuite(int)
-- public org.bouncycastle.crypto.tls.SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder.setCompressionAlgorithm(short)
-- public org.bouncycastle.crypto.tls.SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder.setMasterSecret(byte[])
-- public org.bouncycastle.crypto.tls.SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder.setPeerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public org.bouncycastle.crypto.tls.SessionParameters$Builder org.bouncycastle.crypto.tls.SessionParameters$Builder.setServerExtensions(java.util.Hashtable)
-- public void org.bouncycastle.crypto.tls.SessionParameters.clear()
-- public org.bouncycastle.crypto.tls.SessionParameters org.bouncycastle.crypto.tls.SessionParameters.copy()
-- public int org.bouncycastle.crypto.tls.SessionParameters.getCipherSuite()
-- public S org.bouncycastle.crypto.tls.SessionParameters.getCompressionAlgorithm()
-- public [B org.bouncycastle.crypto.tls.SessionParameters.getMasterSecret()
-- public org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.SessionParameters.getPeerCertificate()
-- public java.util.Hashtable org.bouncycastle.crypto.tls.SessionParameters.readServerExtensions()
-- public SignatureAlgorithm org.bouncycastle.crypto.tls.SignatureAlgorithm()
-- public SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm(short,short)
-- public void org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.encode(java.io.OutputStream)
-- public bool org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.equals(java.lang.Object)
-- public S org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.getHash()
-- public S org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.getSignature()
-- public int org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.hashCode()
-- public static org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm.parse(java.io.InputStream)
-- public SupplementalDataEntry org.bouncycastle.crypto.tls.SupplementalDataEntry(int,byte[])
-- public [B org.bouncycastle.crypto.tls.SupplementalDataEntry.getData()
-- public int org.bouncycastle.crypto.tls.SupplementalDataEntry.getDataType()
-- public SupplementalDataType org.bouncycastle.crypto.tls.SupplementalDataType()
-- public TlsAEADCipher org.bouncycastle.crypto.tls.TlsAEADCipher(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.modes.AEADBlockCipher,org.bouncycastle.crypto.modes.AEADBlockCipher,int,int)
-- public [B org.bouncycastle.crypto.tls.TlsAEADCipher.decodeCiphertext(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsAEADCipher.encodePlaintext(long,short,byte[],int,int)
-- protected [B org.bouncycastle.crypto.tls.TlsAEADCipher.getAdditionalData(long,short,int)
-- public int org.bouncycastle.crypto.tls.TlsAEADCipher.getPlaintextLimit(int)
-- public abstract [B org.bouncycastle.crypto.tls.TlsAgreementCredentials.generateAgreement(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract org.bouncycastle.crypto.tls.TlsCredentials org.bouncycastle.crypto.tls.TlsAuthentication.getClientCredentials(org.bouncycastle.crypto.tls.CertificateRequest)
-- public abstract void org.bouncycastle.crypto.tls.TlsAuthentication.notifyServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public TlsBlockCipher org.bouncycastle.crypto.tls.TlsBlockCipher(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.BlockCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,int)
-- protected int org.bouncycastle.crypto.tls.TlsBlockCipher.checkPaddingConstantTime(byte[],int,int,int,int)
-- protected int org.bouncycastle.crypto.tls.TlsBlockCipher.chooseExtraPadBlocks(java.security.SecureRandom,int)
-- public [B org.bouncycastle.crypto.tls.TlsBlockCipher.decodeCiphertext(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsBlockCipher.encodePlaintext(long,short,byte[],int,int)
-- public int org.bouncycastle.crypto.tls.TlsBlockCipher.getPlaintextLimit(int)
-- public org.bouncycastle.crypto.tls.TlsMac org.bouncycastle.crypto.tls.TlsBlockCipher.getReadMac()
-- public org.bouncycastle.crypto.tls.TlsMac org.bouncycastle.crypto.tls.TlsBlockCipher.getWriteMac()
-- protected int org.bouncycastle.crypto.tls.TlsBlockCipher.lowestBitSet(int)
-- public abstract [B org.bouncycastle.crypto.tls.TlsCipher.decodeCiphertext(long,short,byte[],int,int)
-- public abstract [B org.bouncycastle.crypto.tls.TlsCipher.encodePlaintext(long,short,byte[],int,int)
-- public abstract int org.bouncycastle.crypto.tls.TlsCipher.getPlaintextLimit(int)
-- public abstract org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.TlsCipherFactory.createCipher(org.bouncycastle.crypto.tls.TlsContext,int,int)
-- public abstract org.bouncycastle.crypto.tls.TlsAuthentication org.bouncycastle.crypto.tls.TlsClient.getAuthentication()
-- public abstract [I org.bouncycastle.crypto.tls.TlsClient.getCipherSuites()
-- public abstract java.util.Hashtable org.bouncycastle.crypto.tls.TlsClient.getClientExtensions()
-- public abstract org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsClient.getClientHelloRecordLayerVersion()
-- public abstract java.util.Vector org.bouncycastle.crypto.tls.TlsClient.getClientSupplementalData()
-- public abstract org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsClient.getClientVersion()
-- public abstract [S org.bouncycastle.crypto.tls.TlsClient.getCompressionMethods()
-- public abstract org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.TlsClient.getKeyExchange()
-- public abstract org.bouncycastle.crypto.tls.TlsSession org.bouncycastle.crypto.tls.TlsClient.getSessionToResume()
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.init(org.bouncycastle.crypto.tls.TlsClientContext)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.notifyNewSessionTicket(org.bouncycastle.crypto.tls.NewSessionTicket)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.notifySelectedCipherSuite(int)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.notifySelectedCompressionMethod(short)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.notifyServerVersion(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.notifySessionID(byte[])
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.processServerExtensions(java.util.Hashtable)
-- public abstract void org.bouncycastle.crypto.tls.TlsClient.processServerSupplementalData(java.util.Vector)
-- public TlsClientProtocol org.bouncycastle.crypto.tls.TlsClientProtocol(java.io.InputStream,java.io.OutputStream)
-- public TlsClientProtocol org.bouncycastle.crypto.tls.TlsClientProtocol(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.cleanupHandshake()
-- public void org.bouncycastle.crypto.tls.TlsClientProtocol.connect(org.bouncycastle.crypto.tls.TlsClient)
-- protected org.bouncycastle.crypto.tls.AbstractTlsContext org.bouncycastle.crypto.tls.TlsClientProtocol.getContext()
-- protected org.bouncycastle.crypto.tls.TlsPeer org.bouncycastle.crypto.tls.TlsClientProtocol.getPeer()
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.handleHandshakeMessage(short,byte[])
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.handleSupplementalData(java.util.Vector)
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.receiveNewSessionTicketMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.receiveServerHelloMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.sendCertificateVerifyMessage(org.bouncycastle.crypto.tls.DigitallySigned)
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.sendClientHelloMessage()
-- protected void org.bouncycastle.crypto.tls.TlsClientProtocol.sendClientKeyExchangeMessage()
-- public abstract java.io.OutputStream org.bouncycastle.crypto.tls.TlsCompression.compress(java.io.OutputStream)
-- public abstract java.io.OutputStream org.bouncycastle.crypto.tls.TlsCompression.decompress(java.io.OutputStream)
-- public abstract [B org.bouncycastle.crypto.tls.TlsContext.exportKeyingMaterial(java.lang.String,byte[],int)
-- public abstract org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsContext.getClientVersion()
-- public abstract org.bouncycastle.crypto.prng.RandomGenerator org.bouncycastle.crypto.tls.TlsContext.getNonceRandomGenerator()
-- public abstract org.bouncycastle.crypto.tls.TlsSession org.bouncycastle.crypto.tls.TlsContext.getResumableSession()
-- public abstract java.security.SecureRandom org.bouncycastle.crypto.tls.TlsContext.getSecureRandom()
-- public abstract org.bouncycastle.crypto.tls.SecurityParameters org.bouncycastle.crypto.tls.TlsContext.getSecurityParameters()
-- public abstract org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsContext.getServerVersion()
-- public abstract java.lang.Object org.bouncycastle.crypto.tls.TlsContext.getUserObject()
-- public abstract bool org.bouncycastle.crypto.tls.TlsContext.isServer()
-- public abstract void org.bouncycastle.crypto.tls.TlsContext.setUserObject(java.lang.Object)
-- public abstract org.bouncycastle.crypto.tls.Certificate org.bouncycastle.crypto.tls.TlsCredentials.getCertificate()
-- public TlsDHEKeyExchange org.bouncycastle.crypto.tls.TlsDHEKeyExchange(int,java.util.Vector,org.bouncycastle.crypto.params.DHParameters)
-- public [B org.bouncycastle.crypto.tls.TlsDHEKeyExchange.generateServerKeyExchange()
-- protected org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsDHEKeyExchange.initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters)
-- public void org.bouncycastle.crypto.tls.TlsDHEKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsDHEKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public TlsDHKeyExchange org.bouncycastle.crypto.tls.TlsDHKeyExchange(int,java.util.Vector,org.bouncycastle.crypto.params.DHParameters)
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.TlsDHKeyExchange.generatePremasterSecret()
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.init(org.bouncycastle.crypto.tls.TlsContext)
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public bool org.bouncycastle.crypto.tls.TlsDHKeyExchange.requiresServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.skipServerCredentials()
-- public void org.bouncycastle.crypto.tls.TlsDHKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- public TlsDHUtils org.bouncycastle.crypto.tls.TlsDHUtils()
-- public static bool org.bouncycastle.crypto.tls.TlsDHUtils.areCompatibleParameters(org.bouncycastle.crypto.params.DHParameters,org.bouncycastle.crypto.params.DHParameters)
-- public static [B org.bouncycastle.crypto.tls.TlsDHUtils.calculateDHBasicAgreement(org.bouncycastle.crypto.params.DHPublicKeyParameters,org.bouncycastle.crypto.params.DHPrivateKeyParameters)
-- public static org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.tls.TlsDHUtils.generateDHKeyPair(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters)
-- public static org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.tls.TlsDHUtils.generateEphemeralClientKeyExchange(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters,java.io.OutputStream)
-- public static org.bouncycastle.crypto.params.DHPrivateKeyParameters org.bouncycastle.crypto.tls.TlsDHUtils.generateEphemeralServerKeyExchange(java.security.SecureRandom,org.bouncycastle.crypto.params.DHParameters,java.io.OutputStream)
-- public static java.math.BigInteger org.bouncycastle.crypto.tls.TlsDHUtils.readDHParameter(java.io.InputStream)
-- public static org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.crypto.tls.TlsDHUtils.validateDHPublicKey(org.bouncycastle.crypto.params.DHPublicKeyParameters)
-- public static void org.bouncycastle.crypto.tls.TlsDHUtils.writeDHParameter(java.math.BigInteger,java.io.OutputStream)
-- public TlsDSASigner org.bouncycastle.crypto.tls.TlsDSASigner()
-- protected abstract org.bouncycastle.crypto.DSA org.bouncycastle.crypto.tls.TlsDSASigner.createDSAImpl(short)
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsDSASigner.createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsDSASigner.createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public [B org.bouncycastle.crypto.tls.TlsDSASigner.generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- protected abstract S org.bouncycastle.crypto.tls.TlsDSASigner.getSignatureAlgorithm()
-- protected org.bouncycastle.crypto.CipherParameters org.bouncycastle.crypto.tls.TlsDSASigner.makeInitParameters(boolean,org.bouncycastle.crypto.CipherParameters)
-- protected org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsDSASigner.makeSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.bouncycastle.crypto.CipherParameters)
-- public bool org.bouncycastle.crypto.tls.TlsDSASigner.verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public TlsDSSSigner org.bouncycastle.crypto.tls.TlsDSSSigner()
-- protected org.bouncycastle.crypto.DSA org.bouncycastle.crypto.tls.TlsDSSSigner.createDSAImpl(short)
-- protected S org.bouncycastle.crypto.tls.TlsDSSSigner.getSignatureAlgorithm()
-- public bool org.bouncycastle.crypto.tls.TlsDSSSigner.isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public TlsECCUtils org.bouncycastle.crypto.tls.TlsECCUtils()
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.addSupportedEllipticCurvesExtension(java.util.Hashtable,int[])
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.addSupportedPointFormatsExtension(java.util.Hashtable,short[])
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.areOnSameCurve(org.bouncycastle.crypto.params.ECDomainParameters,org.bouncycastle.crypto.params.ECDomainParameters)
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.calculateECDHBasicAgreement(org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.crypto.params.ECPrivateKeyParameters)
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.containsECCCipherSuites(int[])
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.createSupportedEllipticCurvesExtension(int[])
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.createSupportedPointFormatsExtension(short[])
-- public static java.math.BigInteger org.bouncycastle.crypto.tls.TlsECCUtils.deserializeECFieldElement(int,byte[])
-- public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.crypto.tls.TlsECCUtils.deserializeECPoint(short[],org.bouncycastle.math.ec.ECCurve,byte[])
-- public static org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.tls.TlsECCUtils.deserializeECPublicKey(short[],org.bouncycastle.crypto.params.ECDomainParameters,byte[])
-- public static org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.crypto.tls.TlsECCUtils.generateECKeyPair(java.security.SecureRandom,org.bouncycastle.crypto.params.ECDomainParameters)
-- public static org.bouncycastle.crypto.params.ECPrivateKeyParameters org.bouncycastle.crypto.tls.TlsECCUtils.generateEphemeralClientKeyExchange(java.security.SecureRandom,short[],org.bouncycastle.crypto.params.ECDomainParameters,java.io.OutputStream)
-- public static java.lang.String org.bouncycastle.crypto.tls.TlsECCUtils.getNameOfNamedCurve(int)
-- public static org.bouncycastle.crypto.params.ECDomainParameters org.bouncycastle.crypto.tls.TlsECCUtils.getParametersForNamedCurve(int)
-- public static [I org.bouncycastle.crypto.tls.TlsECCUtils.getSupportedEllipticCurvesExtension(java.util.Hashtable)
-- public static [S org.bouncycastle.crypto.tls.TlsECCUtils.getSupportedPointFormatsExtension(java.util.Hashtable)
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.hasAnySupportedNamedCurves()
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.isCompressionPreferred(short[],short)
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.isECCCipherSuite(int)
-- public static bool org.bouncycastle.crypto.tls.TlsECCUtils.isSupportedNamedCurve(int)
-- public static int org.bouncycastle.crypto.tls.TlsECCUtils.readECExponent(int,java.io.InputStream)
-- public static java.math.BigInteger org.bouncycastle.crypto.tls.TlsECCUtils.readECFieldElement(int,java.io.InputStream)
-- public static java.math.BigInteger org.bouncycastle.crypto.tls.TlsECCUtils.readECParameter(java.io.InputStream)
-- public static org.bouncycastle.crypto.params.ECDomainParameters org.bouncycastle.crypto.tls.TlsECCUtils.readECParameters(int[],short[],java.io.InputStream)
-- public static [I org.bouncycastle.crypto.tls.TlsECCUtils.readSupportedEllipticCurvesExtension(byte[])
-- public static [S org.bouncycastle.crypto.tls.TlsECCUtils.readSupportedPointFormatsExtension(byte[])
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.serializeECFieldElement(int,java.math.BigInteger)
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.serializeECPoint(short[],org.bouncycastle.math.ec.ECPoint)
-- public static [B org.bouncycastle.crypto.tls.TlsECCUtils.serializeECPublicKey(short[],org.bouncycastle.crypto.params.ECPublicKeyParameters)
-- public static org.bouncycastle.crypto.params.ECPublicKeyParameters org.bouncycastle.crypto.tls.TlsECCUtils.validateECPublicKey(org.bouncycastle.crypto.params.ECPublicKeyParameters)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeECExponent(int,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeECFieldElement(int,java.math.BigInteger,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeECFieldElement(org.bouncycastle.math.ec.ECFieldElement,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeECParameter(java.math.BigInteger,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeECPoint(short[],org.bouncycastle.math.ec.ECPoint,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeExplicitECParameters(short[],org.bouncycastle.crypto.params.ECDomainParameters,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsECCUtils.writeNamedECParameters(int,java.io.OutputStream)
-- public TlsECDHEKeyExchange org.bouncycastle.crypto.tls.TlsECDHEKeyExchange(int,java.util.Vector,int[],short[],short[])
-- public [B org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.generateServerKeyExchange()
-- protected org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters)
-- public void org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public void org.bouncycastle.crypto.tls.TlsECDHEKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- public TlsECDHKeyExchange org.bouncycastle.crypto.tls.TlsECDHKeyExchange(int,java.util.Vector,int[],short[],short[])
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.TlsECDHKeyExchange.generatePremasterSecret()
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.init(org.bouncycastle.crypto.tls.TlsContext)
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.processClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.processClientKeyExchange(java.io.InputStream)
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public bool org.bouncycastle.crypto.tls.TlsECDHKeyExchange.requiresServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.skipServerCredentials()
-- public void org.bouncycastle.crypto.tls.TlsECDHKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- public TlsECDSASigner org.bouncycastle.crypto.tls.TlsECDSASigner()
-- protected org.bouncycastle.crypto.DSA org.bouncycastle.crypto.tls.TlsECDSASigner.createDSAImpl(short)
-- protected S org.bouncycastle.crypto.tls.TlsECDSASigner.getSignatureAlgorithm()
-- public bool org.bouncycastle.crypto.tls.TlsECDSASigner.isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract [B org.bouncycastle.crypto.tls.TlsEncryptionCredentials.decryptPreMasterSecret(byte[])
-- public TlsExtensionsUtils org.bouncycastle.crypto.tls.TlsExtensionsUtils()
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addEncryptThenMACExtension(java.util.Hashtable)
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addHeartbeatExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.HeartbeatExtension)
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addMaxFragmentLengthExtension(java.util.Hashtable,short)
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addServerNameExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.ServerNameList)
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addStatusRequestExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.CertificateStatusRequest)
-- public static void org.bouncycastle.crypto.tls.TlsExtensionsUtils.addTruncatedHMacExtension(java.util.Hashtable)
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createEmptyExtensionData()
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createEncryptThenMACExtension()
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createHeartbeatExtension(org.bouncycastle.crypto.tls.HeartbeatExtension)
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createMaxFragmentLengthExtension(short)
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createServerNameExtension(org.bouncycastle.crypto.tls.ServerNameList)
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createStatusRequestExtension(org.bouncycastle.crypto.tls.CertificateStatusRequest)
-- public static [B org.bouncycastle.crypto.tls.TlsExtensionsUtils.createTruncatedHMacExtension()
-- public static java.util.Hashtable org.bouncycastle.crypto.tls.TlsExtensionsUtils.ensureExtensionsInitialised(java.util.Hashtable)
-- public static org.bouncycastle.crypto.tls.HeartbeatExtension org.bouncycastle.crypto.tls.TlsExtensionsUtils.getHeartbeatExtension(java.util.Hashtable)
-- public static S org.bouncycastle.crypto.tls.TlsExtensionsUtils.getMaxFragmentLengthExtension(java.util.Hashtable)
-- public static org.bouncycastle.crypto.tls.ServerNameList org.bouncycastle.crypto.tls.TlsExtensionsUtils.getServerNameExtension(java.util.Hashtable)
-- public static org.bouncycastle.crypto.tls.CertificateStatusRequest org.bouncycastle.crypto.tls.TlsExtensionsUtils.getStatusRequestExtension(java.util.Hashtable)
-- public static bool org.bouncycastle.crypto.tls.TlsExtensionsUtils.hasEncryptThenMACExtension(java.util.Hashtable)
-- public static bool org.bouncycastle.crypto.tls.TlsExtensionsUtils.hasTruncatedHMacExtension(java.util.Hashtable)
-- public static bool org.bouncycastle.crypto.tls.TlsExtensionsUtils.readEncryptThenMACExtension(byte[])
-- public static org.bouncycastle.crypto.tls.HeartbeatExtension org.bouncycastle.crypto.tls.TlsExtensionsUtils.readHeartbeatExtension(byte[])
-- public static S org.bouncycastle.crypto.tls.TlsExtensionsUtils.readMaxFragmentLengthExtension(byte[])
-- public static org.bouncycastle.crypto.tls.ServerNameList org.bouncycastle.crypto.tls.TlsExtensionsUtils.readServerNameExtension(byte[])
-- public static org.bouncycastle.crypto.tls.CertificateStatusRequest org.bouncycastle.crypto.tls.TlsExtensionsUtils.readStatusRequestExtension(byte[])
-- public static bool org.bouncycastle.crypto.tls.TlsExtensionsUtils.readTruncatedHMacExtension(byte[])
-- public TlsFatalAlert org.bouncycastle.crypto.tls.TlsFatalAlert(short)
-- public S org.bouncycastle.crypto.tls.TlsFatalAlert.getAlertDescription()
-- public abstract org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.TlsHandshakeHash.forkPRFHash()
-- public abstract [B org.bouncycastle.crypto.tls.TlsHandshakeHash.getFinalHash(short)
-- public abstract void org.bouncycastle.crypto.tls.TlsHandshakeHash.init(org.bouncycastle.crypto.tls.TlsContext)
-- public abstract org.bouncycastle.crypto.tls.TlsHandshakeHash org.bouncycastle.crypto.tls.TlsHandshakeHash.notifyPRFDetermined()
-- public abstract void org.bouncycastle.crypto.tls.TlsHandshakeHash.sealHashAlgorithms()
-- public abstract org.bouncycastle.crypto.tls.TlsHandshakeHash org.bouncycastle.crypto.tls.TlsHandshakeHash.stopTracking()
-- public abstract void org.bouncycastle.crypto.tls.TlsHandshakeHash.trackHashAlgorithm(short)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- public abstract [B org.bouncycastle.crypto.tls.TlsKeyExchange.generatePremasterSecret()
-- public abstract [B org.bouncycastle.crypto.tls.TlsKeyExchange.generateServerKeyExchange()
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.init(org.bouncycastle.crypto.tls.TlsContext)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processClientKeyExchange(java.io.InputStream)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public abstract bool org.bouncycastle.crypto.tls.TlsKeyExchange.requiresServerKeyExchange()
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.skipClientCredentials()
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.skipServerCredentials()
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.skipServerKeyExchange()
-- public abstract void org.bouncycastle.crypto.tls.TlsKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- public TlsMac org.bouncycastle.crypto.tls.TlsMac(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.Digest,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsMac.calculateMac(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsMac.calculateMacConstantTime(long,short,byte[],int,int,int,byte[])
-- protected int org.bouncycastle.crypto.tls.TlsMac.getDigestBlockCount(int)
-- public [B org.bouncycastle.crypto.tls.TlsMac.getMACSecret()
-- public int org.bouncycastle.crypto.tls.TlsMac.getSize()
-- protected [B org.bouncycastle.crypto.tls.TlsMac.truncate(byte[])
-- public TlsNullCipher org.bouncycastle.crypto.tls.TlsNullCipher(org.bouncycastle.crypto.tls.TlsContext)
-- public TlsNullCipher org.bouncycastle.crypto.tls.TlsNullCipher(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest)
-- public [B org.bouncycastle.crypto.tls.TlsNullCipher.decodeCiphertext(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsNullCipher.encodePlaintext(long,short,byte[],int,int)
-- public int org.bouncycastle.crypto.tls.TlsNullCipher.getPlaintextLimit(int)
-- public TlsNullCompression org.bouncycastle.crypto.tls.TlsNullCompression()
-- public java.io.OutputStream org.bouncycastle.crypto.tls.TlsNullCompression.compress(java.io.OutputStream)
-- public java.io.OutputStream org.bouncycastle.crypto.tls.TlsNullCompression.decompress(java.io.OutputStream)
-- public abstract [B org.bouncycastle.crypto.tls.TlsPSKIdentity.getPSK()
-- public abstract [B org.bouncycastle.crypto.tls.TlsPSKIdentity.getPSKIdentity()
-- public abstract void org.bouncycastle.crypto.tls.TlsPSKIdentity.notifyIdentityHint(byte[])
-- public abstract void org.bouncycastle.crypto.tls.TlsPSKIdentity.skipIdentityHint()
-- public TlsPSKKeyExchange org.bouncycastle.crypto.tls.TlsPSKKeyExchange(int,java.util.Vector,org.bouncycastle.crypto.tls.TlsPSKIdentity,org.bouncycastle.crypto.params.DHParameters,int[],short[],short[])
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- protected [B org.bouncycastle.crypto.tls.TlsPSKKeyExchange.generateOtherSecret(int)
-- public [B org.bouncycastle.crypto.tls.TlsPSKKeyExchange.generatePremasterSecret()
-- public [B org.bouncycastle.crypto.tls.TlsPSKKeyExchange.generateServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public bool org.bouncycastle.crypto.tls.TlsPSKKeyExchange.requiresServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.skipServerCredentials()
-- public void org.bouncycastle.crypto.tls.TlsPSKKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- protected org.bouncycastle.crypto.params.RSAKeyParameters org.bouncycastle.crypto.tls.TlsPSKKeyExchange.validateRSAPublicKey(org.bouncycastle.crypto.params.RSAKeyParameters)
-- public abstract org.bouncycastle.crypto.tls.TlsCipher org.bouncycastle.crypto.tls.TlsPeer.getCipher()
-- public abstract org.bouncycastle.crypto.tls.TlsCompression org.bouncycastle.crypto.tls.TlsPeer.getCompression()
-- public abstract void org.bouncycastle.crypto.tls.TlsPeer.notifyAlertRaised(short,short,java.lang.String,java.lang.Exception)
-- public abstract void org.bouncycastle.crypto.tls.TlsPeer.notifyAlertReceived(short,short)
-- public abstract void org.bouncycastle.crypto.tls.TlsPeer.notifyHandshakeComplete()
-- public abstract void org.bouncycastle.crypto.tls.TlsPeer.notifySecureRenegotiation(boolean)
-- public abstract bool org.bouncycastle.crypto.tls.TlsPeer.shouldUseGMTUnixTime()
-- public TlsProtocol org.bouncycastle.crypto.tls.TlsProtocol(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)
-- protected int org.bouncycastle.crypto.tls.TlsProtocol.applicationDataAvailable()
-- protected static void org.bouncycastle.crypto.tls.TlsProtocol.assertEmpty(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.cleanupHandshake()
-- public void org.bouncycastle.crypto.tls.TlsProtocol.close()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.completeHandshake()
-- protected static [B org.bouncycastle.crypto.tls.TlsProtocol.createRandomBlock(boolean,org.bouncycastle.crypto.prng.RandomGenerator)
-- protected static [B org.bouncycastle.crypto.tls.TlsProtocol.createRenegotiationInfo(byte[])
-- protected [B org.bouncycastle.crypto.tls.TlsProtocol.createVerifyData(boolean)
-- protected static void org.bouncycastle.crypto.tls.TlsProtocol.establishMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsKeyExchange)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.failWithError(short,short,java.lang.String,java.lang.Exception)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.flush()
-- protected abstract org.bouncycastle.crypto.tls.AbstractTlsContext org.bouncycastle.crypto.tls.TlsProtocol.getContext()
-- protected static [B org.bouncycastle.crypto.tls.TlsProtocol.getCurrentPRFHash(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsHandshakeHash,byte[])
-- public java.io.InputStream org.bouncycastle.crypto.tls.TlsProtocol.getInputStream()
-- public java.io.OutputStream org.bouncycastle.crypto.tls.TlsProtocol.getOutputStream()
-- protected static int org.bouncycastle.crypto.tls.TlsProtocol.getPRFAlgorithm(org.bouncycastle.crypto.tls.TlsContext,int)
-- protected abstract org.bouncycastle.crypto.tls.TlsPeer org.bouncycastle.crypto.tls.TlsProtocol.getPeer()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.handleChangeCipherSpecMessage()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.handleClose(boolean)
-- protected abstract void org.bouncycastle.crypto.tls.TlsProtocol.handleHandshakeMessage(short,byte[])
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.handleWarningMessage(short)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.invalidateSession()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.processFinishedMessage(java.io.ByteArrayInputStream)
-- protected S org.bouncycastle.crypto.tls.TlsProtocol.processMaxFragmentLengthExtension(java.util.Hashtable,java.util.Hashtable,short)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.processRecord(short,byte[],int,int)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.raiseAlert(short,short,java.lang.String,java.lang.Exception)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.raiseWarning(short,java.lang.String)
-- protected int org.bouncycastle.crypto.tls.TlsProtocol.readApplicationData(byte[],int,int)
-- protected static java.util.Hashtable org.bouncycastle.crypto.tls.TlsProtocol.readExtensions(java.io.ByteArrayInputStream)
-- protected static java.util.Vector org.bouncycastle.crypto.tls.TlsProtocol.readSupplementalDataMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.safeReadRecord()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.safeWriteRecord(short,byte[],int,int)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.sendCertificateMessage(org.bouncycastle.crypto.tls.Certificate)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.sendChangeCipherSpecMessage()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.sendFinishedMessage()
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.sendSupplementalDataMessage(java.util.Vector)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.writeData(byte[],int,int)
-- protected static void org.bouncycastle.crypto.tls.TlsProtocol.writeExtensions(java.io.OutputStream,java.util.Hashtable)
-- protected void org.bouncycastle.crypto.tls.TlsProtocol.writeHandshakeMessage(byte[],int,int)
-- protected static void org.bouncycastle.crypto.tls.TlsProtocol.writeSupplementalData(java.io.OutputStream,java.util.Vector)
-- public TlsProtocolHandler org.bouncycastle.crypto.tls.TlsProtocolHandler(java.io.InputStream,java.io.OutputStream)
-- public TlsProtocolHandler org.bouncycastle.crypto.tls.TlsProtocolHandler(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)
-- public TlsRSAKeyExchange org.bouncycastle.crypto.tls.TlsRSAKeyExchange(java.util.Vector)
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.TlsRSAKeyExchange.generatePremasterSecret()
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.processClientKeyExchange(java.io.InputStream)
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.processServerCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.skipServerCredentials()
-- public void org.bouncycastle.crypto.tls.TlsRSAKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- protected org.bouncycastle.crypto.params.RSAKeyParameters org.bouncycastle.crypto.tls.TlsRSAKeyExchange.validateRSAPublicKey(org.bouncycastle.crypto.params.RSAKeyParameters)
-- public TlsRSASigner org.bouncycastle.crypto.tls.TlsRSASigner()
-- protected org.bouncycastle.crypto.AsymmetricBlockCipher org.bouncycastle.crypto.tls.TlsRSASigner.createRSAImpl()
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsRSASigner.createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsRSASigner.createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public [B org.bouncycastle.crypto.tls.TlsRSASigner.generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public bool org.bouncycastle.crypto.tls.TlsRSASigner.isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- protected org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsRSASigner.makeSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,boolean,boolean,org.bouncycastle.crypto.CipherParameters)
-- public bool org.bouncycastle.crypto.tls.TlsRSASigner.verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public TlsRSAUtils org.bouncycastle.crypto.tls.TlsRSAUtils()
-- public static [B org.bouncycastle.crypto.tls.TlsRSAUtils.generateEncryptedPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.params.RSAKeyParameters,java.io.OutputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsRSAUtils.safeDecryptPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.params.RSAKeyParameters,byte[])
-- public static [B org.bouncycastle.crypto.tls.TlsRSAUtils.safeDecryptPreMasterSecret(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.tls.TlsEncryptionCredentials,byte[])
-- public TlsSRPKeyExchange org.bouncycastle.crypto.tls.TlsSRPKeyExchange(int,java.util.Vector,byte[],byte[])
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.generateClientKeyExchange(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.TlsSRPKeyExchange.generatePremasterSecret()
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.init(org.bouncycastle.crypto.tls.TlsContext)
-- protected org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsSRPKeyExchange.initVerifyer(org.bouncycastle.crypto.tls.TlsSigner,org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.tls.SecurityParameters)
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.processClientCredentials(org.bouncycastle.crypto.tls.TlsCredentials)
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.processServerCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.processServerKeyExchange(java.io.InputStream)
-- public bool org.bouncycastle.crypto.tls.TlsSRPKeyExchange.requiresServerKeyExchange()
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.skipServerCredentials()
-- public void org.bouncycastle.crypto.tls.TlsSRPKeyExchange.validateCertificateRequest(org.bouncycastle.crypto.tls.CertificateRequest)
-- public TlsSRPUtils org.bouncycastle.crypto.tls.TlsSRPUtils()
-- public static void org.bouncycastle.crypto.tls.TlsSRPUtils.addSRPExtension(java.util.Hashtable,byte[])
-- public static [B org.bouncycastle.crypto.tls.TlsSRPUtils.createSRPExtension(byte[])
-- public static [B org.bouncycastle.crypto.tls.TlsSRPUtils.getSRPExtension(java.util.Hashtable)
-- public static [B org.bouncycastle.crypto.tls.TlsSRPUtils.readSRPExtension(byte[])
-- public TlsSRTPUtils org.bouncycastle.crypto.tls.TlsSRTPUtils()
-- public static void org.bouncycastle.crypto.tls.TlsSRTPUtils.addUseSRTPExtension(java.util.Hashtable,org.bouncycastle.crypto.tls.UseSRTPData)
-- public static [B org.bouncycastle.crypto.tls.TlsSRTPUtils.createUseSRTPExtension(org.bouncycastle.crypto.tls.UseSRTPData)
-- public static org.bouncycastle.crypto.tls.UseSRTPData org.bouncycastle.crypto.tls.TlsSRTPUtils.getUseSRTPExtension(java.util.Hashtable)
-- public static org.bouncycastle.crypto.tls.UseSRTPData org.bouncycastle.crypto.tls.TlsSRTPUtils.readUseSRTPExtension(byte[])
-- public abstract org.bouncycastle.crypto.tls.CertificateRequest org.bouncycastle.crypto.tls.TlsServer.getCertificateRequest()
-- public abstract org.bouncycastle.crypto.tls.CertificateStatus org.bouncycastle.crypto.tls.TlsServer.getCertificateStatus()
-- public abstract org.bouncycastle.crypto.tls.TlsCredentials org.bouncycastle.crypto.tls.TlsServer.getCredentials()
-- public abstract org.bouncycastle.crypto.tls.TlsKeyExchange org.bouncycastle.crypto.tls.TlsServer.getKeyExchange()
-- public abstract org.bouncycastle.crypto.tls.NewSessionTicket org.bouncycastle.crypto.tls.TlsServer.getNewSessionTicket()
-- public abstract int org.bouncycastle.crypto.tls.TlsServer.getSelectedCipherSuite()
-- public abstract S org.bouncycastle.crypto.tls.TlsServer.getSelectedCompressionMethod()
-- public abstract java.util.Hashtable org.bouncycastle.crypto.tls.TlsServer.getServerExtensions()
-- public abstract java.util.Vector org.bouncycastle.crypto.tls.TlsServer.getServerSupplementalData()
-- public abstract org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsServer.getServerVersion()
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.init(org.bouncycastle.crypto.tls.TlsServerContext)
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.notifyClientVersion(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.notifyOfferedCipherSuites(int[])
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.notifyOfferedCompressionMethods(short[])
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.processClientExtensions(java.util.Hashtable)
-- public abstract void org.bouncycastle.crypto.tls.TlsServer.processClientSupplementalData(java.util.Vector)
-- public TlsServerProtocol org.bouncycastle.crypto.tls.TlsServerProtocol(java.io.InputStream,java.io.OutputStream,java.security.SecureRandom)
-- public void org.bouncycastle.crypto.tls.TlsServerProtocol.accept(org.bouncycastle.crypto.tls.TlsServer)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.cleanupHandshake()
-- protected bool org.bouncycastle.crypto.tls.TlsServerProtocol.expectCertificateVerifyMessage()
-- protected org.bouncycastle.crypto.tls.AbstractTlsContext org.bouncycastle.crypto.tls.TlsServerProtocol.getContext()
-- protected org.bouncycastle.crypto.tls.TlsPeer org.bouncycastle.crypto.tls.TlsServerProtocol.getPeer()
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.handleHandshakeMessage(short,byte[])
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.handleWarningMessage(short)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.notifyClientCertificate(org.bouncycastle.crypto.tls.Certificate)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.receiveCertificateMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.receiveCertificateVerifyMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.receiveClientHelloMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendCertificateRequestMessage(org.bouncycastle.crypto.tls.CertificateRequest)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendCertificateStatusMessage(org.bouncycastle.crypto.tls.CertificateStatus)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendNewSessionTicketMessage(org.bouncycastle.crypto.tls.NewSessionTicket)
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendServerHelloDoneMessage()
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendServerHelloMessage()
-- protected void org.bouncycastle.crypto.tls.TlsServerProtocol.sendServerKeyExchangeMessage(byte[])
-- public abstract org.bouncycastle.crypto.tls.SessionParameters org.bouncycastle.crypto.tls.TlsSession.exportSessionParameters()
-- public abstract [B org.bouncycastle.crypto.tls.TlsSession.getSessionID()
-- public abstract void org.bouncycastle.crypto.tls.TlsSession.invalidate()
-- public abstract bool org.bouncycastle.crypto.tls.TlsSession.isResumable()
-- public abstract org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsSigner.createSigner(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsSigner.createSigner(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsSigner.createVerifyer(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract org.bouncycastle.crypto.Signer org.bouncycastle.crypto.tls.TlsSigner.createVerifyer(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract [B org.bouncycastle.crypto.tls.TlsSigner.generateRawSignature(org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public abstract [B org.bouncycastle.crypto.tls.TlsSigner.generateRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public abstract void org.bouncycastle.crypto.tls.TlsSigner.init(org.bouncycastle.crypto.tls.TlsContext)
-- public abstract bool org.bouncycastle.crypto.tls.TlsSigner.isValidPublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
-- public abstract bool org.bouncycastle.crypto.tls.TlsSigner.verifyRawSignature(byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public abstract bool org.bouncycastle.crypto.tls.TlsSigner.verifyRawSignature(org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm,byte[],org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
-- public abstract [B org.bouncycastle.crypto.tls.TlsSignerCredentials.generateCertificateSignature(byte[])
-- public abstract org.bouncycastle.crypto.tls.SignatureAndHashAlgorithm org.bouncycastle.crypto.tls.TlsSignerCredentials.getSignatureAndHashAlgorithm()
-- public TlsStreamCipher org.bouncycastle.crypto.tls.TlsStreamCipher(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.StreamCipher,org.bouncycastle.crypto.StreamCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,int)
-- public TlsStreamCipher org.bouncycastle.crypto.tls.TlsStreamCipher(org.bouncycastle.crypto.tls.TlsContext,org.bouncycastle.crypto.StreamCipher,org.bouncycastle.crypto.StreamCipher,org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest,int,boolean)
-- public [B org.bouncycastle.crypto.tls.TlsStreamCipher.decodeCiphertext(long,short,byte[],int,int)
-- public [B org.bouncycastle.crypto.tls.TlsStreamCipher.encodePlaintext(long,short,byte[],int,int)
-- public int org.bouncycastle.crypto.tls.TlsStreamCipher.getPlaintextLimit(int)
-- public TlsUtils org.bouncycastle.crypto.tls.TlsUtils()
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.PRF(org.bouncycastle.crypto.tls.TlsContext,byte[],java.lang.String,byte[],int)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.PRF_legacy(byte[],java.lang.String,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.addSignatureAlgorithmsExtension(java.util.Hashtable,java.util.Vector)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint16(int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint16(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint24(int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint24(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint32(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint48(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint64(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint8(int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint8(long)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.checkUint8(short)
-- public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.TlsUtils.cloneHash(short,org.bouncycastle.crypto.Digest)
-- public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.TlsUtils.clonePRFHash(int,org.bouncycastle.crypto.Digest)
-- public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.TlsUtils.createHash(short)
-- public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.tls.TlsUtils.createPRFHash(int)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.createSignatureAlgorithmsExtension(java.util.Vector)
-- public static org.bouncycastle.crypto.tls.TlsSigner org.bouncycastle.crypto.tls.TlsUtils.createTlsSigner(short)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.encodeOpaque8(byte[])
-- public static void org.bouncycastle.crypto.tls.TlsUtils.encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.encodeUint16ArrayWithUint16Length(int[])
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.encodeUint8ArrayWithUint8Length(short[])
-- public static int org.bouncycastle.crypto.tls.TlsUtils.getCipherType(int)
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.getDefaultDSSSignatureAlgorithms()
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.getDefaultECDSASignatureAlgorithms()
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.getDefaultRSASignatureAlgorithms()
-- public static int org.bouncycastle.crypto.tls.TlsUtils.getEncryptionAlgorithm(int)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.getExtensionData(java.util.Hashtable,java.lang.Integer)
-- public static S org.bouncycastle.crypto.tls.TlsUtils.getHashAlgorithmForPRFAlgorithm(int)
-- public static org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsUtils.getMinimumVersion(int)
-- public static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.tls.TlsUtils.getOIDForHashAlgorithm(short)
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.getSignatureAlgorithmsExtension(java.util.Hashtable)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.hasExpectedEmptyExtensionData(java.util.Hashtable,java.lang.Integer,short)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.hasSigningCapability(short)
-- public static org.bouncycastle.crypto.tls.TlsSession org.bouncycastle.crypto.tls.TlsUtils.importSession(byte[],org.bouncycastle.crypto.tls.SessionParameters)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isAEADCipherSuite(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isBlockCipherSuite(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isSSL(org.bouncycastle.crypto.tls.TlsContext)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isSignatureAlgorithmsExtensionAllowed(org.bouncycastle.crypto.tls.ProtocolVersion)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isStreamCipherSuite(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isTLSv11(org.bouncycastle.crypto.tls.TlsContext)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isTLSv12(org.bouncycastle.crypto.tls.TlsContext)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidCipherSuiteForVersion(int,org.bouncycastle.crypto.tls.ProtocolVersion)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint16(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint16(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint24(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint24(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint32(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint48(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint64(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint8(int)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint8(long)
-- public static bool org.bouncycastle.crypto.tls.TlsUtils.isValidUint8(short)
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)
-- public static org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.crypto.tls.TlsUtils.readASN1Object(byte[])
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.readAllOrNothing(int,java.io.InputStream)
-- public static org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.crypto.tls.TlsUtils.readDERObject(byte[])
-- public static void org.bouncycastle.crypto.tls.TlsUtils.readFully(byte[],java.io.InputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.readFully(int,java.io.InputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.readOpaque16(java.io.InputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.readOpaque24(java.io.InputStream)
-- public static [B org.bouncycastle.crypto.tls.TlsUtils.readOpaque8(java.io.InputStream)
-- public static java.util.Vector org.bouncycastle.crypto.tls.TlsUtils.readSignatureAlgorithmsExtension(byte[])
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readUint16(byte[],int)
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readUint16(java.io.InputStream)
-- public static [I org.bouncycastle.crypto.tls.TlsUtils.readUint16Array(int,java.io.InputStream)
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readUint24(byte[],int)
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readUint24(java.io.InputStream)
-- public static J org.bouncycastle.crypto.tls.TlsUtils.readUint32(byte[],int)
-- public static J org.bouncycastle.crypto.tls.TlsUtils.readUint32(java.io.InputStream)
-- public static J org.bouncycastle.crypto.tls.TlsUtils.readUint48(byte[],int)
-- public static J org.bouncycastle.crypto.tls.TlsUtils.readUint48(java.io.InputStream)
-- public static S org.bouncycastle.crypto.tls.TlsUtils.readUint8(byte[],int)
-- public static S org.bouncycastle.crypto.tls.TlsUtils.readUint8(java.io.InputStream)
-- public static [S org.bouncycastle.crypto.tls.TlsUtils.readUint8Array(int,java.io.InputStream)
-- public static org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsUtils.readVersion(byte[],int)
-- public static org.bouncycastle.crypto.tls.ProtocolVersion org.bouncycastle.crypto.tls.TlsUtils.readVersion(java.io.InputStream)
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readVersionRaw(byte[],int)
-- public static int org.bouncycastle.crypto.tls.TlsUtils.readVersionRaw(java.io.InputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeGMTUnixTime(byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeOpaque16(byte[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeOpaque24(byte[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeOpaque8(byte[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16(int,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16(int,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16Array(int[],byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16Array(int[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16ArrayWithUint16Length(int[],byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint16ArrayWithUint16Length(int[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint24(int,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint24(int,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint32(long,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint32(long,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint48(long,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint48(long,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint64(long,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint64(long,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8(int,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8(int,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8(short,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8(short,java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8Array(short[],byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8Array(short[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8ArrayWithUint8Length(short[],byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeVersion(org.bouncycastle.crypto.tls.ProtocolVersion,byte[],int)
-- public static void org.bouncycastle.crypto.tls.TlsUtils.writeVersion(org.bouncycastle.crypto.tls.ProtocolVersion,java.io.OutputStream)
-- public UDPTransport org.bouncycastle.crypto.tls.UDPTransport(java.net.DatagramSocket,int)
-- public void org.bouncycastle.crypto.tls.UDPTransport.close()
-- public int org.bouncycastle.crypto.tls.UDPTransport.getReceiveLimit()
-- public int org.bouncycastle.crypto.tls.UDPTransport.getSendLimit()
-- public int org.bouncycastle.crypto.tls.UDPTransport.receive(byte[],int,int,int)
-- public void org.bouncycastle.crypto.tls.UDPTransport.send(byte[],int,int)
-- public URLAndHash org.bouncycastle.crypto.tls.URLAndHash(java.lang.String,byte[])
-- public void org.bouncycastle.crypto.tls.URLAndHash.encode(java.io.OutputStream)
-- public [B org.bouncycastle.crypto.tls.URLAndHash.getSHA1Hash()
-- public java.lang.String org.bouncycastle.crypto.tls.URLAndHash.getURL()
-- public static org.bouncycastle.crypto.tls.URLAndHash org.bouncycastle.crypto.tls.URLAndHash.parse(org.bouncycastle.crypto.tls.TlsContext,java.io.InputStream)
-- public UseSRTPData org.bouncycastle.crypto.tls.UseSRTPData(int[],byte[])
-- public [B org.bouncycastle.crypto.tls.UseSRTPData.getMki()
-- public [I org.bouncycastle.crypto.tls.UseSRTPData.getProtectionProfiles()
-- public UserMappingType org.bouncycastle.crypto.tls.UserMappingType()
++ public static org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.crypto.util.AlgorithmIdentifierFactory.generateEncryptionAlgID(org.bouncycastle.asn1.ASN1ObjectIdentifier,int,java.security.SecureRandom)
++ public CipherFactory org.bouncycastle.crypto.util.CipherFactory()
++ public static java.lang.Object org.bouncycastle.crypto.util.CipherFactory.createContentCipher(boolean,org.bouncycastle.crypto.CipherParameters,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public static org.bouncycastle.crypto.io.CipherOutputStream org.bouncycastle.crypto.util.CipherFactory.createOutputStream(java.io.OutputStream,java.lang.Object)
++ public static org.bouncycastle.crypto.CipherKeyGenerator org.bouncycastle.crypto.util.CipherKeyGeneratorFactory.createKeyGenerator(org.bouncycastle.asn1.ASN1ObjectIdentifier,java.security.SecureRandom)
++ public DERMacData$Builder org.bouncycastle.crypto.util.DERMacData$Builder(org.bouncycastle.crypto.util.DERMacData$Type,byte[],byte[],byte[],byte[])
++ public org.bouncycastle.crypto.util.DERMacData org.bouncycastle.crypto.util.DERMacData$Builder.build()
++ public org.bouncycastle.crypto.util.DERMacData$Builder org.bouncycastle.crypto.util.DERMacData$Builder.withText(byte[])
++ public [B org.bouncycastle.crypto.util.DERMacData$Type.getHeader()
++ public static org.bouncycastle.crypto.util.DERMacData$Type org.bouncycastle.crypto.util.DERMacData$Type.valueOf(java.lang.String)
++ public static org.bouncycastle.crypto.util.DERMacData$Type org.bouncycastle.crypto.util.DERMacData$Type.values()
++ public [B org.bouncycastle.crypto.util.DERMacData.getMacData()
++ public DEROtherInfo$Builder org.bouncycastle.crypto.util.DEROtherInfo$Builder(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[])
++ public org.bouncycastle.crypto.util.DEROtherInfo org.bouncycastle.crypto.util.DEROtherInfo$Builder.build()
++ public org.bouncycastle.crypto.util.DEROtherInfo$Builder org.bouncycastle.crypto.util.DEROtherInfo$Builder.withSuppPrivInfo(byte[])
++ public org.bouncycastle.crypto.util.DEROtherInfo$Builder org.bouncycastle.crypto.util.DEROtherInfo$Builder.withSuppPubInfo(byte[])
++ public [B org.bouncycastle.crypto.util.DEROtherInfo.getEncoded()
++ public DigestFactory org.bouncycastle.crypto.util.DigestFactory()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createMD5()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA1()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA224()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA256()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA384()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA3_224()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA3_256()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA3_384()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA3_512()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA512()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA512_224()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.crypto.util.DigestFactory.createSHA512_256()
++ public JournaledAlgorithm org.bouncycastle.crypto.util.JournaledAlgorithm(byte[])
++ public JournaledAlgorithm org.bouncycastle.crypto.util.JournaledAlgorithm(byte[],java.security.SecureRandom)
++ public JournaledAlgorithm org.bouncycastle.crypto.util.JournaledAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier,org.bouncycastle.crypto.util.JournalingSecureRandom)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.crypto.util.JournaledAlgorithm.getAlgorithmIdentifier()
++ public [B org.bouncycastle.crypto.util.JournaledAlgorithm.getEncoded()
++ public org.bouncycastle.crypto.util.JournalingSecureRandom org.bouncycastle.crypto.util.JournaledAlgorithm.getJournalingSecureRandom()
++ public static org.bouncycastle.crypto.util.JournaledAlgorithm org.bouncycastle.crypto.util.JournaledAlgorithm.getState(java.io.File,java.security.SecureRandom)
++ public static org.bouncycastle.crypto.util.JournaledAlgorithm org.bouncycastle.crypto.util.JournaledAlgorithm.getState(java.io.InputStream,java.security.SecureRandom)
++ public void org.bouncycastle.crypto.util.JournaledAlgorithm.storeState(java.io.File)
++ public void org.bouncycastle.crypto.util.JournaledAlgorithm.storeState(java.io.OutputStream)
++ public JournalingSecureRandom org.bouncycastle.crypto.util.JournalingSecureRandom()
++ public JournalingSecureRandom org.bouncycastle.crypto.util.JournalingSecureRandom(byte[],java.security.SecureRandom)
++ public JournalingSecureRandom org.bouncycastle.crypto.util.JournalingSecureRandom(java.security.SecureRandom)
++ public void org.bouncycastle.crypto.util.JournalingSecureRandom.clear()
++ public [B org.bouncycastle.crypto.util.JournalingSecureRandom.getFullTranscript()
++ public [B org.bouncycastle.crypto.util.JournalingSecureRandom.getTranscript()
++ public final void org.bouncycastle.crypto.util.JournalingSecureRandom.nextBytes(byte[])
++ public void org.bouncycastle.crypto.util.JournalingSecureRandom.reset()
++ public static [B org.bouncycastle.crypto.util.OpenSSHPrivateKeyUtil.encodePrivateKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.util.OpenSSHPrivateKeyUtil.parsePrivateKeyBlob(byte[])
++ public static [B org.bouncycastle.crypto.util.OpenSSHPublicKeyUtil.encodePublicKey(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.util.OpenSSHPublicKeyUtil.parsePublicKey(byte[])
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.util.OpenSSHPublicKeyUtil.parsePublicKey(org.bouncycastle.crypto.util.SSHBuffer)
++ public PBKDF2Config$Builder org.bouncycastle.crypto.util.PBKDF2Config$Builder()
++ public org.bouncycastle.crypto.util.PBKDF2Config org.bouncycastle.crypto.util.PBKDF2Config$Builder.build()
++ public org.bouncycastle.crypto.util.PBKDF2Config$Builder org.bouncycastle.crypto.util.PBKDF2Config$Builder.withIterationCount(int)
++ public org.bouncycastle.crypto.util.PBKDF2Config$Builder org.bouncycastle.crypto.util.PBKDF2Config$Builder.withPRF(org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public org.bouncycastle.crypto.util.PBKDF2Config$Builder org.bouncycastle.crypto.util.PBKDF2Config$Builder.withSaltLength(int)
++ public int org.bouncycastle.crypto.util.PBKDF2Config.getIterationCount()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.crypto.util.PBKDF2Config.getPRF()
++ public int org.bouncycastle.crypto.util.PBKDF2Config.getSaltLength()
++ protected PBKDFConfig org.bouncycastle.crypto.util.PBKDFConfig(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.util.PBKDFConfig.getAlgorithm()
++ public static org.bouncycastle.asn1.pkcs.PrivateKeyInfo org.bouncycastle.crypto.util.PrivateKeyInfoFactory.createPrivateKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.asn1.ASN1Set)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.crypto.util.PublicKeyFactory.createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo,java.lang.Object)
++ public SSHNamedCurves org.bouncycastle.crypto.util.SSHNamedCurves()
++ public static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.crypto.util.SSHNamedCurves.getByName(java.lang.String)
++ public static java.lang.String org.bouncycastle.crypto.util.SSHNamedCurves.getName(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public static java.lang.String org.bouncycastle.crypto.util.SSHNamedCurves.getNameForParameters(org.bouncycastle.crypto.params.ECDomainParameters)
++ public static java.lang.String org.bouncycastle.crypto.util.SSHNamedCurves.getNameForParameters(org.bouncycastle.math.ec.ECCurve)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.crypto.util.SSHNamedCurves.getParameters(java.lang.String)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.crypto.util.SSHNamedCurves.getParameters(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public ScryptConfig$Builder org.bouncycastle.crypto.util.ScryptConfig$Builder(int,int,int)
++ public org.bouncycastle.crypto.util.ScryptConfig org.bouncycastle.crypto.util.ScryptConfig$Builder.build()
++ public org.bouncycastle.crypto.util.ScryptConfig$Builder org.bouncycastle.crypto.util.ScryptConfig$Builder.withSaltLength(int)
++ public int org.bouncycastle.crypto.util.ScryptConfig.getBlockSize()
++ public int org.bouncycastle.crypto.util.ScryptConfig.getCostParameter()
++ public int org.bouncycastle.crypto.util.ScryptConfig.getParallelizationParameter()
++ public int org.bouncycastle.crypto.util.ScryptConfig.getSaltLength()
++ public AEADAlgorithm org.bouncycastle.iana.AEADAlgorithm()
++ public static org.bouncycastle.its.asn1.AesCcmCiphertext org.bouncycastle.its.asn1.AesCcmCiphertext.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.AesCcmCiphertext.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.BitmapSspRange org.bouncycastle.its.asn1.BitmapSspRange.getInstance(java.lang.Object)
++ public [B org.bouncycastle.its.asn1.BitmapSspRange.getSspBitmask()
++ public [B org.bouncycastle.its.asn1.BitmapSspRange.getSspValue()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.BitmapSspRange.toASN1Primitive()
++ protected CertificateBase org.bouncycastle.its.asn1.CertificateBase(org.bouncycastle.asn1.ASN1Sequence)
++ public static org.bouncycastle.its.asn1.CertificateBase org.bouncycastle.its.asn1.CertificateBase.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.CertificateBase.toASN1Primitive()
++ protected CertificateType org.bouncycastle.its.asn1.CertificateType(int)
++ public org.bouncycastle.its.asn1.CertificateType org.bouncycastle.its.asn1.CertificateType.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.CertificateType.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.CircularRegion org.bouncycastle.its.asn1.CircularRegion.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.CircularRegion.toASN1Primitive()
++ public Duration org.bouncycastle.its.asn1.Duration()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Duration.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.EncryptedData org.bouncycastle.its.asn1.EncryptedData.getInstance(java.lang.Object)
++ public EndEntityType org.bouncycastle.its.asn1.EndEntityType(int)
++ public static org.bouncycastle.its.asn1.EndEntityType org.bouncycastle.its.asn1.EndEntityType.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.EndEntityType.toASN1Primitive()
++ public EtsiTs103097Module org.bouncycastle.its.asn1.EtsiTs103097Module()
++ public GeographicRegion org.bouncycastle.its.asn1.GeographicRegion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.GeographicRegion.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.GroupLinkageValue org.bouncycastle.its.asn1.GroupLinkageValue.getInstance(java.lang.Object)
++ public [B org.bouncycastle.its.asn1.GroupLinkageValue.getJValue()
++ public [B org.bouncycastle.its.asn1.GroupLinkageValue.getValue()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.GroupLinkageValue.toASN1Primitive()
++ protected HashAlgorithm org.bouncycastle.its.asn1.HashAlgorithm(int)
++ public org.bouncycastle.its.asn1.HashAlgorithm org.bouncycastle.its.asn1.HashAlgorithm.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.HashAlgorithm.toASN1Primitive()
++ public HashedData org.bouncycastle.its.asn1.HashedData(byte[])
++ public org.bouncycastle.asn1.ASN1OctetString org.bouncycastle.its.asn1.HashedData.getHashData()
++ public void org.bouncycastle.its.asn1.HashedData.setHashData(org.bouncycastle.asn1.ASN1OctetString)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.HashedData.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.HeaderInfo org.bouncycastle.its.asn1.HeaderInfo.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.HeaderInfo.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.IValue org.bouncycastle.its.asn1.IValue.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.IValue.toASN1Primitive()
++ public Ieee1609Dot2Content org.bouncycastle.its.asn1.Ieee1609Dot2Content()
++ public static org.bouncycastle.its.asn1.Ieee1609Dot2Content org.bouncycastle.its.asn1.Ieee1609Dot2Content.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Ieee1609Dot2Content.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.Ieee1609Dot2Data org.bouncycastle.its.asn1.Ieee1609Dot2Data.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Ieee1609Dot2Data.toASN1Primitive()
++ public IssuerIdentifier org.bouncycastle.its.asn1.IssuerIdentifier()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.IssuerIdentifier.toASN1Primitive()
++ public Latitude org.bouncycastle.its.asn1.Latitude()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Latitude.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.LinkageData org.bouncycastle.its.asn1.LinkageData.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.LinkageData.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.LinkageValue org.bouncycastle.its.asn1.LinkageValue.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.LinkageValue.toASN1Primitive()
++ public Longitude org.bouncycastle.its.asn1.Longitude()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Longitude.toASN1Primitive()
++ public PKRecipientInfo org.bouncycastle.its.asn1.PKRecipientInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.PKRecipientInfo.toASN1Primitive()
++ public PolygonalRegion org.bouncycastle.its.asn1.PolygonalRegion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.PolygonalRegion.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.PsidGroupPermissions org.bouncycastle.its.asn1.PsidGroupPermissions.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.PsidGroupPermissions.toASN1Primitive()
++ public PsidSspRange org.bouncycastle.its.asn1.PsidSspRange()
++ public static org.bouncycastle.its.asn1.PsidSspRange org.bouncycastle.its.asn1.PsidSspRange.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Integer org.bouncycastle.its.asn1.PsidSspRange.getPsid()
++ public org.bouncycastle.its.asn1.SspRange org.bouncycastle.its.asn1.PsidSspRange.getSspRange()
++ public void org.bouncycastle.its.asn1.PsidSspRange.setPsid(org.bouncycastle.asn1.ASN1Integer)
++ public void org.bouncycastle.its.asn1.PsidSspRange.setSspRange(org.bouncycastle.its.asn1.SspRange)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.PsidSspRange.toASN1Primitive()
++ public RecipientInfo org.bouncycastle.its.asn1.RecipientInfo()
++ public static org.bouncycastle.its.asn1.RectangularRegion org.bouncycastle.its.asn1.RectangularRegion.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.RectangularRegion.toASN1Primitive()
++ public SequenceOfCertificate org.bouncycastle.its.asn1.SequenceOfCertificate()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SequenceOfCertificate.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.SequenceOfOctetString org.bouncycastle.its.asn1.SequenceOfOctetString.getInstance(java.lang.Object)
++ public int org.bouncycastle.its.asn1.SequenceOfOctetString.size()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SequenceOfOctetString.toASN1Primitive()
++ public SequenceOfPsidGroupPermissions org.bouncycastle.its.asn1.SequenceOfPsidGroupPermissions()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SequenceOfPsidGroupPermissions.toASN1Primitive()
++ public SequenceOfRecipientInfo org.bouncycastle.its.asn1.SequenceOfRecipientInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SequenceOfRecipientInfo.toASN1Primitive()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SequenceOfRectangularRegion.toASN1Primitive()
++ public ServiceSpecificPermissions org.bouncycastle.its.asn1.ServiceSpecificPermissions()
++ public Signature org.bouncycastle.its.asn1.Signature()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.Signature.toASN1Primitive()
++ public SignedData org.bouncycastle.its.asn1.SignedData()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SignedData.toASN1Primitive()
++ public SignedDataPayload org.bouncycastle.its.asn1.SignedDataPayload()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SignedDataPayload.toASN1Primitive()
++ public SignerIdentifier org.bouncycastle.its.asn1.SignerIdentifier()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SignerIdentifier.toASN1Primitive()
++ public SspRange org.bouncycastle.its.asn1.SspRange(org.bouncycastle.its.asn1.BitmapSspRange)
++ public org.bouncycastle.its.asn1.BitmapSspRange org.bouncycastle.its.asn1.SspRange.getBitmapSspRange()
++ public static org.bouncycastle.its.asn1.SspRange org.bouncycastle.its.asn1.SspRange.getInstance(java.lang.Object)
++ public org.bouncycastle.its.asn1.SequenceOfOctetString org.bouncycastle.its.asn1.SspRange.getOpaque()
++ public bool org.bouncycastle.its.asn1.SspRange.isAll()
++ public bool org.bouncycastle.its.asn1.SspRange.maybeOpaque()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SspRange.toASN1Primitive()
++ public SubjectPermissions org.bouncycastle.its.asn1.SubjectPermissions()
++ public static org.bouncycastle.its.asn1.SubjectPermissions org.bouncycastle.its.asn1.SubjectPermissions.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SubjectPermissions.toASN1Primitive()
++ public SymmAlgorithm org.bouncycastle.its.asn1.SymmAlgorithm(int)
++ public org.bouncycastle.its.asn1.SymmAlgorithm org.bouncycastle.its.asn1.SymmAlgorithm.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Enumerated org.bouncycastle.its.asn1.SymmAlgorithm.getSymmAlgorithm()
++ public void org.bouncycastle.its.asn1.SymmAlgorithm.setSymmAlgorithm(org.bouncycastle.asn1.ASN1Enumerated)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SymmAlgorithm.toASN1Primitive()
++ public SymmRecipientInfo org.bouncycastle.its.asn1.SymmRecipientInfo()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.SymmRecipientInfo.toASN1Primitive()
++ public static org.bouncycastle.its.asn1.ToBeSignedCertificate org.bouncycastle.its.asn1.ToBeSignedCertificate.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.ToBeSignedCertificate.toASN1Primitive()
++ public ToBeSignedData org.bouncycastle.its.asn1.ToBeSignedData()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.ToBeSignedData.toASN1Primitive()
++ public TwoDLocation org.bouncycastle.its.asn1.TwoDLocation()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.TwoDLocation.toASN1Primitive()
++ public ValidityPeriod org.bouncycastle.its.asn1.ValidityPeriod()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.ValidityPeriod.toASN1Primitive()
++ public VerificationKeyIndicator org.bouncycastle.its.asn1.VerificationKeyIndicator()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.its.asn1.VerificationKeyIndicator.toASN1Primitive()
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder()
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.InputStream,char[])
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.InputStream,java.security.KeyStore$ProtectionParameter)
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.InputStream,java.security.PublicKey)
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.InputStream,org.bouncycastle.jcajce.BCFKSLoadStoreParameter$CertChainValidator)
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.OutputStream,char[])
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.OutputStream,java.security.KeyStore$ProtectionParameter)
++ public BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder(java.io.OutputStream,java.security.PrivateKey)
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.build()
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.withCertificates(java.security.cert.X509Certificate[])
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.withStoreEncryptionAlgorithm(org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm)
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.withStoreMacAlgorithm(org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm)
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.withStorePBKDFConfig(org.bouncycastle.crypto.util.PBKDFConfig)
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder org.bouncycastle.jcajce.BCFKSLoadStoreParameter$Builder.withStoreSignatureAlgorithm(org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm)
++ public abstract bool org.bouncycastle.jcajce.BCFKSLoadStoreParameter$CertChainValidator.isValid(java.security.cert.X509Certificate[])
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm.valueOf(java.lang.String)
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm.values()
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm.valueOf(java.lang.String)
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm.values()
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm.valueOf(java.lang.String)
++ public static org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm.values()
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$CertChainValidator org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getCertChainValidator()
++ public java.security.cert.X509Certificate org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStoreCertificates()
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$EncryptionAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStoreEncryptionAlgorithm()
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$MacAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStoreMacAlgorithm()
++ public org.bouncycastle.crypto.util.PBKDFConfig org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStorePBKDFConfig()
++ public org.bouncycastle.jcajce.BCFKSLoadStoreParameter$SignatureAlgorithm org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStoreSignatureAlgorithm()
++ public java.security.Key org.bouncycastle.jcajce.BCFKSLoadStoreParameter.getStoreSignatureKey()
++ public BCFKSStoreParameter org.bouncycastle.jcajce.BCFKSStoreParameter(java.io.OutputStream,org.bouncycastle.crypto.util.PBKDFConfig,char[])
++ public BCFKSStoreParameter org.bouncycastle.jcajce.BCFKSStoreParameter(java.io.OutputStream,org.bouncycastle.crypto.util.PBKDFConfig,java.security.KeyStore$ProtectionParameter)
++ public java.io.OutputStream org.bouncycastle.jcajce.BCFKSStoreParameter.getOutputStream()
++ public java.security.KeyStore$ProtectionParameter org.bouncycastle.jcajce.BCFKSStoreParameter.getProtectionParameter()
++ public org.bouncycastle.crypto.util.PBKDFConfig org.bouncycastle.jcajce.BCFKSStoreParameter.getStorePBKDFConfig()
++ public BCLoadStoreParameter org.bouncycastle.jcajce.BCLoadStoreParameter(java.io.InputStream,char[])
++ public BCLoadStoreParameter org.bouncycastle.jcajce.BCLoadStoreParameter(java.io.InputStream,java.security.KeyStore$ProtectionParameter)
++ public BCLoadStoreParameter org.bouncycastle.jcajce.BCLoadStoreParameter(java.io.OutputStream,char[])
++ public BCLoadStoreParameter org.bouncycastle.jcajce.BCLoadStoreParameter(java.io.OutputStream,java.security.KeyStore$ProtectionParameter)
++ public java.io.InputStream org.bouncycastle.jcajce.BCLoadStoreParameter.getInputStream()
++ public java.io.OutputStream org.bouncycastle.jcajce.BCLoadStoreParameter.getOutputStream()
++ public java.security.KeyStore$ProtectionParameter org.bouncycastle.jcajce.BCLoadStoreParameter.getProtectionParameter()
++ public transient CompositePrivateKey org.bouncycastle.jcajce.CompositePrivateKey(java.security.PrivateKey[])
++ public bool org.bouncycastle.jcajce.CompositePrivateKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.CompositePrivateKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.CompositePrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.CompositePrivateKey.getFormat()
++ public java.util.List org.bouncycastle.jcajce.CompositePrivateKey.getPrivateKeys()
++ public int org.bouncycastle.jcajce.CompositePrivateKey.hashCode()
++ public transient CompositePublicKey org.bouncycastle.jcajce.CompositePublicKey(java.security.PublicKey[])
++ public bool org.bouncycastle.jcajce.CompositePublicKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.CompositePublicKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.CompositePublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.CompositePublicKey.getFormat()
++ public java.util.List org.bouncycastle.jcajce.CompositePublicKey.getPublicKeys()
++ public int org.bouncycastle.jcajce.CompositePublicKey.hashCode()
++ public PBKDF1Key org.bouncycastle.jcajce.PBKDF1Key(char[],org.bouncycastle.crypto.CharToByteConverter)
++ public java.lang.String org.bouncycastle.jcajce.PBKDF1Key.getAlgorithm()
++ public [B org.bouncycastle.jcajce.PBKDF1Key.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.PBKDF1Key.getFormat()
++ public [C org.bouncycastle.jcajce.PBKDF1Key.getPassword()
++ public PBKDF1KeyWithParameters org.bouncycastle.jcajce.PBKDF1KeyWithParameters(char[],org.bouncycastle.crypto.CharToByteConverter,byte[],int)
++ public int org.bouncycastle.jcajce.PBKDF1KeyWithParameters.getIterationCount()
++ public [B org.bouncycastle.jcajce.PBKDF1KeyWithParameters.getSalt()
++ public PBKDF2Key org.bouncycastle.jcajce.PBKDF2Key(char[],org.bouncycastle.crypto.CharToByteConverter)
++ public java.lang.String org.bouncycastle.jcajce.PBKDF2Key.getAlgorithm()
++ public [B org.bouncycastle.jcajce.PBKDF2Key.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.PBKDF2Key.getFormat()
++ public [C org.bouncycastle.jcajce.PBKDF2Key.getPassword()
++ public PBKDF2KeyWithParameters org.bouncycastle.jcajce.PBKDF2KeyWithParameters(char[],org.bouncycastle.crypto.CharToByteConverter,byte[],int)
++ public int org.bouncycastle.jcajce.PBKDF2KeyWithParameters.getIterationCount()
++ public [B org.bouncycastle.jcajce.PBKDF2KeyWithParameters.getSalt()
++ public PKCS12Key org.bouncycastle.jcajce.PKCS12Key(char[])
++ public PKCS12Key org.bouncycastle.jcajce.PKCS12Key(char[],boolean)
++ public java.lang.String org.bouncycastle.jcajce.PKCS12Key.getAlgorithm()
++ public [B org.bouncycastle.jcajce.PKCS12Key.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.PKCS12Key.getFormat()
++ public [C org.bouncycastle.jcajce.PKCS12Key.getPassword()
++ public PKCS12KeyWithParameters org.bouncycastle.jcajce.PKCS12KeyWithParameters(char[],boolean,byte[],int)
++ public PKCS12KeyWithParameters org.bouncycastle.jcajce.PKCS12KeyWithParameters(char[],byte[],int)
++ public int org.bouncycastle.jcajce.PKCS12KeyWithParameters.getIterationCount()
++ public [B org.bouncycastle.jcajce.PKCS12KeyWithParameters.getSalt()
++ public PKCS12StoreParameter org.bouncycastle.jcajce.PKCS12StoreParameter(java.io.OutputStream,char[])
++ public PKCS12StoreParameter org.bouncycastle.jcajce.PKCS12StoreParameter(java.io.OutputStream,char[],boolean)
++ public PKCS12StoreParameter org.bouncycastle.jcajce.PKCS12StoreParameter(java.io.OutputStream,java.security.KeyStore$ProtectionParameter)
++ public PKCS12StoreParameter org.bouncycastle.jcajce.PKCS12StoreParameter(java.io.OutputStream,java.security.KeyStore$ProtectionParameter,boolean)
++ public java.io.OutputStream org.bouncycastle.jcajce.PKCS12StoreParameter.getOutputStream()
++ public java.security.KeyStore$ProtectionParameter org.bouncycastle.jcajce.PKCS12StoreParameter.getProtectionParameter()
++ public bool org.bouncycastle.jcajce.PKCS12StoreParameter.isForDEREncoding()
++ public abstract java.util.Collection org.bouncycastle.jcajce.PKIXCRLStore.getMatches(org.bouncycastle.util.Selector)
++ public PKIXCRLStoreSelector$Builder org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder(java.security.cert.CRLSelector)
++ public org.bouncycastle.jcajce.PKIXCRLStoreSelector org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.build()
++ public org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.setCompleteCRLEnabled(boolean)
++ public org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.setDeltaCRLIndicatorEnabled(boolean)
++ public void org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.setIssuingDistributionPoint(byte[])
++ public void org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.setIssuingDistributionPointEnabled(boolean)
++ public void org.bouncycastle.jcajce.PKIXCRLStoreSelector$Builder.setMaxBaseCRLNumber(java.math.BigInteger)
++ public java.lang.Object org.bouncycastle.jcajce.PKIXCRLStoreSelector.clone()
++ public static java.util.Collection org.bouncycastle.jcajce.PKIXCRLStoreSelector.getCRLs(org.bouncycastle.jcajce.PKIXCRLStoreSelector,java.security.cert.CertStore)
++ public java.security.cert.X509Certificate org.bouncycastle.jcajce.PKIXCRLStoreSelector.getCertificateChecking()
++ public [B org.bouncycastle.jcajce.PKIXCRLStoreSelector.getIssuingDistributionPoint()
++ public java.math.BigInteger org.bouncycastle.jcajce.PKIXCRLStoreSelector.getMaxBaseCRLNumber()
++ public bool org.bouncycastle.jcajce.PKIXCRLStoreSelector.isCompleteCRLEnabled()
++ public bool org.bouncycastle.jcajce.PKIXCRLStoreSelector.isDeltaCRLIndicatorEnabled()
++ public bool org.bouncycastle.jcajce.PKIXCRLStoreSelector.isIssuingDistributionPointEnabled()
++ public bool org.bouncycastle.jcajce.PKIXCRLStoreSelector.match(java.security.cert.CRL)
++ public abstract void org.bouncycastle.jcajce.PKIXCertRevocationChecker.check(java.security.cert.Certificate)
++ public abstract void org.bouncycastle.jcajce.PKIXCertRevocationChecker.initialize(org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters)
++ public abstract void org.bouncycastle.jcajce.PKIXCertRevocationChecker.setParameter(java.lang.String,java.lang.Object)
++ public PKIXCertRevocationCheckerParameters org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters(org.bouncycastle.jcajce.PKIXExtendedParameters,java.util.Date,java.security.cert.CertPath,int,java.security.cert.X509Certificate,java.security.PublicKey)
++ public java.security.cert.CertPath org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getCertPath()
++ public int org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getIndex()
++ public org.bouncycastle.jcajce.PKIXExtendedParameters org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getParamsPKIX()
++ public java.security.cert.X509Certificate org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getSigningCert()
++ public java.util.Date org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getValidDate()
++ public java.security.PublicKey org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters.getWorkingPublicKey()
++ public abstract java.util.Collection org.bouncycastle.jcajce.PKIXCertStore.getMatches(org.bouncycastle.util.Selector)
++ public PKIXCertStoreSelector$Builder org.bouncycastle.jcajce.PKIXCertStoreSelector$Builder(java.security.cert.CertSelector)
++ public org.bouncycastle.jcajce.PKIXCertStoreSelector org.bouncycastle.jcajce.PKIXCertStoreSelector$Builder.build()
++ public java.lang.Object org.bouncycastle.jcajce.PKIXCertStoreSelector.clone()
++ public java.security.cert.Certificate org.bouncycastle.jcajce.PKIXCertStoreSelector.getCertificate()
++ public static java.util.Collection org.bouncycastle.jcajce.PKIXCertStoreSelector.getCertificates(org.bouncycastle.jcajce.PKIXCertStoreSelector,java.security.cert.CertStore)
++ public bool org.bouncycastle.jcajce.PKIXCertStoreSelector.match(java.security.cert.Certificate)
++ public PKIXExtendedBuilderParameters$Builder org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder(java.security.cert.PKIXBuilderParameters)
++ public PKIXExtendedBuilderParameters$Builder org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder(org.bouncycastle.jcajce.PKIXExtendedParameters)
++ public org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder.addExcludedCerts(java.util.Set)
++ public org.bouncycastle.jcajce.PKIXExtendedBuilderParameters org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder.build()
++ public org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder org.bouncycastle.jcajce.PKIXExtendedBuilderParameters$Builder.setMaxPathLength(int)
++ public java.lang.Object org.bouncycastle.jcajce.PKIXExtendedBuilderParameters.clone()
++ public org.bouncycastle.jcajce.PKIXExtendedParameters org.bouncycastle.jcajce.PKIXExtendedBuilderParameters.getBaseParameters()
++ public java.util.Set org.bouncycastle.jcajce.PKIXExtendedBuilderParameters.getExcludedCerts()
++ public int org.bouncycastle.jcajce.PKIXExtendedBuilderParameters.getMaxPathLength()
++ public PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder(java.security.cert.PKIXParameters)
++ public PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder(org.bouncycastle.jcajce.PKIXExtendedParameters)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.addCRLStore(org.bouncycastle.jcajce.PKIXCRLStore)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.addCertificateStore(org.bouncycastle.jcajce.PKIXCertStore)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.addNamedCRLStore(org.bouncycastle.asn1.x509.GeneralName,org.bouncycastle.jcajce.PKIXCRLStore)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.addNamedCertificateStore(org.bouncycastle.asn1.x509.GeneralName,org.bouncycastle.jcajce.PKIXCertStore)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.build()
++ public void org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setRevocationEnabled(boolean)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setTargetConstraints(org.bouncycastle.jcajce.PKIXCertStoreSelector)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setTrustAnchor(java.security.cert.TrustAnchor)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setTrustAnchors(java.util.Set)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setUseDeltasEnabled(boolean)
++ public org.bouncycastle.jcajce.PKIXExtendedParameters$Builder org.bouncycastle.jcajce.PKIXExtendedParameters$Builder.setValidityModel(int)
++ public java.lang.Object org.bouncycastle.jcajce.PKIXExtendedParameters.clone()
++ public java.util.List org.bouncycastle.jcajce.PKIXExtendedParameters.getCRLStores()
++ public java.util.List org.bouncycastle.jcajce.PKIXExtendedParameters.getCertPathCheckers()
++ public java.util.List org.bouncycastle.jcajce.PKIXExtendedParameters.getCertStores()
++ public java.util.List org.bouncycastle.jcajce.PKIXExtendedParameters.getCertificateStores()
++ public java.util.Date org.bouncycastle.jcajce.PKIXExtendedParameters.getDate()
++ public java.util.Set org.bouncycastle.jcajce.PKIXExtendedParameters.getInitialPolicies()
++ public java.util.Map org.bouncycastle.jcajce.PKIXExtendedParameters.getNamedCRLStoreMap()
++ public java.util.Map org.bouncycastle.jcajce.PKIXExtendedParameters.getNamedCertificateStoreMap()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.getPolicyQualifiersRejected()
++ public java.lang.String org.bouncycastle.jcajce.PKIXExtendedParameters.getSigProvider()
++ public org.bouncycastle.jcajce.PKIXCertStoreSelector org.bouncycastle.jcajce.PKIXExtendedParameters.getTargetConstraints()
++ public java.util.Set org.bouncycastle.jcajce.PKIXExtendedParameters.getTrustAnchors()
++ public int org.bouncycastle.jcajce.PKIXExtendedParameters.getValidityModel()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.isAnyPolicyInhibited()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.isExplicitPolicyRequired()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.isPolicyMappingInhibited()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.isRevocationEnabled()
++ public bool org.bouncycastle.jcajce.PKIXExtendedParameters.isUseDeltasEnabled()
++ public abstract org.bouncycastle.asn1.x500.X500Name org.bouncycastle.jcajce.interfaces.BCX509Certificate.getIssuerX500Name()
++ public abstract org.bouncycastle.asn1.x500.X500Name org.bouncycastle.jcajce.interfaces.BCX509Certificate.getSubjectX500Name()
++ public abstract org.bouncycastle.asn1.x509.TBSCertificate org.bouncycastle.jcajce.interfaces.BCX509Certificate.getTBSCertificateNative()
++ public abstract org.bouncycastle.jcajce.interfaces.EdDSAPublicKey org.bouncycastle.jcajce.interfaces.EdDSAPrivateKey.getPublicKey()
++ public abstract org.bouncycastle.jcajce.interfaces.XDHPublicKey org.bouncycastle.jcajce.interfaces.XDHPrivateKey.getPublicKey()
++ public OutputStreamFactory org.bouncycastle.jcajce.io.OutputStreamFactory()
++ public static java.io.OutputStream org.bouncycastle.jcajce.io.OutputStreamFactory.createStream(java.security.MessageDigest)
++ public static java.io.OutputStream org.bouncycastle.jcajce.io.OutputStreamFactory.createStream(java.security.Signature)
++ public static java.io.OutputStream org.bouncycastle.jcajce.io.OutputStreamFactory.createStream(javax.crypto.Mac)
++ public COMPOSITE$KeyFactory org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$KeyFactory()
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$KeyFactory.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$KeyFactory.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$KeyFactory.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public COMPOSITE$Mappings org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$Mappings()
++ public void org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public COMPOSITE org.bouncycastle.jcajce.provider.asymmetric.COMPOSITE()
++ public EdEC$Mappings org.bouncycastle.jcajce.provider.asymmetric.EdEC$Mappings()
++ public void org.bouncycastle.jcajce.provider.asymmetric.EdEC$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public EdEC org.bouncycastle.jcajce.provider.asymmetric.EdEC()
++ public GM$Mappings org.bouncycastle.jcajce.provider.asymmetric.GM$Mappings()
++ public void org.bouncycastle.jcajce.provider.asymmetric.GM$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public GM org.bouncycastle.jcajce.provider.asymmetric.GM()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPrivateKey.toString()
++ public org.bouncycastle.crypto.params.DHPublicKeyParameters org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey.engineGetKeyParameters()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.dh.BCDHPublicKey.toString()
-- public IESCipher$IESwithAES org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithAES()
++ public IESCipher$IESwithAESCBC org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithAESCBC()
-- public IESCipher$IESwithDESede org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithDESede()
++ public IESCipher$IESwithDESedeCBC org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher$IESwithDESedeCBC()
++ public IESCipher org.bouncycastle.jcajce.provider.asymmetric.dh.IESCipher(org.bouncycastle.crypto.engines.IESEngine,int)
++ public KeyAgreementSpi$DHUwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA1CKDF()
++ public KeyAgreementSpi$DHUwithSHA1KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA1KDF()
++ public KeyAgreementSpi$DHUwithSHA224CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA224CKDF()
++ public KeyAgreementSpi$DHUwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA224KDF()
++ public KeyAgreementSpi$DHUwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA256CKDF()
++ public KeyAgreementSpi$DHUwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA256KDF()
++ public KeyAgreementSpi$DHUwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA384CKDF()
++ public KeyAgreementSpi$DHUwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA384KDF()
++ public KeyAgreementSpi$DHUwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA512CKDF()
++ public KeyAgreementSpi$DHUwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHUwithSHA512KDF()
++ public KeyAgreementSpi$DHwithRFC2631KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithRFC2631KDF()
++ public KeyAgreementSpi$DHwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA1CKDF()
++ public KeyAgreementSpi$DHwithSHA1KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA1KDF()
++ public KeyAgreementSpi$DHwithSHA224CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA224CKDF()
++ public KeyAgreementSpi$DHwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA224KDF()
++ public KeyAgreementSpi$DHwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA256CKDF()
++ public KeyAgreementSpi$DHwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA256KDF()
++ public KeyAgreementSpi$DHwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA384CKDF()
++ public KeyAgreementSpi$DHwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA384KDF()
++ public KeyAgreementSpi$DHwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA512CKDF()
++ public KeyAgreementSpi$DHwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$DHwithSHA512KDF()
++ public KeyAgreementSpi$MQVwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA1CKDF()
++ public KeyAgreementSpi$MQVwithSHA1KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA1KDF()
++ public KeyAgreementSpi$MQVwithSHA224CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA224CKDF()
++ public KeyAgreementSpi$MQVwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA224KDF()
++ public KeyAgreementSpi$MQVwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA256CKDF()
++ public KeyAgreementSpi$MQVwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA256KDF()
++ public KeyAgreementSpi$MQVwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA384CKDF()
++ public KeyAgreementSpi$MQVwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA384KDF()
++ public KeyAgreementSpi$MQVwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA512CKDF()
++ public KeyAgreementSpi$MQVwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi$MQVwithSHA512KDF()
++ public KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.BasicAgreement,org.bouncycastle.crypto.DerivationFunction)
++ public KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.DerivationFunction)
++ public KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.agreement.DHUnifiedAgreement,org.bouncycastle.crypto.DerivationFunction)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.bigIntToBytes(java.math.BigInteger)
-- private [B org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.bigIntToBytes(java.math.BigInteger)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.calcSecret()
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineGenerateSecret(java.lang.String)
-- protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.asymmetric.dh.KeyAgreementSpi.engineGenerateSecret(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.dsa.BCDSAPrivateKey.toString()
++ public DSASigner$detDSASha3_224 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSASha3_224()
++ public DSASigner$detDSASha3_256 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSASha3_256()
++ public DSASigner$detDSASha3_384 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSASha3_384()
++ public DSASigner$detDSASha3_512 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$detDSASha3_512()
++ public DSASigner$dsaSha3_224 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsaSha3_224()
++ public DSASigner$dsaSha3_256 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsaSha3_256()
++ public DSASigner$dsaSha3_384 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsaSha3_384()
++ public DSASigner$dsaSha3_512 org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner$dsaSha3_512()
-- protected DSASigner org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.DSA)
++ protected DSASigner org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.DSAExt)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.engineGetParameters()
-- public BCDSTU4145PublicKey org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey(java.security.interfaces.ECPublicKey)
-- public BCDSTU4145PublicKey org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey(org.bouncycastle.jce.spec.ECPublicKeySpec)
++ public BCDSTU4145PublicKey org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey(org.bouncycastle.jce.spec.ECPublicKeySpec,org.bouncycastle.jcajce.provider.config.ProviderConfiguration)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.dstu.BCDSTU4145PublicKey.engineGetQ()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.dstu.SignatureSpi.engineGetParameters()
++ public AlgorithmParametersSpi org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi()
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineGetEncoded()
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineGetEncoded(java.lang.String)
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineGetParameterSpec(java.lang.Class)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineInit(byte[])
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.engineToString()
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.ec.AlgorithmParametersSpi.isASN1FormatString(java.lang.String)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey.engineGetQ()
++ public GMCipherSpi$ErasableOutputStream org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$ErasableOutputStream()
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$ErasableOutputStream.erase()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$ErasableOutputStream.getBuf()
++ public GMCipherSpi$SM2 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2()
++ public GMCipherSpi$SM2withBlake2b org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withBlake2b()
++ public GMCipherSpi$SM2withBlake2s org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withBlake2s()
++ public GMCipherSpi$SM2withMD5 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withMD5()
++ public GMCipherSpi$SM2withRMD org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withRMD()
++ public GMCipherSpi$SM2withSha1 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withSha1()
++ public GMCipherSpi$SM2withSha224 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withSha224()
++ public GMCipherSpi$SM2withSha256 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withSha256()
++ public GMCipherSpi$SM2withSha384 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withSha384()
++ public GMCipherSpi$SM2withSha512 org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withSha512()
++ public GMCipherSpi$SM2withWhirlpool org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi$SM2withWhirlpool()
++ public GMCipherSpi org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi(org.bouncycastle.crypto.engines.SM2Engine)
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineDoFinal(byte[],int,int)
++ public int org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineDoFinal(byte[],int,int,byte[],int)
++ public int org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineGetBlockSize()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineGetIV()
++ public int org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineGetKeySize(java.security.Key)
++ public int org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineGetOutputSize(int)
++ public java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineGetParameters()
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineInit(int,java.security.Key,java.security.SecureRandom)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineSetMode(java.lang.String)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineSetPadding(java.lang.String)
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineUpdate(byte[],int,int)
++ public int org.bouncycastle.jcajce.provider.asymmetric.ec.GMCipherSpi.engineUpdate(byte[],int,int,byte[],int)
++ public GMSignatureSpi$sha256WithSM2 org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi$sha256WithSM2()
++ public GMSignatureSpi$sm3WithSM2 org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi$sm3WithSM2()
++ protected java.lang.Object org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineGetParameter(java.lang.String)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineGetParameters()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineSign()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.ec.GMSignatureSpi.engineVerify(byte[])
-- public IESCipher$ECIESwithAES org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithAES()
++ public IESCipher$ECIESwithCipher org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithCipher(org.bouncycastle.crypto.BlockCipher,int)
-- public IESCipher$ECIESwithDESede org.bouncycastle.jcajce.provider.asymmetric.ec.IESCipher$ECIESwithDESede()
++ public KeyAgreementSpi$CDHwithSHA1KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA1KDFAndSharedInfo()
++ public KeyAgreementSpi$CDHwithSHA224KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA224KDFAndSharedInfo()
++ public KeyAgreementSpi$CDHwithSHA256KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA256KDFAndSharedInfo()
++ public KeyAgreementSpi$CDHwithSHA384KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA384KDFAndSharedInfo()
++ public KeyAgreementSpi$CDHwithSHA512KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$CDHwithSHA512KDFAndSharedInfo()
++ public KeyAgreementSpi$DHUC org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUC()
++ public KeyAgreementSpi$DHUwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA1CKDF()
++ public KeyAgreementSpi$DHUwithSHA1KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA1KDF()
++ public KeyAgreementSpi$DHUwithSHA224CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA224CKDF()
++ public KeyAgreementSpi$DHUwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA224KDF()
++ public KeyAgreementSpi$DHUwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA256CKDF()
++ public KeyAgreementSpi$DHUwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA256KDF()
++ public KeyAgreementSpi$DHUwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA384CKDF()
++ public KeyAgreementSpi$DHUwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA384KDF()
++ public KeyAgreementSpi$DHUwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA512CKDF()
++ public KeyAgreementSpi$DHUwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHUwithSHA512KDF()
++ public KeyAgreementSpi$DHwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1CKDF()
++ public KeyAgreementSpi$DHwithSHA1KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA1KDFAndSharedInfo()
++ public KeyAgreementSpi$DHwithSHA224KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA224KDFAndSharedInfo()
++ public KeyAgreementSpi$DHwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256CKDF()
++ public KeyAgreementSpi$DHwithSHA256KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA256KDFAndSharedInfo()
++ public KeyAgreementSpi$DHwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA384CKDF()
++ public KeyAgreementSpi$DHwithSHA384KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA384KDFAndSharedInfo()
++ public KeyAgreementSpi$DHwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA512CKDF()
++ public KeyAgreementSpi$DHwithSHA512KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$DHwithSHA512KDFAndSharedInfo()
++ public KeyAgreementSpi$ECKAEGwithRIPEMD160KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithRIPEMD160KDF()
++ public KeyAgreementSpi$ECKAEGwithSHA1KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithSHA1KDF()
++ public KeyAgreementSpi$ECKAEGwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithSHA224KDF()
++ public KeyAgreementSpi$ECKAEGwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithSHA256KDF()
++ public KeyAgreementSpi$ECKAEGwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithSHA384KDF()
++ public KeyAgreementSpi$ECKAEGwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$ECKAEGwithSHA512KDF()
++ public KeyAgreementSpi$MQVwithSHA1CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1CKDF()
++ public KeyAgreementSpi$MQVwithSHA1KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA1KDFAndSharedInfo()
++ public KeyAgreementSpi$MQVwithSHA224CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA224CKDF()
++ public KeyAgreementSpi$MQVwithSHA224KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA224KDF()
++ public KeyAgreementSpi$MQVwithSHA224KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA224KDFAndSharedInfo()
++ public KeyAgreementSpi$MQVwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA256CKDF()
++ public KeyAgreementSpi$MQVwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA256KDF()
++ public KeyAgreementSpi$MQVwithSHA256KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA256KDFAndSharedInfo()
++ public KeyAgreementSpi$MQVwithSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA384CKDF()
++ public KeyAgreementSpi$MQVwithSHA384KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA384KDF()
++ public KeyAgreementSpi$MQVwithSHA384KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA384KDFAndSharedInfo()
++ public KeyAgreementSpi$MQVwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA512CKDF()
++ public KeyAgreementSpi$MQVwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA512KDF()
++ public KeyAgreementSpi$MQVwithSHA512KDFAndSharedInfo org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi$MQVwithSHA512KDFAndSharedInfo()
++ protected KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.agreement.ECDHCUnifiedAgreement,org.bouncycastle.crypto.DerivationFunction)
-- private [B org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.bigIntToBytes(java.math.BigInteger)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.bigIntToBytes(java.math.BigInteger)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.calcSecret()
-- protected [B org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.engineGenerateSecret()
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.engineGenerateSecret(byte[],int)
-- protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.asymmetric.ec.KeyAgreementSpi.engineGenerateSecret(java.lang.String)
++ public KeyFactorySpi$ECGOST3410_2012 org.bouncycastle.jcajce.provider.asymmetric.ec.KeyFactorySpi$ECGOST3410_2012()
++ public SignatureSpi$ecDSASha3_224 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_224()
++ public SignatureSpi$ecDSASha3_256 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_256()
++ public SignatureSpi$ecDSASha3_384 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_384()
++ public SignatureSpi$ecDSASha3_512 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDSASha3_512()
++ public SignatureSpi$ecDetDSASha3_224 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_224()
++ public SignatureSpi$ecDetDSASha3_256 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_256()
++ public SignatureSpi$ecDetDSASha3_384 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_384()
++ public SignatureSpi$ecDetDSASha3_512 org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$ecDetDSASha3_512()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi.engineGetParameters()
-- public BCECGOST3410PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey(org.bouncycastle.jce.spec.ECPublicKeySpec)
++ public BCECGOST3410PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey(org.bouncycastle.jce.spec.ECPublicKeySpec,org.bouncycastle.jcajce.provider.config.ProviderConfiguration)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey.engineGetQ()
-- public org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey.getGostParams()
++  org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.jcajce.provider.asymmetric.ecgost.BCECGOST3410PublicKey.getGostParams()
++ public KeyAgreementSpi$ECVKO org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi$ECVKO()
++ protected KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.agreement.ECVKOAgreement,org.bouncycastle.crypto.DerivationFunction)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi.calcSecret()
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ecgost.SignatureSpi.engineGetParameters()
++ protected BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey()
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(java.lang.String,org.bouncycastle.crypto.params.ECPrivateKeyParameters)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(java.lang.String,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey,java.security.spec.ECParameterSpec)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(java.lang.String,org.bouncycastle.crypto.params.ECPrivateKeyParameters,org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey,org.bouncycastle.jce.spec.ECParameterSpec)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(java.security.interfaces.ECPrivateKey)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(java.security.spec.ECPrivateKeySpec)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey)
++ public BCECGOST3410_2012PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey(org.bouncycastle.jce.spec.ECPrivateKeySpec)
++ public bool org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getAlgorithm()
++ public org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public java.util.Enumeration org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getBagAttributeKeys()
++ public java.math.BigInteger org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getD()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getFormat()
++ public org.bouncycastle.jce.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getParameters()
++ public java.security.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getParams()
++ public java.math.BigInteger org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.getS()
++ public int org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.hashCode()
++ public void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.setBagAttribute(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1Encodable)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.setPointFormat(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PrivateKey.toString()
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(java.lang.String,org.bouncycastle.crypto.params.ECPublicKeyParameters)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(java.lang.String,org.bouncycastle.crypto.params.ECPublicKeyParameters,java.security.spec.ECParameterSpec)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(java.lang.String,org.bouncycastle.crypto.params.ECPublicKeyParameters,org.bouncycastle.jce.spec.ECParameterSpec)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(java.security.interfaces.ECPublicKey)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(java.security.spec.ECPublicKeySpec)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey)
++ public BCECGOST3410_2012PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey(org.bouncycastle.jce.spec.ECPublicKeySpec,org.bouncycastle.jcajce.provider.config.ProviderConfiguration)
++ public bool org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getFormat()
++ public org.bouncycastle.asn1.cryptopro.GOST3410PublicKeyAlgParameters org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getGostParams()
++ public org.bouncycastle.jce.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getParameters()
++ public java.security.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getParams()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getQ()
++ public java.security.spec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.getW()
++ public int org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.hashCode()
++ public void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.setPointFormat(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.ecgost12.BCECGOST3410_2012PublicKey.toString()
++ public ECGOST2012SignatureSpi256 org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256()
++ protected java.lang.Object org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineGetParameter(java.lang.String)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineGetParameters()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineSign()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineUpdate(byte)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi256.engineVerify(byte[])
++ public ECGOST2012SignatureSpi512 org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512()
++ protected java.lang.Object org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineGetParameter(java.lang.String)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineGetParameters()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineSign()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineUpdate(byte)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.ecgost12.ECGOST2012SignatureSpi512.engineVerify(byte[])
++ public KeyAgreementSpi$ECVKO256 org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi$ECVKO256()
++ public KeyAgreementSpi$ECVKO512 org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi$ECVKO512()
++ protected KeyAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi(java.lang.String,org.bouncycastle.crypto.agreement.ECVKOAgreement,org.bouncycastle.crypto.DerivationFunction)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi.calcSecret()
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public KeyFactorySpi org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi()
++ protected java.security.PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ protected java.security.spec.KeySpec org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public KeyPairGeneratorSpi org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.jcajce.provider.asymmetric.ecgost12.KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public bool org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.getFormat()
++ public org.bouncycastle.jcajce.interfaces.EdDSAPublicKey org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.getPublicKey()
++ public int org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.hashCode()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPrivateKey.toString()
++ public bool org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.getFormat()
++ public int org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.hashCode()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCEdDSAPublicKey.toString()
++ public bool org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.getFormat()
++ public org.bouncycastle.jcajce.interfaces.XDHPublicKey org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.getPublicKey()
++ public int org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.hashCode()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPrivateKey.toString()
++ public bool org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.getAlgorithm()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.getFormat()
++ public int org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.hashCode()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.edec.BCXDHPublicKey.toString()
++ public KeyAgreementSpi$X25519 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519()
++ public KeyAgreementSpi$X25519UwithSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519UwithSHA256CKDF()
++ public KeyAgreementSpi$X25519UwithSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519UwithSHA256KDF()
++ public KeyAgreementSpi$X25519withSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519withSHA256CKDF()
++ public KeyAgreementSpi$X25519withSHA256KDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519withSHA256KDF()
++ public KeyAgreementSpi$X25519withSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519withSHA384CKDF()
++ public KeyAgreementSpi$X25519withSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X25519withSHA512CKDF()
++ public KeyAgreementSpi$X448 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448()
++ public KeyAgreementSpi$X448UwithSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448UwithSHA512CKDF()
++ public KeyAgreementSpi$X448UwithSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448UwithSHA512KDF()
++ public KeyAgreementSpi$X448withSHA256CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448withSHA256CKDF()
++ public KeyAgreementSpi$X448withSHA384CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448withSHA384CKDF()
++ public KeyAgreementSpi$X448withSHA512CKDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448withSHA512CKDF()
++ public KeyAgreementSpi$X448withSHA512KDF org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$X448withSHA512KDF()
++ public KeyAgreementSpi$XDH org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi$XDH()
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi.calcSecret()
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public KeyFactorySpi$Ed25519 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$Ed25519()
++ public KeyFactorySpi$Ed448 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$Ed448()
++ public KeyFactorySpi$EdDSA org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$EdDSA()
++ public KeyFactorySpi$X25519 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$X25519()
++ public KeyFactorySpi$X448 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$X448()
++ public KeyFactorySpi$XDH org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi$XDH()
++ public KeyFactorySpi org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi(java.lang.String,boolean,int)
++ protected java.security.PrivateKey org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ protected java.security.PublicKey org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ protected java.security.spec.KeySpec org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ protected java.security.Key org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.jcajce.provider.asymmetric.edec.KeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public KeyPairGeneratorSpi$Ed25519 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$Ed25519()
++ public KeyPairGeneratorSpi$Ed448 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$Ed448()
++ public KeyPairGeneratorSpi$EdDSA org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$EdDSA()
++ public KeyPairGeneratorSpi$X25519 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$X25519()
++ public KeyPairGeneratorSpi$X448 org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$X448()
++ public KeyPairGeneratorSpi$XDH org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi$XDH()
++ public java.security.KeyPair org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.jcajce.provider.asymmetric.edec.KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public SignatureSpi$Ed25519 org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi$Ed25519()
++ public SignatureSpi$Ed448 org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi$Ed448()
++ public SignatureSpi$EdDSA org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi$EdDSA()
++ protected java.lang.Object org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineGetParameter(java.lang.String)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineGetParameters()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineSign()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.edec.SignatureSpi.engineVerify(byte[])
-- protected int org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)
++ protected int org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)
-- protected void org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.elgamal.CipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.gost.BCGOST3410PrivateKey.toString()
-- public CipherSpi$IES org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi$IES()
-- public CipherSpi org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi(org.bouncycastle.crypto.engines.IESEngine)
-- protected [B org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineDoFinal(byte[],int,int)
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineGetBlockSize()
-- protected [B org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineGetIV()
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineGetKeySize(java.security.Key)
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineGetOutputSize(int)
-- protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineGetParameters()
-- protected void org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)
-- protected void org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineInit(int,java.security.Key,java.security.SecureRandom)
-- protected void org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
-- protected void org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineSetMode(java.lang.String)
-- protected void org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineSetPadding(java.lang.String)
-- protected [B org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineUpdate(byte[],int,int)
-- protected int org.bouncycastle.jcajce.provider.asymmetric.ies.CipherSpi.engineUpdate(byte[],int,int,byte[],int)
-- protected BCRSAPrivateKey org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey()
++ public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.rsa.BCRSAPrivateKey.toString()
++ protected int org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)
-- protected int org.bouncycastle.jcajce.provider.asymmetric.rsa.CipherSpi.engineDoFinal(byte[],int,int,byte[],int)
++ public DigestSignatureSpi$SHA3_224 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA3_224()
++ public DigestSignatureSpi$SHA3_256 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA3_256()
++ public DigestSignatureSpi$SHA3_384 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA3_384()
++ public DigestSignatureSpi$SHA3_512 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA3_512()
++ public DigestSignatureSpi$SHA512_224 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_224()
++ public DigestSignatureSpi$SHA512_256 org.bouncycastle.jcajce.provider.asymmetric.rsa.DigestSignatureSpi$SHA512_256()
++ public ISOSignatureSpi$SHA224WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA224WithRSAEncryption()
++ public ISOSignatureSpi$SHA256WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA256WithRSAEncryption()
++ public ISOSignatureSpi$SHA384WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA384WithRSAEncryption()
++ public ISOSignatureSpi$SHA512WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512WithRSAEncryption()
++ public ISOSignatureSpi$SHA512_224WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_224WithRSAEncryption()
++ public ISOSignatureSpi$SHA512_256WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$SHA512_256WithRSAEncryption()
++ public ISOSignatureSpi$WhirlpoolWithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.ISOSignatureSpi$WhirlpoolWithRSAEncryption()
++ public KeyPairGeneratorSpi$PSS org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi$PSS()
-- public KeyPairGeneratorSpi org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi(java.lang.String)
++ public KeyPairGeneratorSpi org.bouncycastle.jcajce.provider.asymmetric.rsa.KeyPairGeneratorSpi(java.lang.String,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public PSSSignatureSpi$SHA3_224withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA3_224withRSA()
++ public PSSSignatureSpi$SHA3_256withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA3_256withRSA()
++ public PSSSignatureSpi$SHA3_384withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA3_384withRSA()
++ public PSSSignatureSpi$SHA3_512withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA3_512withRSA()
++ public PSSSignatureSpi$SHA512_224withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_224withRSA()
++ public PSSSignatureSpi$SHA512_256withRSA org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi$SHA512_256withRSA()
-- protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.PSSSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ public X931SignatureSpi$RIPEMD128WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD128WithRSAEncryption()
++ public X931SignatureSpi$RIPEMD160WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$RIPEMD160WithRSAEncryption()
++ public X931SignatureSpi$SHA1WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA1WithRSAEncryption()
++ public X931SignatureSpi$SHA224WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA224WithRSAEncryption()
++ public X931SignatureSpi$SHA256WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA256WithRSAEncryption()
++ public X931SignatureSpi$SHA384WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA384WithRSAEncryption()
++ public X931SignatureSpi$SHA512WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512WithRSAEncryption()
++ public X931SignatureSpi$SHA512_224WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_224WithRSAEncryption()
++ public X931SignatureSpi$SHA512_256WithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$SHA512_256WithRSAEncryption()
++ public X931SignatureSpi$WhirlpoolWithRSAEncryption org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi$WhirlpoolWithRSAEncryption()
++ protected X931SignatureSpi org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.AsymmetricBlockCipher)
++ protected java.lang.Object org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineSign()
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.jcajce.provider.asymmetric.rsa.X931SignatureSpi.engineVerify(byte[])
++ public BaseAgreementSpi org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi(java.lang.String,org.bouncycastle.crypto.DerivationFunction)
++ protected abstract [B org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.calcSecret()
++ protected [B org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret()
++ protected int org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(byte[],int)
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.engineGenerateSecret(java.lang.String)
++ protected static java.lang.String org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.getAlgorithm(java.lang.String)
++ protected static int org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.getKeySize(java.lang.String)
++ protected static [B org.bouncycastle.jcajce.provider.asymmetric.util.BaseAgreementSpi.trimZeroes(byte[])
++ public BaseAlgorithmParameterGeneratorSpi org.bouncycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi()
++ protected final java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.util.BaseAlgorithmParameterGeneratorSpi.createParametersInstance(java.lang.String)
++ public BaseCipherSpi$ErasableOutputStream org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi$ErasableOutputStream()
++ public void org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi$ErasableOutputStream.erase()
++ public [B org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi$ErasableOutputStream.getBuf()
++ protected final java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.asymmetric.util.BaseCipherSpi.createParametersInstance(java.lang.String)
++ public DESUtil org.bouncycastle.jcajce.provider.asymmetric.util.DESUtil()
++ public static bool org.bouncycastle.jcajce.provider.asymmetric.util.DESUtil.isDES(java.lang.String)
++ public static void org.bouncycastle.jcajce.provider.asymmetric.util.DESUtil.setOddParity(byte[])
-- protected DSABase org.bouncycastle.jcajce.provider.asymmetric.util.DSABase(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.DSA,org.bouncycastle.jcajce.provider.asymmetric.util.DSAEncoder)
++ protected DSABase org.bouncycastle.jcajce.provider.asymmetric.util.DSABase(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.DSAExt,org.bouncycastle.crypto.signers.DSAEncoding)
++ public static java.security.spec.ECField org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertField(org.bouncycastle.math.field.FiniteField)
++ public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint)
-- public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertPoint(java.security.spec.ECParameterSpec,java.security.spec.ECPoint,boolean)
++ public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertPoint(org.bouncycastle.math.ec.ECCurve,java.security.spec.ECPoint)
-- public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertPoint(org.bouncycastle.math.ec.ECCurve,java.security.spec.ECPoint,boolean)
++ public static java.security.spec.ECPoint org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertPoint(org.bouncycastle.math.ec.ECPoint)
++ public static org.bouncycastle.jce.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertSpec(java.security.spec.ECParameterSpec)
-- public static org.bouncycastle.jce.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertSpec(java.security.spec.ECParameterSpec,boolean)
++ public static java.security.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertToSpec(org.bouncycastle.asn1.x9.X962Parameters,org.bouncycastle.math.ec.ECCurve)
++ public static java.security.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertToSpec(org.bouncycastle.asn1.x9.X9ECParameters)
++ public static java.security.spec.ECParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.convertToSpec(org.bouncycastle.crypto.params.ECDomainParameters)
++ public static org.bouncycastle.math.ec.ECCurve org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.getCurve(org.bouncycastle.jcajce.provider.config.ProviderConfiguration,org.bouncycastle.asn1.x9.X962Parameters)
++ public static org.bouncycastle.crypto.params.ECDomainParameters org.bouncycastle.jcajce.provider.asymmetric.util.EC5Util.getDomainParameters(org.bouncycastle.jcajce.provider.config.ProviderConfiguration,java.security.spec.ECParameterSpec)
++ public static java.lang.String org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.generateKeyFingerprint(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.jce.spec.ECParameterSpec)
++ public static org.bouncycastle.crypto.params.ECDomainParameters org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getDomainParameters(org.bouncycastle.jcajce.provider.config.ProviderConfiguration,org.bouncycastle.asn1.x9.X962Parameters)
++ public static org.bouncycastle.crypto.params.ECDomainParameters org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getDomainParameters(org.bouncycastle.jcajce.provider.config.ProviderConfiguration,org.bouncycastle.jce.spec.ECParameterSpec)
++ public static java.lang.String org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getNameFrom(java.security.spec.AlgorithmParameterSpec)
++ public static org.bouncycastle.asn1.x9.X9ECParameters org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getNamedCurveByName(java.lang.String)
++ public static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getNamedCurveOid(org.bouncycastle.jce.spec.ECParameterSpec)
++ public static int org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.getOrderBitLength(org.bouncycastle.jcajce.provider.config.ProviderConfiguration,java.math.BigInteger,java.math.BigInteger)
++ public static java.lang.String org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.privateKeyToString(java.lang.String,java.math.BigInteger,org.bouncycastle.jce.spec.ECParameterSpec)
++ public static java.lang.String org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil.publicKeyToString(java.lang.String,org.bouncycastle.math.ec.ECPoint,org.bouncycastle.jce.spec.ECParameterSpec)
++ public static org.bouncycastle.jce.spec.IESParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.IESUtil.guessParameterSpec(org.bouncycastle.crypto.BufferedBlockCipher,byte[])
-- public static org.bouncycastle.jce.spec.IESParameterSpec org.bouncycastle.jcajce.provider.asymmetric.util.IESUtil.guessParameterSpec(org.bouncycastle.crypto.engines.IESEngine)
++ public static int org.bouncycastle.jcajce.provider.asymmetric.util.PrimeCertaintyCalculator.getDefaultCertainty(int)
-- protected X509CRLObject org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject(org.bouncycastle.asn1.x509.CertificateList)
-- public java.util.Set org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getCriticalExtensionOIDs()
-- public [B org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getEncoded()
-- public [B org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getExtensionValue(java.lang.String)
-- public java.security.Principal org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getIssuerDN()
-- public javax.security.auth.x500.X500Principal org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getIssuerX500Principal()
-- public java.util.Date org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getNextUpdate()
-- public java.util.Set org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getNonCriticalExtensionOIDs()
-- public java.security.cert.X509CRLEntry org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getRevokedCertificate(java.math.BigInteger)
-- public java.util.Set org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getRevokedCertificates()
-- public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getSigAlgName()
-- public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getSigAlgOID()
-- public [B org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getSigAlgParams()
-- public [B org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getSignature()
-- public [B org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getTBSCertList()
-- public java.util.Date org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getThisUpdate()
-- public int org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.getVersion()
-- public bool org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.hasUnsupportedCriticalExtension()
-- public bool org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.isRevoked(java.security.cert.Certificate)
-- public java.lang.String org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.toString()
-- public void org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.verify(java.security.PublicKey)
-- public void org.bouncycastle.jcajce.provider.asymmetric.x509.X509CRLObject.verify(java.security.PublicKey,java.lang.String)
++ public abstract void org.bouncycastle.jcajce.provider.config.ConfigurableProvider.addAlgorithm(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)
++ public abstract void org.bouncycastle.jcajce.provider.config.ConfigurableProvider.addAttributes(java.lang.String,java.util.Map)
++ public abstract org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter org.bouncycastle.jcajce.provider.config.ConfigurableProvider.getKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier)
-- public java.io.OutputStream org.bouncycastle.jcajce.provider.config.PKCS12StoreParameter.getOutputStream()
-- public java.security.KeyStore$ProtectionParameter org.bouncycastle.jcajce.provider.config.PKCS12StoreParameter.getProtectionParameter()
-- public bool org.bouncycastle.jcajce.provider.config.PKCS12StoreParameter.isForDEREncoding()
++ public abstract java.util.Set org.bouncycastle.jcajce.provider.config.ProviderConfiguration.getAcceptableNamedCurves()
++ public abstract java.util.Map org.bouncycastle.jcajce.provider.config.ProviderConfiguration.getAdditionalECParameters()
++ public abstract java.security.spec.DSAParameterSpec org.bouncycastle.jcajce.provider.config.ProviderConfiguration.getDSADefaultParameters(int)
++ protected BCMessageDigest org.bouncycastle.jcajce.provider.digest.BCMessageDigest(org.bouncycastle.crypto.Xof,int)
++ public int org.bouncycastle.jcajce.provider.digest.BCMessageDigest.engineGetDigestLength()
++ public Blake2b$Blake2b160 org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b160()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b160.clone()
++ public Blake2b$Blake2b256 org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b256()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b256.clone()
++ public Blake2b$Blake2b384 org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b384()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b384.clone()
++ public Blake2b$Blake2b512 org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b512()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2b$Blake2b512.clone()
++ public Blake2b$Mappings org.bouncycastle.jcajce.provider.digest.Blake2b$Mappings()
++ public void org.bouncycastle.jcajce.provider.digest.Blake2b$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public Blake2s$Blake2s128 org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s128()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s128.clone()
++ public Blake2s$Blake2s160 org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s160()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s160.clone()
++ public Blake2s$Blake2s224 org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s224()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s224.clone()
++ public Blake2s$Blake2s256 org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s256()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Blake2s$Blake2s256.clone()
++ public Blake2s$Mappings org.bouncycastle.jcajce.provider.digest.Blake2s$Mappings()
++ public void org.bouncycastle.jcajce.provider.digest.Blake2s$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public DSTU7564$Digest256 org.bouncycastle.jcajce.provider.digest.DSTU7564$Digest256()
++ public DSTU7564$Digest384 org.bouncycastle.jcajce.provider.digest.DSTU7564$Digest384()
++ public DSTU7564$Digest512 org.bouncycastle.jcajce.provider.digest.DSTU7564$Digest512()
++ public DSTU7564$DigestDSTU7564 org.bouncycastle.jcajce.provider.digest.DSTU7564$DigestDSTU7564(int)
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.DSTU7564$DigestDSTU7564.clone()
++ public DSTU7564$HashMac256 org.bouncycastle.jcajce.provider.digest.DSTU7564$HashMac256()
++ public DSTU7564$HashMac384 org.bouncycastle.jcajce.provider.digest.DSTU7564$HashMac384()
++ public DSTU7564$HashMac512 org.bouncycastle.jcajce.provider.digest.DSTU7564$HashMac512()
++ public DSTU7564$KeyGenerator256 org.bouncycastle.jcajce.provider.digest.DSTU7564$KeyGenerator256()
++ public DSTU7564$KeyGenerator384 org.bouncycastle.jcajce.provider.digest.DSTU7564$KeyGenerator384()
++ public DSTU7564$KeyGenerator512 org.bouncycastle.jcajce.provider.digest.DSTU7564$KeyGenerator512()
++ public DSTU7564$Mappings org.bouncycastle.jcajce.provider.digest.DSTU7564$Mappings()
++ public void org.bouncycastle.jcajce.provider.digest.DSTU7564$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public GOST3411$Digest2012_256 org.bouncycastle.jcajce.provider.digest.GOST3411$Digest2012_256()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.GOST3411$Digest2012_256.clone()
++ public GOST3411$Digest2012_512 org.bouncycastle.jcajce.provider.digest.GOST3411$Digest2012_512()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.GOST3411$Digest2012_512.clone()
++ public GOST3411$HashMac2012_256 org.bouncycastle.jcajce.provider.digest.GOST3411$HashMac2012_256()
++ public GOST3411$HashMac2012_512 org.bouncycastle.jcajce.provider.digest.GOST3411$HashMac2012_512()
++ public GOST3411$KeyGenerator2012_256 org.bouncycastle.jcajce.provider.digest.GOST3411$KeyGenerator2012_256()
++ public GOST3411$KeyGenerator2012_512 org.bouncycastle.jcajce.provider.digest.GOST3411$KeyGenerator2012_512()
++ public Haraka$Digest256 org.bouncycastle.jcajce.provider.digest.Haraka$Digest256()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Haraka$Digest256.clone()
++ public Haraka$Digest512 org.bouncycastle.jcajce.provider.digest.Haraka$Digest512()
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Haraka$Digest512.clone()
++ public Haraka$Mappings org.bouncycastle.jcajce.provider.digest.Haraka$Mappings()
++ public void org.bouncycastle.jcajce.provider.digest.Haraka$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public Keccak$Digest224 org.bouncycastle.jcajce.provider.digest.Keccak$Digest224()
++ public Keccak$Digest256 org.bouncycastle.jcajce.provider.digest.Keccak$Digest256()
++ public Keccak$Digest288 org.bouncycastle.jcajce.provider.digest.Keccak$Digest288()
++ public Keccak$Digest384 org.bouncycastle.jcajce.provider.digest.Keccak$Digest384()
++ public Keccak$Digest512 org.bouncycastle.jcajce.provider.digest.Keccak$Digest512()
++ public Keccak$DigestKeccak org.bouncycastle.jcajce.provider.digest.Keccak$DigestKeccak(int)
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.Keccak$DigestKeccak.clone()
++ public Keccak$HashMac224 org.bouncycastle.jcajce.provider.digest.Keccak$HashMac224()
++ public Keccak$HashMac256 org.bouncycastle.jcajce.provider.digest.Keccak$HashMac256()
++ public Keccak$HashMac288 org.bouncycastle.jcajce.provider.digest.Keccak$HashMac288()
++ public Keccak$HashMac384 org.bouncycastle.jcajce.provider.digest.Keccak$HashMac384()
++ public Keccak$HashMac512 org.bouncycastle.jcajce.provider.digest.Keccak$HashMac512()
++ public Keccak$KeyGenerator224 org.bouncycastle.jcajce.provider.digest.Keccak$KeyGenerator224()
++ public Keccak$KeyGenerator256 org.bouncycastle.jcajce.provider.digest.Keccak$KeyGenerator256()
++ public Keccak$KeyGenerator288 org.bouncycastle.jcajce.provider.digest.Keccak$KeyGenerator288()
++ public Keccak$KeyGenerator384 org.bouncycastle.jcajce.provider.digest.Keccak$KeyGenerator384()
++ public Keccak$KeyGenerator512 org.bouncycastle.jcajce.provider.digest.Keccak$KeyGenerator512()
++ public Keccak$Mappings org.bouncycastle.jcajce.provider.digest.Keccak$Mappings()
++ public void org.bouncycastle.jcajce.provider.digest.Keccak$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
-- public SHA1$BasePBKDF2WithHmacSHA1 org.bouncycastle.jcajce.provider.digest.SHA1$BasePBKDF2WithHmacSHA1(java.lang.String,int)
-- protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.digest.SHA1$BasePBKDF2WithHmacSHA1.engineGenerateSecret(java.security.spec.KeySpec)
-- public SHA1$PBKDF2WithHmacSHA18BIT org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA18BIT()
-- public SHA1$PBKDF2WithHmacSHA1UTF8 org.bouncycastle.jcajce.provider.digest.SHA1$PBKDF2WithHmacSHA1UTF8()
++ public SHA3$DigestSHAKE org.bouncycastle.jcajce.provider.digest.SHA3$DigestSHAKE(int,int)
++ public java.lang.Object org.bouncycastle.jcajce.provider.digest.SHA3$DigestSHAKE.clone()
++ public [B org.bouncycastle.jcajce.provider.digest.SHA3$DigestSHAKE.engineDigest()
++ public SHA3$DigestShake128_256 org.bouncycastle.jcajce.provider.digest.SHA3$DigestShake128_256()
++ public SHA3$DigestShake256_512 org.bouncycastle.jcajce.provider.digest.SHA3$DigestShake256_512()
++ public SHA3$HashMacSHA3 org.bouncycastle.jcajce.provider.digest.SHA3$HashMacSHA3(int)
++ public SHA3$KeyGeneratorSHA3 org.bouncycastle.jcajce.provider.digest.SHA3$KeyGeneratorSHA3(int)
++ public SM3$HashMac org.bouncycastle.jcajce.provider.digest.SM3$HashMac()
++ public SM3$KeyGenerator org.bouncycastle.jcajce.provider.digest.SM3$KeyGenerator()
++ public DRBG$Default org.bouncycastle.jcajce.provider.drbg.DRBG$Default()
++ protected [B org.bouncycastle.jcajce.provider.drbg.DRBG$Default.engineGenerateSeed(int)
++ protected void org.bouncycastle.jcajce.provider.drbg.DRBG$Default.engineNextBytes(byte[])
++ protected void org.bouncycastle.jcajce.provider.drbg.DRBG$Default.engineSetSeed(byte[])
++ public DRBG$Mappings org.bouncycastle.jcajce.provider.drbg.DRBG$Mappings()
++ public void org.bouncycastle.jcajce.provider.drbg.DRBG$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public DRBG$NonceAndIV org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV()
++ protected [B org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV.engineGenerateSeed(int)
++ protected void org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV.engineNextBytes(byte[])
++ protected void org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV.engineSetSeed(byte[])
++ public DRBG org.bouncycastle.jcajce.provider.drbg.DRBG()
++ public BCFKS$Mappings org.bouncycastle.jcajce.provider.keystore.BCFKS$Mappings()
++ public void org.bouncycastle.jcajce.provider.keystore.BCFKS$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public BCFKS org.bouncycastle.jcajce.provider.keystore.BCFKS()
++ public BcFKSKeyStoreSpi$Def org.bouncycastle.jcajce.provider.keystore.bcfks.BcFKSKeyStoreSpi$Def()
++ public BcFKSKeyStoreSpi$DefShared org.bouncycastle.jcajce.provider.keystore.bcfks.BcFKSKeyStoreSpi$DefShared()
++ public BcFKSKeyStoreSpi$Std org.bouncycastle.jcajce.provider.keystore.bcfks.BcFKSKeyStoreSpi$Std()
++ public BcFKSKeyStoreSpi$StdShared org.bouncycastle.jcajce.provider.keystore.bcfks.BcFKSKeyStoreSpi$StdShared()
-- public PKCS12KeyStoreSpi org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi(java.security.Provider,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public PKCS12KeyStoreSpi org.bouncycastle.jcajce.provider.keystore.pkcs12.PKCS12KeyStoreSpi(org.bouncycastle.jcajce.util.JcaJceHelper,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public AES$AESCCMMAC org.bouncycastle.jcajce.provider.symmetric.AES$AESCCMMAC()
++ public AES$AlgParamGenCCM org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenCCM()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenCCM.engineGenerateParameters()
++ protected void org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenCCM.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public AES$AlgParamGenGCM org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenGCM()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenGCM.engineGenerateParameters()
++ protected void org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamGenGCM.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public AES$AlgParamsCCM org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineGetEncoded()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineGetEncoded(java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineInit(byte[])
++ protected void org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.engineToString()
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.AES$AlgParamsCCM.localEngineGetParameterSpec(java.lang.Class)
++ public AES$CCM org.bouncycastle.jcajce.provider.symmetric.AES$CCM()
++ public AES$KeyFactory org.bouncycastle.jcajce.provider.symmetric.AES$KeyFactory()
++ public AES$PBEWithSHA1AESCBC128 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA1AESCBC128()
++ public AES$PBEWithSHA1AESCBC192 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA1AESCBC192()
++ public AES$PBEWithSHA1AESCBC256 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA1AESCBC256()
++ public AES$PBEWithSHA256AESCBC128 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256AESCBC128()
++ public AES$PBEWithSHA256AESCBC192 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256AESCBC192()
++ public AES$PBEWithSHA256AESCBC256 org.bouncycastle.jcajce.provider.symmetric.AES$PBEWithSHA256AESCBC256()
++ public AES$WrapPad org.bouncycastle.jcajce.provider.symmetric.AES$WrapPad()
++ public ARIA$AlgParamGen org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamGen()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamGen.engineGenerateParameters()
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamGen.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public ARIA$AlgParams org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParams.engineToString()
++ public ARIA$AlgParamsCCM org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineGetEncoded()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineGetEncoded(java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineInit(byte[])
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.engineToString()
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsCCM.localEngineGetParameterSpec(java.lang.Class)
++ public ARIA$AlgParamsGCM org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineGetEncoded()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineGetEncoded(java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineInit(byte[])
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.engineToString()
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.ARIA$AlgParamsGCM.localEngineGetParameterSpec(java.lang.Class)
++ public ARIA$CBC org.bouncycastle.jcajce.provider.symmetric.ARIA$CBC()
++ public ARIA$CCM org.bouncycastle.jcajce.provider.symmetric.ARIA$CCM()
++ public ARIA$CFB org.bouncycastle.jcajce.provider.symmetric.ARIA$CFB()
++ public ARIA$ECB org.bouncycastle.jcajce.provider.symmetric.ARIA$ECB()
++ public ARIA$GCM org.bouncycastle.jcajce.provider.symmetric.ARIA$GCM()
++ public ARIA$GMAC org.bouncycastle.jcajce.provider.symmetric.ARIA$GMAC()
++ public ARIA$KeyFactory org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyFactory()
++ public ARIA$KeyGen org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyGen()
++ public ARIA$KeyGen org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyGen(int)
++ public ARIA$KeyGen128 org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyGen128()
++ public ARIA$KeyGen192 org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyGen192()
++ public ARIA$KeyGen256 org.bouncycastle.jcajce.provider.symmetric.ARIA$KeyGen256()
++ public ARIA$Mappings org.bouncycastle.jcajce.provider.symmetric.ARIA$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.ARIA$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public ARIA$OFB org.bouncycastle.jcajce.provider.symmetric.ARIA$OFB()
++ public ARIA$Poly1305 org.bouncycastle.jcajce.provider.symmetric.ARIA$Poly1305()
++ public ARIA$Poly1305KeyGen org.bouncycastle.jcajce.provider.symmetric.ARIA$Poly1305KeyGen()
++ public ARIA$RFC3211Wrap org.bouncycastle.jcajce.provider.symmetric.ARIA$RFC3211Wrap()
++ public ARIA$Wrap org.bouncycastle.jcajce.provider.symmetric.ARIA$Wrap()
++ public ARIA$WrapPad org.bouncycastle.jcajce.provider.symmetric.ARIA$WrapPad()
++ public Blowfish$CMAC org.bouncycastle.jcajce.provider.symmetric.Blowfish$CMAC()
++ public CAST6$AlgParams org.bouncycastle.jcajce.provider.symmetric.CAST6$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.CAST6$AlgParams.engineToString()
++ public Camellia$KeyFactory org.bouncycastle.jcajce.provider.symmetric.Camellia$KeyFactory()
++ public ChaCha$AlgParams org.bouncycastle.jcajce.provider.symmetric.ChaCha$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.ChaCha$AlgParams.engineToString()
++ public ChaCha$AlgParamsCC1305 org.bouncycastle.jcajce.provider.symmetric.ChaCha$AlgParamsCC1305()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.ChaCha$AlgParamsCC1305.engineToString()
++ public ChaCha$Base7539 org.bouncycastle.jcajce.provider.symmetric.ChaCha$Base7539()
++ public ChaCha$BaseCC20P1305 org.bouncycastle.jcajce.provider.symmetric.ChaCha$BaseCC20P1305()
++ public ChaCha$KeyGen7539 org.bouncycastle.jcajce.provider.symmetric.ChaCha$KeyGen7539()
++ public DSTU7624$AlgParamGen org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen(int)
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen.engineGenerateParameters()
++ protected void org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public DSTU7624$AlgParamGen128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen128()
++ public DSTU7624$AlgParamGen256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen256()
++ public DSTU7624$AlgParamGen512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParamGen512()
++ public DSTU7624$AlgParams org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.DSTU7624$AlgParams.engineToString()
++ public DSTU7624$CBC128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CBC128()
++ public DSTU7624$CBC256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CBC256()
++ public DSTU7624$CBC512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CBC512()
++ public DSTU7624$CCM128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CCM128()
++ public DSTU7624$CCM256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CCM256()
++ public DSTU7624$CCM512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CCM512()
++ public DSTU7624$CFB128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CFB128()
++ public DSTU7624$CFB256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CFB256()
++ public DSTU7624$CFB512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CFB512()
++ public DSTU7624$CTR128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CTR128()
++ public DSTU7624$CTR256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CTR256()
++ public DSTU7624$CTR512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$CTR512()
++ public DSTU7624$ECB org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB()
++ public DSTU7624$ECB128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB128()
++ public DSTU7624$ECB256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB256()
++ public DSTU7624$ECB512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB512()
++ public DSTU7624$ECB_128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB_128()
++ public DSTU7624$ECB_256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB_256()
++ public DSTU7624$ECB_512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$ECB_512()
++ public DSTU7624$GCM128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GCM128()
++ public DSTU7624$GCM256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GCM256()
++ public DSTU7624$GCM512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GCM512()
++ public DSTU7624$GMAC org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GMAC()
++ public DSTU7624$GMAC128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GMAC128()
++ public DSTU7624$GMAC256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GMAC256()
++ public DSTU7624$GMAC512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$GMAC512()
++ public DSTU7624$KeyGen org.bouncycastle.jcajce.provider.symmetric.DSTU7624$KeyGen()
++ public DSTU7624$KeyGen org.bouncycastle.jcajce.provider.symmetric.DSTU7624$KeyGen(int)
++ public DSTU7624$KeyGen128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$KeyGen128()
++ public DSTU7624$KeyGen256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$KeyGen256()
++ public DSTU7624$KeyGen512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$KeyGen512()
++ public DSTU7624$Mappings org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public DSTU7624$OFB128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$OFB128()
++ public DSTU7624$OFB256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$OFB256()
++ public DSTU7624$OFB512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$OFB512()
++ public DSTU7624$Wrap org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Wrap()
++ public DSTU7624$Wrap128 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Wrap128()
++ public DSTU7624$Wrap256 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Wrap256()
++ public DSTU7624$Wrap512 org.bouncycastle.jcajce.provider.symmetric.DSTU7624$Wrap512()
++ protected void org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams.localEngineGetParameterSpec(java.lang.Class)
++ protected [B org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams.localGetEncoded()
++ protected void org.bouncycastle.jcajce.provider.symmetric.GOST28147$AlgParams.localInit(byte[])
++ public GOST28147$BaseAlgParams org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams()
++ protected final [B org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.engineGetEncoded()
++ protected final [B org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.engineGetEncoded(java.lang.String)
++ protected final void org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.engineInit(byte[])
++ protected final void org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.getSBoxOID(byte[])
++ protected static org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.getSBoxOID(java.lang.String)
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.localEngineGetParameterSpec(java.lang.Class)
++ protected [B org.bouncycastle.jcajce.provider.symmetric.GOST28147$BaseAlgParams.localGetEncoded()
++ public GOST28147$CryptoProWrap org.bouncycastle.jcajce.provider.symmetric.GOST28147$CryptoProWrap()
++ public GOST28147$GostWrap org.bouncycastle.jcajce.provider.symmetric.GOST28147$GostWrap()
++ public GOST3412_2015$CBC org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$CBC()
++ public GOST3412_2015$CTR org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$CTR()
++ public GOST3412_2015$ECB org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$ECB()
++ public GOST3412_2015$GCFB org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$GCFB()
++ public GOST3412_2015$GCFB8 org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$GCFB8()
++ public GOST3412_2015$KeyGen org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$KeyGen()
++ public GOST3412_2015$KeyGen org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$KeyGen(int)
++ public GOST3412_2015$Mac org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$Mac()
++ public GOST3412_2015$Mappings org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public GOST3412_2015$OFB org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015$OFB()
++ public GOST3412_2015 org.bouncycastle.jcajce.provider.symmetric.GOST3412_2015()
++ public Grainv1$AlgParams org.bouncycastle.jcajce.provider.symmetric.Grainv1$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.Grainv1$AlgParams.engineToString()
++ public HC128$AlgParams org.bouncycastle.jcajce.provider.symmetric.HC128$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.HC128$AlgParams.engineToString()
++ public HC256$AlgParams org.bouncycastle.jcajce.provider.symmetric.HC256$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.HC256$AlgParams.engineToString()
++ public OpenSSLPBKDF$Mappings org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public OpenSSLPBKDF$PBKDF org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF()
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.symmetric.OpenSSLPBKDF$PBKDF.engineGenerateSecret(java.security.spec.KeySpec)
++ public PBEPBKDF1$AlgParams org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineGetEncoded()
++ protected [B org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineGetEncoded(java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineInit(byte[])
++ protected void org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineInit(byte[],java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineInit(java.security.spec.AlgorithmParameterSpec)
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.engineToString()
++ protected java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$AlgParams.localEngineGetParameterSpec(java.lang.Class)
++ public PBEPBKDF1$Mappings org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF1$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public PBEPBKDF2$BasePBKDF2 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$BasePBKDF2(java.lang.String,int,int)
++ public PBEPBKDF2$PBKDF2with8BIT org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2with8BIT()
++ public PBEPBKDF2$PBKDF2withGOST3411 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withGOST3411()
++ public PBEPBKDF2$PBKDF2withSHA224 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA224()
++ public PBEPBKDF2$PBKDF2withSHA256 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA256()
++ public PBEPBKDF2$PBKDF2withSHA384 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA384()
++ public PBEPBKDF2$PBKDF2withSHA3_224 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA3_224()
++ public PBEPBKDF2$PBKDF2withSHA3_256 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA3_256()
++ public PBEPBKDF2$PBKDF2withSHA3_384 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA3_384()
++ public PBEPBKDF2$PBKDF2withSHA3_512 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA3_512()
++ public PBEPBKDF2$PBKDF2withSHA512 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSHA512()
++ public PBEPBKDF2$PBKDF2withSM3 org.bouncycastle.jcajce.provider.symmetric.PBEPBKDF2$PBKDF2withSM3()
++ public Poly1305$KeyGen org.bouncycastle.jcajce.provider.symmetric.Poly1305$KeyGen()
++ public Poly1305$Mac org.bouncycastle.jcajce.provider.symmetric.Poly1305$Mac()
++ public Poly1305$Mappings org.bouncycastle.jcajce.provider.symmetric.Poly1305$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.Poly1305$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public SCRYPT$BasePBKDF2 org.bouncycastle.jcajce.provider.symmetric.SCRYPT$BasePBKDF2(java.lang.String,int)
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.symmetric.SCRYPT$BasePBKDF2.engineGenerateSecret(java.security.spec.KeySpec)
++ public SCRYPT$Mappings org.bouncycastle.jcajce.provider.symmetric.SCRYPT$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.SCRYPT$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public SCRYPT$ScryptWithUTF8 org.bouncycastle.jcajce.provider.symmetric.SCRYPT$ScryptWithUTF8()
++ public SEED$CMAC org.bouncycastle.jcajce.provider.symmetric.SEED$CMAC()
++ public SEED$KeyFactory org.bouncycastle.jcajce.provider.symmetric.SEED$KeyFactory()
++ public SM4$AlgParamGen org.bouncycastle.jcajce.provider.symmetric.SM4$AlgParamGen()
++ protected java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.SM4$AlgParamGen.engineGenerateParameters()
++ protected void org.bouncycastle.jcajce.provider.symmetric.SM4$AlgParamGen.engineInit(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public SM4$AlgParams org.bouncycastle.jcajce.provider.symmetric.SM4$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.SM4$AlgParams.engineToString()
++ public SM4$CMAC org.bouncycastle.jcajce.provider.symmetric.SM4$CMAC()
++ public SM4$ECB org.bouncycastle.jcajce.provider.symmetric.SM4$ECB()
++ public SM4$GMAC org.bouncycastle.jcajce.provider.symmetric.SM4$GMAC()
++ public SM4$KeyGen org.bouncycastle.jcajce.provider.symmetric.SM4$KeyGen()
++ public SM4$Mappings org.bouncycastle.jcajce.provider.symmetric.SM4$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.SM4$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public SM4$Poly1305 org.bouncycastle.jcajce.provider.symmetric.SM4$Poly1305()
++ public SM4$Poly1305KeyGen org.bouncycastle.jcajce.provider.symmetric.SM4$Poly1305KeyGen()
++ public Salsa20$AlgParams org.bouncycastle.jcajce.provider.symmetric.Salsa20$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.Salsa20$AlgParams.engineToString()
++ public Serpent$CBC org.bouncycastle.jcajce.provider.symmetric.Serpent$CBC()
++ public Serpent$CFB org.bouncycastle.jcajce.provider.symmetric.Serpent$CFB()
++ public Serpent$OFB org.bouncycastle.jcajce.provider.symmetric.Serpent$OFB()
++ public Serpent$TAlgParams org.bouncycastle.jcajce.provider.symmetric.Serpent$TAlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.Serpent$TAlgParams.engineToString()
++ public Serpent$TECB org.bouncycastle.jcajce.provider.symmetric.Serpent$TECB()
++ public Serpent$TKeyGen org.bouncycastle.jcajce.provider.symmetric.Serpent$TKeyGen()
++ public Serpent$TSerpentGMAC org.bouncycastle.jcajce.provider.symmetric.Serpent$TSerpentGMAC()
++ public Shacal2$CMAC org.bouncycastle.jcajce.provider.symmetric.Shacal2$CMAC()
++ public SipHash128$KeyGen org.bouncycastle.jcajce.provider.symmetric.SipHash128$KeyGen()
++ public SipHash128$Mac24 org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mac24()
++ public SipHash128$Mac48 org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mac48()
++ public SipHash128$Mappings org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.SipHash128$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public TLSKDF$Mappings org.bouncycastle.jcajce.provider.symmetric.TLSKDF$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.TLSKDF$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public TLSKDF$TLS10 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS10()
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS10.engineGenerateSecret(java.security.spec.KeySpec)
++ public TLSKDF$TLS11 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS11()
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS11.engineGenerateSecret(java.security.spec.KeySpec)
++ protected TLSKDF$TLS12 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS12(java.lang.String,org.bouncycastle.crypto.Mac)
++ protected javax.crypto.SecretKey org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS12.engineGenerateSecret(java.security.spec.KeySpec)
++ public TLSKDF$TLS12withSHA256 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS12withSHA256()
++ public TLSKDF$TLS12withSHA384 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS12withSHA384()
++ public TLSKDF$TLS12withSHA512 org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLS12withSHA512()
++ protected TLSKDF$TLSKeyMaterialFactory org.bouncycastle.jcajce.provider.symmetric.TLSKDF$TLSKeyMaterialFactory(java.lang.String)
++ public TLSKDF org.bouncycastle.jcajce.provider.symmetric.TLSKDF()
++ public Threefish$CMAC_1024 org.bouncycastle.jcajce.provider.symmetric.Threefish$CMAC_1024()
++ public Threefish$CMAC_256 org.bouncycastle.jcajce.provider.symmetric.Threefish$CMAC_256()
++ public Threefish$CMAC_512 org.bouncycastle.jcajce.provider.symmetric.Threefish$CMAC_512()
++ public XSalsa20$AlgParams org.bouncycastle.jcajce.provider.symmetric.XSalsa20$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.XSalsa20$AlgParams.engineToString()
++ public Zuc$AlgParams org.bouncycastle.jcajce.provider.symmetric.Zuc$AlgParams()
++ protected java.lang.String org.bouncycastle.jcajce.provider.symmetric.Zuc$AlgParams.engineToString()
++ public Zuc$KeyGen128 org.bouncycastle.jcajce.provider.symmetric.Zuc$KeyGen128()
++ public Zuc$KeyGen256 org.bouncycastle.jcajce.provider.symmetric.Zuc$KeyGen256()
++ public Zuc$Mappings org.bouncycastle.jcajce.provider.symmetric.Zuc$Mappings()
++ public void org.bouncycastle.jcajce.provider.symmetric.Zuc$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public Zuc$Zuc128 org.bouncycastle.jcajce.provider.symmetric.Zuc$Zuc128()
++ public Zuc$Zuc256 org.bouncycastle.jcajce.provider.symmetric.Zuc$Zuc256()
++ public Zuc$ZucMac128 org.bouncycastle.jcajce.provider.symmetric.Zuc$ZucMac128()
++ public Zuc$ZucMac256 org.bouncycastle.jcajce.provider.symmetric.Zuc$ZucMac256()
++ public Zuc$ZucMac256_32 org.bouncycastle.jcajce.provider.symmetric.Zuc$ZucMac256_32()
++ public Zuc$ZucMac256_64 org.bouncycastle.jcajce.provider.symmetric.Zuc$ZucMac256_64()
++ public BCPBEKey org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey(java.lang.String,org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey.destroy()
++ public bool org.bouncycastle.jcajce.provider.symmetric.util.BCPBEKey.isDestroyed()
++ protected final java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.util.BaseAlgorithmParameterGenerator.createParametersInstance(java.lang.String)
++ protected BaseBlockCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher(org.bouncycastle.crypto.BlockCipher,boolean,int)
++ protected BaseBlockCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher(org.bouncycastle.crypto.BlockCipher,int,int,int,int)
++ protected BaseBlockCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher(org.bouncycastle.crypto.BufferedBlockCipher,boolean,int)
++ protected BaseBlockCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher(org.bouncycastle.crypto.modes.AEADBlockCipher,boolean,int)
++ protected BaseBlockCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseBlockCipher(org.bouncycastle.crypto.modes.AEADCipher,boolean,int)
++ protected BaseStreamCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher(org.bouncycastle.crypto.StreamCipher,int,int)
++ protected BaseStreamCipher org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher(org.bouncycastle.crypto.StreamCipher,int,int,int)
-- protected int org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher.engineDoFinal(byte[],int,int,byte[],int)
++ protected int org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher.engineDoFinal(byte[],int,int,byte[],int)
++ protected void org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher.engineSetMode(java.lang.String)
-- protected void org.bouncycastle.jcajce.provider.symmetric.util.BaseStreamCipher.engineSetMode(java.lang.String)
++ public BaseWrapCipher$ErasableOutputStream org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher$ErasableOutputStream()
++ public void org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher$ErasableOutputStream.erase()
++ public [B org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher$ErasableOutputStream.getBuf()
++ public java.lang.Throwable org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher$InvalidKeyOrParametersException.getCause()
++ protected final java.security.AlgorithmParameters org.bouncycastle.jcajce.provider.symmetric.util.BaseWrapCipher.createParametersInstance(java.lang.String)
++ public ClassUtil org.bouncycastle.jcajce.provider.symmetric.util.ClassUtil()
++ public static java.lang.Class org.bouncycastle.jcajce.provider.symmetric.util.ClassUtil.loadClass(java.lang.Class,java.lang.String)
++ public GcmSpecUtil org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil()
++ public static org.bouncycastle.asn1.cms.GCMParameters org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil.extractGcmParameters(java.security.spec.AlgorithmParameterSpec)
++ public static java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil.extractGcmSpec(org.bouncycastle.asn1.ASN1Primitive)
++ public static bool org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil.gcmSpecExists()
++ public static bool org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil.isGcmSpec(java.lang.Class)
++ public static bool org.bouncycastle.jcajce.provider.symmetric.util.GcmSpecUtil.isGcmSpec(java.security.spec.AlgorithmParameterSpec)
++ public static org.bouncycastle.crypto.CipherParameters org.bouncycastle.jcajce.provider.symmetric.util.PBE$Util.makePBEMacParameters(javax.crypto.SecretKey,int,int,int,javax.crypto.spec.PBEParameterSpec)
++ public static org.bouncycastle.crypto.CipherParameters org.bouncycastle.jcajce.provider.symmetric.util.PBE$Util.makePBEParameters(byte[],int,int,int,int,java.security.spec.AlgorithmParameterSpec,java.lang.String)
++ protected void org.bouncycastle.jcajce.provider.util.AsymmetricAlgorithmProvider.addSignatureAlgorithm(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,java.lang.String,java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ protected void org.bouncycastle.jcajce.provider.util.AsymmetricAlgorithmProvider.registerOidAlgorithmParameterGenerator(org.bouncycastle.jcajce.provider.config.ConfigurableProvider,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)
++ public BadBlockException org.bouncycastle.jcajce.provider.util.BadBlockException(java.lang.String,java.lang.Throwable)
++ public java.lang.Throwable org.bouncycastle.jcajce.provider.util.BadBlockException.getCause()
++ public AEADParameterSpec org.bouncycastle.jcajce.spec.AEADParameterSpec(byte[],int)
++ public AEADParameterSpec org.bouncycastle.jcajce.spec.AEADParameterSpec(byte[],int,byte[])
++ public [B org.bouncycastle.jcajce.spec.AEADParameterSpec.getAssociatedData()
++ public int org.bouncycastle.jcajce.spec.AEADParameterSpec.getMacSizeInBits()
++ public [B org.bouncycastle.jcajce.spec.AEADParameterSpec.getNonce()
++ public CompositeAlgorithmSpec$Builder org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder()
++ public org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder.add(java.lang.String)
++ public org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder.add(java.lang.String,java.security.spec.AlgorithmParameterSpec)
++ public org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder.build()
++ public CompositeAlgorithmSpec org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec(org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec$Builder)
++ public java.util.List org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec.getAlgorithmNames()
++ public java.util.List org.bouncycastle.jcajce.spec.CompositeAlgorithmSpec.getParameterSpecs()
++ public DHDomainParameterSpec org.bouncycastle.jcajce.spec.DHDomainParameterSpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)
++ public DHDomainParameterSpec org.bouncycastle.jcajce.spec.DHDomainParameterSpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)
++ public DHDomainParameterSpec org.bouncycastle.jcajce.spec.DHDomainParameterSpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int)
++ public DHDomainParameterSpec org.bouncycastle.jcajce.spec.DHDomainParameterSpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,int,int)
++ public DHDomainParameterSpec org.bouncycastle.jcajce.spec.DHDomainParameterSpec(org.bouncycastle.crypto.params.DHParameters)
++ public org.bouncycastle.crypto.params.DHParameters org.bouncycastle.jcajce.spec.DHDomainParameterSpec.getDomainParameters()
++ public java.math.BigInteger org.bouncycastle.jcajce.spec.DHDomainParameterSpec.getJ()
++ public int org.bouncycastle.jcajce.spec.DHDomainParameterSpec.getM()
++ public java.math.BigInteger org.bouncycastle.jcajce.spec.DHDomainParameterSpec.getQ()
++ public DHExtendedPrivateKeySpec org.bouncycastle.jcajce.spec.DHExtendedPrivateKeySpec(java.math.BigInteger,javax.crypto.spec.DHParameterSpec)
++ public javax.crypto.spec.DHParameterSpec org.bouncycastle.jcajce.spec.DHExtendedPrivateKeySpec.getParams()
++ public DHExtendedPublicKeySpec org.bouncycastle.jcajce.spec.DHExtendedPublicKeySpec(java.math.BigInteger,javax.crypto.spec.DHParameterSpec)
++ public javax.crypto.spec.DHParameterSpec org.bouncycastle.jcajce.spec.DHExtendedPublicKeySpec.getParams()
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.KeyPair,java.security.PublicKey)
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.KeyPair,java.security.PublicKey,byte[])
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.PrivateKey,java.security.PublicKey)
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.PrivateKey,java.security.PublicKey,byte[])
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey)
++ public DHUParameterSpec org.bouncycastle.jcajce.spec.DHUParameterSpec(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey,byte[])
++ public java.security.PrivateKey org.bouncycastle.jcajce.spec.DHUParameterSpec.getEphemeralPrivateKey()
++ public java.security.PublicKey org.bouncycastle.jcajce.spec.DHUParameterSpec.getEphemeralPublicKey()
++ public java.security.PublicKey org.bouncycastle.jcajce.spec.DHUParameterSpec.getOtherPartyEphemeralKey()
++ public [B org.bouncycastle.jcajce.spec.DHUParameterSpec.getUserKeyingMaterial()
++ public DSTU4145ParameterSpec org.bouncycastle.jcajce.spec.DSTU4145ParameterSpec(org.bouncycastle.crypto.params.ECDomainParameters)
++ public bool org.bouncycastle.jcajce.spec.DSTU4145ParameterSpec.equals(java.lang.Object)
++ public [B org.bouncycastle.jcajce.spec.DSTU4145ParameterSpec.getDKE()
++ public int org.bouncycastle.jcajce.spec.DSTU4145ParameterSpec.hashCode()
++ public EdDSAParameterSpec org.bouncycastle.jcajce.spec.EdDSAParameterSpec(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.spec.EdDSAParameterSpec.getCurveName()
++ public [B org.bouncycastle.jcajce.spec.GOST28147ParameterSpec.getSBox()
++ public GOST28147WrapParameterSpec org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec(byte[])
++ public GOST28147WrapParameterSpec org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec(byte[],byte[])
++ public GOST28147WrapParameterSpec org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec(java.lang.String)
++ public GOST28147WrapParameterSpec org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec(java.lang.String,byte[])
++ public GOST28147WrapParameterSpec org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec(org.bouncycastle.asn1.ASN1ObjectIdentifier,byte[])
++ public [B org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec.getSBox()
++ public [B org.bouncycastle.jcajce.spec.GOST28147WrapParameterSpec.getUKM()
++ public GOST3410ParameterSpec org.bouncycastle.jcajce.spec.GOST3410ParameterSpec(java.lang.String)
++ public GOST3410ParameterSpec org.bouncycastle.jcajce.spec.GOST3410ParameterSpec(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public GOST3410ParameterSpec org.bouncycastle.jcajce.spec.GOST3410ParameterSpec(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.spec.GOST3410ParameterSpec.getDigestParamSet()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.spec.GOST3410ParameterSpec.getEncryptionParamSet()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.jcajce.spec.GOST3410ParameterSpec.getPublicKeyParamSet()
++ public java.lang.String org.bouncycastle.jcajce.spec.GOST3410ParameterSpec.getPublicKeyParamSetName()
++ public KTSParameterSpec$Builder org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder(java.lang.String,int)
++ public KTSParameterSpec$Builder org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder(java.lang.String,int,byte[])
++ public org.bouncycastle.jcajce.spec.KTSParameterSpec org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder.build()
++ public org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder.withKdfAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder org.bouncycastle.jcajce.spec.KTSParameterSpec$Builder.withParameterSpec(java.security.spec.AlgorithmParameterSpec)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.jcajce.spec.KTSParameterSpec.getKdfAlgorithm()
++ public java.lang.String org.bouncycastle.jcajce.spec.KTSParameterSpec.getKeyAlgorithmName()
++ public int org.bouncycastle.jcajce.spec.KTSParameterSpec.getKeySize()
++ public [B org.bouncycastle.jcajce.spec.KTSParameterSpec.getOtherInfo()
++ public java.security.spec.AlgorithmParameterSpec org.bouncycastle.jcajce.spec.KTSParameterSpec.getParameterSpec()
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.KeyPair,java.security.PublicKey)
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.KeyPair,java.security.PublicKey,byte[])
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.PrivateKey,java.security.PublicKey)
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.PrivateKey,java.security.PublicKey,byte[])
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey)
++ public MQVParameterSpec org.bouncycastle.jcajce.spec.MQVParameterSpec(java.security.PublicKey,java.security.PrivateKey,java.security.PublicKey,byte[])
++ public java.security.PrivateKey org.bouncycastle.jcajce.spec.MQVParameterSpec.getEphemeralPrivateKey()
++ public java.security.PublicKey org.bouncycastle.jcajce.spec.MQVParameterSpec.getEphemeralPublicKey()
++ public java.security.PublicKey org.bouncycastle.jcajce.spec.MQVParameterSpec.getOtherPartyEphemeralKey()
++ public [B org.bouncycastle.jcajce.spec.MQVParameterSpec.getUserKeyingMaterial()
++ public OpenSSHPrivateKeySpec org.bouncycastle.jcajce.spec.OpenSSHPrivateKeySpec(byte[])
++ public java.lang.String org.bouncycastle.jcajce.spec.OpenSSHPrivateKeySpec.getFormat()
++ public OpenSSHPublicKeySpec org.bouncycastle.jcajce.spec.OpenSSHPublicKeySpec(byte[])
++ public java.lang.String org.bouncycastle.jcajce.spec.OpenSSHPublicKeySpec.getFormat()
++ public java.lang.String org.bouncycastle.jcajce.spec.OpenSSHPublicKeySpec.getType()
++ public bool org.bouncycastle.jcajce.spec.PBKDF2KeySpec.isDefaultPrf()
++ public SM2ParameterSpec org.bouncycastle.jcajce.spec.SM2ParameterSpec(byte[])
++ public [B org.bouncycastle.jcajce.spec.SM2ParameterSpec.getID()
++ public ScryptKeySpec org.bouncycastle.jcajce.spec.ScryptKeySpec(char[],byte[],int,int,int,int)
++ public int org.bouncycastle.jcajce.spec.ScryptKeySpec.getBlockSize()
++ public int org.bouncycastle.jcajce.spec.ScryptKeySpec.getCostParameter()
++ public int org.bouncycastle.jcajce.spec.ScryptKeySpec.getKeyLength()
++ public int org.bouncycastle.jcajce.spec.ScryptKeySpec.getParallelizationParameter()
++ public [C org.bouncycastle.jcajce.spec.ScryptKeySpec.getPassword()
++ public [B org.bouncycastle.jcajce.spec.ScryptKeySpec.getSalt()
++ public transient TLSKeyMaterialSpec org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec(byte[],java.lang.String,int,byte[][])
++ public java.lang.String org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec.getLabel()
++ public int org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec.getLength()
++ public [B org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec.getSecret()
++ public [B org.bouncycastle.jcajce.spec.TLSKeyMaterialSpec.getSeed()
++ public UserKeyingMaterialSpec org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec(byte[])
++ public [B org.bouncycastle.jcajce.spec.UserKeyingMaterialSpec.getUserKeyingMaterial()
++ public XDHParameterSpec org.bouncycastle.jcajce.spec.XDHParameterSpec(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.spec.XDHParameterSpec.getCurveName()
++ public static org.bouncycastle.asn1.ASN1Encodable org.bouncycastle.jcajce.util.AlgorithmParametersUtils.extractParameters(java.security.AlgorithmParameters)
++ public static void org.bouncycastle.jcajce.util.AlgorithmParametersUtils.loadParameters(java.security.AlgorithmParameters,org.bouncycastle.asn1.ASN1Encodable)
++ public org.bouncycastle.jcajce.util.AnnotatedPrivateKey org.bouncycastle.jcajce.util.AnnotatedPrivateKey.addAnnotation(java.lang.String,java.lang.Object)
++ public bool org.bouncycastle.jcajce.util.AnnotatedPrivateKey.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getAlgorithm()
++ public java.lang.Object org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getAnnotation(java.lang.String)
++ public java.util.Map org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getAnnotations()
++ public [B org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getFormat()
++ public java.security.PrivateKey org.bouncycastle.jcajce.util.AnnotatedPrivateKey.getKey()
++ public int org.bouncycastle.jcajce.util.AnnotatedPrivateKey.hashCode()
++ public org.bouncycastle.jcajce.util.AnnotatedPrivateKey org.bouncycastle.jcajce.util.AnnotatedPrivateKey.removeAnnotation(java.lang.String)
++ public java.lang.String org.bouncycastle.jcajce.util.AnnotatedPrivateKey.toString()
++ public BCJcaJceHelper org.bouncycastle.jcajce.util.BCJcaJceHelper()
++ public java.security.cert.CertPathBuilder org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createCertPathBuilder(java.lang.String)
++ public java.security.cert.CertPathValidator org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createCertPathValidator(java.lang.String)
++ public java.security.cert.CertStore org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createCertStore(java.lang.String,java.security.cert.CertStoreParameters)
++ public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createCertificateFactory(java.lang.String)
-- public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createCertificateFactory(java.lang.String)
++ public javax.crypto.ExemptionMechanism org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createExemptionMechanism(java.lang.String)
++ public java.security.KeyStore org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createKeyStore(java.lang.String)
++ public java.security.MessageDigest org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createMessageDigest(java.lang.String)
++ public java.security.SecureRandom org.bouncycastle.jcajce.util.DefaultJcaJceHelper.createSecureRandom(java.lang.String)
++ public ECKeyUtil org.bouncycastle.jcajce.util.ECKeyUtil()
++ public static java.security.interfaces.ECPublicKey org.bouncycastle.jcajce.util.ECKeyUtil.createKeyWithCompression(java.security.interfaces.ECPublicKey)
++ public abstract java.security.cert.CertPathBuilder org.bouncycastle.jcajce.util.JcaJceHelper.createCertPathBuilder(java.lang.String)
++ public abstract java.security.cert.CertPathValidator org.bouncycastle.jcajce.util.JcaJceHelper.createCertPathValidator(java.lang.String)
++ public abstract java.security.cert.CertStore org.bouncycastle.jcajce.util.JcaJceHelper.createCertStore(java.lang.String,java.security.cert.CertStoreParameters)
-- public abstract java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.JcaJceHelper.createCertificateFactory(java.lang.String)
++ public abstract java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.JcaJceHelper.createCertificateFactory(java.lang.String)
++ public abstract javax.crypto.ExemptionMechanism org.bouncycastle.jcajce.util.JcaJceHelper.createExemptionMechanism(java.lang.String)
++ public abstract java.security.KeyStore org.bouncycastle.jcajce.util.JcaJceHelper.createKeyStore(java.lang.String)
++ public abstract java.security.MessageDigest org.bouncycastle.jcajce.util.JcaJceHelper.createMessageDigest(java.lang.String)
++ public abstract java.security.SecureRandom org.bouncycastle.jcajce.util.JcaJceHelper.createSecureRandom(java.lang.String)
++ public MessageDigestUtils org.bouncycastle.jcajce.util.MessageDigestUtils()
++ public static java.lang.String org.bouncycastle.jcajce.util.MessageDigestUtils.getDigestName(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public java.security.cert.CertPathBuilder org.bouncycastle.jcajce.util.NamedJcaJceHelper.createCertPathBuilder(java.lang.String)
++ public java.security.cert.CertPathValidator org.bouncycastle.jcajce.util.NamedJcaJceHelper.createCertPathValidator(java.lang.String)
++ public java.security.cert.CertStore org.bouncycastle.jcajce.util.NamedJcaJceHelper.createCertStore(java.lang.String,java.security.cert.CertStoreParameters)
-- public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.NamedJcaJceHelper.createCertificateFactory(java.lang.String)
++ public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.NamedJcaJceHelper.createCertificateFactory(java.lang.String)
++ public javax.crypto.ExemptionMechanism org.bouncycastle.jcajce.util.NamedJcaJceHelper.createExemptionMechanism(java.lang.String)
++ public java.security.KeyStore org.bouncycastle.jcajce.util.NamedJcaJceHelper.createKeyStore(java.lang.String)
++ public java.security.MessageDigest org.bouncycastle.jcajce.util.NamedJcaJceHelper.createMessageDigest(java.lang.String)
++ public java.security.SecureRandom org.bouncycastle.jcajce.util.NamedJcaJceHelper.createSecureRandom(java.lang.String)
++ public PrivateKeyAnnotator org.bouncycastle.jcajce.util.PrivateKeyAnnotator()
++ public static org.bouncycastle.jcajce.util.AnnotatedPrivateKey org.bouncycastle.jcajce.util.PrivateKeyAnnotator.annotate(java.security.PrivateKey,java.lang.String)
++ public static org.bouncycastle.jcajce.util.AnnotatedPrivateKey org.bouncycastle.jcajce.util.PrivateKeyAnnotator.annotate(java.security.PrivateKey,java.util.Map)
++ public java.security.cert.CertPathBuilder org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createCertPathBuilder(java.lang.String)
++ public java.security.cert.CertPathValidator org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createCertPathValidator(java.lang.String)
++ public java.security.cert.CertStore org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createCertStore(java.lang.String,java.security.cert.CertStoreParameters)
++ public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createCertificateFactory(java.lang.String)
-- public java.security.cert.CertificateFactory org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createCertificateFactory(java.lang.String)
++ public javax.crypto.ExemptionMechanism org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createExemptionMechanism(java.lang.String)
++ public java.security.KeyStore org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createKeyStore(java.lang.String)
++ public java.security.MessageDigest org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createMessageDigest(java.lang.String)
++ public java.security.SecureRandom org.bouncycastle.jcajce.util.ProviderJcaJceHelper.createSecureRandom(java.lang.String)
++ public ExtCertPathValidatorException org.bouncycastle.jce.exception.ExtCertPathValidatorException(java.lang.String)
++ public void org.bouncycastle.jce.provider.BouncyCastleProvider.addAlgorithm(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)
++ public void org.bouncycastle.jce.provider.BouncyCastleProvider.addAttributes(java.lang.String,java.util.Map)
++ public org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter org.bouncycastle.jce.provider.BouncyCastleProvider.getKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier)
-- protected static void org.bouncycastle.jce.provider.CertPathValidatorUtilities.addAdditionalStoreFromLocation(java.lang.String,org.bouncycastle.x509.ExtendedPKIXParameters)
-- protected static void org.bouncycastle.jce.provider.CertPathValidatorUtilities.addAdditionalStoresFromAltNames(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXParameters)
-- protected static void org.bouncycastle.jce.provider.CertPathValidatorUtilities.addAdditionalStoresFromCRLDistributionPoint(org.bouncycastle.asn1.x509.CRLDistPoint,org.bouncycastle.x509.ExtendedPKIXParameters)
++ protected static java.util.Collection org.bouncycastle.jce.provider.CertPathValidatorUtilities.findCertificates(org.bouncycastle.jcajce.PKIXCertStoreSelector,java.util.List)
-- protected static java.util.Collection org.bouncycastle.jce.provider.CertPathValidatorUtilities.findCertificates(org.bouncycastle.x509.X509AttributeCertStoreSelector,java.util.List)
-- protected static java.util.Collection org.bouncycastle.jce.provider.CertPathValidatorUtilities.findCertificates(org.bouncycastle.x509.X509CertStoreSelector,java.util.List)
-- protected static java.util.Collection org.bouncycastle.jce.provider.CertPathValidatorUtilities.findIssuerCerts(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXBuilderParameters)
++ protected static void org.bouncycastle.jce.provider.CertPathValidatorUtilities.getCRLIssuersFromDistributionPoint(org.bouncycastle.asn1.x509.DistributionPoint,java.util.Collection,java.security.cert.X509CRLSelector)
-- protected static void org.bouncycastle.jce.provider.CertPathValidatorUtilities.getCRLIssuersFromDistributionPoint(org.bouncycastle.asn1.x509.DistributionPoint,java.util.Collection,java.security.cert.X509CRLSelector,org.bouncycastle.x509.ExtendedPKIXParameters)
-- protected static java.util.Set org.bouncycastle.jce.provider.CertPathValidatorUtilities.getCompleteCRLs(org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters)
++ protected static java.util.Set org.bouncycastle.jce.provider.CertPathValidatorUtilities.getCompleteCRLs(org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters,org.bouncycastle.asn1.x509.DistributionPoint,java.lang.Object,java.util.Date,org.bouncycastle.jcajce.PKIXExtendedParameters)
++ protected static java.util.Set org.bouncycastle.jce.provider.CertPathValidatorUtilities.getDeltaCRLs(java.util.Date,java.security.cert.X509CRL,java.util.List,java.util.List,org.bouncycastle.jcajce.util.JcaJceHelper)
-- protected static java.util.Set org.bouncycastle.jce.provider.CertPathValidatorUtilities.getDeltaCRLs(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509CRL)
-- protected static javax.security.auth.x500.X500Principal org.bouncycastle.jce.provider.CertPathValidatorUtilities.getEncodedIssuerPrincipal(java.lang.Object)
-- protected static javax.security.auth.x500.X500Principal org.bouncycastle.jce.provider.CertPathValidatorUtilities.getIssuerPrincipal(java.security.cert.X509CRL)
-- protected static java.security.PublicKey org.bouncycastle.jce.provider.CertPathValidatorUtilities.getNextWorkingKey(java.util.List,int)
++ protected static java.security.PublicKey org.bouncycastle.jce.provider.CertPathValidatorUtilities.getNextWorkingKey(java.util.List,int,org.bouncycastle.jcajce.util.JcaJceHelper)
-- protected static javax.security.auth.x500.X500Principal org.bouncycastle.jce.provider.CertPathValidatorUtilities.getSubjectPrincipal(java.security.cert.X509Certificate)
++ protected static java.util.Date org.bouncycastle.jce.provider.CertPathValidatorUtilities.getValidCertDateFromValidityModel(org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.CertPath,int)
-- protected static java.util.Date org.bouncycastle.jce.provider.CertPathValidatorUtilities.getValidCertDateFromValidityModel(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.CertPath,int)
-- protected static java.util.Date org.bouncycastle.jce.provider.CertPathValidatorUtilities.getValidDate(java.security.cert.PKIXParameters)
++ protected static java.util.Date org.bouncycastle.jce.provider.CertPathValidatorUtilities.getValidDate(org.bouncycastle.jcajce.PKIXExtendedParameters)
-- public JCEStreamCipher$Blowfish_CFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_CFB8()
-- public JCEStreamCipher$Blowfish_OFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Blowfish_OFB8()
-- public JCEStreamCipher$DES_CFB8 org.bouncycastle.jce.provider.JCEStreamCipher$DES_CFB8()
-- public JCEStreamCipher$DES_OFB8 org.bouncycastle.jce.provider.JCEStreamCipher$DES_OFB8()
-- public JCEStreamCipher$DESede_CFB8 org.bouncycastle.jce.provider.JCEStreamCipher$DESede_CFB8()
-- public JCEStreamCipher$DESede_OFB8 org.bouncycastle.jce.provider.JCEStreamCipher$DESede_OFB8()
-- public JCEStreamCipher$Skipjack_CFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_CFB8()
-- public JCEStreamCipher$Skipjack_OFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Skipjack_OFB8()
-- public JCEStreamCipher$Twofish_CFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_CFB8()
-- public JCEStreamCipher$Twofish_OFB8 org.bouncycastle.jce.provider.JCEStreamCipher$Twofish_OFB8()
-- protected JCEStreamCipher org.bouncycastle.jce.provider.JCEStreamCipher(org.bouncycastle.crypto.StreamCipher,int)
-- protected [B org.bouncycastle.jce.provider.JCEStreamCipher.engineDoFinal(byte[],int,int)
-- protected int org.bouncycastle.jce.provider.JCEStreamCipher.engineDoFinal(byte[],int,int,byte[],int)
-- protected int org.bouncycastle.jce.provider.JCEStreamCipher.engineGetBlockSize()
-- protected [B org.bouncycastle.jce.provider.JCEStreamCipher.engineGetIV()
-- protected int org.bouncycastle.jce.provider.JCEStreamCipher.engineGetKeySize(java.security.Key)
-- protected int org.bouncycastle.jce.provider.JCEStreamCipher.engineGetOutputSize(int)
-- protected java.security.AlgorithmParameters org.bouncycastle.jce.provider.JCEStreamCipher.engineGetParameters()
-- protected void org.bouncycastle.jce.provider.JCEStreamCipher.engineInit(int,java.security.Key,java.security.AlgorithmParameters,java.security.SecureRandom)
-- protected void org.bouncycastle.jce.provider.JCEStreamCipher.engineInit(int,java.security.Key,java.security.SecureRandom)
-- protected void org.bouncycastle.jce.provider.JCEStreamCipher.engineInit(int,java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
-- protected void org.bouncycastle.jce.provider.JCEStreamCipher.engineSetMode(java.lang.String)
-- protected void org.bouncycastle.jce.provider.JCEStreamCipher.engineSetPadding(java.lang.String)
-- protected java.security.Key org.bouncycastle.jce.provider.JCEStreamCipher.engineUnwrap(byte[],java.lang.String,int)
-- protected [B org.bouncycastle.jce.provider.JCEStreamCipher.engineUpdate(byte[],int,int)
-- protected int org.bouncycastle.jce.provider.JCEStreamCipher.engineUpdate(byte[],int,int,byte[],int)
-- protected [B org.bouncycastle.jce.provider.JCEStreamCipher.engineWrap(java.security.Key)
++ protected static java.util.Collection org.bouncycastle.jce.provider.PKIXAttrCertPathBuilderSpi.findCertificates(org.bouncycastle.x509.X509AttributeCertStoreSelector,java.util.List)
++ public java.util.Set org.bouncycastle.jce.provider.PKIXCRLUtil.findCRLs(org.bouncycastle.jcajce.PKIXCRLStoreSelector,java.util.Date,java.util.List,java.util.List)
-- public java.util.Set org.bouncycastle.jce.provider.PKIXCRLUtil.findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,java.security.cert.PKIXParameters)
-- public java.util.Set org.bouncycastle.jce.provider.PKIXCRLUtil.findCRLs(org.bouncycastle.x509.X509CRLStoreSelector,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.Date)
++ protected java.security.cert.CertPathBuilderResult org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi.build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)
-- protected java.security.cert.CertPathBuilderResult org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi.build(java.security.cert.X509Certificate,org.bouncycastle.x509.ExtendedPKIXBuilderParameters,java.util.List)
++ public PKIXCertPathBuilderSpi_8 org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi_8()
++ protected java.security.cert.CertPathBuilderResult org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi_8.build(java.security.cert.X509Certificate,org.bouncycastle.jcajce.PKIXExtendedBuilderParameters,java.util.List)
++ public java.security.cert.CertPathBuilderResult org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi_8.engineBuild(java.security.cert.CertPathParameters)
++ public java.security.cert.PKIXCertPathChecker org.bouncycastle.jce.provider.PKIXCertPathBuilderSpi_8.engineGetRevocationChecker()
++ public PKIXCertPathValidatorSpi org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi(boolean)
++ public PKIXCertPathValidatorSpi_8 org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi_8()
++ public PKIXCertPathValidatorSpi_8 org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi_8(boolean)
++ public java.security.cert.PKIXCertPathChecker org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi_8.engineGetRevocationChecker()
++ public java.security.cert.CertPathValidatorResult org.bouncycastle.jce.provider.PKIXCertPathValidatorSpi_8.engineValidate(java.security.cert.CertPath,java.security.cert.CertPathParameters)
-- protected java.util.Set org.bouncycastle.jce.provider.PKIXNameConstraintValidator.unionDNS(java.util.Set,java.lang.String)
++ public PKIXNameConstraintValidatorException org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException(java.lang.String,java.lang.Throwable)
++ public java.lang.Throwable org.bouncycastle.jce.provider.PKIXNameConstraintValidatorException.getCause()
++ public void org.bouncycastle.jce.provider.PKIXPolicyNode.setExpectedPolicies(java.util.Set)
++ protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.checkCRLs(org.bouncycastle.jcajce.PKIXCertRevocationCheckerParameters,org.bouncycastle.jcajce.PKIXExtendedParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List,org.bouncycastle.jcajce.util.JcaJceHelper)
-- protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.checkCRLs(org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.util.Date,java.security.cert.X509Certificate,java.security.PublicKey,java.util.List)
-- protected static java.util.Set org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLA1i(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL)
-- protected static java.util.Set org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLA1ii(java.util.Date,org.bouncycastle.x509.ExtendedPKIXParameters,java.security.cert.X509Certificate,java.security.cert.X509CRL)
++ protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.bouncycastle.jcajce.PKIXExtendedParameters)
-- protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLC(java.security.cert.X509CRL,java.security.cert.X509CRL,org.bouncycastle.x509.ExtendedPKIXParameters)
++ protected static java.util.Set org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.jcajce.PKIXExtendedParameters,java.util.List,org.bouncycastle.jcajce.util.JcaJceHelper)
-- protected static java.util.Set org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLF(java.security.cert.X509CRL,java.lang.Object,java.security.cert.X509Certificate,java.security.PublicKey,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.List)
++ protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.jcajce.PKIXExtendedParameters)
-- protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCRLI(java.util.Date,java.security.cert.X509CRL,java.lang.Object,org.bouncycastle.jce.provider.CertStatus,org.bouncycastle.x509.ExtendedPKIXParameters)
++ protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertA(java.security.cert.CertPath,org.bouncycastle.jcajce.PKIXExtendedParameters,org.bouncycastle.jcajce.PKIXCertRevocationChecker,int,java.security.PublicKey,boolean,org.bouncycastle.asn1.x500.X500Name,java.security.cert.X509Certificate)
-- protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertA(java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters,int,java.security.PublicKey,boolean,javax.security.auth.x500.X500Principal,java.security.cert.X509Certificate)
-- protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertBC(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXNameConstraintValidator)
++ protected static void org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertBC(java.security.cert.CertPath,int,org.bouncycastle.jce.provider.PKIXNameConstraintValidator,boolean)
-- protected static org.bouncycastle.jce.provider.PKIXPolicyNode org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertD(java.security.cert.CertPath,int,java.util.Set,org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],int)
++ protected static org.bouncycastle.jce.provider.PKIXPolicyNode org.bouncycastle.jce.provider.RFC3280CertPathUtilities.processCertD(java.security.cert.CertPath,int,java.util.Set,org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.List[],int,boolean)
++ protected static org.bouncycastle.jce.provider.PKIXPolicyNode org.bouncycastle.jce.provider.RFC3280CertPathUtilities.wrapupCertG(java.security.cert.CertPath,org.bouncycastle.jcajce.PKIXExtendedParameters,java.util.Set,int,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.Set)
-- protected static org.bouncycastle.jce.provider.PKIXPolicyNode org.bouncycastle.jce.provider.RFC3280CertPathUtilities.wrapupCertG(java.security.cert.CertPath,org.bouncycastle.x509.ExtendedPKIXParameters,java.util.Set,int,java.util.List[],org.bouncycastle.jce.provider.PKIXPolicyNode,java.util.Set)
++ public static bool org.bouncycastle.jce.provider.X509CRLObject.isIndirectCRL(java.security.cert.X509CRL)
-- static bool org.bouncycastle.jce.provider.X509CRLObject.isIndirectCRL(java.security.cert.X509CRL)
++ public void org.bouncycastle.jce.provider.X509CRLObject.verify(java.security.PublicKey,java.security.Provider)
++ public final void org.bouncycastle.jce.provider.X509CertificateObject.verify(java.security.PublicKey,java.security.Provider)
-- public IESParameterSpec org.bouncycastle.jce.spec.IESParameterSpec(byte[],byte[],int,int)
++ public IESParameterSpec org.bouncycastle.jce.spec.IESParameterSpec(byte[],byte[],int,int,byte[],boolean)
++ public bool org.bouncycastle.jce.spec.IESParameterSpec.getPointCompression()
++ public void org.bouncycastle.jce.spec.IESParameterSpec.setPointCompression(boolean)
++ public OpenSSHPrivateKeySpec org.bouncycastle.jce.spec.OpenSSHPrivateKeySpec(byte[])
++ public OpenSSHPublicKeySpec org.bouncycastle.jce.spec.OpenSSHPublicKeySpec(byte[])
++ public java.math.BigInteger org.bouncycastle.math.Primes$MROutput.getFactor()
++ public bool org.bouncycastle.math.Primes$MROutput.isNotPrimePower()
++ public bool org.bouncycastle.math.Primes$MROutput.isProvablyComposite()
++ public java.math.BigInteger org.bouncycastle.math.Primes$STOutput.getPrime()
++ public int org.bouncycastle.math.Primes$STOutput.getPrimeGenCounter()
++ public [B org.bouncycastle.math.Primes$STOutput.getPrimeSeed()
++ public Primes org.bouncycastle.math.Primes()
++ public static org.bouncycastle.math.Primes$MROutput org.bouncycastle.math.Primes.enhancedMRProbablePrimeTest(java.math.BigInteger,java.security.SecureRandom,int)
++ public static org.bouncycastle.math.Primes$STOutput org.bouncycastle.math.Primes.generateSTRandomPrime(org.bouncycastle.crypto.Digest,int,byte[])
++ public static bool org.bouncycastle.math.Primes.hasAnySmallFactors(java.math.BigInteger)
++ public static bool org.bouncycastle.math.Primes.isMRProbablePrime(java.math.BigInteger,java.security.SecureRandom,int)
++ public static bool org.bouncycastle.math.Primes.isMRProbablePrimeToBase(java.math.BigInteger,java.math.BigInteger)
++ public AbstractECLookupTable org.bouncycastle.math.ec.AbstractECLookupTable()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.AbstractECLookupTable.lookupVar(int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.AbstractECMultiplier.checkResult(org.bouncycastle.math.ec.ECPoint)
-- public DoubleAddMultiplier org.bouncycastle.math.ec.DoubleAddMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.DoubleAddMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
++ public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECAlgorithms.cleanPoint(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECPoint)
++ public static bool org.bouncycastle.math.ec.ECAlgorithms.isF2mField(org.bouncycastle.math.field.FiniteField)
++ public static bool org.bouncycastle.math.ec.ECAlgorithms.isFpField(org.bouncycastle.math.field.FiniteField)
++ public static void org.bouncycastle.math.ec.ECAlgorithms.montgomeryTrick(org.bouncycastle.math.ec.ECFieldElement[],int,int,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$AbstractF2m.createPoint(java.math.BigInteger,java.math.BigInteger)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$AbstractF2m.decompressPoint(int,java.math.BigInteger)
++ public static java.math.BigInteger org.bouncycastle.math.ec.ECCurve$AbstractF2m.inverse(int,int[],java.math.BigInteger)
++ public bool org.bouncycastle.math.ec.ECCurve$AbstractF2m.isKoblitz()
++ public bool org.bouncycastle.math.ec.ECCurve$AbstractF2m.isValidFieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve$AbstractF2m.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve$AbstractF2m.randomFieldElementMult(java.security.SecureRandom)
++ protected org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve$AbstractF2m.solveQuadraticEquation(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.ECCurve$AbstractFp.isValidFieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve$AbstractFp.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve$AbstractFp.randomFieldElementMult(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.ECCurve$F2m.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.createPoint(java.math.BigInteger,java.math.BigInteger,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$F2m.decompressPoint(int,java.math.BigInteger)
-- public java.math.BigInteger org.bouncycastle.math.ec.ECCurve$F2m.getH()
-- public java.math.BigInteger org.bouncycastle.math.ec.ECCurve$F2m.getN()
-- public bool org.bouncycastle.math.ec.ECCurve$F2m.isKoblitz()
-- protected ECCurve$Fp org.bouncycastle.math.ec.ECCurve$Fp(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$Fp.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$Fp.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$Fp.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve$Fp.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ protected void org.bouncycastle.math.ec.ECCurve.checkPoints(org.bouncycastle.math.ec.ECPoint[],int,int)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.ECCurve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.createPoint(java.math.BigInteger,java.math.BigInteger,boolean)
++ protected abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public abstract bool org.bouncycastle.math.ec.ECCurve.isValidFieldElement(java.math.BigInteger)
++ public void org.bouncycastle.math.ec.ECCurve.normalizeAll(org.bouncycastle.math.ec.ECPoint[],int,int,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.PreCompInfo org.bouncycastle.math.ec.ECCurve.precompute(org.bouncycastle.math.ec.ECPoint,java.lang.String,org.bouncycastle.math.ec.PreCompCallback)
++ public abstract org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve.randomFieldElement(java.security.SecureRandom)
++ public abstract org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECCurve.randomFieldElementMult(java.security.SecureRandom)
-- public void org.bouncycastle.math.ec.ECCurve.setPreCompInfo(org.bouncycastle.math.ec.ECPoint,java.lang.String,org.bouncycastle.math.ec.PreCompInfo)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECCurve.validatePoint(java.math.BigInteger,java.math.BigInteger,boolean)
++ public ECFieldElement$AbstractF2m org.bouncycastle.math.ec.ECFieldElement$AbstractF2m()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECFieldElement$AbstractF2m.halfTrace()
++ public bool org.bouncycastle.math.ec.ECFieldElement$AbstractF2m.hasFastTrace()
++ public int org.bouncycastle.math.ec.ECFieldElement$AbstractF2m.trace()
++ public ECFieldElement$AbstractFp org.bouncycastle.math.ec.ECFieldElement$AbstractFp()
-- public ECFieldElement$F2m org.bouncycastle.math.ec.ECFieldElement$F2m(int,int,java.math.BigInteger)
-- public static void org.bouncycastle.math.ec.ECFieldElement$F2m.checkFieldElements(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECFieldElement$F2m.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECFieldElement.squarePow(int)
++ public abstract int org.bouncycastle.math.ec.ECLookupTable.getSize()
++ public abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECLookupTable.lookup(int)
++ public abstract org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECLookupTable.lookupVar(int)
++ protected bool org.bouncycastle.math.ec.ECPoint$AbstractF2m.satisfiesOrder()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$AbstractF2m.scaleX(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$AbstractF2m.scaleXNegateY(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$AbstractF2m.scaleY(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$AbstractF2m.scaleYNegateX(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$AbstractF2m.subtract(org.bouncycastle.math.ec.ECPoint)
++ public org.bouncycastle.math.ec.ECPoint$AbstractF2m org.bouncycastle.math.ec.ECPoint$AbstractF2m.tau()
++ public org.bouncycastle.math.ec.ECPoint$AbstractF2m org.bouncycastle.math.ec.ECPoint$AbstractF2m.tauPow(int)
-- public ECPoint$F2m org.bouncycastle.math.ec.ECPoint$F2m(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
-- public org.bouncycastle.math.ec.ECPoint$F2m org.bouncycastle.math.ec.ECPoint$F2m.addSimple(org.bouncycastle.math.ec.ECPoint$F2m)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$F2m.scaleX(org.bouncycastle.math.ec.ECFieldElement)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$F2m.scaleY(org.bouncycastle.math.ec.ECFieldElement)
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint$F2m.subtract(org.bouncycastle.math.ec.ECPoint)
-- public org.bouncycastle.math.ec.ECPoint$F2m org.bouncycastle.math.ec.ECPoint$F2m.subtractSimple(org.bouncycastle.math.ec.ECPoint$F2m)
-- public org.bouncycastle.math.ec.ECPoint$F2m org.bouncycastle.math.ec.ECPoint$F2m.tau()
-- public ECPoint$Fp org.bouncycastle.math.ec.ECPoint$Fp(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
-- public [B org.bouncycastle.math.ec.ECPoint.getEncoded()
++ public final org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getRawXCoord()
-- protected final org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getRawXCoord()
-- protected final org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getRawYCoord()
++ public final org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getRawYCoord()
-- public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getX()
-- public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.ECPoint.getY()
-- public bool org.bouncycastle.math.ec.ECPoint.isCompressed()
-- protected bool org.bouncycastle.math.ec.ECPoint.satisfiesCofactor()
++ protected bool org.bouncycastle.math.ec.ECPoint.satisfiesOrder()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint.scaleXNegateY(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ECPoint.scaleYNegateX(org.bouncycastle.math.ec.ECFieldElement)
-- protected int org.bouncycastle.math.ec.FixedPointCombMultiplier.getWidthForCombSize(int)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.FixedPointPreCompInfo.getLookupTable()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.FixedPointPreCompInfo.getOffset()
-- public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.FixedPointPreCompInfo.getPreComp()
++ public void org.bouncycastle.math.ec.FixedPointPreCompInfo.setLookupTable(org.bouncycastle.math.ec.ECLookupTable)
++ public void org.bouncycastle.math.ec.FixedPointPreCompInfo.setOffset(org.bouncycastle.math.ec.ECPoint)
-- public void org.bouncycastle.math.ec.FixedPointPreCompInfo.setPreComp(org.bouncycastle.math.ec.ECPoint[])
++ public static org.bouncycastle.math.ec.FixedPointPreCompInfo org.bouncycastle.math.ec.FixedPointUtil.precompute(org.bouncycastle.math.ec.ECPoint)
-- public static org.bouncycastle.math.ec.FixedPointPreCompInfo org.bouncycastle.math.ec.FixedPointUtil.precompute(org.bouncycastle.math.ec.ECPoint,int)
-- public MixedNafR2LMultiplier org.bouncycastle.math.ec.MixedNafR2LMultiplier()
-- public MixedNafR2LMultiplier org.bouncycastle.math.ec.MixedNafR2LMultiplier(int,int)
-- protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.MixedNafR2LMultiplier.configureCurve(org.bouncycastle.math.ec.ECCurve,int)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.MixedNafR2LMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
-- public MontgomeryLadderMultiplier org.bouncycastle.math.ec.MontgomeryLadderMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.MontgomeryLadderMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
-- public NafL2RMultiplier org.bouncycastle.math.ec.NafL2RMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.NafL2RMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
-- public NafR2LMultiplier org.bouncycastle.math.ec.NafR2LMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.NafR2LMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
++ public abstract org.bouncycastle.math.ec.PreCompInfo org.bouncycastle.math.ec.PreCompCallback.precompute(org.bouncycastle.math.ec.PreCompInfo)
-- public ReferenceMultiplier org.bouncycastle.math.ec.ReferenceMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ReferenceMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
++ public ScaleXNegateYPointMap org.bouncycastle.math.ec.ScaleXNegateYPointMap(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ScaleXNegateYPointMap.map(org.bouncycastle.math.ec.ECPoint)
++ public ScaleYNegateXPointMap org.bouncycastle.math.ec.ScaleYNegateXPointMap(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ScaleYNegateXPointMap.map(org.bouncycastle.math.ec.ECPoint)
++ public SimpleLookupTable org.bouncycastle.math.ec.SimpleLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ public int org.bouncycastle.math.ec.SimpleLookupTable.getSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.SimpleLookupTable.lookup(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.SimpleLookupTable.lookupVar(int)
-- protected int org.bouncycastle.math.ec.WNafL2RMultiplier.getWindowSize(int)
++ public int org.bouncycastle.math.ec.WNafPreCompInfo.getConfWidth()
++ public int org.bouncycastle.math.ec.WNafPreCompInfo.getWidth()
++ public bool org.bouncycastle.math.ec.WNafPreCompInfo.isPromoted()
++ public void org.bouncycastle.math.ec.WNafPreCompInfo.setConfWidth(int)
++ public void org.bouncycastle.math.ec.WNafPreCompInfo.setWidth(int)
++ public static void org.bouncycastle.math.ec.WNafUtil.configureBasepoint(org.bouncycastle.math.ec.ECPoint)
++ public static int org.bouncycastle.math.ec.WNafUtil.getWindowSize(int,int)
++ public static int org.bouncycastle.math.ec.WNafUtil.getWindowSize(int,int[],int)
-- public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.WNafUtil.mapPointWithPrecomp(org.bouncycastle.math.ec.ECPoint,int,boolean,org.bouncycastle.math.ec.ECPointMap)
++ public static org.bouncycastle.math.ec.WNafPreCompInfo org.bouncycastle.math.ec.WNafUtil.precomputeWithPointMap(org.bouncycastle.math.ec.ECPoint,org.bouncycastle.math.ec.ECPointMap,org.bouncycastle.math.ec.WNafPreCompInfo,boolean)
-- public org.bouncycastle.math.ec.ECPoint$F2m org.bouncycastle.math.ec.WTauNafPreCompInfo.getPreComp()
++ public org.bouncycastle.math.ec.ECPoint$AbstractF2m org.bouncycastle.math.ec.WTauNafPreCompInfo.getPreComp()
++ public void org.bouncycastle.math.ec.WTauNafPreCompInfo.setPreComp(org.bouncycastle.math.ec.ECPoint$AbstractF2m[])
-- public void org.bouncycastle.math.ec.WTauNafPreCompInfo.setPreComp(org.bouncycastle.math.ec.ECPoint$F2m[])
-- public ZSignedDigitL2RMultiplier org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ZSignedDigitL2RMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
-- public ZSignedDigitR2LMultiplier org.bouncycastle.math.ec.ZSignedDigitR2LMultiplier()
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.ZSignedDigitR2LMultiplier.multiplyPositive(org.bouncycastle.math.ec.ECPoint,java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.djb.Curve25519.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.djb.Curve25519.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.djb.Curve25519.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.djb.Curve25519.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.djb.Curve25519.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.djb.Curve25519.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.djb.Curve25519.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.djb.Curve25519Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.djb.Curve25519Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.djb.Curve25519Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.djb.Curve25519Field.randomMult(java.security.SecureRandom,int[])
-- public Curve25519Point org.bouncycastle.math.ec.custom.djb.Curve25519Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public SM2P256V1Curve org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.getInfinity()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.getQ()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public bool org.bouncycastle.math.ec.custom.gm.SM2P256V1Curve.supportsCoordinateSystem(int)
++ public SM2P256V1Field org.bouncycastle.math.ec.custom.gm.SM2P256V1Field()
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.addExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.addOne(int[],int[])
++ public static [I org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.half(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.multiply(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.multiplyAddToExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.randomMult(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.reduce(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.reduce32(int,int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.square(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.squareN(int[],int,int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.subtract(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.subtractExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.gm.SM2P256V1Field.twice(int[],int[])
++ public SM2P256V1FieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement()
++ protected SM2P256V1FieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement(int[])
++ public SM2P256V1FieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.gm.SM2P256V1FieldElement.toBigInteger()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.detach()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.threeTimes()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.gm.SM2P256V1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecP128R1Curve org.bouncycastle.math.ec.custom.sec.SecP128R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.getInfinity()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.getQ()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP128R1Curve.supportsCoordinateSystem(int)
++ public SecP128R1Field org.bouncycastle.math.ec.custom.sec.SecP128R1Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.addExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.addOne(int[],int[])
++ public static [I org.bouncycastle.math.ec.custom.sec.SecP128R1Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.half(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP128R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.multiply(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.multiplyAddToExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.randomMult(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.reduce(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.reduce32(int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.square(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.squareN(int[],int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.subtract(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.subtractExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP128R1Field.twice(int[],int[])
++ public SecP128R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement()
++ protected SecP128R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement(int[])
++ public SecP128R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP128R1FieldElement.toBigInteger()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.detach()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.threeTimes()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP128R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecP160K1Curve org.bouncycastle.math.ec.custom.sec.SecP160K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.getInfinity()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.getQ()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.detach()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.threeTimes()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecP160R1Curve org.bouncycastle.math.ec.custom.sec.SecP160R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.getInfinity()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.getQ()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R1Curve.supportsCoordinateSystem(int)
++ public SecP160R1Field org.bouncycastle.math.ec.custom.sec.SecP160R1Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.addExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.addOne(int[],int[])
++ public static [I org.bouncycastle.math.ec.custom.sec.SecP160R1Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.half(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP160R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.multiply(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.multiplyAddToExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.randomMult(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.reduce(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.reduce32(int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.square(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.squareN(int[],int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.subtract(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.subtractExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R1Field.twice(int[],int[])
++ public SecP160R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement()
++ protected SecP160R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement(int[])
++ public SecP160R1FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP160R1FieldElement.toBigInteger()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.detach()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.threeTimes()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecP160R2Curve org.bouncycastle.math.ec.custom.sec.SecP160R2Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.getInfinity()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.getQ()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.randomFieldElementMult(java.security.SecureRandom)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R2Curve.supportsCoordinateSystem(int)
++ public SecP160R2Field org.bouncycastle.math.ec.custom.sec.SecP160R2Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.addExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.addOne(int[],int[])
++ public static [I org.bouncycastle.math.ec.custom.sec.SecP160R2Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.half(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP160R2Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.multiply(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.multiplyAddToExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.randomMult(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.reduce(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.reduce32(int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.square(int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.squareN(int[],int,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.subtract(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.subtractExt(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP160R2Field.twice(int[],int[])
++ public SecP160R2FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement()
++ protected SecP160R2FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement(int[])
++ public SecP160R2FieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecP160R2FieldElement.toBigInteger()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.detach()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.threeTimes()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP160R2Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP192K1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192K1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP192K1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192K1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192K1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP192K1Point org.bouncycastle.math.ec.custom.sec.SecP192K1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP192R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP192R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP192R1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP192R1Point org.bouncycastle.math.ec.custom.sec.SecP192R1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP224K1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224K1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP224K1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224K1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224K1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP224K1Point org.bouncycastle.math.ec.custom.sec.SecP224K1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP224R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP224R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP224R1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP224R1Point org.bouncycastle.math.ec.custom.sec.SecP224R1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP256K1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256K1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP256K1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256K1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256K1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP256K1Point org.bouncycastle.math.ec.custom.sec.SecP256K1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP256R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP256R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP256R1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP256R1Point org.bouncycastle.math.ec.custom.sec.SecP256R1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP384R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP384R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP384R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP384R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP384R1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP384R1Point org.bouncycastle.math.ec.custom.sec.SecP384R1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
-- protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[],boolean)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.randomFieldElement(java.security.SecureRandom)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecP521R1Curve.randomFieldElementMult(java.security.SecureRandom)
++ public static void org.bouncycastle.math.ec.custom.sec.SecP521R1Field.inv(int[],int[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecP521R1Field.isZero(int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP521R1Field.random(java.security.SecureRandom,int[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecP521R1Field.randomMult(java.security.SecureRandom,int[])
-- public SecP521R1Point org.bouncycastle.math.ec.custom.sec.SecP521R1Point(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,boolean)
++ public SecT113Field org.bouncycastle.math.ec.custom.sec.SecT113Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT113Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT113Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT113Field.implMulw(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT113Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.reduce15(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT113Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT113Field.trace(long[])
++ public SecT113FieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement()
++ public SecT113FieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement(java.math.BigInteger)
++ protected SecT113FieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113FieldElement.trace()
++ public SecT113R1Curve org.bouncycastle.math.ec.custom.sec.SecT113R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT113R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT113R2Curve org.bouncycastle.math.ec.custom.sec.SecT113R2Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT113R2Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT113R2Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT113R2Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT113R2Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT131Field org.bouncycastle.math.ec.custom.sec.SecT131Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT131Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT131Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT131Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT131Field.implMulw(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT131Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.reduce61(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT131Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT131Field.trace(long[])
++ public SecT131FieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement()
++ public SecT131FieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement(java.math.BigInteger)
++ protected SecT131FieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131FieldElement.trace()
++ public SecT131R1Curve org.bouncycastle.math.ec.custom.sec.SecT131R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT131R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT131R2Curve org.bouncycastle.math.ec.custom.sec.SecT131R2Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT131R2Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT131R2Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT131R2Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT131R2Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT163Field org.bouncycastle.math.ec.custom.sec.SecT163Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT163Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT163Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT163Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT163Field.implMulw(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT163Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.reduce29(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT163Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT163Field.trace(long[])
++ public SecT163FieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement()
++ public SecT163FieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement(java.math.BigInteger)
++ protected SecT163FieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163FieldElement.trace()
++ public SecT163K1Curve org.bouncycastle.math.ec.custom.sec.SecT163K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT163K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT163R1Curve org.bouncycastle.math.ec.custom.sec.SecT163R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT163R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT163R2Curve org.bouncycastle.math.ec.custom.sec.SecT163R2Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT163R2Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT163R2Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT163R2Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT163R2Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT193Field org.bouncycastle.math.ec.custom.sec.SecT193Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT193Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT193Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT193Field.implExpand(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT193Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT193Field.implMulwAcc(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT193Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.reduce63(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT193Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT193Field.trace(long[])
++ public SecT193FieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement()
++ public SecT193FieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement(java.math.BigInteger)
++ protected SecT193FieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193FieldElement.trace()
++ public SecT193R1Curve org.bouncycastle.math.ec.custom.sec.SecT193R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT193R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT193R2Curve org.bouncycastle.math.ec.custom.sec.SecT193R2Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT193R2Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT193R2Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT193R2Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT193R2Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT233Field org.bouncycastle.math.ec.custom.sec.SecT233Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT233Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT233Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT233Field.implExpand(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT233Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT233Field.implMulwAcc(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT233Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.reduce23(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT233Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT233Field.trace(long[])
++ public SecT233FieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement()
++ public SecT233FieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement(java.math.BigInteger)
++ protected SecT233FieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233FieldElement.trace()
++ public SecT233K1Curve org.bouncycastle.math.ec.custom.sec.SecT233K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT233K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT233R1Curve org.bouncycastle.math.ec.custom.sec.SecT233R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT233R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT233R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT233R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT233R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT239Field org.bouncycastle.math.ec.custom.sec.SecT239Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT239Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT239Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT239Field.implExpand(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT239Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT239Field.implMulwAcc(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT239Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.reduce17(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT239Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT239Field.trace(long[])
++ public SecT239FieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement()
++ public SecT239FieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement(java.math.BigInteger)
++ protected SecT239FieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239FieldElement.trace()
++ public SecT239K1Curve org.bouncycastle.math.ec.custom.sec.SecT239K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT239K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT239K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT239K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT239K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT283Field org.bouncycastle.math.ec.custom.sec.SecT283Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT283Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT283Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT283Field.implExpand(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT283Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT283Field.implMulw(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT283Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.reduce37(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT283Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT283Field.trace(long[])
++ public SecT283FieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement()
++ public SecT283FieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement(java.math.BigInteger)
++ protected SecT283FieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283FieldElement.trace()
++ public SecT283K1Curve org.bouncycastle.math.ec.custom.sec.SecT283K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT283K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT283R1Curve org.bouncycastle.math.ec.custom.sec.SecT283R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT283R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT283R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT283R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT283R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT409Field org.bouncycastle.math.ec.custom.sec.SecT409Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT409Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT409Field.implCompactExt(long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT409Field.implExpand(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT409Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT409Field.implMulwAcc(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT409Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.reduce39(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT409Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT409Field.trace(long[])
++ public SecT409FieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement()
++ public SecT409FieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement(java.math.BigInteger)
++ protected SecT409FieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409FieldElement.trace()
++ public SecT409K1Curve org.bouncycastle.math.ec.custom.sec.SecT409K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT409K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT409R1Curve org.bouncycastle.math.ec.custom.sec.SecT409R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT409R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT409R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT409R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT409R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT571Field org.bouncycastle.math.ec.custom.sec.SecT571Field()
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.add(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.addBothTo(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.addExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.addOne(long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT571Field.fromBigInteger(java.math.BigInteger)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.halfTrace(long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT571Field.implMultiply(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT571Field.implMultiplyPrecomp(long[],long[],long[])
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT571Field.implMulwAcc(long[],long,long,long[],int)
++ protected static void org.bouncycastle.math.ec.custom.sec.SecT571Field.implSquare(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.invert(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.multiply(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.multiplyAddToExt(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.multiplyPrecomp(long[],long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.multiplyPrecompAddToExt(long[],long[],long[])
++ public static [J org.bouncycastle.math.ec.custom.sec.SecT571Field.precompMultiplicand(long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.reduce(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.reduce5(long[],int)
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.sqrt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.square(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.squareAddToExt(long[],long[])
++ public static void org.bouncycastle.math.ec.custom.sec.SecT571Field.squareN(long[],int,long[])
++ public static int org.bouncycastle.math.ec.custom.sec.SecT571Field.trace(long[])
++ public SecT571FieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement()
++ public SecT571FieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement(java.math.BigInteger)
++ protected SecT571FieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement(long[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.add(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.addOne()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.divide(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.equals(java.lang.Object)
++ public java.lang.String org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getFieldName()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getFieldSize()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getM()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.getRepresentation()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.halfTrace()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.hasFastTrace()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.hashCode()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.invert()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.isOne()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.isZero()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.multiply(org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.multiplyMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.multiplyPlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.negate()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.sqrt()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.square()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.squareMinusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.squarePlusProduct(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.squarePow(int)
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.subtract(org.bouncycastle.math.ec.ECFieldElement)
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.testBitZero()
++ public java.math.BigInteger org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.toBigInteger()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571FieldElement.trace()
++ public SecT571K1Curve org.bouncycastle.math.ec.custom.sec.SecT571K1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECMultiplier org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.createDefaultMultiplier()
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571K1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT571K1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571K1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571K1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public SecT571R1Curve org.bouncycastle.math.ec.custom.sec.SecT571R1Curve()
++ protected org.bouncycastle.math.ec.ECCurve org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.cloneCurve()
++ public org.bouncycastle.math.ec.ECLookupTable org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.createCacheSafeLookupTable(org.bouncycastle.math.ec.ECPoint[],int,int)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.createRawPoint(org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement,org.bouncycastle.math.ec.ECFieldElement[])
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.fromBigInteger(java.math.BigInteger)
++ public int org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getFieldSize()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getInfinity()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getK1()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getK2()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getK3()
++ public int org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.getM()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.isKoblitz()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.isTrinomial()
++ public bool org.bouncycastle.math.ec.custom.sec.SecT571R1Curve.supportsCoordinateSystem(int)
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Point.add(org.bouncycastle.math.ec.ECPoint)
++ protected org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Point.detach()
++ protected bool org.bouncycastle.math.ec.custom.sec.SecT571R1Point.getCompressionYTilde()
++ public org.bouncycastle.math.ec.ECFieldElement org.bouncycastle.math.ec.custom.sec.SecT571R1Point.getYCoord()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Point.negate()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Point.twice()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.custom.sec.SecT571R1Point.twicePlus(org.bouncycastle.math.ec.ECPoint)
++ public EndoPreCompInfo org.bouncycastle.math.ec.endo.EndoPreCompInfo()
++ public org.bouncycastle.math.ec.endo.ECEndomorphism org.bouncycastle.math.ec.endo.EndoPreCompInfo.getEndomorphism()
++ public org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.endo.EndoPreCompInfo.getMappedPoint()
++ public void org.bouncycastle.math.ec.endo.EndoPreCompInfo.setEndomorphism(org.bouncycastle.math.ec.endo.ECEndomorphism)
++ public void org.bouncycastle.math.ec.endo.EndoPreCompInfo.setMappedPoint(org.bouncycastle.math.ec.ECPoint)
++ public EndoUtil org.bouncycastle.math.ec.endo.EndoUtil()
++ public static java.math.BigInteger org.bouncycastle.math.ec.endo.EndoUtil.decomposeScalar(org.bouncycastle.math.ec.endo.ScalarSplitParameters,java.math.BigInteger)
++ public static org.bouncycastle.math.ec.ECPoint org.bouncycastle.math.ec.endo.EndoUtil.mapPoint(org.bouncycastle.math.ec.endo.ECEndomorphism,org.bouncycastle.math.ec.ECPoint)
++ public GLVTypeAEndomorphism org.bouncycastle.math.ec.endo.GLVTypeAEndomorphism(org.bouncycastle.math.ec.ECCurve,org.bouncycastle.math.ec.endo.GLVTypeAParameters)
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeAEndomorphism.decomposeScalar(java.math.BigInteger)
++ public org.bouncycastle.math.ec.ECPointMap org.bouncycastle.math.ec.endo.GLVTypeAEndomorphism.getPointMap()
++ public bool org.bouncycastle.math.ec.endo.GLVTypeAEndomorphism.hasEfficientPointMap()
++ public GLVTypeAParameters org.bouncycastle.math.ec.endo.GLVTypeAParameters(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.math.ec.endo.ScalarSplitParameters)
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeAParameters.getI()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeAParameters.getLambda()
++ public org.bouncycastle.math.ec.endo.ScalarSplitParameters org.bouncycastle.math.ec.endo.GLVTypeAParameters.getSplitParams()
-- protected java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBEndomorphism.calculateB(java.math.BigInteger,java.math.BigInteger,int)
++ public GLVTypeBParameters org.bouncycastle.math.ec.endo.GLVTypeBParameters(java.math.BigInteger,java.math.BigInteger,org.bouncycastle.math.ec.endo.ScalarSplitParameters)
++ public org.bouncycastle.math.ec.endo.ScalarSplitParameters org.bouncycastle.math.ec.endo.GLVTypeBParameters.getSplitParams()
-- public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV1()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV1A()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV1B()
-- public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV2()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV2A()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.GLVTypeBParameters.getV2B()
++ public ScalarSplitParameters org.bouncycastle.math.ec.endo.ScalarSplitParameters(java.math.BigInteger[],java.math.BigInteger[],java.math.BigInteger,java.math.BigInteger,int)
++ public int org.bouncycastle.math.ec.endo.ScalarSplitParameters.getBits()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getG1()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getG2()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getV1A()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getV1B()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getV2A()
++ public java.math.BigInteger org.bouncycastle.math.ec.endo.ScalarSplitParameters.getV2B()
++ public X25519 org.bouncycastle.math.ec.rfc7748.X25519()
++ public static bool org.bouncycastle.math.ec.rfc7748.X25519.calculateAgreement(byte[],int,byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519.generatePrivateKey(java.security.SecureRandom,byte[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519.generatePublicKey(byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519.precompute()
++ public static void org.bouncycastle.math.ec.rfc7748.X25519.scalarMult(byte[],int,byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519.scalarMultBase(byte[],int,byte[],int)
++ protected X25519Field org.bouncycastle.math.ec.rfc7748.X25519Field()
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.addOne(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.addOne(int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.apm(int[],int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.carry(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.cmov(int,int[],int,int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.cnegate(int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.copy(int[],int,int[],int)
++ public static [I org.bouncycastle.math.ec.rfc7748.X25519Field.create()
++ public static [I org.bouncycastle.math.ec.rfc7748.X25519Field.createTable(int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.cswap(int,int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.decode(byte[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.decode(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.encode(int[],byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.encode(int[],int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.inv(int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.invVar(int[],int[])
++ public static int org.bouncycastle.math.ec.rfc7748.X25519Field.isZero(int[])
++ public static bool org.bouncycastle.math.ec.rfc7748.X25519Field.isZeroVar(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.mul(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.mul(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.normalize(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.one(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.sqr(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.sqr(int[],int[])
++ public static bool org.bouncycastle.math.ec.rfc7748.X25519Field.sqrtRatioVar(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.sub(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.subOne(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X25519Field.zero(int[])
++ public X448 org.bouncycastle.math.ec.rfc7748.X448()
++ public static bool org.bouncycastle.math.ec.rfc7748.X448.calculateAgreement(byte[],int,byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448.generatePrivateKey(java.security.SecureRandom,byte[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448.generatePublicKey(byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448.precompute()
++ public static void org.bouncycastle.math.ec.rfc7748.X448.scalarMult(byte[],int,byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448.scalarMultBase(byte[],int,byte[],int)
++ protected X448Field org.bouncycastle.math.ec.rfc7748.X448Field()
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.add(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.addOne(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.addOne(int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.carry(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.cmov(int,int[],int,int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.cnegate(int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.copy(int[],int,int[],int)
++ public static [I org.bouncycastle.math.ec.rfc7748.X448Field.create()
++ public static [I org.bouncycastle.math.ec.rfc7748.X448Field.createTable(int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.cswap(int,int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.decode(byte[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.decode(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.encode(int[],byte[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.encode(int[],int[],int)
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.inv(int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.invVar(int[],int[])
++ public static int org.bouncycastle.math.ec.rfc7748.X448Field.isZero(int[])
++ public static bool org.bouncycastle.math.ec.rfc7748.X448Field.isZeroVar(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.mul(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.mul(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.negate(int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.normalize(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.one(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.sqr(int[],int,int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.sqr(int[],int[])
++ public static bool org.bouncycastle.math.ec.rfc7748.X448Field.sqrtRatioVar(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.sub(int[],int[],int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.subOne(int[])
++ public static void org.bouncycastle.math.ec.rfc7748.X448Field.zero(int[])
++ public Ed25519$Algorithm org.bouncycastle.math.ec.rfc8032.Ed25519$Algorithm()
++ public Ed25519 org.bouncycastle.math.ec.rfc8032.Ed25519()
++ public static org.bouncycastle.crypto.Digest org.bouncycastle.math.ec.rfc8032.Ed25519.createPrehash()
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.generatePrivateKey(java.security.SecureRandom,byte[])
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.generatePublicKey(byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.precompute()
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.scalarMultBaseYZ(org.bouncycastle.math.ec.rfc7748.X25519$Friend,byte[],int,int[],int[])
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.sign(byte[],int,byte[],byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.sign(byte[],int,byte[],int,byte[],byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.sign(byte[],int,byte[],int,byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.sign(byte[],int,byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.signPrehash(byte[],int,byte[],byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.signPrehash(byte[],int,byte[],int,byte[],byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.signPrehash(byte[],int,byte[],int,byte[],org.bouncycastle.crypto.Digest,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed25519.signPrehash(byte[],int,byte[],org.bouncycastle.crypto.Digest,byte[],int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed25519.verify(byte[],int,byte[],int,byte[],byte[],int,int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed25519.verify(byte[],int,byte[],int,byte[],int,int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed25519.verifyPrehash(byte[],int,byte[],int,byte[],byte[],int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed25519.verifyPrehash(byte[],int,byte[],int,byte[],org.bouncycastle.crypto.Digest)
++ public Ed448$Algorithm org.bouncycastle.math.ec.rfc8032.Ed448$Algorithm()
++ public Ed448 org.bouncycastle.math.ec.rfc8032.Ed448()
++ public static org.bouncycastle.crypto.Xof org.bouncycastle.math.ec.rfc8032.Ed448.createPrehash()
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.generatePrivateKey(java.security.SecureRandom,byte[])
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.generatePublicKey(byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.precompute()
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.scalarMultBaseXY(org.bouncycastle.math.ec.rfc7748.X448$Friend,byte[],int,int[],int[])
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.sign(byte[],int,byte[],byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.sign(byte[],int,byte[],int,byte[],byte[],int,int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.signPrehash(byte[],int,byte[],byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.signPrehash(byte[],int,byte[],int,byte[],byte[],int,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.signPrehash(byte[],int,byte[],int,byte[],org.bouncycastle.crypto.Xof,byte[],int)
++ public static void org.bouncycastle.math.ec.rfc8032.Ed448.signPrehash(byte[],int,byte[],org.bouncycastle.crypto.Xof,byte[],int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed448.verify(byte[],int,byte[],int,byte[],byte[],int,int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed448.verifyPrehash(byte[],int,byte[],int,byte[],byte[],int)
++ public static bool org.bouncycastle.math.ec.rfc8032.Ed448.verifyPrehash(byte[],int,byte[],int,byte[],org.bouncycastle.crypto.Xof)
++ public static void org.bouncycastle.math.ec.tools.DiscoverEndomorphisms.discoverEndomorphisms(org.bouncycastle.asn1.x9.X9ECParameters)
++ public F2mSqrtOptimizer org.bouncycastle.math.ec.tools.F2mSqrtOptimizer()
++ public static void org.bouncycastle.math.ec.tools.F2mSqrtOptimizer.main(java.lang.String[])
++ public static void org.bouncycastle.math.ec.tools.F2mSqrtOptimizer.printRootZ(org.bouncycastle.asn1.x9.X9ECParameters)
++ public TraceOptimizer org.bouncycastle.math.ec.tools.TraceOptimizer()
++ public static void org.bouncycastle.math.ec.tools.TraceOptimizer.implPrintNonZeroTraceBits(org.bouncycastle.asn1.x9.X9ECParameters)
++ public static void org.bouncycastle.math.ec.tools.TraceOptimizer.main(java.lang.String[])
++ public static void org.bouncycastle.math.ec.tools.TraceOptimizer.printNonZeroTraceBits(org.bouncycastle.asn1.x9.X9ECParameters)
++ public Bits org.bouncycastle.math.raw.Bits()
++ public static int org.bouncycastle.math.raw.Bits.bitPermuteStep(int,int,int)
++ public static J org.bouncycastle.math.raw.Bits.bitPermuteStep(long,long,int)
++ public static int org.bouncycastle.math.raw.Bits.bitPermuteStepSimple(int,int,int)
++ public static J org.bouncycastle.math.raw.Bits.bitPermuteStepSimple(long,long,int)
++ public Interleave org.bouncycastle.math.raw.Interleave()
++ public static int org.bouncycastle.math.raw.Interleave.expand16to32(int)
++ public static J org.bouncycastle.math.raw.Interleave.expand32to64(int)
++ public static void org.bouncycastle.math.raw.Interleave.expand64To128(long,long[],int)
++ public static void org.bouncycastle.math.raw.Interleave.expand64To128(long[],int,int,long[],int)
++ public static void org.bouncycastle.math.raw.Interleave.expand64To128Rev(long,long[],int)
++ public static int org.bouncycastle.math.raw.Interleave.expand8to16(int)
++ public static int org.bouncycastle.math.raw.Interleave.shuffle(int)
++ public static J org.bouncycastle.math.raw.Interleave.shuffle(long)
++ public static int org.bouncycastle.math.raw.Interleave.shuffle2(int)
++ public static J org.bouncycastle.math.raw.Interleave.shuffle2(long)
++ public static J org.bouncycastle.math.raw.Interleave.shuffle3(long)
++ public static int org.bouncycastle.math.raw.Interleave.unshuffle(int)
++ public static J org.bouncycastle.math.raw.Interleave.unshuffle(long)
++ public static int org.bouncycastle.math.raw.Interleave.unshuffle2(int)
++ public static J org.bouncycastle.math.raw.Interleave.unshuffle2(long)
++ public static J org.bouncycastle.math.raw.Interleave.unshuffle3(long)
++ public static void org.bouncycastle.math.raw.Mod.checkedModOddInverse(int[],int[],int[])
++ public static void org.bouncycastle.math.raw.Mod.checkedModOddInverseVar(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Mod.modOddInverse(int[],int[],int[])
++ public static bool org.bouncycastle.math.raw.Mod.modOddInverseVar(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat.addTo(int,int[],int,int[],int,int)
++ public static int org.bouncycastle.math.raw.Nat.addToEachOther(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.cadd(int,int,int[],int[],int[])
++ public static void org.bouncycastle.math.raw.Nat.cmov(int,int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.compare(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.compare(int,int[],int[])
++ public static void org.bouncycastle.math.raw.Nat.copy(int,int[],int,int[],int)
++ public static [J org.bouncycastle.math.raw.Nat.copy64(int,long[])
++ public static void org.bouncycastle.math.raw.Nat.copy64(int,long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat.copy64(int,long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat.create64(int)
++ public static int org.bouncycastle.math.raw.Nat.csub(int,int,int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.csub(int,int,int[],int[],int[])
++ public static bool org.bouncycastle.math.raw.Nat.diff(int,int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.equalTo(int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.equalTo(int,int[],int,int)
++ public static int org.bouncycastle.math.raw.Nat.equalTo(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.equalTo(int,int[],int[])
++ public static int org.bouncycastle.math.raw.Nat.equalToZero(int,int[])
++ public static int org.bouncycastle.math.raw.Nat.equalToZero(int,int[],int)
++ public static [J org.bouncycastle.math.raw.Nat.fromBigInteger64(int,java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat.gte(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.lessThan(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.lessThan(int,int[],int[])
++ public static void org.bouncycastle.math.raw.Nat.mul(int[],int,int,int[],int,int,int[],int)
++ public static J org.bouncycastle.math.raw.Nat.shiftUpBit64(int,long[],int,long,long[],int)
++ public static J org.bouncycastle.math.raw.Nat.shiftUpBits64(int,long[],int,int,long)
++ public static J org.bouncycastle.math.raw.Nat.shiftUpBits64(int,long[],int,int,long,long[],int)
++ public static int org.bouncycastle.math.raw.Nat.squareWordAddTo(int[],int,int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat.squareWordAddTo(int[],int,int[])
++ public static void org.bouncycastle.math.raw.Nat.zero(int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat.zero64(int,long[])
++ public Nat128 org.bouncycastle.math.raw.Nat128()
++ public static int org.bouncycastle.math.raw.Nat128.add(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.addBothTo(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.addTo(int[],int,int[],int,int)
++ public static int org.bouncycastle.math.raw.Nat128.addTo(int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.addToEachOther(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat128.copy(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat128.copy(int[],int[])
++ public static void org.bouncycastle.math.raw.Nat128.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat128.copy64(long[],long[])
++ public static [I org.bouncycastle.math.raw.Nat128.create()
++ public static [J org.bouncycastle.math.raw.Nat128.create64()
++ public static [I org.bouncycastle.math.raw.Nat128.createExt()
++ public static [J org.bouncycastle.math.raw.Nat128.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat128.diff(int[],int,int[],int,int[],int)
++ public static bool org.bouncycastle.math.raw.Nat128.eq(int[],int[])
++ public static bool org.bouncycastle.math.raw.Nat128.eq64(long[],long[])
++ public static [I org.bouncycastle.math.raw.Nat128.fromBigInteger(java.math.BigInteger)
++ public static [J org.bouncycastle.math.raw.Nat128.fromBigInteger64(java.math.BigInteger)
++ public static int org.bouncycastle.math.raw.Nat128.getBit(int[],int)
++ public static bool org.bouncycastle.math.raw.Nat128.gte(int[],int,int[],int)
++ public static bool org.bouncycastle.math.raw.Nat128.gte(int[],int[])
++ public static bool org.bouncycastle.math.raw.Nat128.isOne(int[])
++ public static bool org.bouncycastle.math.raw.Nat128.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat128.isZero(int[])
++ public static bool org.bouncycastle.math.raw.Nat128.isZero64(long[])
++ public static void org.bouncycastle.math.raw.Nat128.mul(int[],int,int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat128.mul(int[],int[],int[])
++ public static J org.bouncycastle.math.raw.Nat128.mul33Add(int,int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mul33DWordAdd(int,long,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mul33WordAdd(int,int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mulAddTo(int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mulAddTo(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.mulWord(int,int[],int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mulWordAddExt(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mulWordDwordAdd(int,long,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.mulWordsAdd(int,int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat128.square(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat128.square(int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.sub(int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.sub(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.subBothFrom(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat128.subFrom(int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat128.subFrom(int[],int[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat128.toBigInteger(int[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat128.toBigInteger64(long[])
++ public static void org.bouncycastle.math.raw.Nat128.zero(int[])
++ public Nat160 org.bouncycastle.math.raw.Nat160()
++ public static int org.bouncycastle.math.raw.Nat160.add(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.addBothTo(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.addTo(int[],int,int[],int,int)
++ public static int org.bouncycastle.math.raw.Nat160.addTo(int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.addToEachOther(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat160.copy(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat160.copy(int[],int[])
++ public static [I org.bouncycastle.math.raw.Nat160.create()
++ public static [I org.bouncycastle.math.raw.Nat160.createExt()
++ public static bool org.bouncycastle.math.raw.Nat160.diff(int[],int,int[],int,int[],int)
++ public static bool org.bouncycastle.math.raw.Nat160.eq(int[],int[])
++ public static [I org.bouncycastle.math.raw.Nat160.fromBigInteger(java.math.BigInteger)
++ public static int org.bouncycastle.math.raw.Nat160.getBit(int[],int)
++ public static bool org.bouncycastle.math.raw.Nat160.gte(int[],int,int[],int)
++ public static bool org.bouncycastle.math.raw.Nat160.gte(int[],int[])
++ public static bool org.bouncycastle.math.raw.Nat160.isOne(int[])
++ public static bool org.bouncycastle.math.raw.Nat160.isZero(int[])
++ public static void org.bouncycastle.math.raw.Nat160.mul(int[],int,int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat160.mul(int[],int[],int[])
++ public static J org.bouncycastle.math.raw.Nat160.mul33Add(int,int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mul33DWordAdd(int,long,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mul33WordAdd(int,int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mulAddTo(int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mulAddTo(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.mulWord(int,int[],int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mulWordAddExt(int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mulWordDwordAdd(int,long,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.mulWordsAdd(int,int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat160.square(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat160.square(int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.sub(int[],int,int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.sub(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.subBothFrom(int[],int[],int[])
++ public static int org.bouncycastle.math.raw.Nat160.subFrom(int[],int,int[],int)
++ public static int org.bouncycastle.math.raw.Nat160.subFrom(int[],int[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat160.toBigInteger(int[])
++ public static void org.bouncycastle.math.raw.Nat160.zero(int[])
++ public static void org.bouncycastle.math.raw.Nat192.copy(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat192.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat192.copy64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat192.create64()
++ public static [J org.bouncycastle.math.raw.Nat192.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat192.eq64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat192.fromBigInteger64(java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat192.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat192.isZero64(long[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat192.toBigInteger64(long[])
++ public static void org.bouncycastle.math.raw.Nat224.copy(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat256.copy(int[],int,int[],int)
++ public static void org.bouncycastle.math.raw.Nat256.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat256.copy64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat256.create64()
++ public static [J org.bouncycastle.math.raw.Nat256.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat256.eq64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat256.fromBigInteger64(java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat256.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat256.isZero64(long[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat256.toBigInteger64(long[])
++ public Nat320 org.bouncycastle.math.raw.Nat320()
++ public static void org.bouncycastle.math.raw.Nat320.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat320.copy64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat320.create64()
++ public static [J org.bouncycastle.math.raw.Nat320.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat320.eq64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat320.fromBigInteger64(java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat320.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat320.isZero64(long[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat320.toBigInteger64(long[])
++ public Nat448 org.bouncycastle.math.raw.Nat448()
++ public static void org.bouncycastle.math.raw.Nat448.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat448.copy64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat448.create64()
++ public static [J org.bouncycastle.math.raw.Nat448.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat448.eq64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat448.fromBigInteger64(java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat448.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat448.isZero64(long[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat448.toBigInteger64(long[])
++ public Nat576 org.bouncycastle.math.raw.Nat576()
++ public static void org.bouncycastle.math.raw.Nat576.copy64(long[],int,long[],int)
++ public static void org.bouncycastle.math.raw.Nat576.copy64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat576.create64()
++ public static [J org.bouncycastle.math.raw.Nat576.createExt64()
++ public static bool org.bouncycastle.math.raw.Nat576.eq64(long[],long[])
++ public static [J org.bouncycastle.math.raw.Nat576.fromBigInteger64(java.math.BigInteger)
++ public static bool org.bouncycastle.math.raw.Nat576.isOne64(long[])
++ public static bool org.bouncycastle.math.raw.Nat576.isZero64(long[])
++ public static java.math.BigInteger org.bouncycastle.math.raw.Nat576.toBigInteger64(long[])
++ public McElieceCCA2PrivateKey org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
-- public McElieceCCA2PrivateKey org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey.getDigest()
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey.getH()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey.getOID()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.asn1.McElieceCCA2PrivateKey.getQInv()
++ public McElieceCCA2PublicKey org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
-- public McElieceCCA2PublicKey org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey.getDigest()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.asn1.McElieceCCA2PublicKey.getOID()
++ public McEliecePrivateKey org.bouncycastle.pqc.asn1.McEliecePrivateKey(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public McEliecePrivateKey org.bouncycastle.pqc.asn1.McEliecePrivateKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.asn1.McEliecePrivateKey.getH()
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.asn1.McEliecePrivateKey.getOID()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.asn1.McEliecePrivateKey.getQInv()
++ public McEliecePublicKey org.bouncycastle.pqc.asn1.McEliecePublicKey(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public McEliecePublicKey org.bouncycastle.pqc.asn1.McEliecePublicKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.asn1.McEliecePublicKey.getOID()
++ public SPHINCS256KeyParams org.bouncycastle.pqc.asn1.SPHINCS256KeyParams(org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public static final org.bouncycastle.pqc.asn1.SPHINCS256KeyParams org.bouncycastle.pqc.asn1.SPHINCS256KeyParams.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.pqc.asn1.SPHINCS256KeyParams.getTreeDigest()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.SPHINCS256KeyParams.toASN1Primitive()
++ public XMSSKeyParams org.bouncycastle.pqc.asn1.XMSSKeyParams(int,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public int org.bouncycastle.pqc.asn1.XMSSKeyParams.getHeight()
++ public static org.bouncycastle.pqc.asn1.XMSSKeyParams org.bouncycastle.pqc.asn1.XMSSKeyParams.getInstance(java.lang.Object)
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.pqc.asn1.XMSSKeyParams.getTreeDigest()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSKeyParams.toASN1Primitive()
++ public XMSSMTKeyParams org.bouncycastle.pqc.asn1.XMSSMTKeyParams(int,int,org.bouncycastle.asn1.x509.AlgorithmIdentifier)
++ public int org.bouncycastle.pqc.asn1.XMSSMTKeyParams.getHeight()
++ public static org.bouncycastle.pqc.asn1.XMSSMTKeyParams org.bouncycastle.pqc.asn1.XMSSMTKeyParams.getInstance(java.lang.Object)
++ public int org.bouncycastle.pqc.asn1.XMSSMTKeyParams.getLayers()
++ public org.bouncycastle.asn1.x509.AlgorithmIdentifier org.bouncycastle.pqc.asn1.XMSSMTKeyParams.getTreeDigest()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSMTKeyParams.toASN1Primitive()
++ public XMSSMTPrivateKey org.bouncycastle.pqc.asn1.XMSSMTPrivateKey(long,byte[],byte[],byte[],byte[],byte[])
++ public XMSSMTPrivateKey org.bouncycastle.pqc.asn1.XMSSMTPrivateKey(long,byte[],byte[],byte[],byte[],byte[],long)
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getBdsState()
++ public J org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getIndex()
++ public static org.bouncycastle.pqc.asn1.XMSSMTPrivateKey org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getInstance(java.lang.Object)
++ public J org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getMaxIndex()
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getPublicSeed()
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getRoot()
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getSecretKeyPRF()
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getSecretKeySeed()
++ public int org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.getVersion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSMTPrivateKey.toASN1Primitive()
++ public XMSSMTPublicKey org.bouncycastle.pqc.asn1.XMSSMTPublicKey(byte[],byte[])
++ public static org.bouncycastle.pqc.asn1.XMSSMTPublicKey org.bouncycastle.pqc.asn1.XMSSMTPublicKey.getInstance(java.lang.Object)
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPublicKey.getPublicSeed()
++ public [B org.bouncycastle.pqc.asn1.XMSSMTPublicKey.getRoot()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSMTPublicKey.toASN1Primitive()
++ public XMSSPrivateKey org.bouncycastle.pqc.asn1.XMSSPrivateKey(int,byte[],byte[],byte[],byte[],byte[])
++ public XMSSPrivateKey org.bouncycastle.pqc.asn1.XMSSPrivateKey(int,byte[],byte[],byte[],byte[],byte[],int)
++ public [B org.bouncycastle.pqc.asn1.XMSSPrivateKey.getBdsState()
++ public int org.bouncycastle.pqc.asn1.XMSSPrivateKey.getIndex()
++ public static org.bouncycastle.pqc.asn1.XMSSPrivateKey org.bouncycastle.pqc.asn1.XMSSPrivateKey.getInstance(java.lang.Object)
++ public int org.bouncycastle.pqc.asn1.XMSSPrivateKey.getMaxIndex()
++ public [B org.bouncycastle.pqc.asn1.XMSSPrivateKey.getPublicSeed()
++ public [B org.bouncycastle.pqc.asn1.XMSSPrivateKey.getRoot()
++ public [B org.bouncycastle.pqc.asn1.XMSSPrivateKey.getSecretKeyPRF()
++ public [B org.bouncycastle.pqc.asn1.XMSSPrivateKey.getSecretKeySeed()
++ public int org.bouncycastle.pqc.asn1.XMSSPrivateKey.getVersion()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSPrivateKey.toASN1Primitive()
++ public XMSSPublicKey org.bouncycastle.pqc.asn1.XMSSPublicKey(byte[],byte[])
++ public static org.bouncycastle.pqc.asn1.XMSSPublicKey org.bouncycastle.pqc.asn1.XMSSPublicKey.getInstance(java.lang.Object)
++ public [B org.bouncycastle.pqc.asn1.XMSSPublicKey.getPublicSeed()
++ public [B org.bouncycastle.pqc.asn1.XMSSPublicKey.getRoot()
++ public org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.asn1.XMSSPublicKey.toASN1Primitive()
-- public bool org.bouncycastle.pqc.crypto.DigestingMessageSigner.verify(byte[])
++ public DigestingStateAwareMessageSigner org.bouncycastle.pqc.crypto.DigestingStateAwareMessageSigner(org.bouncycastle.pqc.crypto.StateAwareMessageSigner,org.bouncycastle.crypto.Digest)
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.DigestingStateAwareMessageSigner.getUpdatedPrivateKey()
++ public ExchangePair org.bouncycastle.pqc.crypto.ExchangePair(org.bouncycastle.crypto.params.AsymmetricKeyParameter,byte[])
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.ExchangePair.getPublicKey()
++ public [B org.bouncycastle.pqc.crypto.ExchangePair.getSharedValue()
++ public abstract org.bouncycastle.pqc.crypto.ExchangePair org.bouncycastle.pqc.crypto.ExchangePairGenerator.GenerateExchange(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public abstract org.bouncycastle.pqc.crypto.ExchangePair org.bouncycastle.pqc.crypto.ExchangePairGenerator.generateExchange(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public ExhaustedPrivateKeyException org.bouncycastle.pqc.crypto.ExhaustedPrivateKeyException(java.lang.String)
++ public abstract [B org.bouncycastle.pqc.crypto.MessageEncryptor.messageDecrypt(byte[])
-- public abstract [B org.bouncycastle.pqc.crypto.MessageEncryptor.messageDecrypt(byte[])
++ public abstract [B org.bouncycastle.pqc.crypto.MessageEncryptor.messageEncrypt(byte[])
-- public abstract [B org.bouncycastle.pqc.crypto.MessageEncryptor.messageEncrypt(byte[])
++ public abstract org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.StateAwareMessageSigner.getUpdatedPrivateKey()
-- public GMSSRootCalc org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc(org.bouncycastle.crypto.Digest,byte[][],int[],org.bouncycastle.pqc.crypto.gmss.Treehash[],java.util.Vector[])
++ public GMSSStateAwareSigner org.bouncycastle.pqc.crypto.gmss.GMSSStateAwareSigner(org.bouncycastle.crypto.Digest)
++ public [B org.bouncycastle.pqc.crypto.gmss.GMSSStateAwareSigner.generateSignature(byte[])
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.gmss.GMSSStateAwareSigner.getUpdatedPrivateKey()
++ public void org.bouncycastle.pqc.crypto.gmss.GMSSStateAwareSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.gmss.GMSSStateAwareSigner.verifySignature(byte[],byte[])
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bool(boolean)
++ public [B org.bouncycastle.pqc.crypto.lms.Composer.build()
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(byte[])
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(byte[],int,int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(byte[][])
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(byte[][],int,int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(org.bouncycastle.util.Encodable)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.bytes(org.bouncycastle.util.Encodable[])
++ public static org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.compose()
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.pad(int,int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.padUntil(int,int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.u16str(int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.u32str(int)
++ public org.bouncycastle.pqc.crypto.lms.Composer org.bouncycastle.pqc.crypto.lms.Composer.u64str(long)
++ public HSSKeyGenerationParameters org.bouncycastle.pqc.crypto.lms.HSSKeyGenerationParameters(org.bouncycastle.pqc.crypto.lms.LMSParameters[],java.security.SecureRandom)
++ public int org.bouncycastle.pqc.crypto.lms.HSSKeyGenerationParameters.getDepth()
++ public org.bouncycastle.pqc.crypto.lms.LMSParameters org.bouncycastle.pqc.crypto.lms.HSSKeyGenerationParameters.getLmsParameters()
++ public HSSKeyPairGenerator org.bouncycastle.pqc.crypto.lms.HSSKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.lms.HSSKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.lms.HSSKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public HSSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters(int,java.util.List,java.util.List,long,long)
++ protected java.lang.Object org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.clone()
++ public bool org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.equals(java.lang.Object)
++ public org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.extractKeyShard(int)
++ public org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.generateLMSContext()
++ public [B org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.generateSignature(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public synchronized [B org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getEncoded()
++ public synchronized J org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getIndex()
++ public static org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getInstance(byte[],byte[])
++ public static org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getInstance(java.lang.Object)
++ public int org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getL()
++ public synchronized org.bouncycastle.pqc.crypto.lms.LMSParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getLMSParameters()
++ public synchronized org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getPublicKey()
++ public J org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.getUsagesRemaining()
++ public int org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.hashCode()
++ protected void org.bouncycastle.pqc.crypto.lms.HSSPrivateKeyParameters.updateHierarchy(org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters[],org.bouncycastle.pqc.crypto.lms.LMSSignature[])
++ public HSSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters(int,org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters)
++ public bool org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.equals(java.lang.Object)
++ public org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.generateLMSContext(byte[])
++ public [B org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.getEncoded()
++ public static org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.getInstance(java.lang.Object)
++ public int org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.getL()
++ public org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.getLMSPublicKey()
++ public int org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.hashCode()
++ public bool org.bouncycastle.pqc.crypto.lms.HSSPublicKeyParameters.verify(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public HSSSignature org.bouncycastle.pqc.crypto.lms.HSSSignature(int,org.bouncycastle.pqc.crypto.lms.LMSSignedPubKey[],org.bouncycastle.pqc.crypto.lms.LMSSignature)
++ public bool org.bouncycastle.pqc.crypto.lms.HSSSignature.equals(java.lang.Object)
++ public [B org.bouncycastle.pqc.crypto.lms.HSSSignature.getEncoded()
++ public static org.bouncycastle.pqc.crypto.lms.HSSSignature org.bouncycastle.pqc.crypto.lms.HSSSignature.getInstance(java.lang.Object,int)
++ public org.bouncycastle.pqc.crypto.lms.LMSSignature org.bouncycastle.pqc.crypto.lms.HSSSignature.getSignature()
++ public org.bouncycastle.pqc.crypto.lms.LMSSignedPubKey org.bouncycastle.pqc.crypto.lms.HSSSignature.getSignedPubKey()
++ public int org.bouncycastle.pqc.crypto.lms.HSSSignature.getlMinus1()
++ public int org.bouncycastle.pqc.crypto.lms.HSSSignature.hashCode()
++ public HSSSigner org.bouncycastle.pqc.crypto.lms.HSSSigner()
++ public [B org.bouncycastle.pqc.crypto.lms.HSSSigner.generateSignature(byte[])
++ public void org.bouncycastle.pqc.crypto.lms.HSSSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.lms.HSSSigner.verifySignature(byte[],byte[])
++ protected LMOtsParameters org.bouncycastle.pqc.crypto.lms.LMOtsParameters(int,int,int,int,int,int,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getDigestOID()
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getLs()
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getN()
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getP()
++ public static org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getParametersForType(int)
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getSigLen()
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getType()
++ public int org.bouncycastle.pqc.crypto.lms.LMOtsParameters.getW()
++ public LMSContext org.bouncycastle.pqc.crypto.lms.LMSContext(org.bouncycastle.pqc.crypto.lms.LMOtsPrivateKey,org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.crypto.Digest,byte[],byte[][])
++ public LMSContext org.bouncycastle.pqc.crypto.lms.LMSContext(org.bouncycastle.pqc.crypto.lms.LMOtsPublicKey,java.lang.Object,org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.pqc.crypto.lms.LMSContext.doFinal(byte[],int)
++ public java.lang.String org.bouncycastle.pqc.crypto.lms.LMSContext.getAlgorithmName()
++ public int org.bouncycastle.pqc.crypto.lms.LMSContext.getDigestSize()
++ public org.bouncycastle.pqc.crypto.lms.LMOtsPublicKey org.bouncycastle.pqc.crypto.lms.LMSContext.getPublicKey()
++ public java.lang.Object org.bouncycastle.pqc.crypto.lms.LMSContext.getSignature()
++ public void org.bouncycastle.pqc.crypto.lms.LMSContext.reset()
++ public void org.bouncycastle.pqc.crypto.lms.LMSContext.update(byte)
++ public void org.bouncycastle.pqc.crypto.lms.LMSContext.update(byte[],int,int)
++ public abstract org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.LMSContextBasedSigner.generateLMSContext()
++ public abstract [B org.bouncycastle.pqc.crypto.lms.LMSContextBasedSigner.generateSignature(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public abstract J org.bouncycastle.pqc.crypto.lms.LMSContextBasedSigner.getUsagesRemaining()
++ public abstract org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.LMSContextBasedVerifier.generateLMSContext(byte[])
++ public abstract bool org.bouncycastle.pqc.crypto.lms.LMSContextBasedVerifier.verify(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public LMSException org.bouncycastle.pqc.crypto.lms.LMSException()
++ public LMSException org.bouncycastle.pqc.crypto.lms.LMSException(java.lang.String)
++ public LMSException org.bouncycastle.pqc.crypto.lms.LMSException(java.lang.String,java.lang.Throwable)
++ public LMSException org.bouncycastle.pqc.crypto.lms.LMSException(java.lang.String,java.lang.Throwable,boolean,boolean)
++ public LMSException org.bouncycastle.pqc.crypto.lms.LMSException(java.lang.Throwable)
++ public LMSKeyGenerationParameters org.bouncycastle.pqc.crypto.lms.LMSKeyGenerationParameters(org.bouncycastle.pqc.crypto.lms.LMSParameters,java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.lms.LMSParameters org.bouncycastle.pqc.crypto.lms.LMSKeyGenerationParameters.getParameters()
++ public LMSKeyPairGenerator org.bouncycastle.pqc.crypto.lms.LMSKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.lms.LMSKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.lms.LMSKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ protected LMSKeyParameters org.bouncycastle.pqc.crypto.lms.LMSKeyParameters(boolean)
++ public abstract [B org.bouncycastle.pqc.crypto.lms.LMSKeyParameters.getEncoded()
++ public LMSParameters org.bouncycastle.pqc.crypto.lms.LMSParameters(org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.pqc.crypto.lms.LMOtsParameters)
++ public org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.crypto.lms.LMSParameters.getLMOTSParam()
++ public org.bouncycastle.pqc.crypto.lms.LMSigParameters org.bouncycastle.pqc.crypto.lms.LMSParameters.getLMSigParam()
++ public LMSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters(org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.pqc.crypto.lms.LMOtsParameters,int,byte[],int,byte[])
++ public bool org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.equals(java.lang.Object)
++ public org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.extractKeyShard(int)
++ public org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.generateLMSContext()
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.generateSignature(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getEncoded()
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getI()
++ public synchronized int org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getIndex()
++ public static org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getInstance(byte[],byte[])
++ public static org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getInstance(java.lang.Object)
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getMasterSecret()
++ public org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getOtsParameters()
++ public org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getPublicKey()
++ public org.bouncycastle.pqc.crypto.lms.LMSigParameters org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getSigParameters()
++ public J org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.getUsagesRemaining()
++ public int org.bouncycastle.pqc.crypto.lms.LMSPrivateKeyParameters.hashCode()
++ public LMSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters(org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.pqc.crypto.lms.LMOtsParameters,byte[],byte[])
++ public bool org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.equals(java.lang.Object)
++ public org.bouncycastle.pqc.crypto.lms.LMSContext org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.generateLMSContext(byte[])
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getEncoded()
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getI()
++ public static org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getInstance(java.lang.Object)
++ public org.bouncycastle.pqc.crypto.lms.LMSParameters org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getLMSParameters()
++ public org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getOtsParameters()
++ public org.bouncycastle.pqc.crypto.lms.LMSigParameters org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getSigParameters()
++ public [B org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.getT1()
++ public int org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.hashCode()
++ public bool org.bouncycastle.pqc.crypto.lms.LMSPublicKeyParameters.verify(org.bouncycastle.pqc.crypto.lms.LMSContext)
++ public LMSSigner org.bouncycastle.pqc.crypto.lms.LMSSigner()
++ public [B org.bouncycastle.pqc.crypto.lms.LMSSigner.generateSignature(byte[])
++ public void org.bouncycastle.pqc.crypto.lms.LMSSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.lms.LMSSigner.verifySignature(byte[],byte[])
++ protected LMSigParameters org.bouncycastle.pqc.crypto.lms.LMSigParameters(int,int,int,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.crypto.lms.LMSigParameters.getDigestOID()
++ public int org.bouncycastle.pqc.crypto.lms.LMSigParameters.getH()
++ public int org.bouncycastle.pqc.crypto.lms.LMSigParameters.getM()
++ public int org.bouncycastle.pqc.crypto.lms.LMSigParameters.getType()
++ public McElieceCCA2KeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters(boolean,java.lang.String)
-- public McElieceCCA2KeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters(boolean,org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)
++ public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters.getDigest()
-- public org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2KeyParameters.getParameters()
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(int)
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(int,int,int)
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(int,int,int,java.lang.String)
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(int,int,java.lang.String)
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(int,java.lang.String)
++ public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(java.lang.String)
-- public McElieceCCA2Parameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters(org.bouncycastle.crypto.Digest)
-- public org.bouncycastle.crypto.Digest org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters.getDigest()
++ public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters.getDigest()
++ public McElieceCCA2PrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.Permutation,java.lang.String)
++ public McElieceCCA2PrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,java.lang.String)
-- public McElieceCCA2PrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters(java.lang.String,int,int,byte[],byte[],byte[],byte[],byte[][],org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)
-- public McElieceCCA2PrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[],org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)
-- public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters.getOIDString()
++ public McElieceCCA2PublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,java.lang.String)
-- public McElieceCCA2PublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters(java.lang.String,int,int,byte[],org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)
-- public McElieceCCA2PublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters)
++ public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters.getG()
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters.getMatrixG()
-- public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters.getOIDString()
++ public McElieceCipher org.bouncycastle.pqc.crypto.mceliece.McElieceCipher()
++ public int org.bouncycastle.pqc.crypto.mceliece.McElieceCipher.getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters)
++ public void org.bouncycastle.pqc.crypto.mceliece.McElieceCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceCipher.messageDecrypt(byte[])
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceCipher.messageEncrypt(byte[])
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
++ private void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.messageEncrypt(byte[])
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiCipher.messageEncrypt(byte[])
-- public McElieceFujisakiDigestCipher org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher(org.bouncycastle.pqc.crypto.MessageEncryptor,org.bouncycastle.crypto.Digest)
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.messageEncrypt()
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.reset()
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.update(byte)
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceFujisakiDigestCipher.update(byte[],int,int)
++ private void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.messageDecrypt(byte[])
++ public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.messageEncrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiCipher.messageEncrypt(byte[])
-- public McElieceKobaraImaiDigestCipher org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher(org.bouncycastle.pqc.crypto.MessageEncryptor,org.bouncycastle.crypto.Digest)
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.messageEncrypt()
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.reset()
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.update(byte)
-- public void org.bouncycastle.pqc.crypto.mceliece.McElieceKobaraImaiDigestCipher.update(byte[],int,int)
-- public McEliecePKCSCipher org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher()
-- public int org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.getKeySize(org.bouncycastle.pqc.crypto.mceliece.McElieceKeyParameters)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters)
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher.messageEncrypt(byte[])
-- public McEliecePKCSDigestCipher org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher(org.bouncycastle.pqc.crypto.MessageEncryptor,org.bouncycastle.crypto.Digest)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.messageEncrypt()
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.reset()
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.update(byte)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSDigestCipher.update(byte[],int,int)
++ public McElieceParameters org.bouncycastle.pqc.crypto.mceliece.McElieceParameters(int,int,int,org.bouncycastle.crypto.Digest)
++ public McElieceParameters org.bouncycastle.pqc.crypto.mceliece.McElieceParameters(int,int,org.bouncycastle.crypto.Digest)
++ public McElieceParameters org.bouncycastle.pqc.crypto.mceliece.McElieceParameters(int,org.bouncycastle.crypto.Digest)
++ public McElieceParameters org.bouncycastle.pqc.crypto.mceliece.McElieceParameters(org.bouncycastle.crypto.Digest)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
++ private void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.initCipherDecrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PrivateKeyParameters)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)
++ private void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.initCipherEncrypt(org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2PublicKeyParameters)
++ public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.messageDecrypt(byte[])
++ public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.messageEncrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalCipher.messageEncrypt(byte[])
-- public McEliecePointchevalDigestCipher org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher(org.bouncycastle.pqc.crypto.MessageEncryptor,org.bouncycastle.crypto.Digest)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.init(boolean,org.bouncycastle.crypto.CipherParameters)
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.messageEncrypt()
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.reset()
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.update(byte)
-- public void org.bouncycastle.pqc.crypto.mceliece.McEliecePointchevalDigestCipher.update(byte[],int,int)
++ public McEliecePrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters(int,int,byte[],byte[],byte[],byte[],byte[],byte[],byte[][])
++ public McEliecePrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public McEliecePrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters(java.lang.String,int,int,byte[],byte[],byte[],byte[],byte[],byte[],byte[][],org.bouncycastle.pqc.crypto.mceliece.McElieceParameters)
-- public McEliecePrivateKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[],org.bouncycastle.pqc.crypto.mceliece.McElieceParameters)
-- public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McEliecePrivateKeyParameters.getOIDString()
++ public McEliecePublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters(int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public McEliecePublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters(java.lang.String,int,int,byte[],org.bouncycastle.pqc.crypto.mceliece.McElieceParameters)
-- public McEliecePublicKeyParameters org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.crypto.mceliece.McElieceParameters)
-- public java.lang.String org.bouncycastle.pqc.crypto.mceliece.McEliecePublicKeyParameters.getOIDString()
++ public NHAgreement org.bouncycastle.pqc.crypto.newhope.NHAgreement()
++ public [B org.bouncycastle.pqc.crypto.newhope.NHAgreement.calculateAgreement(org.bouncycastle.crypto.CipherParameters)
++ public void org.bouncycastle.pqc.crypto.newhope.NHAgreement.init(org.bouncycastle.crypto.CipherParameters)
++ public NHExchangePairGenerator org.bouncycastle.pqc.crypto.newhope.NHExchangePairGenerator(java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.ExchangePair org.bouncycastle.pqc.crypto.newhope.NHExchangePairGenerator.GenerateExchange(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public org.bouncycastle.pqc.crypto.ExchangePair org.bouncycastle.pqc.crypto.newhope.NHExchangePairGenerator.generateExchange(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public NHKeyPairGenerator org.bouncycastle.pqc.crypto.newhope.NHKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.newhope.NHKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.newhope.NHKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public NHOtherInfoGenerator$PartyU org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyU(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],java.security.SecureRandom)
++ public org.bouncycastle.crypto.util.DEROtherInfo org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyU.generate(byte[])
++ public [B org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyU.getSuppPrivInfoPartA()
++ public org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyU.withSuppPubInfo(byte[])
++ public NHOtherInfoGenerator$PartyV org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyV(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],java.security.SecureRandom)
++ public org.bouncycastle.crypto.util.DEROtherInfo org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyV.generate()
++ public [B org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyV.getSuppPrivInfoPartB(byte[])
++ public org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator$PartyV.withSuppPubInfo(byte[])
++ public NHOtherInfoGenerator org.bouncycastle.pqc.crypto.newhope.NHOtherInfoGenerator(org.bouncycastle.asn1.x509.AlgorithmIdentifier,byte[],byte[],java.security.SecureRandom)
++ public NHPrivateKeyParameters org.bouncycastle.pqc.crypto.newhope.NHPrivateKeyParameters(short[])
++ public [S org.bouncycastle.pqc.crypto.newhope.NHPrivateKeyParameters.getSecData()
++ public NHPublicKeyParameters org.bouncycastle.pqc.crypto.newhope.NHPublicKeyParameters(byte[])
++ public [B org.bouncycastle.pqc.crypto.newhope.NHPublicKeyParameters.getPubData()
++ public NHSecretKeyProcessor$PartyUBuilder org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyUBuilder(java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyUBuilder.build(byte[])
++ public [B org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyUBuilder.getPartA()
++ public org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyUBuilder org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyUBuilder.withSharedInfo(byte[])
++ public NHSecretKeyProcessor$PartyVBuilder org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyVBuilder(java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyVBuilder.build()
++ public [B org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyVBuilder.getPartB(byte[])
++ public org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyVBuilder org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor$PartyVBuilder.withSharedInfo(byte[])
++ public [B org.bouncycastle.pqc.crypto.newhope.NHSecretKeyProcessor.processKey(byte[])
++ public QTESLAKeyGenerationParameters org.bouncycastle.pqc.crypto.qtesla.QTESLAKeyGenerationParameters(int,java.security.SecureRandom)
++ public int org.bouncycastle.pqc.crypto.qtesla.QTESLAKeyGenerationParameters.getSecurityCategory()
++ public QTESLAKeyPairGenerator org.bouncycastle.pqc.crypto.qtesla.QTESLAKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.qtesla.QTESLAKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.qtesla.QTESLAKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public QTESLAPrivateKeyParameters org.bouncycastle.pqc.crypto.qtesla.QTESLAPrivateKeyParameters(int,byte[])
++ public [B org.bouncycastle.pqc.crypto.qtesla.QTESLAPrivateKeyParameters.getSecret()
++ public int org.bouncycastle.pqc.crypto.qtesla.QTESLAPrivateKeyParameters.getSecurityCategory()
++ public QTESLAPublicKeyParameters org.bouncycastle.pqc.crypto.qtesla.QTESLAPublicKeyParameters(int,byte[])
++ public [B org.bouncycastle.pqc.crypto.qtesla.QTESLAPublicKeyParameters.getPublicData()
++ public int org.bouncycastle.pqc.crypto.qtesla.QTESLAPublicKeyParameters.getSecurityCategory()
++ public static java.lang.String org.bouncycastle.pqc.crypto.qtesla.QTESLASecurityCategory.getName(int)
++ public QTESLASigner org.bouncycastle.pqc.crypto.qtesla.QTESLASigner()
++ public [B org.bouncycastle.pqc.crypto.qtesla.QTESLASigner.generateSignature(byte[])
++ public void org.bouncycastle.pqc.crypto.qtesla.QTESLASigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.qtesla.QTESLASigner.verifySignature(byte[],byte[])
++ public SPHINCS256KeyGenerationParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCS256KeyGenerationParameters(java.security.SecureRandom,org.bouncycastle.crypto.Digest)
++ public org.bouncycastle.crypto.Digest org.bouncycastle.pqc.crypto.sphincs.SPHINCS256KeyGenerationParameters.getTreeDigest()
++ public SPHINCS256KeyPairGenerator org.bouncycastle.pqc.crypto.sphincs.SPHINCS256KeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.sphincs.SPHINCS256KeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.sphincs.SPHINCS256KeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public SPHINCS256Signer org.bouncycastle.pqc.crypto.sphincs.SPHINCS256Signer(org.bouncycastle.crypto.Digest,org.bouncycastle.crypto.Digest)
++ public [B org.bouncycastle.pqc.crypto.sphincs.SPHINCS256Signer.generateSignature(byte[])
++ public void org.bouncycastle.pqc.crypto.sphincs.SPHINCS256Signer.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.sphincs.SPHINCS256Signer.verifySignature(byte[],byte[])
++ protected SPHINCSKeyParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCSKeyParameters(boolean,java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.crypto.sphincs.SPHINCSKeyParameters.getTreeDigest()
++ public SPHINCSPrivateKeyParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCSPrivateKeyParameters(byte[])
++ public SPHINCSPrivateKeyParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCSPrivateKeyParameters(byte[],java.lang.String)
++ public [B org.bouncycastle.pqc.crypto.sphincs.SPHINCSPrivateKeyParameters.getKeyData()
++ public SPHINCSPublicKeyParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCSPublicKeyParameters(byte[])
++ public SPHINCSPublicKeyParameters org.bouncycastle.pqc.crypto.sphincs.SPHINCSPublicKeyParameters(byte[],java.lang.String)
++ public [B org.bouncycastle.pqc.crypto.sphincs.SPHINCSPublicKeyParameters.getKeyData()
++ public PrivateKeyFactory org.bouncycastle.pqc.crypto.util.PrivateKeyFactory()
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PrivateKeyFactory.createKey(byte[])
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PrivateKeyFactory.createKey(java.io.InputStream)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PrivateKeyFactory.createKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public static org.bouncycastle.asn1.pkcs.PrivateKeyInfo org.bouncycastle.pqc.crypto.util.PrivateKeyInfoFactory.createPrivateKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ public static org.bouncycastle.asn1.pkcs.PrivateKeyInfo org.bouncycastle.pqc.crypto.util.PrivateKeyInfoFactory.createPrivateKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter,org.bouncycastle.asn1.ASN1Set)
++ public PublicKeyFactory org.bouncycastle.pqc.crypto.util.PublicKeyFactory()
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PublicKeyFactory.createKey(byte[])
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PublicKeyFactory.createKey(java.io.InputStream)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PublicKeyFactory.createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public static org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.util.PublicKeyFactory.createKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo,java.lang.Object)
++ public static org.bouncycastle.asn1.x509.SubjectPublicKeyInfo org.bouncycastle.pqc.crypto.util.SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(org.bouncycastle.crypto.params.AsymmetricKeyParameter)
++ protected java.util.List org.bouncycastle.pqc.crypto.xmss.BDS.getAuthenticationPath()
++ protected int org.bouncycastle.pqc.crypto.xmss.BDS.getIndex()
++ public int org.bouncycastle.pqc.crypto.xmss.BDS.getMaxIndex()
++ public org.bouncycastle.pqc.crypto.xmss.BDS org.bouncycastle.pqc.crypto.xmss.BDS.getNextState(byte[],byte[],org.bouncycastle.pqc.crypto.xmss.OTSHashAddress)
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSNode org.bouncycastle.pqc.crypto.xmss.BDS.getRoot()
++ protected int org.bouncycastle.pqc.crypto.xmss.BDS.getTreeHeight()
++ public org.bouncycastle.pqc.crypto.xmss.BDS org.bouncycastle.pqc.crypto.xmss.BDS.withMaxIndex(int,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public org.bouncycastle.pqc.crypto.xmss.BDS org.bouncycastle.pqc.crypto.xmss.BDS.withWOTSDigest(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public J org.bouncycastle.pqc.crypto.xmss.BDSStateMap.getMaxIndex()
++ public bool org.bouncycastle.pqc.crypto.xmss.BDSStateMap.isEmpty()
++ public org.bouncycastle.pqc.crypto.xmss.BDSStateMap org.bouncycastle.pqc.crypto.xmss.BDSStateMap.withWOTSDigest(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public int org.bouncycastle.pqc.crypto.xmss.DefaultXMSSMTOid.getOid()
++ public static org.bouncycastle.pqc.crypto.xmss.DefaultXMSSMTOid org.bouncycastle.pqc.crypto.xmss.DefaultXMSSMTOid.lookup(java.lang.String,int,int,int,int,int)
++ public java.lang.String org.bouncycastle.pqc.crypto.xmss.DefaultXMSSMTOid.toString()
++ public int org.bouncycastle.pqc.crypto.xmss.DefaultXMSSOid.getOid()
++ public static org.bouncycastle.pqc.crypto.xmss.DefaultXMSSOid org.bouncycastle.pqc.crypto.xmss.DefaultXMSSOid.lookup(java.lang.String,int,int,int,int)
++ public java.lang.String org.bouncycastle.pqc.crypto.xmss.DefaultXMSSOid.toString()
++ protected HashTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder.build()
++ protected org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder.getThis()
++ protected org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder.withTreeHeight(int)
++ protected org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.HashTreeAddress$Builder.withTreeIndex(int)
++ protected LTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder.build()
++ protected org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder.getThis()
++ protected org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder.withLTreeAddress(int)
++ protected org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder.withTreeHeight(int)
++ protected org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder org.bouncycastle.pqc.crypto.xmss.LTreeAddress$Builder.withTreeIndex(int)
++ protected OTSHashAddress$Builder org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder.build()
++ protected org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder.getThis()
++ protected org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder.withChainAddress(int)
++ protected org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder.withHashAddress(int)
++ protected org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder org.bouncycastle.pqc.crypto.xmss.OTSHashAddress$Builder.withOTSAddress(int)
++ public XMSS org.bouncycastle.pqc.crypto.xmss.XMSS(org.bouncycastle.pqc.crypto.xmss.XMSSParameters,java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSS.exportPrivateKey()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSS.exportPublicKey()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSS.generateKeys()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSS.getIndex()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSS.getParams()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSS.getPrivateKey()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSS.getPublicSeed()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSS.getRoot()
++ protected org.bouncycastle.pqc.crypto.xmss.WOTSPlus org.bouncycastle.pqc.crypto.xmss.XMSS.getWOTSPlus()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSS.importState(byte[],byte[])
++ public void org.bouncycastle.pqc.crypto.xmss.XMSS.importState(org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters,org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters)
++ protected void org.bouncycastle.pqc.crypto.xmss.XMSS.setIndex(int)
++ protected void org.bouncycastle.pqc.crypto.xmss.XMSS.setPublicSeed(byte[])
++ protected void org.bouncycastle.pqc.crypto.xmss.XMSS.setRoot(byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSS.sign(byte[])
++ public bool org.bouncycastle.pqc.crypto.xmss.XMSS.verifySignature(byte[],byte[],byte[])
++ protected org.bouncycastle.pqc.crypto.xmss.WOTSPlusSignature org.bouncycastle.pqc.crypto.xmss.XMSS.wotsSign(byte[],org.bouncycastle.pqc.crypto.xmss.OTSHashAddress)
++ protected XMSSAddress$Builder org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder(int)
++ protected abstract org.bouncycastle.pqc.crypto.xmss.XMSSAddress org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder.build()
++ protected abstract org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder.getThis()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder.withKeyAndMask(int)
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder.withLayerAddress(int)
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder.withTreeAddress(long)
++ protected XMSSAddress org.bouncycastle.pqc.crypto.xmss.XMSSAddress(org.bouncycastle.pqc.crypto.xmss.XMSSAddress$Builder)
++ public final int org.bouncycastle.pqc.crypto.xmss.XMSSAddress.getKeyAndMask()
++ protected final int org.bouncycastle.pqc.crypto.xmss.XMSSAddress.getLayerAddress()
++ protected final J org.bouncycastle.pqc.crypto.xmss.XMSSAddress.getTreeAddress()
++ public final int org.bouncycastle.pqc.crypto.xmss.XMSSAddress.getType()
++ protected [B org.bouncycastle.pqc.crypto.xmss.XMSSAddress.toByteArray()
++ public XMSSKeyGenerationParameters org.bouncycastle.pqc.crypto.xmss.XMSSKeyGenerationParameters(org.bouncycastle.pqc.crypto.xmss.XMSSParameters,java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSKeyGenerationParameters.getParameters()
++ public XMSSKeyPairGenerator org.bouncycastle.pqc.crypto.xmss.XMSSKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.xmss.XMSSKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public XMSSKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSKeyParameters(boolean,java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.crypto.xmss.XMSSKeyParameters.getTreeDigest()
++ public XMSSMT org.bouncycastle.pqc.crypto.xmss.XMSSMT(org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters,java.security.SecureRandom)
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMT.exportPrivateKey()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMT.exportPublicKey()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSMT.generateKeys()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMT.getParams()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMT.getPublicSeed()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSMT.getXMSS()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSMT.importState(byte[],byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMT.sign(byte[])
++ public bool org.bouncycastle.pqc.crypto.xmss.XMSSMT.verifySignature(byte[],byte[],byte[])
++ public XMSSMTKeyGenerationParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyGenerationParameters(org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters,java.security.SecureRandom)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyGenerationParameters.getParameters()
++ public XMSSMTKeyPairGenerator org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyPairGenerator()
++ public org.bouncycastle.crypto.AsymmetricCipherKeyPair org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyPairGenerator.generateKeyPair()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyPairGenerator.init(org.bouncycastle.crypto.KeyGenerationParameters)
++ public XMSSMTKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyParameters(boolean,java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.crypto.xmss.XMSSMTKeyParameters.getTreeDigest()
++ public XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters(int,int,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters(int,int,org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getHeight()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getLayers()
++ protected int org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getLen()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSOid org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getOid()
++ protected java.lang.String org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getTreeDigest()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getTreeDigestOID()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getTreeDigestSize()
++ protected org.bouncycastle.pqc.crypto.xmss.WOTSPlus org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getWOTSPlus()
++ protected org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.getXMSSParameters()
++ public static org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters.lookupByOID(int)
++ public XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withBDSState(org.bouncycastle.pqc.crypto.xmss.BDSStateMap)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withIndex(long)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withMaxIndex(long)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withPrivateKey(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withPublicSeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withRoot(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withSecretKeyPRF(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters$Builder.withSecretKeySeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.extractKeyShard(int)
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getEncoded()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getIndex()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getNextKey()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getParameters()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getPublicSeed()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getRoot()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getSecretKeyPRF()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getSecretKeySeed()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.getUsagesRemaining()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters.toByteArray()
++ public XMSSMTPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder.withPublicKey(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder.withPublicSeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters$Builder.withRoot(byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters.getEncoded()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters.getParameters()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters.getPublicSeed()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters.getRoot()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters.toByteArray()
++ public XMSSMTSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSMTParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder.withIndex(long)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder.withRandom(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder.withReducedSignatures(java.util.List)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature$Builder.withSignature(byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature.getEncoded()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature.getIndex()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature.getRandom()
++ public java.util.List org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature.getReducedSignatures()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTSignature.toByteArray()
++ public XMSSMTSigner org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner.generateSignature(byte[])
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner.getUpdatedPrivateKey()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner.getUsagesRemaining()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner.verifySignature(byte[],byte[])
++ protected XMSSNode org.bouncycastle.pqc.crypto.xmss.XMSSNode(int,byte[])
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSNode.getHeight()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSNode.getValue()
++ public abstract int org.bouncycastle.pqc.crypto.xmss.XMSSOid.getOid()
++ public abstract java.lang.String org.bouncycastle.pqc.crypto.xmss.XMSSOid.toString()
++ public XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSParameters(int,org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSParameters(int,org.bouncycastle.crypto.Digest)
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSParameters.getHeight()
++ public org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.crypto.xmss.XMSSParameters.getTreeDigestOID()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSParameters.getTreeDigestSize()
++ public static org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSParameters.lookupByOID(int)
++ public XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withBDSState(org.bouncycastle.pqc.crypto.xmss.BDS)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withIndex(int)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withMaxIndex(int)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withPrivateKey(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withPublicSeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withRoot(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withSecretKeyPRF(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters$Builder.withSecretKeySeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.extractKeyShard(int)
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getEncoded()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getIndex()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getNextKey()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getParameters()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getPublicSeed()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getRoot()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getSecretKeyPRF()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getSecretKeySeed()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.getUsagesRemaining()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters.toByteArray()
++ public XMSSPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder.withPublicKey(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder.withPublicSeed(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters$Builder.withRoot(byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters.getEncoded()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters.getParameters()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters.getPublicSeed()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters.getRoot()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters.toByteArray()
++ public XMSSReducedSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder.withAuthPath(java.util.List)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder.withReducedSignature(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder.withWOTSPlusSignature(org.bouncycastle.pqc.crypto.xmss.WOTSPlusSignature)
++ protected XMSSReducedSignature org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature(org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature$Builder)
++ public java.util.List org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature.getAuthPath()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSParameters org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature.getParams()
++ public org.bouncycastle.pqc.crypto.xmss.WOTSPlusSignature org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature.getWOTSPlusSignature()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSReducedSignature.toByteArray()
++ public XMSSSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder(org.bouncycastle.pqc.crypto.xmss.XMSSParameters)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSSignature org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder.build()
++ public org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder.withIndex(int)
++ public org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder.withRandom(byte[])
++ public org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder org.bouncycastle.pqc.crypto.xmss.XMSSSignature$Builder.withSignature(byte[])
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSSignature.getEncoded()
++ public int org.bouncycastle.pqc.crypto.xmss.XMSSSignature.getIndex()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSSignature.getRandom()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSSignature.toByteArray()
++ public XMSSSigner org.bouncycastle.pqc.crypto.xmss.XMSSSigner()
++ public [B org.bouncycastle.pqc.crypto.xmss.XMSSSigner.generateSignature(byte[])
++ public org.bouncycastle.crypto.params.AsymmetricKeyParameter org.bouncycastle.pqc.crypto.xmss.XMSSSigner.getUpdatedPrivateKey()
++ public J org.bouncycastle.pqc.crypto.xmss.XMSSSigner.getUsagesRemaining()
++ public void org.bouncycastle.pqc.crypto.xmss.XMSSSigner.init(boolean,org.bouncycastle.crypto.CipherParameters)
++ public bool org.bouncycastle.pqc.crypto.xmss.XMSSSigner.verifySignature(byte[],byte[])
++ public abstract [B org.bouncycastle.pqc.crypto.xmss.XMSSStoreableObjectInterface.toByteArray()
++ public XMSSUtil org.bouncycastle.pqc.crypto.xmss.XMSSUtil()
++ public static bool org.bouncycastle.pqc.crypto.xmss.XMSSUtil.areEqual(byte[][],byte[][])
++ public static J org.bouncycastle.pqc.crypto.xmss.XMSSUtil.bytesToXBigEndian(byte[],int,int)
++ public static int org.bouncycastle.pqc.crypto.xmss.XMSSUtil.calculateTau(int,int)
++ public static [B org.bouncycastle.pqc.crypto.xmss.XMSSUtil.cloneArray(byte[])
++ public static [[B org.bouncycastle.pqc.crypto.xmss.XMSSUtil.cloneArray(byte[][])
++ public static void org.bouncycastle.pqc.crypto.xmss.XMSSUtil.copyBytesAtOffset(byte[],byte[],int)
++ public static java.lang.Object org.bouncycastle.pqc.crypto.xmss.XMSSUtil.deserialize(byte[],java.lang.Class)
++ public static void org.bouncycastle.pqc.crypto.xmss.XMSSUtil.dumpByteArray(byte[][])
++ public static [B org.bouncycastle.pqc.crypto.xmss.XMSSUtil.extractBytesAtOffset(byte[],int,int)
++ public static int org.bouncycastle.pqc.crypto.xmss.XMSSUtil.getDigestSize(org.bouncycastle.crypto.Digest)
++ public static int org.bouncycastle.pqc.crypto.xmss.XMSSUtil.getLeafIndex(long,int)
++ public static J org.bouncycastle.pqc.crypto.xmss.XMSSUtil.getTreeIndex(long,int)
++ public static bool org.bouncycastle.pqc.crypto.xmss.XMSSUtil.hasNullPointer(byte[][])
++ public static bool org.bouncycastle.pqc.crypto.xmss.XMSSUtil.isIndexValid(int,long)
++ public static bool org.bouncycastle.pqc.crypto.xmss.XMSSUtil.isNewAuthenticationPathNeeded(long,int,int)
++ public static bool org.bouncycastle.pqc.crypto.xmss.XMSSUtil.isNewBDSInitNeeded(long,int,int)
++ public static int org.bouncycastle.pqc.crypto.xmss.XMSSUtil.log2(int)
++ public static void org.bouncycastle.pqc.crypto.xmss.XMSSUtil.longToBigEndian(long,byte[],int)
++ public static [B org.bouncycastle.pqc.crypto.xmss.XMSSUtil.serialize(java.lang.Object)
++ public static [B org.bouncycastle.pqc.crypto.xmss.XMSSUtil.toBytesBigEndian(long,int)
++ public abstract int org.bouncycastle.pqc.jcajce.interfaces.LMSKey.getLevels()
++ public abstract org.bouncycastle.pqc.jcajce.interfaces.LMSPrivateKey org.bouncycastle.pqc.jcajce.interfaces.LMSPrivateKey.extractKeyShard(int)
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.LMSPrivateKey.getIndex()
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.LMSPrivateKey.getUsagesRemaining()
++ public abstract [S org.bouncycastle.pqc.jcajce.interfaces.NHPrivateKey.getSecretData()
++ public abstract [B org.bouncycastle.pqc.jcajce.interfaces.NHPublicKey.getPublicData()
++ public abstract org.bouncycastle.pqc.jcajce.spec.QTESLAParameterSpec org.bouncycastle.pqc.jcajce.interfaces.QTESLAKey.getParams()
++ public abstract [B org.bouncycastle.pqc.jcajce.interfaces.SPHINCSKey.getKeyData()
++ public abstract java.lang.String org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.getAlgorithm()
++ public abstract java.security.PrivateKey org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.getUpdatedPrivateKey()
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.initSign(java.security.PrivateKey)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.initSign(java.security.PrivateKey,java.security.SecureRandom)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.initVerify(java.security.PublicKey)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.initVerify(java.security.cert.Certificate)
++ public abstract bool org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.isSigningCapable()
++ public abstract [B org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.sign()
++ public abstract int org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.sign(byte[],int,int)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.update(byte)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.update(byte[])
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.update(byte[],int,int)
++ public abstract void org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.update(java.nio.ByteBuffer)
++ public abstract bool org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.verify(byte[])
++ public abstract bool org.bouncycastle.pqc.jcajce.interfaces.StateAwareSignature.verify(byte[],int,int)
++ public abstract int org.bouncycastle.pqc.jcajce.interfaces.XMSSKey.getHeight()
++ public abstract java.lang.String org.bouncycastle.pqc.jcajce.interfaces.XMSSKey.getTreeDigest()
++ public abstract int org.bouncycastle.pqc.jcajce.interfaces.XMSSMTKey.getHeight()
++ public abstract int org.bouncycastle.pqc.jcajce.interfaces.XMSSMTKey.getLayers()
++ public abstract java.lang.String org.bouncycastle.pqc.jcajce.interfaces.XMSSMTKey.getTreeDigest()
++ public abstract org.bouncycastle.pqc.jcajce.interfaces.XMSSMTPrivateKey org.bouncycastle.pqc.jcajce.interfaces.XMSSMTPrivateKey.extractKeyShard(int)
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.XMSSMTPrivateKey.getIndex()
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.XMSSMTPrivateKey.getUsagesRemaining()
++ public abstract org.bouncycastle.pqc.jcajce.interfaces.XMSSPrivateKey org.bouncycastle.pqc.jcajce.interfaces.XMSSPrivateKey.extractKeyShard(int)
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.XMSSPrivateKey.getIndex()
++ public abstract J org.bouncycastle.pqc.jcajce.interfaces.XMSSPrivateKey.getUsagesRemaining()
++ public void org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider.addAlgorithm(java.lang.String,org.bouncycastle.asn1.ASN1ObjectIdentifier,java.lang.String)
++ public void org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider.addAttributes(java.lang.String,java.util.Map)
++ public org.bouncycastle.jcajce.provider.util.AsymmetricKeyInfoConverter org.bouncycastle.pqc.jcajce.provider.BouncyCastlePQCProvider.getKeyInfoConverter(org.bouncycastle.asn1.ASN1ObjectIdentifier)
++ public LMS$Mappings org.bouncycastle.pqc.jcajce.provider.LMS$Mappings()
++ public void org.bouncycastle.pqc.jcajce.provider.LMS$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public LMS org.bouncycastle.pqc.jcajce.provider.LMS()
++ public NH$Mappings org.bouncycastle.pqc.jcajce.provider.NH$Mappings()
++ public void org.bouncycastle.pqc.jcajce.provider.NH$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public NH org.bouncycastle.pqc.jcajce.provider.NH()
++ public QTESLA$Mappings org.bouncycastle.pqc.jcajce.provider.QTESLA$Mappings()
++ public void org.bouncycastle.pqc.jcajce.provider.QTESLA$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public QTESLA org.bouncycastle.pqc.jcajce.provider.QTESLA()
++ public SPHINCS$Mappings org.bouncycastle.pqc.jcajce.provider.SPHINCS$Mappings()
++ public void org.bouncycastle.pqc.jcajce.provider.SPHINCS$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public SPHINCS org.bouncycastle.pqc.jcajce.provider.SPHINCS()
++ public XMSS$Mappings org.bouncycastle.pqc.jcajce.provider.XMSS$Mappings()
++ public void org.bouncycastle.pqc.jcajce.provider.XMSS$Mappings.configure(org.bouncycastle.jcajce.provider.config.ConfigurableProvider)
++ public XMSS org.bouncycastle.pqc.jcajce.provider.XMSS()
-- protected BCGMSSPublicKey org.bouncycastle.pqc.jcajce.provider.gmss.BCGMSSPublicKey(org.bouncycastle.pqc.jcajce.spec.GMSSPublicKeySpec)
++ public BCLMSPrivateKey org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public BCLMSPrivateKey org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey(org.bouncycastle.pqc.crypto.lms.LMSKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.equals(java.lang.Object)
++ public org.bouncycastle.pqc.jcajce.interfaces.LMSPrivateKey org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.extractKeyShard(int)
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getFormat()
++ public J org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getIndex()
++ public int org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getLevels()
++ public J org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.getUsagesRemaining()
++ public int org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPrivateKey.hashCode()
++ public BCLMSPublicKey org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public BCLMSPublicKey org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey(org.bouncycastle.pqc.crypto.lms.LMSKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.getFormat()
++ public int org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.getLevels()
++ public int org.bouncycastle.pqc.jcajce.provider.lms.BCLMSPublicKey.hashCode()
++ public LMSKeyFactorySpi org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public LMSKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.lms.LMSKeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public LMSSignatureSpi$generic org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi$generic()
++ protected LMSSignatureSpi org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi(java.lang.String)
++ protected LMSSignatureSpi org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi(java.lang.String,org.bouncycastle.crypto.Digest)
++ protected java.lang.Object org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineSign()
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.pqc.jcajce.provider.lms.LMSSignatureSpi.engineVerify(byte[])
-- public BCMcElieceCCA2PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
-- public BCMcElieceCCA2PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey(org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec)
-- protected org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey.getAlgParams()
-- public org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey.getMcElieceCCA2Parameters()
-- protected org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey.getOID()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey.getOIDString()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PrivateKey.toString()
-- public BCMcElieceCCA2PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public BCMcElieceCCA2PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey(org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec)
-- protected org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey.getAlgParams()
-- public org.bouncycastle.pqc.crypto.mceliece.McElieceCCA2Parameters org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey.getMcElieceCCA2Parameters()
-- protected org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey.getOID()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcElieceCCA2PublicKey.getOIDString()
-- public BCMcEliecePrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
-- public BCMcEliecePrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey(org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec)
-- protected org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey.getAlgParams()
-- public org.bouncycastle.pqc.crypto.mceliece.McElieceParameters org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey.getMcElieceParameters()
-- protected org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey.getOID()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey.getOIDString()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePrivateKey.toString()
-- public BCMcEliecePublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public BCMcEliecePublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey(org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec)
-- protected org.bouncycastle.asn1.ASN1Primitive org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey.getAlgParams()
-- public org.bouncycastle.pqc.crypto.mceliece.McElieceParameters org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey.getMcElieceParameters()
-- protected org.bouncycastle.asn1.ASN1ObjectIdentifier org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey.getOID()
-- public java.lang.String org.bouncycastle.pqc.jcajce.provider.mceliece.BCMcEliecePublicKey.getOIDString()
-- public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePrivate(java.security.spec.KeySpec)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
-- public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
-- public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePublic(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
-- public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public McElieceCCA2KeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec)
++ public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceCCA2KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
-- public McElieceFujisakiCipherSpi$McElieceFujisaki224 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki224()
-- public McElieceFujisakiCipherSpi$McElieceFujisaki256 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki256()
-- public McElieceFujisakiCipherSpi$McElieceFujisaki384 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki384()
-- public McElieceFujisakiCipherSpi$McElieceFujisaki512 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi$McElieceFujisaki512()
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceFujisakiCipherSpi.messageEncrypt(byte[])
-- public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePrivate(java.security.spec.KeySpec)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
-- public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
-- public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePublic(java.security.spec.KeySpec)
-- public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
-- public McElieceKeyPairGeneratorSpi$McEliece org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece()
-- public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece.generateKeyPair()
-- public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece.initialize(int,java.security.SecureRandom)
-- public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McEliece.initialize(java.security.spec.AlgorithmParameterSpec)
-- public McElieceKeyPairGeneratorSpi$McElieceCCA2 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2()
-- public McElieceKeyPairGeneratorSpi$McElieceCCA2 org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2(java.lang.String)
-- public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2.generateKeyPair()
-- public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2.initialize(int,java.security.SecureRandom)
-- public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi$McElieceCCA2.initialize(java.security.spec.AlgorithmParameterSpec)
++ public McElieceKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi()
-- public McElieceKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi(java.lang.String)
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi.messageDecrypt()
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McElieceKobaraImaiCipherSpi.messageEncrypt()
-- public McEliecePKCSCipherSpi$McEliecePKCS224 org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS224()
-- public McEliecePKCSCipherSpi$McEliecePKCS256 org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS256()
-- public McEliecePKCSCipherSpi$McEliecePKCS384 org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS384()
-- public McEliecePKCSCipherSpi$McEliecePKCS512 org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi$McEliecePKCS512()
-- public McEliecePKCSCipherSpi org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi(org.bouncycastle.crypto.Digest,org.bouncycastle.pqc.crypto.mceliece.McEliecePKCSCipher)
++ public McEliecePKCSCipherSpi org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePKCSCipherSpi(org.bouncycastle.pqc.crypto.mceliece.McElieceCipher)
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi.messageDecrypt(byte[])
-- public [B org.bouncycastle.pqc.jcajce.provider.mceliece.McEliecePointchevalCipherSpi.messageEncrypt(byte[])
++ public BCNHPrivateKey org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public BCNHPrivateKey org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey(org.bouncycastle.pqc.crypto.newhope.NHPrivateKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.getFormat()
++ public [S org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.getSecretData()
++ public int org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPrivateKey.hashCode()
++ public BCNHPublicKey org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public BCNHPublicKey org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey(org.bouncycastle.pqc.crypto.newhope.NHPublicKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.getFormat()
++ public [B org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.getPublicData()
++ public int org.bouncycastle.pqc.jcajce.provider.newhope.BCNHPublicKey.hashCode()
++ public KeyAgreementSpi org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi()
++ protected [B org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.calcSecret()
++ protected java.security.Key org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.engineDoPhase(java.security.Key,boolean)
++ protected [B org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.engineGenerateSecret()
++ protected int org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.engineGenerateSecret(byte[],int)
++ protected void org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.engineInit(java.security.Key,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.newhope.KeyAgreementSpi.engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public NHKeyFactorySpi org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public NHKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.newhope.NHKeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public BCqTESLAPrivateKey org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public BCqTESLAPrivateKey org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey(org.bouncycastle.pqc.crypto.qtesla.QTESLAPrivateKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.getFormat()
++ public org.bouncycastle.pqc.jcajce.spec.QTESLAParameterSpec org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.getParams()
++ public int org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPrivateKey.hashCode()
++ public BCqTESLAPublicKey org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public BCqTESLAPublicKey org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey(org.bouncycastle.pqc.crypto.qtesla.QTESLAPublicKeyParameters)
++ public bool org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.getFormat()
++ public org.bouncycastle.pqc.jcajce.spec.QTESLAParameterSpec org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.getParams()
++ public int org.bouncycastle.pqc.jcajce.provider.qtesla.BCqTESLAPublicKey.hashCode()
++ public KeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.qtesla.KeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.qtesla.KeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.qtesla.KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.qtesla.KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public QTESLAKeyFactorySpi org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.qtesla.QTESLAKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public SignatureSpi$PI org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi$PI()
++ public SignatureSpi$PIII org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi$PIII()
++ public SignatureSpi$qTESLA org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi$qTESLA()
++ protected SignatureSpi org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi(java.lang.String)
++ protected SignatureSpi org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi(java.lang.String,org.bouncycastle.crypto.Digest,org.bouncycastle.pqc.crypto.qtesla.QTESLASigner)
++ protected java.lang.Object org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineSign()
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.pqc.jcajce.provider.qtesla.SignatureSpi.engineVerify(byte[])
++ public BCSphincs256PrivateKey org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.sphincs.SPHINCSPrivateKeyParameters)
++ public BCSphincs256PrivateKey org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.getFormat()
++ public [B org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.getKeyData()
++ public int org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PrivateKey.hashCode()
++ public BCSphincs256PublicKey org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.sphincs.SPHINCSPublicKeyParameters)
++ public BCSphincs256PublicKey org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.getFormat()
++ public [B org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.getKeyData()
++ public int org.bouncycastle.pqc.jcajce.provider.sphincs.BCSphincs256PublicKey.hashCode()
++ public SignatureSpi$withSha3_512 org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi$withSha3_512()
++ public SignatureSpi$withSha512 org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi$withSha512()
++ protected SignatureSpi org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi(org.bouncycastle.crypto.Digest,org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.sphincs.SPHINCS256Signer)
++ protected java.lang.Object org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineSign()
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.pqc.jcajce.provider.sphincs.SignatureSpi.engineVerify(byte[])
++ public Sphincs256KeyFactorySpi org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public Sphincs256KeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.sphincs.Sphincs256KeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public BCXMSSMTPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.xmss.XMSSMTPrivateKeyParameters)
++ public BCXMSSMTPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.equals(java.lang.Object)
++ public org.bouncycastle.pqc.jcajce.interfaces.XMSSMTPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.extractKeyShard(int)
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getFormat()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getHeight()
++ public J org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getIndex()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getLayers()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getTreeDigest()
++ public J org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.getUsagesRemaining()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPrivateKey.hashCode()
++ public BCXMSSMTPublicKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.xmss.XMSSMTPublicKeyParameters)
++ public BCXMSSMTPublicKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getFormat()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getHeight()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getLayers()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.getTreeDigest()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSMTPublicKey.hashCode()
++ public BCXMSSPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.xmss.XMSSPrivateKeyParameters)
++ public BCXMSSPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.equals(java.lang.Object)
++ public org.bouncycastle.pqc.jcajce.interfaces.XMSSPrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.extractKeyShard(int)
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getFormat()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getHeight()
++ public J org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getIndex()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getTreeDigest()
++ public J org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.getUsagesRemaining()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPrivateKey.hashCode()
++ public BCXMSSPublicKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey(org.bouncycastle.asn1.ASN1ObjectIdentifier,org.bouncycastle.pqc.crypto.xmss.XMSSPublicKeyParameters)
++ public BCXMSSPublicKey org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.equals(java.lang.Object)
++ public final java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.getAlgorithm()
++ public [B org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.getEncoded()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.getFormat()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.getHeight()
++ public java.lang.String org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.getTreeDigest()
++ public int org.bouncycastle.pqc.jcajce.provider.xmss.BCXMSSPublicKey.hashCode()
++ public XMSSKeyFactorySpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public XMSSKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSKeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public XMSSMTKeyFactorySpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi()
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.engineGeneratePrivate(java.security.spec.KeySpec)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.engineGeneratePublic(java.security.spec.KeySpec)
++ public final java.security.spec.KeySpec org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.engineGetKeySpec(java.security.Key,java.lang.Class)
++ public final java.security.Key org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.engineTranslateKey(java.security.Key)
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.generatePrivate(org.bouncycastle.asn1.pkcs.PrivateKeyInfo)
++ public java.security.PublicKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyFactorySpi.generatePublic(org.bouncycastle.asn1.x509.SubjectPublicKeyInfo)
++ public XMSSMTKeyPairGeneratorSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyPairGeneratorSpi()
++ public java.security.KeyPair org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyPairGeneratorSpi.generateKeyPair()
++ public void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyPairGeneratorSpi.initialize(int,java.security.SecureRandom)
++ public void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTKeyPairGeneratorSpi.initialize(java.security.spec.AlgorithmParameterSpec,java.security.SecureRandom)
++ public XMSSMTSignatureSpi$generic org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$generic()
++ public XMSSMTSignatureSpi$withSha256 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withSha256()
++ public XMSSMTSignatureSpi$withSha256andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withSha256andPrehash()
++ public XMSSMTSignatureSpi$withSha512 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withSha512()
++ public XMSSMTSignatureSpi$withSha512andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withSha512andPrehash()
++ public XMSSMTSignatureSpi$withShake128 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withShake128()
++ public XMSSMTSignatureSpi$withShake128andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withShake128andPrehash()
++ public XMSSMTSignatureSpi$withShake256 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withShake256()
++ public XMSSMTSignatureSpi$withShake256andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi$withShake256andPrehash()
++ protected XMSSMTSignatureSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi(java.lang.String)
++ protected XMSSMTSignatureSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi(java.lang.String,org.bouncycastle.crypto.Digest,org.bouncycastle.pqc.crypto.xmss.XMSSMTSigner)
++ protected java.lang.Object org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineSign()
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.engineVerify(byte[])
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.getUpdatedPrivateKey()
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.XMSSMTSignatureSpi.isSigningCapable()
++ public XMSSSignatureSpi$generic org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$generic()
++ public XMSSSignatureSpi$withSha256 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withSha256()
++ public XMSSSignatureSpi$withSha256andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withSha256andPrehash()
++ public XMSSSignatureSpi$withSha512 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withSha512()
++ public XMSSSignatureSpi$withSha512andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withSha512andPrehash()
++ public XMSSSignatureSpi$withShake128 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withShake128()
++ public XMSSSignatureSpi$withShake128andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withShake128andPrehash()
++ public XMSSSignatureSpi$withShake256 org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withShake256()
++ public XMSSSignatureSpi$withShake256andPrehash org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi$withShake256andPrehash()
++ protected XMSSSignatureSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi(java.lang.String)
++ protected XMSSSignatureSpi org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi(java.lang.String,org.bouncycastle.crypto.Digest,org.bouncycastle.pqc.crypto.xmss.XMSSSigner)
++ protected java.lang.Object org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineGetParameter(java.lang.String)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineInitSign(java.security.PrivateKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineInitSign(java.security.PrivateKey,java.security.SecureRandom)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineInitVerify(java.security.PublicKey)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineSetParameter(java.lang.String,java.lang.Object)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineSetParameter(java.security.spec.AlgorithmParameterSpec)
++ protected [B org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineSign()
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineUpdate(byte)
++ protected void org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineUpdate(byte[],int,int)
++ protected bool org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.engineVerify(byte[])
++ public java.security.PrivateKey org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.getUpdatedPrivateKey()
++ public bool org.bouncycastle.pqc.jcajce.provider.xmss.XMSSSignatureSpi.isSigningCapable()
-- public ECCKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec()
-- public ECCKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec(int)
-- public ECCKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec(int,int)
-- public ECCKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec(int,int,int)
-- public int org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec.getFieldPoly()
-- public int org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec.getM()
-- public int org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec.getN()
-- public int org.bouncycastle.pqc.jcajce.spec.ECCKeyGenParameterSpec.getT()
-- protected GMSSKeySpec org.bouncycastle.pqc.jcajce.spec.GMSSKeySpec(org.bouncycastle.pqc.crypto.gmss.GMSSParameters)
-- public org.bouncycastle.pqc.crypto.gmss.GMSSParameters org.bouncycastle.pqc.jcajce.spec.GMSSKeySpec.getParameters()
-- public GMSSPrivateKeySpec org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec(int[],byte[][],byte[][],byte[][][],byte[][][],org.bouncycastle.pqc.crypto.gmss.Treehash[][],org.bouncycastle.pqc.crypto.gmss.Treehash[][],java.util.Vector[],java.util.Vector[],java.util.Vector[][],java.util.Vector[][],byte[][][],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],org.bouncycastle.pqc.crypto.gmss.GMSSLeaf[],int[],byte[][],org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc[],byte[][],org.bouncycastle.pqc.crypto.gmss.GMSSRootSig[],org.bouncycastle.pqc.crypto.gmss.GMSSParameters)
-- public [[[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentAuthPath()
-- public java.util.Vector org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentRetain()
-- public [[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentRootSig()
-- public [[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentSeed()
-- public java.util.Vector org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentStack()
-- public org.bouncycastle.pqc.crypto.gmss.Treehash org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getCurrentTreehash()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSParameters org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getGmssPS()
-- public [I org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getIndex()
-- public [[[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getKeep()
-- public [I org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getMinTreehash()
-- public [[[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextAuthPath()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSLeaf org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextNextLeaf()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSRootCalc org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextNextRoot()
-- public [[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextNextSeed()
-- public java.util.Vector org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextRetain()
-- public [[B org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextRoot()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSRootSig org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextRootSig()
-- public java.util.Vector org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextStack()
-- public org.bouncycastle.pqc.crypto.gmss.Treehash org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getNextTreehash()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSLeaf org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getUpperLeaf()
-- public org.bouncycastle.pqc.crypto.gmss.GMSSLeaf org.bouncycastle.pqc.jcajce.spec.GMSSPrivateKeySpec.getUpperTreehashLeaf()
-- public GMSSPublicKeySpec org.bouncycastle.pqc.jcajce.spec.GMSSPublicKeySpec(byte[],org.bouncycastle.pqc.crypto.gmss.GMSSParameters)
-- public [B org.bouncycastle.pqc.jcajce.spec.GMSSPublicKeySpec.getPublicKey()
++ public transient LMSHSSKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSHSSKeyGenParameterSpec(org.bouncycastle.pqc.jcajce.spec.LMSKeyGenParameterSpec[])
++ public org.bouncycastle.pqc.jcajce.spec.LMSKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSHSSKeyGenParameterSpec.getLMSSpecs()
++ public LMSHSSParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSHSSParameterSpec(org.bouncycastle.pqc.jcajce.spec.LMSParameterSpec[])
++ public org.bouncycastle.pqc.jcajce.spec.LMSParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSHSSParameterSpec.getLMSSpecs()
++ public LMSKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSKeyGenParameterSpec(org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.pqc.crypto.lms.LMOtsParameters)
++ public org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.jcajce.spec.LMSKeyGenParameterSpec.getOtsParams()
++ public org.bouncycastle.pqc.crypto.lms.LMSigParameters org.bouncycastle.pqc.jcajce.spec.LMSKeyGenParameterSpec.getSigParams()
++ public LMSParameterSpec org.bouncycastle.pqc.jcajce.spec.LMSParameterSpec(org.bouncycastle.pqc.crypto.lms.LMSigParameters,org.bouncycastle.pqc.crypto.lms.LMOtsParameters)
++ public org.bouncycastle.pqc.crypto.lms.LMOtsParameters org.bouncycastle.pqc.jcajce.spec.LMSParameterSpec.getOtsParams()
++ public org.bouncycastle.pqc.crypto.lms.LMSigParameters org.bouncycastle.pqc.jcajce.spec.LMSParameterSpec.getSigParams()
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec()
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int)
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int,int)
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int,int,int)
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int,int,int,java.lang.String)
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int,int,java.lang.String)
++ public McElieceCCA2KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec(int,java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec.getDigest()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec.getFieldPoly()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec.getM()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec.getN()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2KeyGenParameterSpec.getT()
-- public McElieceCCA2ParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec()
-- public McElieceCCA2ParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec(java.lang.String)
-- public java.lang.String org.bouncycastle.pqc.jcajce.spec.McElieceCCA2ParameterSpec.getMDName()
-- public McElieceCCA2PrivateKeySpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec(java.lang.String,int,int,byte[],byte[],byte[],byte[],byte[][])
-- public McElieceCCA2PrivateKeySpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
-- public org.bouncycastle.pqc.math.linearalgebra.GF2mField org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getField()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getGoppaPoly()
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getH()
-- public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getK()
-- public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getN()
-- public java.lang.String org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getOIDString()
-- public org.bouncycastle.pqc.math.linearalgebra.Permutation org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getP()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PrivateKeySpec.getQInv()
-- public McElieceCCA2PublicKeySpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec(java.lang.String,int,int,byte[])
-- public McElieceCCA2PublicKeySpec org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec.getMatrixG()
-- public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec.getN()
-- public java.lang.String org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec.getOIDString()
-- public int org.bouncycastle.pqc.jcajce.spec.McElieceCCA2PublicKeySpec.getT()
++ public McElieceKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec()
++ public McElieceKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec(int)
++ public McElieceKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec(int,int)
++ public McElieceKeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec(int,int,int)
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec.getFieldPoly()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec.getM()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec.getN()
++ public int org.bouncycastle.pqc.jcajce.spec.McElieceKeyGenParameterSpec.getT()
-- public McEliecePrivateKeySpec org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec(java.lang.String,int,int,byte[],byte[],byte[],byte[],byte[],byte[],byte[][])
-- public McEliecePrivateKeySpec org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2mField,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.Permutation,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix,org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM[])
-- public org.bouncycastle.pqc.math.linearalgebra.GF2mField org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getField()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getGoppaPoly()
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getH()
-- public int org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getK()
-- public int org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getN()
-- public java.lang.String org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getOIDString()
-- public org.bouncycastle.pqc.math.linearalgebra.Permutation org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getP1()
-- public org.bouncycastle.pqc.math.linearalgebra.Permutation org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getP2()
-- public org.bouncycastle.pqc.math.linearalgebra.PolynomialGF2mSmallM org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getQInv()
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.jcajce.spec.McEliecePrivateKeySpec.getSInv()
-- public McEliecePublicKeySpec org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec(java.lang.String,int,int,byte[])
-- public McEliecePublicKeySpec org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec(java.lang.String,int,int,org.bouncycastle.pqc.math.linearalgebra.GF2Matrix)
-- public org.bouncycastle.pqc.math.linearalgebra.GF2Matrix org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec.getG()
-- public int org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec.getN()
-- public java.lang.String org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec.getOIDString()
-- public int org.bouncycastle.pqc.jcajce.spec.McEliecePublicKeySpec.getT()
++ public QTESLAParameterSpec org.bouncycastle.pqc.jcajce.spec.QTESLAParameterSpec(java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.jcajce.spec.QTESLAParameterSpec.getSecurityCategory()
++ public SPHINCS256KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.SPHINCS256KeyGenParameterSpec()
++ public SPHINCS256KeyGenParameterSpec org.bouncycastle.pqc.jcajce.spec.SPHINCS256KeyGenParameterSpec(java.lang.String)
++ public java.lang.String org.bouncycastle.pqc.jcajce.spec.SPHINCS256KeyGenParameterSpec.getTreeDigest()
++ public XMSSMTParameterSpec org.bouncycastle.pqc.jcajce.spec.XMSSMTParameterSpec(int,int,java.lang.String)
++ public int org.bouncycastle.pqc.jcajce.spec.XMSSMTParameterSpec.getHeight()
++ public int org.bouncycastle.pqc.jcajce.spec.XMSSMTParameterSpec.getLayers()
++ public java.lang.String org.bouncycastle.pqc.jcajce.spec.XMSSMTParameterSpec.getTreeDigest()
++ public XMSSParameterSpec org.bouncycastle.pqc.jcajce.spec.XMSSParameterSpec(int,java.lang.String)
++ public int org.bouncycastle.pqc.jcajce.spec.XMSSParameterSpec.getHeight()
++ public java.lang.String org.bouncycastle.pqc.jcajce.spec.XMSSParameterSpec.getTreeDigest()
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nElement org.bouncycastle.pqc.math.linearalgebra.GF2nElement.convert(org.bouncycastle.pqc.math.linearalgebra.GF2nField)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nElement org.bouncycastle.pqc.math.linearalgebra.GF2nElement.convert(org.bouncycastle.pqc.math.linearalgebra.GF2nField)
++ public final org.bouncycastle.pqc.math.linearalgebra.GFElement org.bouncycastle.pqc.math.linearalgebra.GF2nElement.subtract(org.bouncycastle.pqc.math.linearalgebra.GFElement)
-- public final org.bouncycastle.pqc.math.linearalgebra.GFElement org.bouncycastle.pqc.math.linearalgebra.GF2nElement.subtract(org.bouncycastle.pqc.math.linearalgebra.GFElement)
-- public GF2nField org.bouncycastle.pqc.math.linearalgebra.GF2nField()
++ protected GF2nField org.bouncycastle.pqc.math.linearalgebra.GF2nField(java.security.SecureRandom)
++ public GF2nONBElement org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement(org.bouncycastle.pqc.math.linearalgebra.GF2nONBField,java.security.SecureRandom)
-- public GF2nONBElement org.bouncycastle.pqc.math.linearalgebra.GF2nONBElement(org.bouncycastle.pqc.math.linearalgebra.GF2nONBField,java.util.Random)
-- public GF2nONBField org.bouncycastle.pqc.math.linearalgebra.GF2nONBField(int)
++ public GF2nONBField org.bouncycastle.pqc.math.linearalgebra.GF2nONBField(int,java.security.SecureRandom)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.add(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.add(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.divide(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.divide(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.gcd(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.gcd(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.multiply(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.multiply(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.multiplyAndReduce(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial,org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.multiplyAndReduce(org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial,org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial)
-- public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.scalarMultiply(org.bouncycastle.pqc.math.linearalgebra.GF2nElement)
++ public final org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomial.scalarMultiply(org.bouncycastle.pqc.math.linearalgebra.GF2nElement)
-- public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int)
-- public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int,boolean)
++ public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int,java.security.SecureRandom)
++ public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int,java.security.SecureRandom,boolean)
++ public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int,java.security.SecureRandom,org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial)
-- public GF2nPolynomialField org.bouncycastle.pqc.math.linearalgebra.GF2nPolynomialField(int,org.bouncycastle.pqc.math.linearalgebra.GF2Polynomial)
-- public static java.math.BigInteger org.bouncycastle.pqc.math.linearalgebra.IntUtils.toFlexiBigIntArray(int[])
-- public static F org.bouncycastle.pqc.math.linearalgebra.IntegerFunctions.floatLog(float)
-- public static void org.bouncycastle.pqc.math.linearalgebra.IntegerFunctions.main(java.lang.String[])
++ public Arrays$Iterator org.bouncycastle.util.Arrays$Iterator(java.lang.Object[])
++ public bool org.bouncycastle.util.Arrays$Iterator.hasNext()
++ public java.lang.Object org.bouncycastle.util.Arrays$Iterator.next()
++ public void org.bouncycastle.util.Arrays$Iterator.remove()
++ public static java.lang.String org.bouncycastle.util.Arrays.append(java.lang.String[],java.lang.String)
++ public static bool org.bouncycastle.util.Arrays.areAllZeroes(byte[],int,int)
++ public static bool org.bouncycastle.util.Arrays.areEqual(byte[],int,int,byte[],int,int)
++ public static bool org.bouncycastle.util.Arrays.areEqual(short[],short[])
++ public static void org.bouncycastle.util.Arrays.clear(byte[])
++ public static void org.bouncycastle.util.Arrays.clear(int[])
++ public static [Z org.bouncycastle.util.Arrays.clone(boolean[])
++ public static [C org.bouncycastle.util.Arrays.clone(char[])
++ public static int org.bouncycastle.util.Arrays.compareUnsigned(byte[],byte[])
++ public static [B org.bouncycastle.util.Arrays.concatenate(byte[][])
++ public static bool org.bouncycastle.util.Arrays.constantTimeAreEqual(int,byte[],int,byte[],int)
++ public static bool org.bouncycastle.util.Arrays.contains(boolean[],boolean)
++ public static bool org.bouncycastle.util.Arrays.contains(byte[],byte)
++ public static bool org.bouncycastle.util.Arrays.contains(char[],char)
++ public static bool org.bouncycastle.util.Arrays.contains(long[],long)
++ public static [Z org.bouncycastle.util.Arrays.copyOf(boolean[],int)
++ public static [S org.bouncycastle.util.Arrays.copyOf(short[],int)
++ public static [Z org.bouncycastle.util.Arrays.copyOfRange(boolean[],int,int)
++ public static [C org.bouncycastle.util.Arrays.copyOfRange(char[],int,int)
++ public static [S org.bouncycastle.util.Arrays.copyOfRange(short[],int,int)
++ public static void org.bouncycastle.util.Arrays.fill(boolean[],boolean)
++ public static void org.bouncycastle.util.Arrays.fill(boolean[],int,int,boolean)
++ public static void org.bouncycastle.util.Arrays.fill(byte[],int,byte)
++ public static void org.bouncycastle.util.Arrays.fill(byte[],int,int,byte)
++ public static void org.bouncycastle.util.Arrays.fill(char[],int,int,char)
++ public static void org.bouncycastle.util.Arrays.fill(int[],int,int)
++ public static void org.bouncycastle.util.Arrays.fill(int[],int,int,int)
++ public static void org.bouncycastle.util.Arrays.fill(java.lang.Object[],int,int,java.lang.Object)
++ public static void org.bouncycastle.util.Arrays.fill(java.lang.Object[],java.lang.Object)
++ public static void org.bouncycastle.util.Arrays.fill(long[],int,int,long)
++ public static void org.bouncycastle.util.Arrays.fill(long[],int,long)
++ public static void org.bouncycastle.util.Arrays.fill(short[],int,int,short)
++ public static void org.bouncycastle.util.Arrays.fill(short[],int,short)
++ public static int org.bouncycastle.util.Arrays.hashCode(long[])
++ public static int org.bouncycastle.util.Arrays.hashCode(long[],int,int)
++ public static bool org.bouncycastle.util.Arrays.isNullOrContainsNull(java.lang.Object[])
++ public static bool org.bouncycastle.util.Arrays.isNullOrEmpty(byte[])
++ public static bool org.bouncycastle.util.Arrays.isNullOrEmpty(int[])
++ public static bool org.bouncycastle.util.Arrays.isNullOrEmpty(java.lang.Object[])
++ public static [I org.bouncycastle.util.Arrays.reverse(int[])
++ public static void org.bouncycastle.util.BigIntegers.asUnsignedByteArray(java.math.BigInteger,byte[],int,int)
++ public static java.math.BigInteger org.bouncycastle.util.BigIntegers.createRandomBigInteger(int,java.security.SecureRandom)
++ public static java.math.BigInteger org.bouncycastle.util.BigIntegers.createRandomPrime(int,int,java.security.SecureRandom)
++ public static int org.bouncycastle.util.BigIntegers.getUnsignedByteLength(java.math.BigInteger)
++ public static int org.bouncycastle.util.BigIntegers.intValueExact(java.math.BigInteger)
++ public static J org.bouncycastle.util.BigIntegers.longValueExact(java.math.BigInteger)
++ public static java.math.BigInteger org.bouncycastle.util.BigIntegers.modOddInverse(java.math.BigInteger,java.math.BigInteger)
++ public static java.math.BigInteger org.bouncycastle.util.BigIntegers.modOddInverseVar(java.math.BigInteger,java.math.BigInteger)
++ public java.util.Iterator org.bouncycastle.util.CollectionStore.iterator()
++ public abstract [B org.bouncycastle.util.Encodable.getEncoded()
++ public Fingerprint org.bouncycastle.util.Fingerprint(byte[])
++ public Fingerprint org.bouncycastle.util.Fingerprint(byte[],boolean)
++ public Fingerprint org.bouncycastle.util.Fingerprint(byte[],int)
++ public static [B org.bouncycastle.util.Fingerprint.calculateFingerprint(byte[])
++ public static [B org.bouncycastle.util.Fingerprint.calculateFingerprint(byte[],int)
++ public static [B org.bouncycastle.util.Fingerprint.calculateFingerprintSHA512_160(byte[])
++ public bool org.bouncycastle.util.Fingerprint.equals(java.lang.Object)
++ public [B org.bouncycastle.util.Fingerprint.getFingerprint()
++ public int org.bouncycastle.util.Fingerprint.hashCode()
++ public java.lang.String org.bouncycastle.util.Fingerprint.toString()
++ public static int org.bouncycastle.util.Integers.numberOfLeadingZeros(int)
++ public static int org.bouncycastle.util.Integers.numberOfTrailingZeros(int)
++ public static int org.bouncycastle.util.Integers.reverse(int)
++ public static int org.bouncycastle.util.Integers.reverseBytes(int)
++ public abstract java.util.Iterator org.bouncycastle.util.Iterable.iterator()
++ public Longs org.bouncycastle.util.Longs()
++ public static J org.bouncycastle.util.Longs.reverse(long)
++ public static J org.bouncycastle.util.Longs.reverseBytes(long)
++ public static J org.bouncycastle.util.Longs.rotateLeft(long,int)
++ public static J org.bouncycastle.util.Longs.rotateRight(long,int)
++ public static java.lang.Long org.bouncycastle.util.Longs.valueOf(long)
++ public Objects org.bouncycastle.util.Objects()
++ public static bool org.bouncycastle.util.Objects.areEqual(java.lang.Object,java.lang.Object)
++ public static int org.bouncycastle.util.Objects.hashCode(java.lang.Object)
++ public static void org.bouncycastle.util.Pack.bigEndianToInt(byte[],int,int[],int,int)
++ public static void org.bouncycastle.util.Pack.bigEndianToLong(byte[],int,long[],int,int)
++ public static S org.bouncycastle.util.Pack.bigEndianToShort(byte[],int)
++ public static void org.bouncycastle.util.Pack.intToBigEndian(int[],int,int,byte[],int)
++ public static void org.bouncycastle.util.Pack.intToLittleEndian(int[],int,int,byte[],int)
++ public static [I org.bouncycastle.util.Pack.littleEndianToInt(byte[],int,int)
++ public static void org.bouncycastle.util.Pack.littleEndianToLong(byte[],int,long[],int,int)
++ public static S org.bouncycastle.util.Pack.littleEndianToShort(byte[],int)
++ public static void org.bouncycastle.util.Pack.longToBigEndian(long,byte[],int,int)
++ public static void org.bouncycastle.util.Pack.longToBigEndian(long[],int,int,byte[],int)
++ public static void org.bouncycastle.util.Pack.longToLittleEndian(long[],int,int,byte[],int)
++ public static [B org.bouncycastle.util.Pack.shortToBigEndian(short)
++ public static void org.bouncycastle.util.Pack.shortToBigEndian(short,byte[],int)
++ public static [B org.bouncycastle.util.Pack.shortToLittleEndian(short)
++ public static void org.bouncycastle.util.Pack.shortToLittleEndian(short,byte[],int)
++ public static java.math.BigInteger org.bouncycastle.util.Properties.asBigInteger(java.lang.String)
++ public static java.util.Set org.bouncycastle.util.Properties.asKeySet(java.lang.String)
++ public static java.lang.String org.bouncycastle.util.Properties.getPropertyValue(java.lang.String)
++ public static bool org.bouncycastle.util.Properties.isOverrideSet(java.lang.String)
++ public static bool org.bouncycastle.util.Properties.isOverrideSetTo(java.lang.String,boolean)
++ public static bool org.bouncycastle.util.Properties.removeThreadOverride(java.lang.String)
++ public static bool org.bouncycastle.util.Properties.setThreadOverride(java.lang.String,boolean)
++ public abstract bool org.bouncycastle.util.StringList.add(java.lang.String)
++ public abstract java.lang.String org.bouncycastle.util.StringList.get(int)
++ public abstract int org.bouncycastle.util.StringList.size()
++ public abstract java.lang.String org.bouncycastle.util.StringList.toStringArray()
++ public abstract java.lang.String org.bouncycastle.util.StringList.toStringArray(int,int)
++ public static java.lang.String org.bouncycastle.util.Strings.lineSeparator()
++ public static org.bouncycastle.util.StringList org.bouncycastle.util.Strings.newList()
++ public static int org.bouncycastle.util.encoders.Base64.decode(byte[],int,int,java.io.OutputStream)
++ public int org.bouncycastle.util.encoders.Base64Encoder.encode(byte[],int,int,byte[],int)
++ public static [B org.bouncycastle.util.encoders.Hex.decodeStrict(java.lang.String)
++ public static [B org.bouncycastle.util.encoders.Hex.decodeStrict(java.lang.String,int,int)
++ public int org.bouncycastle.util.encoders.HexEncoder.encode(byte[],int,int,byte[],int)
++ public UTF8 org.bouncycastle.util.encoders.UTF8()
++ public static int org.bouncycastle.util.encoders.UTF8.transcodeToUTF16(byte[],char[])
++ public SimpleOutputStream org.bouncycastle.util.io.SimpleOutputStream()
++ public void org.bouncycastle.util.io.SimpleOutputStream.close()
++ public void org.bouncycastle.util.io.SimpleOutputStream.flush()
++ public void org.bouncycastle.util.io.SimpleOutputStream.write(int)
++ public static void org.bouncycastle.util.io.Streams.writeBufTo(java.io.ByteArrayOutputStream,java.io.OutputStream)
++ public int org.bouncycastle.util.io.TeeInputStream.available()