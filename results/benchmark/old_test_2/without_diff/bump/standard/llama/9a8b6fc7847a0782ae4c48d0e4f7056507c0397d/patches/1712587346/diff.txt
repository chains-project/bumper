1c1,35
< import org.jasypt.spring.security.PBEPasswordEncoder;
\ No newline at end of file
---
> import java.security.SecureRandom;
> import java.util.Base64;
> 
> public class GeoStorePBEPasswordEncoder {
>     private static final String ALGORITHM = "PBEWithMD5AndDES";
>     private static final int KEY_LENGTH = 24;
>     private static final int SALT_LENGTH = 8;
>     private static final int ITERATIONS = 1000;
> 
>     public static String encryptPassword(String password) {
>         try {
>             SecureRandom random = SecureRandom.getInstance("SHA1PRNG");
>             byte[] salt = new byte[SALT_LENGTH];
>             random.nextBytes(salt);
>             byte[] encryptedPassword = encryptPassword(password.toCharArray(), salt, ITERATIONS);
>             return Base64.getEncoder().encodeToString(salt + encryptedPassword);
>         } catch (Exception e) {
>             throw new RuntimeException(e);
>         }
>     }
> 
>     private static byte[] encryptPassword(char[] password, byte[] salt, int iterations) {
>         try {
>             PBEParameterSpec pbeSpec = new PBEParameterSpec(ALGORITHM, salt, iterations);
>             SecretKeyFactory factory = SecretKeyFactory.getInstance(ALGORITHM);
>             SecretKey key = factory.generateSecret(pbeSpec);
>             Cipher cipher = Cipher.getInstance(ALGORITHM);
>             cipher.init(Cipher.ENCRYPT_MODE, key);
>             byte[] encryptedPassword = cipher.doFinal(password.toCharArray());
>             return encryptedPassword;
>         } catch (Exception e) {
>             throw new RuntimeException(e);
>         }
>     }
> }
\ No newline at end of file
