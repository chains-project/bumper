import java.security.SecureRandom;
import org.apache.commons.codec.binary.Base64;
import org.springframework.security.authentication.encoding.PlaintextPasswordEncoder;

public class GeoStorePBEPasswordEncoder extends PlaintextPasswordEncoder {
    private static final SecureRandom random = new SecureRandom();
    private static final int SALT_SIZE = 16;
    private static final int HASH_ITERATIONS = 1000;

    @Override
    public String encode(CharSequence rawPassword) {
        byte[] salt = generateSalt();
        byte[] hashedPassword = hashPassword(rawPassword, salt);
        return Base64.encodeBase64String(salt + hashedPassword);
    }

    private byte[] generateSalt() {
        byte[] salt = new byte[SALT_SIZE];
        random.nextBytes(salt);
        return salt;
    }

    private byte[] hashPassword(CharSequence rawPassword, byte[] salt) {
        byte[] passwordBytes = rawPassword.toString().getBytes();
        byte[] hashedPassword = new byte[32];
        for (int i = 0; i < HASH_ITERATIONS; i++) {
            hashedPassword = PBEPasswordEncoder.hash(passwordBytes, salt, HASH_ITERATIONS, 5);
        }
        return hashedPassword;
    }
}