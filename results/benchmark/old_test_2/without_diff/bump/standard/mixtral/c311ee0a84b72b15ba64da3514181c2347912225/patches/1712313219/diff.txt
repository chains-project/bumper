0a1,17
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.hamcrest.Matchers.instanceOf;
> import static org.hamcrest.Matchers.not;
> import static org.hamcrest.Matchers.nullValue;
> import java.nio.charset.StandardCharsets;
> import java.util.concurrent.CompletableFuture;
> import org.junit.jupiter.api.Test;
> import com.artipie.asto.Content;
> import com.artipie.asto.Extent;
> import com.artipie.asto.Memory;
> import com.artipie.asto.Storage;
> import com.artipie.docker.Digest;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.error.InvalidDigestException;
> import com.google.common.base.Throwables;
> 
3c20
<         final InMemoryStorage storage = new InMemoryStorage();
---
>     final Storage storage = new Memory.InMemoryStorage();
5c22,24
<             storage, new DefaultLayout(), new RepoName.Simple("any")
---
>         storage,
>         new DefaultLayout(),
>         new RepoName.Simple("any")
9,27c28,30
<             new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))
<         ).toCompletableFuture().handle(
<             (blob, throwable) -> {
<                 MatcherAssert.assertThat(
<                     "Exception thrown",
<                     throwable,
<                     new IsNot<>(new IsNull<>())
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception is InvalidDigestException",
<                     Throwables.getRootCause(throwable),
<                     new IsInstanceOf(InvalidDigestException.class)
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains calculated digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(
<                         true,
<                         "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"
---
>         new CheckedBlobSource(
>             Content.From("data".getBytes(StandardCharsets.UTF_8)),
>             new Digest.Sha256(digest)
29,34c32,39
<                 );
<                 MatcherAssert.assertThat(
<                     "Exception message contains expected digest",
<                     Throwables.getRootCause(throwable).getMessage(),
<                     new StringContains(true, digest)
<                 );
---
>     ).toCompletableFuture()
>     .handle(
>         (Blob blob, Throwable throwable) -> {
>             assertThat(throwable, not(nullValue()));
>             assertThat(throwable, instanceOf(InvalidDigestException.class));
>             final String msg = Throwables.getRootCause(throwable).getMessage();
>             assertThat(msg, new StringContains("3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
>             assertThat(msg, new StringContains(digest));
