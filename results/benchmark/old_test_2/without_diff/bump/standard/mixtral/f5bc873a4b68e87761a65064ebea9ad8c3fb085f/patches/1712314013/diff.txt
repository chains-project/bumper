0a1
> import org.apache.maven.model.Model;
1a3,55
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.DependencyCollectionException;
> import org.eclipse.aether.collection.DependencyFilter;
> import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
> import org.eclipse.aether.graph.Dependency;
> import org.eclipse.aether.impl.DefaultServiceLocator;
> import org.eclipse.aether.repository.LocalRepository;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactRequest;
> import org.eclipse.aether.resolution.ArtifactResolutionException;
> import org.eclipse.aether.resolution.ArtifactResult;
> import org.eclipse.aether.spi.connector.connectorFactory;
> import org.eclipse.aether.spi.locator.ServiceLocator;
> import org.eclipse.aether.transfer.ArtifactTransferException;
> 
> private MavenProject getProject(String groupId, String artifactId, String version) {
>     RepositorySystem repositorySystem = newRepositorySystem();
>     RepositorySystemSession repositorySystemSession = newRepositorySystemSession(repositorySystem);
>     LocalRepository localRepository = new LocalRepository("local-repo");
>     CollectRequest collectRequest = new CollectRequest();
>     Dependency dependency = new Dependency(new DefaultArtifact(groupId, artifactId, version), "compile");
>     collectRequest.setRoot(dependency);
>     DependencyFilter dependencyFilter = DependencyFilter.include(dependency);
>     try {
>         repositorySystem.collectDependencies(repositorySystemSession, collectRequest, dependencyFilter);
>     } catch (DependencyCollectionException e) {
>         throw new RuntimeException(e);
>     }
>     ArtifactRequest artifactRequest = new ArtifactRequest();
>     artifactRequest.setArtifact(new DefaultArtifact(groupId, artifactId, version));
>     artifactRequest.setRepositories(Arrays.asList(new RemoteRepository.Builder("central", "default", "https://repo1.maven.org/maven2/").build()));
>     try {
>         ArtifactResult artifactResult = repositorySystem.resolveArtifact(repositorySystemSession, artifactRequest);
>         Model model = artifactResult.getArtifact().getFile().toURI().toURL().openStream().readFullyAsUTF8String();
>         return new MavenXpp3Reader().read(new StringReader(model));
>     } catch (ArtifactResolutionException | IOException e) {
>         throw new RuntimeException(e);
>     }
> }
> 
> private RepositorySystem newRepositorySystem() {
>     DefaultServiceLocator locator = new DefaultServiceLocator();
>     locator.addService(connectorFactory.class, BasicRepositoryConnectorFactory.class);
>     return locator.getService(RepositorySystem.class);
> }
> 
> private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem) {
>     DefaultServiceLocator locator = new DefaultServiceLocator();
>     locator.addService(RepositorySystem.class, repositorySystem);
>     return locator.getService(RepositorySystemSession.class);
> }
\ No newline at end of file
