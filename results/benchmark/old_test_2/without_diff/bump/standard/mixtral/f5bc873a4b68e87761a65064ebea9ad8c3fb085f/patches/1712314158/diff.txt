0a1
> import org.apache.maven.model.Model;
1a3,64
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.Collect Trail;
> import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
> import org.eclipse.aether.impl.DefaultServiceLocator;
> import org.eclipse.aether.repository.LocalRepository;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactRequest;
> import org.eclipse.aether.resolution.ArtifactResolutionException;
> import org.eclipse.aether.resolution.ArtifactResult;
> import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;
> import org.eclipse.aether.spi.locator.ServiceLocator;
> import org.eclipse.aether.transfer.TransferCancelledException;
> import org.eclipse.aether.transfer.TransferErrorException;
> import org.eclipse.aether.util.ConfigUtils;
> import org.eclipse.aether.util.repository.AuthenticationBuilder;
> 
> // ...
> 
> private MavenProject getProject(String groupId, String artifactId, String version) {
>     RepositorySystem repositorySystem = newRepositorySystem();
>     RepositorySystemSession repositorySystemSession = newRepositorySystemSession(repositorySystem);
>     LocalRepository localRepository = new LocalRepository(getLocalRepositoryPath());
>     CollectRequest collectRequest = new CollectRequest();
>     RemoteRepository remoteRepository = new RemoteRepository.Builder(
>             "central", "default", "https://repo.maven.apache.org/maven2/").build();
>     collectRequest.addRepository(remoteRepository);
>     ArtifactRequest artifactRequest = new ArtifactRequest();
>     artifactRequest.setArtifact(new DefaultArtifact(groupId, artifactId, version, "pom"));
>     artifactRequest.setRepositories(collectRequest.getRepositories());
>     try {
>         ArtifactResult artifactResult = repositorySystem.resolveArtifact(repositorySystemSession, artifactRequest);
>         Model model = artifactResult.getArtifact().getFile().getParentFile().toPath()
>                 .resolve("maven-metadata.xml").toFile().exists()
>                 ? new MavenXpp3Reader().read(new FileReader(artifactResult.getArtifact().getFile().getParentFile().toPath()
>                 .resolve("maven-metadata.xml").toFile()))
>                 : null;
>         return new MavenProject(model, artifactResult.getArtifact().getFile(), repositorySystemSession);
>     } catch (ArtifactResolutionException | IOException | VersionRangeResolutionException e) {
>         throw new MojoExecutionException("Failed to resolve artifact", e);
>     }
> }
> 
> private RepositorySystem newRepositorySystem() {
>     ServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
>     locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
>     ConfigParams configParams = new ConfigParams();
>     configParams.setProperty(ConfigParamConstants.CHECKSUM_POLICY, "warn");
>     locator.setParameters(configParams);
>     return new DefaultRepositorySystem();
> }
> 
> private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem) {
>     DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
>     locator.setService(RepositorySystem.class, repositorySystem);
>     locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
>     ConfigParams configParams = new ConfigParams();
>     configParams.setProperty(ConfigParamConstants.OFFLINE, Boolean.toString(false));
>     locator.setParameters(configParams);
>     return repositorySystem.newSession();
> }
\ No newline at end of file
