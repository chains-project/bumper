0a1
> import org.apache.maven.model.Model;
1a3,83
> import org.eclipse.aether.RepositorySystem;
> import org.eclipse.aether.RepositorySystemSession;
> import org.eclipse.aether.collection.CollectRequest;
> import org.eclipse.aether.collection.CollectResult;
> import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;
> import org.eclipse.aether.impl.DefaultServiceLocator;
> import org.eclipse.aether.repository.LocalRepository;
> import org.eclipse.aether.repository.RemoteRepository;
> import org.eclipse.aether.resolution.ArtifactRequest;
> import org.eclipse.aether.resolution.ArtifactResolutionException;
> import org.eclipse.aether.resolution.ArtifactResult;
> import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;
> import org.eclipse.aether.spi.locator.ServiceLocator;
> import org.eclipse.aether.transfer.TransferCancelledException;
> import org.eclipse.aether.transfer.TransferEvent;
> import org.eclipse.aether.transfer.TransferListener;
> import org.eclipse.aether.transfer.TransferResource;
> 
> // ...
> 
> private MavenProject getProjectFromRepository(String groupId, String artifactId, String version) {
>     RepositorySystem repositorySystem = newRepositorySystem();
>     RepositorySystemSession repositorySystemSession = newRepositorySystemSession(repositorySystem);
>     LocalRepository localRepository = new LocalRepository("local-repo");
>     CollectRequest collectRequest = new CollectRequest();
>     RemoteRepository remoteRepository = new RemoteRepository.Builder("central", "default", "https://repo.maven.apache.org/maven2/").build();
>     collectRequest.addRepository(remoteRepository);
>     ArtifactRequest artifactRequest = new ArtifactRequest();
>     artifactRequest.setArtifact(new DefaultArtifact(groupId, artifactId, version, "jar"));
>     artifactRequest.setRepositories(collectRequest.getRepositories());
> 
>     try {
>         CollectResult collectResult = repositorySystem.collectArtifacts(repositorySystemSession, collectRequest);
>         ArtifactResult artifactResult = repositorySystem.resolveArtifact(repositorySystemSession, artifactRequest);
>         return new MavenProject(artifactResult.getArtifact().getFile(), artifactResult.getArtifact().getFile().getParentFile());
>     } catch (ArtifactResolutionException | TransferCancelledException e) {
>         throw new RuntimeException("Failed to retrieve project from repository", e);
>     }
> }
> 
> private RepositorySystem newRepositorySystem() {
>     DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
>     locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);
>     return locator.getService(RepositorySystem.class);
> }
> 
> private RepositorySystemSession newRepositorySystemSession(RepositorySystem repositorySystem) {
>     RepositorySystemSession session = repositorySystem.newSession();
>     session.setTransferListener(new TransferListener() {
>         @Override
>         public void transferInitiated(TransferEvent event) {
>             // Do nothing
>         }
> 
>         @Override
>         public void transferStarted(TransferEvent event) {
>             // Do nothing
>         }
> 
>         @Override
>         public void transferProgressed(TransferEvent event) {
>             // Do nothing
>         }
> 
>         @Override
>         public void transferSucceeded(TransferEvent event) {
>             // Do nothing
>         }
> 
>         @Override
>         public void transferFailed(TransferEvent event) {
>             // Do nothing
>         }
> 
>         @Override
>         public void transferCancelled(TransferEvent event) {
>             // Do nothing
>         }
>     });
>     return session;
> }
\ No newline at end of file
