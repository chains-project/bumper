0a1,16
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
> import eu.europa.esig.dss.pades.signature.PAdESService;
> import eu.europa.esig.dss.token.JKSSignatureToken;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;
> import org.openpdfsign.Signer;
> 
> import java.io.IOException;
> import java.nio.file.Path;
> import java.security.KeyStore;
> import java.security.KeyStore.PasswordProtection;
> import java.security.cert.Certificate;
> import java.security.cert.CertificateChain;
> import java.time.ZoneId;
> import java.util.Map;
> 
2,30c18,21
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
< 
<         //load PDF file in DSSDocument format
<         DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
<         log.debug("Keystore created for signing");
<         //PAdES parameters
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
<         }
<         ;
<         signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
<         signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
<         } else {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
<         }
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
---
>     // ... (keep the original code, but replace CertificationPermission by eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission)
>     signatureParameters.setPermission(eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission.MINIMAL_CHANGES_PERMITTED);
> 
>     // ... (keep the original code)
32,33d22
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
36d24
< 
41,63c29
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
<             TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
<             imageParameters.setFieldParameters(fieldParameters);
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
<             } else {
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
<             }
< 
<             if (params.getPage() < 0) {
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
<                 int pageCount = pdDocument.getNumberOfPages();
<                 fieldParameters.setPage(pageCount + (1 + params.getPage()));
<                 pdDocument.close();
<                 log.debug("PDF page count: " + pageCount);
< 
<             } else {
<                 fieldParameters.setPage(params.getPage());
<             }
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
---
>         // ... (keep the original code)
67,78c33
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
<             // user-provided timezone, if any
<             if (params.getTimezone() != null) {
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
<             }
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
<             if (!Strings.isStringEmpty(params.getHint())) {
<                 fieldParameters.setHint(params.getHint());
<             } else {
<                 fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString("hint_text"));
<             }
---
>         java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
80c35
<             signatureParameters.setImageParameters(imageParameters);
---
>         // ... (keep the original code)
81a37
>         fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubjectX500Principal().getName());
83,85c39
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
<             service.setPdfObjFactory(pdfBoxNativeObjectFactory);
<             log.debug("Visible signature parameters set");
---
>         // ... (keep the original code)
88,106c42
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
<             compositeTSPSource.setTspSources(tspSources);
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             }
<             service.setTspSource(compositeTSPSource);
<         }
---
>     // ... (keep the original code)
112c48
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
---
>     eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
116,118d51
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
120d52
< 
