1c1
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
---
> public void signPdf(java.nio.file.Path pdfFile, java.nio.file.Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws java.io.IOException {
7d6
< 
10d8
< 
12,13c10
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new java.security.KeyStore.PasswordProtection(keyStorePassword));
16c13
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
---
>     eu.europa.esig.dss.pades.PAdESSignatureParameters.Builder signatureParametersBuilder = new eu.europa.esig.dss.pades.PAdESSignatureParameters.Builder(eu.europa.esig.dss.pades.PAdESSignatureParameters.ALGO_ID_SIGNATURE_RSA_SHA256);
18,26c15,22
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
<         }
<         ;
<         signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
<         signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
>     }
>     signatureParametersBuilder.withSigningCertificate(signingToken.getKey(keyAlias).getCertificate());
>     signatureParametersBuilder.withCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParametersBuilder.withSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c24
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParametersBuilder.withSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
30,31c26
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
---
>     signatureParametersBuilder.withPermission(eu.europa.esig.dss.pades.PAdESSignatureParameters.Builder.Permission.values()[0]);
33c28
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
---
>     eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();
35,36c30
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
---
>     eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);
38d31
< 
41c34
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>         eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44,46c37,38
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {
>             imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));
48c40
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(org.apache.commons.io.IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d41
< 
52c43
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
---
>             org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());
57d47
< 
61,64c51,53
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
---
>         fieldParameters.setOriginX((params.getLeft() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
67c56
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
---
>         java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(java.time.ZoneId.systemDefault());
70c59
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
---
>             formatter = formatter.withZone(java.time.ZoneId.of(params.getTimezone()));
72c61
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
---
>         fieldParameters.setSignatureDate(formatter.format(signatureParametersBuilder.build().getSigningDate().toInstant()));
74c63
<             if (!Strings.isStringEmpty(params.getHint())) {
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {
79,83c68,69
< 
<             signatureParameters.setImageParameters(imageParameters);
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         signatureParametersBuilder.withImageParameters(imageParameters);
>         eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new org.openpdfsign.dss.PdfBoxNativeTableObjectFactory();
87d72
< 
92,94c77,79
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
>         eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource compositeTSPSource = new eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource();
>         java.util.Map<java.lang.String, eu.europa.esig.dss.spi.x509.tsp.TSPSource> tspSources = new java.util.HashMap<>();
97,98c82,83
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
---
>             java.util.Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(( source) -> {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
101,102c86,87
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
---
>             params.getTSA().stream().forEach(( source) -> {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
107,109c92
< 
<         ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);
< 
---
>     ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParametersBuilder.build());
112c95
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
---
>     eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParametersBuilder.build().getDigestAlgorithm();
115d97
< 
118c100,101
<         }*/
---
>     }
>      */
120,121c103
< 
<         DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);
---
>     DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParametersBuilder.build(), signatureValue);
124c106
<             signedDocument.writeTo(System.out);
---
>         signedDocument.writeTo(java.lang.System.out);
