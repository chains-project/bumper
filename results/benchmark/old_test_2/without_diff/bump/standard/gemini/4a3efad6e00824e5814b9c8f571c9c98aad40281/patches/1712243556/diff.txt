0a1,33
> import eu.europa.esig.dss.enumerations.CertificationPermission;
> import java.io.IOException;
> import java.nio.file.Path;
> import java.security.KeyStore.PasswordProtection;
> import java.util.Base64;
> import java.util.Date;
> import java.util.HashMap;
> import java.util.Map;
> import java.util.Optional;
> import java.util.Properties;
> import java.util.stream.Arrays;
> import java.util.stream.Collectors;
> import org.apache.commons.io.IOUtils;
> import org.apache.pdfbox.pdmodel.PDDocument;
> import org.apache.pdfbox.pdmodel.PDPage;
> import org.apache.pdfbox.pdmodel.common.PDRectangle;
> import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;
> import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;
> import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotationWidget;
> import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary;
> import org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceStream;
> import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;
> import org.apache.pdfbox.pdmodel.interactive.form.PDField;
> import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;
> import org.apache.pdfbox.rendering.PDFRenderer;
> import org.apache.pdfbox.tools.imageio.ImageIOUtil;
> 
> public class Signer {
> 
>     public static final float POINTS_PER_MM = 0.3528F;
>     private static final String SIGNATURE_FIELD_NAME = "Signature";
>     private static final String SIGNATURE_FIELD_TYPE = "Sig";
> 
3,6d35
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
8,9c37,38
<         //load PDF file in DSSDocument format
<         DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());
---
>         // load PDF file
>         PDDocument doc = PDDocument.load(pdfFile.toFile());
12,13c41
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>         eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new PasswordProtection(keyStorePassword));
14a43
> 
16c45
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
---
>         eu.europa.esig.dss.pades.PAdESSignatureParameters signatureParameters = new eu.europa.esig.dss.pades.PAdESSignatureParameters();
19,20c48,49
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>         if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>             keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d50
<         ;
25,26c53,54
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>         if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>             signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c56
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>             signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
33,35c61
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
---
>         eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();
36a63,64
>         // Create PAdESService for signature
>         eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);
41c69
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>             eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44d71
< 
46c73
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
---
>                 imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));
48c75
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>                 imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d76
< 
52,53c78
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
<                 int pageCount = pdDocument.getNumberOfPages();
---
>                 int pageCount = doc.getNumberOfPages();
55d79
<                 pdDocument.close();
57d80
< 
61,63c84,86
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
---
>             fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);
>             fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);
>             fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);
67a91
> 
79d102
< 
81,83c104
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new org.openpdfsign.dss.PdfBoxNativeTableObjectFactory();
88d108
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
92c112
<         if (params.getUseTimestamp() || params.getTSA() != null) {
---
>         if (params.getUseTimestamp() || (params.getTSA() != null)) {
97c117
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
---
>                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(( source) -> {
101c121
<                 params.getTSA().stream().forEach(source -> {
---
>                 params.getTSA().stream().forEach(( source) -> {
107,108c127
< 
<         ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);
---
>         ToBeSigned dataToSign = service.getDataToSign(new FileDocument(pdfFile.toFile()), signatureParameters);
115,118d133
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
120,121c135
< 
<         DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);
---
>         DSSDocument signedDocument = service.signDocument(new FileDocument(pdfFile.toFile()), signatureParameters, signatureValue);
122a137,168
> 
>         if (visibleSignature) {
>             PDFRenderer renderer = new PDFRenderer(doc);
>             PDPage page = doc.getPage(params.getPage());
>             PDImageXObject image = renderer.renderImage(params.getPage(), 1.0F);
> 
>             PDAcroForm acroForm = doc.getDocumentCatalog().getAcroForm();
>             if (acroForm == null) {
>                 acroForm = new PDAcroForm(doc, doc.getDocumentCatalog());
>                 doc.getDocumentCatalog().setAcroForm(acroForm);
>             }
> 
>             PDSignatureField signatureField = new PDSignatureField(acroForm);
>             signatureField.setName(SIGNATURE_FIELD_NAME);
>             signatureField.setFieldType(SIGNATURE_FIELD_TYPE);
>             signatureField.setValue(new PDSignatureField.Signature(Base64.getEncoder().encodeToString(signatureValue.getValue())));
>             signatureField.setAppearance(new PDAppearanceDictionary());
>             PDAppearanceStream appearanceStream = new PDAppearanceStream(doc);
>             appearanceStream.setBBox(new PDRectangle(0, 0, image.getWidth(), image.getHeight()));
>             appearanceStream.setContent(image.getImageBytes());
>             signatureField.getAppearance().setNormalAppearance(appearanceStream);
>             acroForm.getFields().add(signatureField);
> 
>             // add widget to page
>             PDAnnotationWidget widget = new PDAnnotationWidget();
>             widget.setRectangle(new PDRectangle(params.getLeft() * POINTS_PER_MM, params.getTop() * POINTS_PER_MM, params.getWidth() * POINTS_PER_MM, params.getHeight() * POINTS_PER_MM));
>             widget.setPage(page);
>             widget.setAnnotation(signatureField);
>             widget.setFieldName(SIGNATURE_FIELD_NAME);
>             page.getAnnotations().add(widget);
>         }
> 
128a175
> }
\ No newline at end of file
