1c1,2
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
---
> import eu.europa.esig.dss.enumerations.CertificationPermission;
> public void signPdf(java.nio.file.Path pdfFile, java.nio.file.Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws java.io.IOException {
7d7
< 
10d9
< 
12,13c11
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new java.security.KeyStore.PasswordProtection(keyStorePassword));
16c14
<         PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
---
>     eu.europa.esig.dss.pades.PAdESSignatureParameters signatureParameters = new eu.europa.esig.dss.pades.PAdESSignatureParameters();
18,20c16,18
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d19
<         ;
25,26c22,23
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c25
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
31d27
< 
33c29
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
---
>     eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();
35,36c31
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
---
>     eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);
38d32
< 
41c35
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
---
>         eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();
44,46c38,39
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {
>             imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));
48c41
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>             imageParameters.setImage(new InMemoryDocument(org.apache.commons.io.IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png"))));
50d42
< 
52c44
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
---
>             org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());
57d48
< 
61,64c52,54
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
---
>         fieldParameters.setOriginX((params.getLeft() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setOriginY((params.getTop() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
>         fieldParameters.setWidth((params.getWidth() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);
67c57
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
---
>         java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(java.time.ZoneId.systemDefault());
70c60
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
---
>             formatter = formatter.withZone(java.time.ZoneId.of(params.getTimezone()));
74c64
<             if (!Strings.isStringEmpty(params.getHint())) {
---
>         if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {
79d68
< 
81,83c70
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
---
>         eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new org.openpdfsign.dss.PdfBoxNativeTableObjectFactory();
87d73
< 
92,94c78,80
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
>         eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource compositeTSPSource = new eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource();
>         java.util.Map<java.lang.String, eu.europa.esig.dss.spi.x509.tsp.TSPSource> tspSources = new java.util.HashMap<>();
97,98c83,84
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
---
>             java.util.Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(( source) -> {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
101,102c87,88
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
---
>             params.getTSA().stream().forEach(( source) -> {
>                 tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));
107d92
< 
109d93
< 
112c96
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
---
>     eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
115d98
< 
118c101,102
<         }*/
---
>     }
>      */
120d103
< 
124c107
<             signedDocument.writeTo(System.out);
---
>         signedDocument.writeTo(java.lang.System.out);
