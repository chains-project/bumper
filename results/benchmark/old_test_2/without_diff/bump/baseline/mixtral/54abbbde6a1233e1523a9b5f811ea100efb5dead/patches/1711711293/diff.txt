1,9d0
< // @checkstyle ProtectedMethodInFinalClassCheck (10 lines)
<     @Override
<     @RetryOnFailure(
<         attempts = Tv.SEVEN,
<         delay = 1,
<         unit = TimeUnit.MINUTES,
<         verbose = false,
<         types = IOException.class
<     )
13,43c4,12
<             JSch.setLogger(new JschLogger());
<             final JSch jsch = new JSch();
<             new Unchecked<>(
<                 new LengthOf(
<                     new TeeInput(
<                         this.key.replaceAll("\r", "")
<                             .replaceAll("\n\\s+|\n{2,}", "\n")
<                             .trim(),
<                         file
<                     )
<                 )
<             ).value();
<             jsch.setHostKeyRepository(new EasyRepo());
<             if (this.passphrase == null) {
<                 jsch.addIdentity(file.getAbsolutePath());
<             } else {
<                 jsch.addIdentity(
<                     this.getLogin(),
<                     this.key.getBytes(StandardCharsets.UTF_8),
<                     null,
<                     this.passphrase.getBytes(StandardCharsets.UTF_8)
<                 );
<             }
<             Logger.debug(
<                 this,
<                 "Opening SSH session to %s@%s:%s (%d bytes in RSA key)...",
<                 this.getLogin(), this.getAddr(), this.getPort(),
<                 file.length()
<             );
<             return this.session(jsch);
<         } catch (final JSchException ex) {
---
>         JSch jsch = new JSch();
>         jsch.setLogger(new JschLogger());
>         jsch.setKnownHosts(new File("known_hosts").getAbsolutePath());
>         jsch.addIdentity(file.getAbsolutePath(), key.getBytes(StandardCharsets.UTF_8), null, passphrase.getBytes(StandardCharsets.UTF_8));
>         Session session = jsch.getSession(getLogin(), getAddr(), getPort());
>         session.setConfig("StrictHostKeyChecking", "no");
>         session.connect();
>         return session;
>     } catch (JSchException ex) {
