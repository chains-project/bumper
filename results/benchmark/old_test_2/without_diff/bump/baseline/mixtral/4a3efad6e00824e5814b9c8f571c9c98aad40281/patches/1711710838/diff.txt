1c1,55
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.pades.PadesSigner;
> import eu.europa.esig.dss.model.DSSDocument;
> import eu.europa.esig.dss.model.InMemoryDocument;
> import org.openpdfsign.exceptions.OpenPdfSignException;
> 
> import java.io.File;
> import java.io.FileInputStream;
> import java.io.FileOutputStream;
> import java.io.IOException;
> import java.security.KeyStore;
> import java.security.KeyStoreException;
> import java.security.NoSuchAlgorithmException;
> import java.security.cert.CertificateException;
> import java.security.cert.X509Certificate;
> 
> public class Signer {
> 
>     private final KeyStore keyStore;
>     private final String keyAlias;
>     private final char[] keyPassword;
>     private final String certificateAlias;
>     private final String outputDir;
> 
>     public Signer(KeyStore keyStore, String keyAlias, char[] keyPassword, String certificateAlias, String outputDir) {
>         this.keyStore = keyStore;
>         this.keyAlias = keyAlias;
>         this.keyPassword = keyPassword;
>         this.certificateAlias = certificateAlias;
>         this.outputDir = outputDir;
>     }
> 
>     public void signPdf(File inputFile, File outputFile) throws OpenPdfSignException {
>         try (FileInputStream inputStream = new FileInputStream(inputFile)) {
>             DSSDocument document = new InMemoryDocument(inputStream);
>             X509Certificate certificate = (X509Certificate) keyStore.getCertificate(certificateAlias);
>             PadesSigner signer = new PadesSigner(certificate);
>             signer.setSignatureLevel(PadesSigner.SIGNATURE_LEVEL_PDF_BASIC);
>             signer.setSignaturePacking(PadesSigner.SIGNATURE_PACKING_ENVELOPING);
>             signer.setSignatureFieldName("Signature1");
>             signer.setSignatureFilename("signature.p7s");
>             signer.setReason("Testing");
>             signer.setLocation("City");
>             signer.setContactInfo("Email");
>             signer.setLanguage("en");
>             signer.setTsaUrl("http://timestamp.globalsign.com/advanced");
>             signer.setCryptoModule(keyStore, keyAlias, keyPassword);
>             signer.sign(document);
>             try (FileOutputStream outputStream = new FileOutputStream(outputFile)) {
>                 document.writeTo(outputStream);
>             }
>         } catch (NoSuchAlgorithmException | KeyStoreException | CertificateException | IOException | OpenPdfSignException e) {
>             throw new OpenPdfSignException("Failed to sign PDF", e);
>         }
>     }
> }
\ No newline at end of file
