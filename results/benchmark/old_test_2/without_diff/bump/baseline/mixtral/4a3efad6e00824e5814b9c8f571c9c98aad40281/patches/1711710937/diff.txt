1c1,71
< import eu.europa.esig.dss.pades.CertificationPermission;
\ No newline at end of file
---
> import eu.europa.esig.dss.model.DSSException;
> import eu.europa.esig.dss.model.InMemoryDocument;
> import eu.europa.esig.dss.model.x509.CertificateToken;
> import eu.europa.esig.dss.pades.PAdESSigner;
> import eu.europa.esig.dss.pades.PAdESTypedDataObjects;
> import eu.europa.esig.dss.pades.validation.reports.PAdESValidationReport;
> import eu.europa.esig.dss.signature.DocumentSignatureService;
> import eu.europa.esig.dss.signature.SignatureLevel;
> import eu.europa.esig.dss.signature.SignaturePackaging;
> import eu.europa.esig.dss.token.DSSPrivateKeyEntry;
> import eu.europa.esig.dss.token.DSSToken;
> import eu.europa.esig.dss.token.DSSTokenConnection;
> import eu.europa.esig.dss.utils.DSSEDSSCertificateValidator;
> import eu.europa.esig.dss.validation.CommonCertificateVerifier;
> import org.slf4j.Logger;
> import org.slf4j.LoggerFactory;
> 
> import java.io.File;
> import java.security.Security;
> import java.security.cert.X509Certificate;
> import java.util.List;
> 
> public class Signer {
> 
>     private static final Logger LOG = LoggerFactory.getLogger(Signer.class);
> 
>     public byte[] signPdf(byte[] pdfContent, X509Certificate signerCertificate,
>                          PrivateKey signerPrivateKey, String ocspResponder,
>                          String timeStampServer) {
> 
>         // Initialize the DSS library
>         Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
> 
>         // Initialize the certificate verifier
>         CommonCertificateVerifier certVerifier = new CommonCertificateVerifier();
>         certVerifier.setCrlVerifier(new DSSEDSSCertificateValidator());
> 
>         // Initialize the token and private key entry
>         DSSToken token = new DSSToken(certVerifier);
>         DSSPrivateKeyEntry privateKeyEntry = new DSSPrivateKeyEntry(signerPrivateKey, new CertificateToken(signerCertificate));
>         token.setPrivateKeyEntry(privateKeyEntry);
> 
>         // Initialize the document signature service
>         DocumentSignatureService<X509Certificate> dssService = new DocumentSignatureService<X509Certificate>(certVerifier, token);
>         dssService.setTspSource(new SimpleTspSource(timeStampServer));
> 
>         // Set the signature level and packaging
>         dssService.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B_EXTENDED);
>         dssService.setSignaturePackaging(SignaturePackaging.ENVELOPING);
> 
>         // Initialize the signer
>         PAdESSigner signer = new PAdESSigner(dssService);
>         signer.setCertificationPermission(CertificationPermission.NO_PERMISSIONS);
> 
>         // Initialize the input document
>         InMemoryDocument document = new InMemoryDocument(pdfContent);
> 
>         // Initialize the data objects
>         PAdESTypedDataObjects dataObjs = new PAdESTypedDataObjects();
>         dataObjs.setSigningCertificate(signerCertificate);
>         dataObjs.setCadesMode(true);
> 
>         // Sign the document
>         try {
>             return signer.sign(document, dataObjs);
>         } catch (DSSException e) {
>             LOG.error("Error signing document: ", e);
>             throw new RuntimeException("Error signing document", e);
>         }
>     }
> }
\ No newline at end of file
