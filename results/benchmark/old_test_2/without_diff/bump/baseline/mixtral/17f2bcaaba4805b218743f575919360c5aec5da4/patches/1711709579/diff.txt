1c1,39
< import org.locationtech.jts.noding.SegmentString;
\ No newline at end of file
---
> import org.locationtech.jts.geom.CoordinateSequence;
> import org.locationtech.jts.geom.Envelope;
> import org.locationtech.jts.geom.GeometryFactory;
> import org.locationtech.jts.geom.util.LinearComponentExtracter;
> import org.locationtech.jts.noding.NodingException;
> import org.locationtech.jts.noding.NodingUtilities;
> 
> import java.util.ArrayList;
> import java.util.List;
> 
> public class FastPolygonizerTests {
>     // existing code...
> 
>     @Override
>     public void testSomething() {
>         GeometryFactory gf = new GeometryFactory();
>         Envelope env = new Envelope(0, 10, 0, 10);
>         List<CoordinateSequence> rings = new ArrayList<>();
>         rings.add(gf.createLinearRing(new CoordinateSequence[] {
>             gf.createLinearRing(new CoordinateSequence.Double[] {
>                 new CoordinateSequence.Double(new double[] {
>                     0, 0,
>                     10, 0,
>                     10, 10,
>                     0, 10,
>                     0, 0
>                 })
>             })
>         }));
>         try {
>             List<SegmentString> segments = NodingUtilities.segments((List) rings);
>             LinearComponentExtracter lce = new LinearComponentExtracter();
>             List<List<CoordinateSequence>> components = lce.extractComponents(segments);
>             // existing code...
>         } catch (NodingException e) {
>             e.printStackTrace();
>         }
>     }
> }
\ No newline at end of file
