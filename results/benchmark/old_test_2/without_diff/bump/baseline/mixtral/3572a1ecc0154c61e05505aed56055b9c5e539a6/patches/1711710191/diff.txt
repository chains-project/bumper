1a2,71
> import org.slf4j.Marker;
> import org.slf4j.helpers.FormattingTuple;
> import org.slf4j.helpers.MessageFormatter;
> 
> import ch.qos.logback.classic.Level;
> import ch.qos.logback.classic.spi.ILoggingEvent;
> import ch.qos.logback.core.AppenderBase;
> 
> import java.io.IOException;
> import java.util.List;
> 
> public class AppenderUtils {
> 
>   public static void addCustomFieldsToLoggingEvents(List<String> customFields,
>       AppenderBase<ILoggingEvent> appender) {
>     appender.setProcessors(createCustomFieldsProcessor(customFields));
>   }
> 
>   private static ch.qos.logback.classic.spi.Processor<ILoggingEvent> createCustomFieldsProcessor(
>       List<String> customFields) {
>     return new ch.qos.logback.classic.spi.Processor<ILoggingEvent>() {
>       @Override
>       public void start() {
>         if (customFields != null) {
>           for (String customField : customFields) {
>             addCustomField(customField);
>           }
>         }
>       }
> 
>       @Override
>       public ILoggingEvent process(ILoggingEvent event) {
>         if (event.getThrowableProxy() != null) {
>           Throwable throwable = event.getThrowableProxy().getThrowable();
>           if (throwable instanceof ExceptionInInitializerError) {
>             // If the TFastFramedTransport class is not available,
>             // swallow the ExceptionInInitializerError and log a warning.
>             // This is a workaround for the missing dependency issue.
>             if (throwable.getCause() != null &&
>                 throwable.getCause().getClass().getName().equals(
>                     "java.lang.NoClassDefFoundError")) {
>               String message = String.format(
>                   "Failed to initialize TFastFramedTransport class. This may be due to a missing dependency. "
>                       + "Custom fields will not be added to logging events. Error: %s",
>                   throwable.getMessage());
>               FormattingTuple formattingTuple = MessageFormatter.arrayFormat(message,
>                   new Object[]{throwable});
>               event.getMDCPropertyMap().put("customFieldsError",
>                   formattingTuple.toString());
>               return event;
>             }
>           }
>         }
> 
>         // If we got here, the TFastFramedTransport class is available,
>         // so we can proceed with adding the custom fields to the logging event.
>         return addCustomFieldsToEvent(event, customFields);
>       }
> 
>       private void addCustomField(String customField) {
>         // Implementation not shown for brevity
>       }
> 
>       private ILoggingEvent addCustomFieldsToEvent(ILoggingEvent event,
>           List<String> customFields) {
>         // Implementation not shown for brevity
>       }
>     };
>   }
> }
\ No newline at end of file
