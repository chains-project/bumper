1c1,51
< import org.apache.maven.doxia.module.xhtml.decoration.render.RenderingContext;
\ No newline at end of file
---
> import org.apache.maven.doxia.siterenderer.Renderable;
> import org.apache.maven.doxia.siterenderer.SiteRenderer;
> import org.apache.maven.doxia.siterenderer.SiteRendererListener;
> import org.apache.maven.plugin.AbstractMojo;
> import org.apache.maven.plugin.MojoExecutionException;
> import org.apache.maven.plugins.annotations.Component;
> import org.apache.maven.plugins.annotations.Parameter;
> import org.scoverage.reporting.html.HtmlReportGenerator;
> 
> import java.io.File;
> import java.util.ArrayList;
> import java.util.List;
> 
> public abstract class SCoverageReportMojo extends AbstractMojo {
> 
>     // existing fields and methods
> 
>     @Override
>     public void execute() throws MojoExecutionException {
>         // create a new SiteRenderer instance
>         SiteRenderer siteRenderer = new SiteRenderer();
> 
>         // set up the SiteRendererListeners
>         List<SiteRendererListener> rendererListeners = new ArrayList<>();
>         HtmlReportGenerator htmlReportGenerator = new HtmlReportGenerator();
>         htmlReportGenerator.setOutputDirectory(new File(getReportOutputDirectory()));
>         rendererListeners.add(htmlReportGenerator);
>         siteRenderer.setSiteRendererListeners(rendererListeners);
> 
>         // create a new Renderable instance
>         Renderable renderable = new Renderable() {
>             @Override
>             public void setAttribute(String s, Object o) {
>                 // do nothing
>             }
> 
>             @Override
>             public Object getAttribute(String s) {
>                 return null;
>             }
> 
>             @Override
>             public void addChild(Renderable renderable) {
>                 // do nothing
>             }
>         };
> 
>         // render the site
>         siteRenderer.render(renderable);
>     }
> }
\ No newline at end of file
