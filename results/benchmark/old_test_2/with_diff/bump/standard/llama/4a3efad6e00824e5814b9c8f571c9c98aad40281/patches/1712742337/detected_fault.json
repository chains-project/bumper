{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 899644639,
    "in_class_code": "@Slf4j\npublic class Signer {\n    // see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n\n    private static final float POINTS_PER_MM = (1 / (10 * 2.54F)) * POINTS_PER_INCH;\n\n    public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        // https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        // https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        // load PDF file\n        // PDDocument doc = PDDocument.load(pdfFile.toFile());\n        // load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n        // load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n        log.debug(\"Keystore created for signing\");\n        // PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        // signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n        }\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n        log.debug(\"Signature service initialized\");\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument(IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n            }\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX((params.getLeft() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setOriginY((params.getTop() * POINTS_PER_MM) * 10.0F);\n            fieldParameters.setWidth((params.getWidth() * POINTS_PER_MM) * 10.0F);\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n            signatureParameters.setImageParameters(imageParameters);\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n        // https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        // only use TSP source, if parameter is set\n        // if it is set to an url, us this\n        // otherwise, default\n        if (params.getUseTimestamp() || (params.getTSA() != null)) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n        /* if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n        log.debug(\"is true\");\n        }\n         */\n        log.debug(\"Signature value calculated\");\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}",
    "qualified_in_class_code": "@lombok.extern.slf4j.Slf4j\npublic class Signer {\n    // see PDRectangle\n    private static final float POINTS_PER_INCH = 72;\n\n    private static final float POINTS_PER_MM = (1 / (10 * 2.54F)) * org.openpdfsign.Signer.POINTS_PER_INCH;\n\n    public void signPdf(java.nio.file.Path pdfFile, java.nio.file.Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws java.io.IOException {\n        boolean visibleSignature = params.getPage() != null;\n        // https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        // https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        // load PDF file\n        // PDDocument doc = PDDocument.load(pdfFile.toFile());\n        // load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n        // load certificate and private key\n        eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new java.security.KeyStore.PasswordProtection(keyStorePassword));\n        log.debug(\"Keystore created for signing\");\n        // PAdES parameters\n        eu.europa.esig.dss.pades.PAdESSignatureParameters signatureParameters = new eu.europa.esig.dss.pades.PAdESSignatureParameters();\n        // signatureParameters.bLevel().setSigningDate(new Date());\n        java.lang.String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {\n            keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n        }\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n            signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n        // Create common certificate verifier\n        eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();\n        // Create PAdESService for signature\n        eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);\n        log.debug(\"Signature service initialized\");\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n            if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument(org.apache.commons.io.IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n            }\n            if (params.getPage() < 0) {\n                org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX((params.getLeft() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n            fieldParameters.setOriginY((params.getTop() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n            fieldParameters.setWidth((params.getWidth() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(java.time.ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(java.time.ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n            signatureParameters.setImageParameters(imageParameters);\n            eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new org.openpdfsign.dss.PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n        // https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        // only use TSP source, if parameter is set\n        // if it is set to an url, us this\n        // otherwise, default\n        if (params.getUseTimestamp() || (params.getTSA() != null)) {\n            eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource compositeTSPSource = new eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource();\n            java.util.Map<java.lang.String, eu.europa.esig.dss.spi.x509.tsp.TSPSource> tspSources = new java.util.HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                java.util.Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(( source) -> {\n                    tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(( source) -> {\n                    tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n        /* if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n        log.debug(\"is true\");\n        }\n         */\n        log.debug(\"Signature value calculated\");\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(java.lang.System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   variable CertificationPermission\n  location: class org.openpdfsign.Signer\n",
        "error_message": "[ERROR] /open-pdf-sign/src/main/java/org/openpdfsign/Signer.java:[72,43] cannot find symbol",
        "client_file_path": "/open-pdf-sign/src/main/java/org/openpdfsign/Signer.java",
        "client_line_position": "72"
    },
    "client_end_line_number": 170,
    "client_line_number": 43,
    "method_code": "public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {\n        boolean visibleSignature = params.getPage() != null;\n        //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n        //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n        //load PDF file\n        //PDDocument doc = PDDocument.load(pdfFile.toFile());\n\n        //load PDF file in DSSDocument format\n        DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n\n        //load certificate and private key\n        JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));\n\n        log.debug(\"Keystore created for signing\");\n        //PAdES parameters\n        PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();\n        //signatureParameters.bLevel().setSigningDate(new Date());\n        String keyAlias = \"alias\";\n        if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {\n            keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();\n        }\n        ;\n        signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n        signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n        if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);\n        } else {\n            signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);\n        }\n        signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n\n        // Create common certificate verifier\n        CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();\n        // Create PAdESService for signature\n        PAdESService service = new PAdESService(commonCertificateVerifier);\n\n        log.debug(\"Signature service initialized\");\n\n        // Initialize visual signature and configure\n        if (visibleSignature) {\n            SignatureImageParameters imageParameters = new SignatureImageParameters();\n            TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n            imageParameters.setFieldParameters(fieldParameters);\n\n            if (!Strings.isStringEmpty(params.getImageFile())) {\n                imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));\n            } else {\n                imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\")))));\n            }\n\n            if (params.getPage() < 0) {\n                PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());\n                int pageCount = pdDocument.getNumberOfPages();\n                fieldParameters.setPage(pageCount + (1 + params.getPage()));\n                pdDocument.close();\n                log.debug(\"PDF page count: \" + pageCount);\n\n            } else {\n                fieldParameters.setPage(params.getPage());\n            }\n            fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);\n            fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);\n            fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);\n\n            // Get the SignedInfo segment that need to be signed.\n            // respect local timezone\n            DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());\n            // user-provided timezone, if any\n            if (params.getTimezone() != null) {\n                formatter = formatter.withZone(ZoneId.of(params.getTimezone()));\n            }\n            fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n            fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n            if (!Strings.isStringEmpty(params.getHint())) {\n                fieldParameters.setHint(params.getHint());\n            } else {\n                fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n            }\n\n            signatureParameters.setImageParameters(imageParameters);\n\n\n            PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();\n            service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n            log.debug(\"Visible signature parameters set\");\n        }\n\n        //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n        //only use TSP source, if parameter is set\n        //if it is set to an url, us this\n        //otherwise, default\n        if (params.getUseTimestamp() || params.getTSA() != null) {\n            CompositeTSPSource compositeTSPSource = new CompositeTSPSource();\n            Map<String, TSPSource> tspSources = new HashMap<>();\n            compositeTSPSource.setTspSources(tspSources);\n            if (params.getTSA().isEmpty()) {\n                Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            } else {\n                params.getTSA().stream().forEach(source -> {\n                    tspSources.put(source, new OnlineTSPSource(source));\n                });\n            }\n            service.setTspSource(compositeTSPSource);\n        }\n\n        ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n\n        // This function obtains the signature value for signed information using the\n        // private key and specified algorithm\n        DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n        log.debug(\"Data to be signed loaded\");\n        SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n\n        /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n            log.debug(\"is true\");\n        }*/\n        log.debug(\"Signature value calculated\");\n\n        DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n        log.debug(\"Document signing complete\");\n        if (binary) {\n            signedDocument.writeTo(System.out);\n        } else {\n            signedDocument.save(outputFile.toAbsolutePath().toString());\n        }\n    }",
    "qualified_code": "public void signPdf(java.nio.file.Path pdfFile, java.nio.file.Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws java.io.IOException {\n    boolean visibleSignature = params.getPage() != null;\n    // https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java\n    // https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html\n    // load PDF file\n    // PDDocument doc = PDDocument.load(pdfFile.toFile());\n    // load PDF file in DSSDocument format\n    DSSDocument toSignDocument = new FileDocument(pdfFile.toFile());\n    // load certificate and private key\n    eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new java.security.KeyStore.PasswordProtection(keyStorePassword));\n    log.debug(\"Keystore created for signing\");\n    // PAdES parameters\n    eu.europa.esig.dss.pades.PAdESSignatureParameters signatureParameters = new eu.europa.esig.dss.pades.PAdESSignatureParameters();\n    // signatureParameters.bLevel().setSigningDate(new Date());\n    java.lang.String keyAlias = \"alias\";\n    if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {\n        keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();\n    }\n    signatureParameters.setSigningCertificate(signingToken.getKey(keyAlias).getCertificate());\n    signatureParameters.setCertificateChain(signingToken.getKey(keyAlias).getCertificateChain());\n    if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {\n        signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);\n    } else {\n        signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);\n    }\n    signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);\n    // Create common certificate verifier\n    eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();\n    // Create PAdESService for signature\n    eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);\n    log.debug(\"Signature service initialized\");\n    // Initialize visual signature and configure\n    if (visibleSignature) {\n        eu.europa.esig.dss.pades.SignatureImageParameters imageParameters = new eu.europa.esig.dss.pades.SignatureImageParameters();\n        TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();\n        imageParameters.setFieldParameters(fieldParameters);\n        if (!com.beust.jcommander.Strings.isStringEmpty(params.getImageFile())) {\n            imageParameters.setImage(new InMemoryDocument(java.nio.file.Files.readAllBytes(java.nio.file.Paths.get(params.getImageFile()))));\n        } else {\n            imageParameters.setImage(new InMemoryDocument(org.apache.commons.io.IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream(\"signature.png\"))));\n        }\n        if (params.getPage() < 0) {\n            org.apache.pdfbox.pdmodel.PDDocument pdDocument = org.apache.pdfbox.pdmodel.PDDocument.load(toSignDocument.openStream());\n            int pageCount = pdDocument.getNumberOfPages();\n            fieldParameters.setPage(pageCount + (1 + params.getPage()));\n            pdDocument.close();\n            log.debug(\"PDF page count: \" + pageCount);\n        } else {\n            fieldParameters.setPage(params.getPage());\n        }\n        fieldParameters.setOriginX((params.getLeft() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n        fieldParameters.setOriginY((params.getTop() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n        fieldParameters.setWidth((params.getWidth() * org.openpdfsign.Signer.POINTS_PER_MM) * 10.0F);\n        // Get the SignedInfo segment that need to be signed.\n        // respect local timezone\n        java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(java.time.ZoneId.systemDefault());\n        // user-provided timezone, if any\n        if (params.getTimezone() != null) {\n            formatter = formatter.withZone(java.time.ZoneId.of(params.getTimezone()));\n        }\n        fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));\n        fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());\n        if (!com.beust.jcommander.Strings.isStringEmpty(params.getHint())) {\n            fieldParameters.setHint(params.getHint());\n        } else {\n            fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString(\"hint_text\"));\n        }\n        signatureParameters.setImageParameters(imageParameters);\n        eu.europa.esig.dss.pdf.pdfbox.PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new org.openpdfsign.dss.PdfBoxNativeTableObjectFactory();\n        service.setPdfObjFactory(pdfBoxNativeObjectFactory);\n        log.debug(\"Visible signature parameters set\");\n    }\n    // https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710\n    // only use TSP source, if parameter is set\n    // if it is set to an url, us this\n    // otherwise, default\n    if (params.getUseTimestamp() || (params.getTSA() != null)) {\n        eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource compositeTSPSource = new eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource();\n        java.util.Map<java.lang.String, eu.europa.esig.dss.spi.x509.tsp.TSPSource> tspSources = new java.util.HashMap<>();\n        compositeTSPSource.setTspSources(tspSources);\n        if (params.getTSA().isEmpty()) {\n            java.util.Arrays.stream(Configuration.getInstance().getProperties().getStringArray(\"tsp_sources\")).forEach(( source) -> {\n                tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));\n            });\n        } else {\n            params.getTSA().stream().forEach(( source) -> {\n                tspSources.put(source, new eu.europa.esig.dss.service.tsp.OnlineTSPSource(source));\n            });\n        }\n        service.setTspSource(compositeTSPSource);\n    }\n    ToBeSigned dataToSign = service.getDataToSign(toSignDocument, signatureParameters);\n    // This function obtains the signature value for signed information using the\n    // private key and specified algorithm\n    eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();\n    log.debug(\"Data to be signed loaded\");\n    SignatureValue signatureValue = signingToken.sign(dataToSign, digestAlgorithm, signingToken.getKey(keyAlias));\n    /* if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey(\"alias\").getCertificate())) {\n    log.debug(\"is true\");\n    }\n     */\n    log.debug(\"Signature value calculated\");\n    DSSDocument signedDocument = service.signDocument(toSignDocument, signatureParameters, signatureValue);\n    log.debug(\"Document signing complete\");\n    if (binary) {\n        signedDocument.writeTo(java.lang.System.out);\n    } else {\n        signedDocument.save(outputFile.toAbsolutePath().toString());\n    }\n}",
    "method_name": "signPdf"
}