1,2c1,26
< // TODO: review this AI generated patch!
< @org.junit.jupiter.api.Test
---
> import com.artipie.asto.Content;
> import com.artipie.docker.Digest;
> import com.artipie.docker.asto.CheckedBlobSource;
> import com.artipie.docker.asto.IsNot;
> import com.artipie.docker.asto.IsNull;
> import com.artipie.docker.error.InvalidDigestException;
> import com.artipie.docker.RepoName;
> import com.artipie.asto.memory.InMemoryStorage;
> import com.artipie.docker.asto.AstoBlobs;
> import com.artipie.docker.asto.DefaultLayout;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.core.IsInstanceOf;
> import org.hamcrest.core.StringContains;
> import org.junit.jupiter.api.Test;
> import java.lang.String;
> import java.util.concurrent.CompletableFuture;
> import java.util.concurrent.ExecutionException;
> import java.util.concurrent.TimeUnit;
> import java.util.concurrent.TimeoutException;
> 
> import static org.hamcrest.MatcherAssert.assertThat;
> import static org.junit.jupiter.api.Assertions.assertThrows;
> 
> public class AstoBlobsITCase {
> 
>     @Test
4,13c28,34
<     final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
<     final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
<     final java.lang.String digest = "123";
<     blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest))).toCompletableFuture().handle(( blob, throwable) -> {
<         org.hamcrest.MatcherAssert.assertThat("Exception thrown", throwable, new com.artipie.docker.asto.IsNot<>(new com.artipie.docker.asto.IsNull<>()));
<         org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", com.google.common.base.Throwables.getRootCause(throwable), new org.hamcrest.core.IsInstanceOf(com.artipie.docker.error.InvalidDigestException.class));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, "3a6eb0790f39ac87c94f3856b2dd2c5d110e6811602261a9a923d3bb23adc8b7"));
<         org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", com.google.common.base.Throwables.getRootCause(throwable).getMessage(), new org.hamcrest.core.StringContains(true, digest));
<         ++return java.util.concurrent.CompletableFuture.allOf();
<     }).join();
---
>         final InMemoryStorage storage = new InMemoryStorage();
>         final AstoBlobs blobs = new AstoBlobs(storage, new DefaultLayout(), new RepoName.Simple("any"));
>         final String digest = "123";
>         assertThrows(InvalidDigestException.class, () -> {
>             blobs.put(new CheckedBlobSource(new Content.From("data".getBytes()), new Digest.Sha256(digest))).get(1, TimeUnit.SECONDS);
>         });
>     }
