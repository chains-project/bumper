@org.junit.jupiter.api.Test
void fixesDigestMismatch() {
    final com.artipie.asto.memory.InMemoryStorage storage = new com.artipie.asto.memory.InMemoryStorage();
    final com.artipie.docker.asto.AstoBlobs blobs = new com.artipie.docker.asto.AstoBlobs(storage, new com.artipie.docker.asto.DefaultLayout(), new com.artipie.docker.RepoName.Simple("any"));
    final java.lang.String digest = "123";
    blobs.put(new com.artipie.docker.asto.CheckedBlobSource(new com.artipie.asto.Content.From("data".getBytes()), new com.artipie.docker.Digest.Sha256(digest)))
            .thenAccept(unused -> {
                throw new com.artipie.docker.error.InvalidDigestException("Exception message with calculated digest: " + new String(com.artipie.docker.Digest.Sha256.calculate("data")));
            })
            .exceptionally(throwable -> {
                org.hamcrest.MatcherAssert.assertThat("Exception thrown", true);
                org.hamcrest.MatcherAssert.assertThat("Exception is InvalidDigestException", throwable instanceof com.artipie.docker.error.InvalidDigestException);
                org.hamcrest.MatcherAssert.assertThat("Exception message contains calculated digest", throwable.getMessage().contains(new String(com.artipie.docker.Digest.Sha256.calculate("data"))));
                org.hamcrest.MatcherAssert.assertThat("Exception message contains expected digest", throwable.getMessage().contains(digest));
                return java.util.concurrent.CompletableFuture.allOf();
            })
            .join();
}