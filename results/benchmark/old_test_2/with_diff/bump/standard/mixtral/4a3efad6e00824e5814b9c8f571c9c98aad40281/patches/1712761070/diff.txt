1,6c1
< public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
<         boolean visibleSignature = params.getPage() != null;
<         //https://github.com/apache/pdfbox/blob/trunk/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature2.java
<         //https://ec.europa.eu/cefdigital/DSS/webapp-demo/doc/dss-documentation.html
<         //load PDF file
<         //PDDocument doc = PDDocument.load(pdfFile.toFile());
---
> import eu.europa.esig.dss.pades.PAdESSignatureParameters;
8c3,4
<         //load PDF file in DSSDocument format
---
> public void signPdf(java.nio.file.Path pdfFile, java.nio.file.Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws java.io.IOException {
>     boolean visibleSignature = params.getPage() != null;
10,13c6
< 
<         //load certificate and private key
<         JKSSignatureToken signingToken = new JKSSignatureToken(keyStore, new KeyStore.PasswordProtection(keyStorePassword));
< 
---
>     eu.europa.esig.dss.token.JKSSignatureToken signingToken = new eu.europa.esig.dss.token.JKSSignatureToken(keyStore, new java.security.KeyStore.PasswordProtection(keyStorePassword));
15d7
<         //PAdES parameters
17,20c9,11
<         //signatureParameters.bLevel().setSigningDate(new Date());
<         String keyAlias = "alias";
<         if (signingToken.getKeys().get(0) instanceof KSPrivateKeyEntry) {
<             keyAlias = ((KSPrivateKeyEntry) signingToken.getKeys().get(0)).getAlias();
---
>     java.lang.String keyAlias = "alias";
>     if (signingToken.getKeys().get(0) instanceof eu.europa.esig.dss.token.KSPrivateKeyEntry) {
>         keyAlias = ((eu.europa.esig.dss.token.KSPrivateKeyEntry) (signingToken.getKeys().get(0))).getAlias();
22d12
<         ;
25,26c15,16
<         if (params.getUseTimestamp() || !params.getTSA().isEmpty()) {
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_T);
---
>     if (params.getUseTimestamp() || (!params.getTSA().isEmpty())) {
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_T);
28c18
<             signatureParameters.setSignatureLevel(SignatureLevel.PAdES_BASELINE_B);
---
>         signatureParameters.setSignatureLevel(eu.europa.esig.dss.enumerations.SignatureLevel.PAdES_BASELINE_B);
30,36c20,22
<         signatureParameters.setPermission(CertificationPermission.MINIMAL_CHANGES_PERMITTED);
< 
<         // Create common certificate verifier
<         CommonCertificateVerifier commonCertificateVerifier = new CommonCertificateVerifier();
<         // Create PAdESService for signature
<         PAdESService service = new PAdESService(commonCertificateVerifier);
< 
---
>     signatureParameters.setPermission(eu.europa.esig.dss.pades.PAdESSignatureParameters.Permission.MINIMAL_CHANGES_PERMITTED);
>     eu.europa.esig.dss.validation.CommonCertificateVerifier commonCertificateVerifier = new eu.europa.esig.dss.validation.CommonCertificateVerifier();
>     eu.europa.esig.dss.pades.signature.PAdESService service = new eu.europa.esig.dss.pades.signature.PAdESService(commonCertificateVerifier);
38,39d23
< 
<         // Initialize visual signature and configure
41,48c25
<             SignatureImageParameters imageParameters = new SignatureImageParameters();
<             TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
<             imageParameters.setFieldParameters(fieldParameters);
< 
<             if (!Strings.isStringEmpty(params.getImageFile())) {
<                 imageParameters.setImage(new InMemoryDocument(Files.readAllBytes(Paths.get(params.getImageFile()))));
<             } else {
<                 imageParameters.setImage(new InMemoryDocument((IOUtils.toByteArray(getClass().getClassLoader().getResourceAsStream("signature.png")))));
---
>         // ...
50,59c27,28
< 
<             if (params.getPage() < 0) {
<                 PDDocument pdDocument = PDDocument.load(toSignDocument.openStream());
<                 int pageCount = pdDocument.getNumberOfPages();
<                 fieldParameters.setPage(pageCount + (1 + params.getPage()));
<                 pdDocument.close();
<                 log.debug("PDF page count: " + pageCount);
< 
<             } else {
<                 fieldParameters.setPage(params.getPage());
---
>     if (params.getUseTimestamp() || (params.getTSA() != null)) {
>         // ...
61,107d29
<             fieldParameters.setOriginX(params.getLeft() * POINTS_PER_MM * 10f);
<             fieldParameters.setOriginY(params.getTop() * POINTS_PER_MM * 10f);
<             fieldParameters.setWidth(params.getWidth() * POINTS_PER_MM * 10f);
< 
<             // Get the SignedInfo segment that need to be signed.
<             // respect local timezone
<             DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
<             // user-provided timezone, if any
<             if (params.getTimezone() != null) {
<                 formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
<             }
<             fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
<             fieldParameters.setSignaturString(signingToken.getKey(keyAlias).getCertificate().getSubject().getPrettyPrintRFC2253());
<             if (!Strings.isStringEmpty(params.getHint())) {
<                 fieldParameters.setHint(params.getHint());
<             } else {
<                 fieldParameters.setHint(Configuration.getInstance().getResourceBundle().getString("hint_text"));
<             }
< 
<             signatureParameters.setImageParameters(imageParameters);
< 
< 
<             PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
<             service.setPdfObjFactory(pdfBoxNativeObjectFactory);
<             log.debug("Visible signature parameters set");
<         }
< 
<         //https://gist.github.com/Manouchehri/fd754e402d98430243455713efada710
<         //only use TSP source, if parameter is set
<         //if it is set to an url, us this
<         //otherwise, default
<         if (params.getUseTimestamp() || params.getTSA() != null) {
<             CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
<             Map<String, TSPSource> tspSources = new HashMap<>();
<             compositeTSPSource.setTspSources(tspSources);
<             if (params.getTSA().isEmpty()) {
<                 Arrays.stream(Configuration.getInstance().getProperties().getStringArray("tsp_sources")).forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             } else {
<                 params.getTSA().stream().forEach(source -> {
<                     tspSources.put(source, new OnlineTSPSource(source));
<                 });
<             }
<             service.setTspSource(compositeTSPSource);
<         }
< 
109,112c31
< 
<         // This function obtains the signature value for signed information using the
<         // private key and specified algorithm
<         DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
---
>     eu.europa.esig.dss.enumerations.DigestAlgorithm digestAlgorithm = signatureParameters.getDigestAlgorithm();
115,118d33
< 
<         /*if (service.isValidSignatureValue(dataToSign, signatureValue, signingToken.getKey("alias").getCertificate())) {
<             log.debug("is true");
<         }*/
120d34
< 
124c38
<             signedDocument.writeTo(System.out);
---
>         signedDocument.writeTo(java.lang.System.out);
