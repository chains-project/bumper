import eu.europa.esig.dss.pades.PAdESSignatureParameters;
import eu.europa.esig.dss.pades.PAdESService;
import eu.europa.esig.dss.pades.signature.PAdESSignatureParameters;
import eu.europa.esig.dss.pades.signature.SignatureImageParameters;
import eu.europa.esig.dss.pades.signature.TableSignatureFieldParameters;
import eu.europa.esig.dss.pdf.PDFDocument;
import eu.europa.esig.dss.pdf.PDFSignatureParameters;
import eu.europa.esig.dss.spi.x509.tsp.CompositeTSPSource;
import eu.europa.esig.dss.spi.x509.tsp.TSPSource;
import eu.europa.esig.dss.token.JKSSignatureToken;
import eu.europa.esig.dss.validation.CommonCertificateVerifier;
import org.openpdfsign.dss.PdfBoxNativeTableObjectFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.KeyStore.PasswordProtection;
import java.security.cert.Certificate;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.Map;

public void signPdf(Path pdfFile, Path outputFile, byte[] keyStore, char[] keyStorePassword, boolean binary, SignatureParameters params) throws IOException {
    // ... (keep the existing code unchanged)

    // PAdES parameters
    PAdESSignatureParameters signatureParameters = new PAdESSignatureParameters();
    // ... (keep the existing code unchanged)

    // Create PAdESService for signature
    PAdESService service = new PAdESService(commonCertificateVerifier);
    log.debug("Signature service initialized");

    // Initialize visual signature and configure
    if (visibleSignature) {
        SignatureImageParameters imageParameters = new SignatureImageParameters();
        TableSignatureFieldParameters fieldParameters = new TableSignatureFieldParameters();
        imageParameters.setFieldParameters(fieldParameters);
        // ... (keep the existing code unchanged)

        // Get the SignedInfo segment that need to be signed.
        // respect local timezone
        DateTimeFormatter formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME.withZone(ZoneId.systemDefault());
        // user-provided timezone, if any
        if (params.getTimezone() != null) {
            formatter = formatter.withZone(ZoneId.of(params.getTimezone()));
        }
        fieldParameters.setSignatureDate(formatter.format(signatureParameters.getSigningDate().toInstant()));
        // ... (keep the existing code unchanged)

        signatureParameters.setImageParameters(imageParameters);
        PdfBoxNativeObjectFactory pdfBoxNativeObjectFactory = new PdfBoxNativeTableObjectFactory();
        service.setPdfObjFactory(pdfBoxNativeObjectFactory);
        log.debug("Visible signature parameters set");
    }

    // only use TSP source, if parameter is set
    // if it is set to an url, us this
    // otherwise, default
    if (params.getUseTimestamp() || (params.getTSA() != null)) {
        CompositeTSPSource compositeTSPSource = new CompositeTSPSource();
        Map<String, TSPSource> tspSources = new HashMap<>();
        compositeTSPSource.setTspSources(tspSources);
        if (params.getTSA().isEmpty()) {
            Configuration.getInstance().getProperties().getStringArray("tsp_sources").forEach(( source) -> {
                tspSources.put(source, new OnlineTSPSource(source));
            });
        } else {
            params.getTSA().stream().forEach(( source) -> {
                tspSources.put(source, new OnlineTSPSource(source));
            });
        }
        service.setTspSource(compositeTSPSource);
    }

    // ... (keep the existing code unchanged)
}