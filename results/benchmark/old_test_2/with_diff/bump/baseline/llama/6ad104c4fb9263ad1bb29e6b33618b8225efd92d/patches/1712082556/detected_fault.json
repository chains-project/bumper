{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 53871235,
    "in_class_code": "public class ChachaDecoder {\n    private final ChaChaEngine decryptCipher;\n\n    public ChachaDecoder(byte[] key, byte[] nonce) throws IOException {\n        this.decryptCipher = new ChaChaEngine(20);\n        this.decryptCipher.init(false, new ParametersWithIV(new KeyParameter(key), nonce));\n    }\n\n    public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws IOException {\n        KeyParameter macKey = initRecordMAC(decryptCipher);\n        byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);\n        if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {\n            throw new TlsFatalAlert(AlertDescription.bad_record_mac);\n        }\n        byte[] output = new byte[ciphertext.length];\n        decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);\n        return output;\n    }\n}",
    "qualified_in_class_code": "public class ChachaDecoder {\n    private final org.bouncycastle.crypto.engines.ChaChaEngine decryptCipher;\n\n    public ChachaDecoder(byte[] key, byte[] nonce) throws java.io.IOException {\n        this.decryptCipher = new org.bouncycastle.crypto.engines.ChaChaEngine(20);\n        this.decryptCipher.init(false, new org.bouncycastle.crypto.params.ParametersWithIV(new org.bouncycastle.crypto.params.KeyParameter(key), nonce));\n    }\n\n    public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws java.io.IOException {\n        org.bouncycastle.crypto.params.KeyParameter macKey = initRecordMAC(decryptCipher);\n        byte[] calculatedMAC = io.github.hapjava.server.impl.crypto.PolyKeyCreator.create(macKey, additionalData, ciphertext);\n        if (!org.bouncycastle.util.Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {\n            throw new io.github.hapjava.server.impl.crypto.TlsFatalAlert(AlertDescription.bad_record_mac);\n        }\n        byte[] output = new byte[ciphertext.length];\n        decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);\n        return output;\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   class TlsFatalAlert\n  location: class io.github.hapjava.server.impl.crypto.ChachaDecoder\n",
        "error_message": "[ERROR] /HAP-Java/src/main/java/io/github/hapjava/server/impl/crypto/ChachaDecoder.java:[33,17] cannot find symbol",
        "client_file_path": "/HAP-Java/src/main/java/io/github/hapjava/server/impl/crypto/ChachaDecoder.java",
        "client_line_position": "33"
    },
    "client_end_line_number": 40,
    "client_line_number": 25,
    "method_code": "public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext)\n      throws IOException {\n\n    KeyParameter macKey = initRecordMAC(decryptCipher);\n\n    byte[] calculatedMAC = PolyKeyCreator.create(macKey, additionalData, ciphertext);\n\n    if (!Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {\n      throw new TlsFatalAlert(AlertDescription.bad_record_mac);\n    }\n\n    byte[] output = new byte[ciphertext.length];\n    decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);\n\n    return output;\n  }",
    "qualified_code": "public byte[] decodeCiphertext(byte[] receivedMAC, byte[] additionalData, byte[] ciphertext) throws java.io.IOException {\n    org.bouncycastle.crypto.params.KeyParameter macKey = initRecordMAC(decryptCipher);\n    byte[] calculatedMAC = io.github.hapjava.server.impl.crypto.PolyKeyCreator.create(macKey, additionalData, ciphertext);\n    if (!org.bouncycastle.util.Arrays.constantTimeAreEqual(calculatedMAC, receivedMAC)) {\n        throw new io.github.hapjava.server.impl.crypto.TlsFatalAlert(AlertDescription.bad_record_mac);\n    }\n    byte[] output = new byte[ciphertext.length];\n    decryptCipher.processBytes(ciphertext, 0, ciphertext.length, output, 0);\n    return output;\n}",
    "method_name": "decodeCiphertext"
}