0a1,27
> import com.artipie.http.auth.AuthUser;
> import com.artipie.http.auth.Authentication;
> import com.artipie.http.auth.Authentication.Single;
> import com.artipie.http.auth.Permission;
> import com.artipie.http.auth.Permissions;
> import com.artipie.http.auth.UserPermissions;
> import com.artipie.http.slice.Slice;
> import com.artipie.http.ssl.SslUtils;
> import com.artipie.security.perms.Action;
> import com.artipie.security.perms.Action.Standard;
> import com.artipie.security.perms.PermissionConfig;
> import com.artipie.security.perms.User;
> import com.artipie.security.perms.UserPermissions;
> import java.util.Collections;
> import java.util.concurrent.CompletableFuture;
> import java.util.concurrent.ExecutionException;
> import java.util.function.Function;
> import org.hamcrest.MatcherAssert;
> import org.hamcrest.Matchers;
> import static com.artipie.http.auth.Permission.All;
> import static com.artipie.http.auth.Permission.Any;
> import static com.artipie.http.auth.Permission.ByName;
> import static com.artipie.security.perms.Action.AllActions;
> import static com.artipie.security.perms.Action.StandardActions;
> import static com.artipie.security.perms.PermissionConfig.of;
> import static com.artipie.security.perms.UserPermissions.singleUserPermissions;
> 
2c29
<     void testScope() {
---
> void testScope() throws ExecutionException, InterruptedException {
7,41c34,43
<         new AuthScopeSlice(
<             new ScopeSlice() {
<                 @Override
<                 public Scope scope(final String rqline) {
<                     cline.set(rqline);
<                     return new Scope.FromString(action);
<                 }
< 
<                 @Override
<                 public Response response(
<                     final String line,
<                     final Iterable<Map.Entry<String, String>> headers,
<                     final Publisher<ByteBuffer> body
<                 ) {
<                     return StandardRs.OK;
<                 }
<             },
<             (headers, rline) -> CompletableFuture.completedFuture(
<                 new AuthScheme.Result() {
<                     @Override
<                     public Optional<Authentication.User> user() {
<                         return Optional.of(new Authentication.User("alice"));
<                     }
< 
<                     @Override
<                     public String challenge() {
<                         return "";
<                     }
<                 }
<             ),
<             (user, act) -> {
<                 caction.set(act);
<                 return true;
<             }
<         ).response(line, Headers.EMPTY, Content.EMPTY).send(
---
>     final User user = new User.Simple(Collections.emptySet(), SslUtils.perms());
>     final Permission permission = new Permissions.Single(ByName.of("foo"), AllActions);
>     final UserPermissions userPermissions = singleUserPermissions(permission, user);
>     final Authentication authentication = new Authentication.Single(user, "test-realm");
>     final Slice.Context ctx = new Slice.Context(
>         authentication,
>         new Permission$ByName(action, userPermissions),
>         (AuthUser authUser, String s) -> true
>     );
>     new AuthScopeSlice().response(line, Headers.EMPTY, Content.EMPTY).send(
43c45
<         ).toCompletableFuture().join();
---
>     ).apply(ctx).toCompletableFuture().get();
