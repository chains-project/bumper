import com.artipie.http.auth.AuthUser;
import com.artipie.http.auth.Authentication;
import com.artipie.http.auth.Authentication.Single;
import com.artipie.http.auth.Permission;
import com.artipie.http.auth.Permissions;
import com.artipie.http.auth.UserPermissions;
import com.artipie.http.rs.StandardRs;
import com.artipie.http.rs.Rs;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.equalTo;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

@Test
void testScope() {
    final String line = "GET /resource.txt HTTP/1.1";
    final String action = "foo:bar:baz";
    final AtomicReference<String> caction = new AtomicReference<>();
    final AtomicReference<String> cline = new AtomicReference<>();
    UserPermissions userPermissions = new UserPermissions(
        () -> new User$Simple(Set.of(), mock(PermissionCollection.class)),
        permissions -> mock(UserPermissions.class)
    );
    Single<Authentication.User> authUserSingle = new Single<>(new AuthUser("alice"), userPermissions);
    Permission permission = mock(Permission.class);
    when(permission.allowed(authUserSingle)).thenReturn(true);
    Permissions permissions = new Permissions(permission);
    new AuthScopeSlice(
        rqline -> new Scope.FromString(action),
        (headers, rline) -> CompletableFuture.completedFuture(
            new AuthScheme.Result() {
                @Override
                public Optional<Authentication.User> user() {
                    return Optional.of(authUserSingle);
                }

                @Override
                public String challenge() {
                    return "";
                }
            }
        ),
        (user, act) -> {
            caction.set(act);
            return true;
        }
    ).response(line, Headers.EMPTY, Content.EMPTY).send(
        (status, headers, body) -> CompletableFuture.allOf()
    ).toCompletableFuture().join();
    MatcherAssert.assertThat(
        "Request line passed to slice",
        cline.get(),
        new IsEqual<>(line)
    );
    MatcherAssert.assertThat(
        "Scope passed as action to permissions",
        caction.get(),
        new IsEqual<>(action)
    );
}