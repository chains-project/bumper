{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 495702238,
    "in_class_code": "public class AbstractTest {\n    private static Injector injector;\n\n    protected static final String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {\n            {\n                this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n                this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n                this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n                this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n            }\n        };\n        Yaml yaml = new Yaml(constructor, representer);\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "qualified_in_class_code": "public class AbstractTest {\n    private static com.google.inject.Injector injector;\n\n    protected static final java.lang.String YML_CONFIGS_DIR = \"src/test/resources/yml/\";\n\n    public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {\n        final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();\n        loadingConfig.setTagInspector(new com.premiumminds.billy.core.test.TrustedTagInspector());\n        final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());\n        final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag(\"!ZoneId\");\n        representer.addClassTag(java.time.ZoneId.class, zoneIdTag);\n        final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag(\"!LocalDate\");\n        representer.addClassTag(java.time.LocalDate.class, localDateTag);\n        final org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(clazz, loadingConfig) {\n            {\n                this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, \"ZoneId\"));\n                this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, \"LocalDate\"));\n                this.yamlConstructors.put(zoneIdTag, new com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct());\n                this.yamlConstructors.put(localDateTag, new com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct());\n            }\n        };\n        org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);\n        try {\n            return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));\n        } catch (java.io.FileNotFoundException e) {\n            throw new java.lang.RuntimeException(e);\n        }\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   class TrustedTagInspector\n  location: class com.premiumminds.billy.core.test.AbstractTest\n",
        "error_message": "[ERROR] /billy/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java:[72,43] cannot find symbol",
        "client_file_path": "/billy/billy-core/src/test/java/com/premiumminds/billy/core/test/AbstractTest.java",
        "client_line_position": "72"
    },
    "client_end_line_number": 95,
    "client_line_number": 70,
    "method_code": "public <T extends MockBaseEntity> T createMockEntity(Class<T> clazz, String path) {\n        final LoaderOptions loadingConfig = new LoaderOptions();\n        loadingConfig.setTagInspector(new TrustedTagInspector());\n\n        final Representer representer = new Representer(new DumperOptions());\n        final Tag zoneIdTag = new Tag(\"!ZoneId\");\n        representer.addClassTag(ZoneId.class, zoneIdTag);\n        final Tag localDateTag = new Tag(\"!LocalDate\");\n        representer.addClassTag(LocalDate.class, localDateTag);\n\n        final Constructor constructor = new Constructor(clazz, loadingConfig) {{\n            this.addTypeDescription(new TypeDescription(ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new TypeDescription(LocalDate.class, \"LocalDate\"));\n\n            this.yamlConstructors.put(zoneIdTag, new JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new JavaLocalDateConstruct());\n        }};\n\n        Yaml yaml = new Yaml(constructor, representer);\n\n        try {\n            return yaml.load(new BufferedReader(new FileReader(path)));\n        } catch (FileNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n    }",
    "qualified_code": "public <T extends com.premiumminds.billy.core.test.fixtures.MockBaseEntity> T createMockEntity(java.lang.Class<T> clazz, java.lang.String path) {\n    final org.yaml.snakeyaml.LoaderOptions loadingConfig = new org.yaml.snakeyaml.LoaderOptions();\n    loadingConfig.setTagInspector(new com.premiumminds.billy.core.test.TrustedTagInspector());\n    final org.yaml.snakeyaml.representer.Representer representer = new org.yaml.snakeyaml.representer.Representer(new org.yaml.snakeyaml.DumperOptions());\n    final org.yaml.snakeyaml.nodes.Tag zoneIdTag = new org.yaml.snakeyaml.nodes.Tag(\"!ZoneId\");\n    representer.addClassTag(java.time.ZoneId.class, zoneIdTag);\n    final org.yaml.snakeyaml.nodes.Tag localDateTag = new org.yaml.snakeyaml.nodes.Tag(\"!LocalDate\");\n    representer.addClassTag(java.time.LocalDate.class, localDateTag);\n    final org.yaml.snakeyaml.constructor.Constructor constructor = new org.yaml.snakeyaml.constructor.Constructor(clazz, loadingConfig) {\n        {\n            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.ZoneId.class, \"ZoneId\"));\n            this.addTypeDescription(new org.yaml.snakeyaml.TypeDescription(java.time.LocalDate.class, \"LocalDate\"));\n            this.yamlConstructors.put(zoneIdTag, new com.premiumminds.billy.core.test.fixtures.JavaZoneIdConstruct());\n            this.yamlConstructors.put(localDateTag, new com.premiumminds.billy.core.test.fixtures.JavaLocalDateConstruct());\n        }\n    };\n    org.yaml.snakeyaml.Yaml yaml = new org.yaml.snakeyaml.Yaml(constructor, representer);\n    try {\n        return yaml.load(new java.io.BufferedReader(new java.io.FileReader(path)));\n    } catch (java.io.FileNotFoundException e) {\n        throw new java.lang.RuntimeException(e);\n    }\n}",
    "method_name": "createMockEntity"
}