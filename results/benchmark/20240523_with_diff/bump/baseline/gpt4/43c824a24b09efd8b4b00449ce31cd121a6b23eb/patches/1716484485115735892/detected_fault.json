{
    "py/object": "pipeline.types.detected_fault.DetectedFault",
    "identifier": 1881561036,
    "in_class_code": "/**\n * Factory class to create MarcRecord from JsonPathCache\n */\npublic class MarcFactory {\n    private static final Logger logger = Logger.getLogger(MarcFactory.class.getCanonicalName());\n\n    private static final List<String> fixableControlFields = Arrays.asList(\"006\", \"007\", \"008\");\n\n    private static Schema schema = new MarcJsonSchema();\n\n    private MarcFactory() {\n        throw new IllegalStateException(\"This is a utility class, can not be instantiated\");\n    }\n\n    private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n        List<XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n        List<String> values = new ArrayList<>();\n        if (instances != null) {\n            for (XmlFieldInstance instance : instances) {\n                values.add(instance.getValue());\n            }\n        }\n        return values;\n    }\n}",
    "qualified_in_class_code": "/**\n * Factory class to create MarcRecord from JsonPathCache\n */\npublic class MarcFactory {\n    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(de.gwdg.metadataqa.marc.MarcFactory.class.getCanonicalName());\n\n    private static final java.util.List<java.lang.String> fixableControlFields = java.util.Arrays.asList(\"006\", \"007\", \"008\");\n\n    private static de.gwdg.metadataqa.api.schema.Schema schema = new de.gwdg.metadataqa.api.schema.MarcJsonSchema();\n\n    private MarcFactory() {\n        throw new java.lang.IllegalStateException(\"This is a utility class, can not be instantiated\");\n    }\n\n    private static java.util.List<java.lang.String> extractList(de.gwdg.metadataqa.api.model.pathcache.JsonPathCache cache, de.gwdg.metadataqa.api.json.JsonBranch branch) {\n        java.util.List<de.gwdg.metadataqa.api.model.XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n        java.util.List<java.lang.String> values = new java.util.ArrayList<>();\n        if (instances != null)\n            for (de.gwdg.metadataqa.api.model.XmlFieldInstance instance : instances)\n                values.add(instance.getValue());\n\n\n        return values;\n    }\n}",
    "plausible_dependency_identifier": null,
    "error_info": {
        "py/object": "pipeline.types.error_info.ErrorInfo",
        "additional_info": "  symbol:   class JsonBranch\n  location: class de.gwdg.metadataqa.marc.MarcFactory\n",
        "error_message": "[ERROR] /qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java:[313,64] cannot find symbol",
        "client_file_path": "/qa-catalogue/src/main/java/de/gwdg/metadataqa/marc/MarcFactory.java",
        "client_line_position": "313"
    },
    "client_end_line_number": 320,
    "client_line_number": 313,
    "method_code": "private static List<String> extractList(JsonPathCache cache, JsonBranch branch) {\n    List<XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n    List<String> values = new ArrayList<>();\n    if (instances != null)\n      for (XmlFieldInstance instance : instances)\n        values.add(instance.getValue());\n    return values;\n  }",
    "qualified_code": "private static java.util.List<java.lang.String> extractList(de.gwdg.metadataqa.api.model.pathcache.JsonPathCache cache, de.gwdg.metadataqa.api.json.JsonBranch branch) {\n    java.util.List<de.gwdg.metadataqa.api.model.XmlFieldInstance> instances = cache.get(branch.getJsonPath());\n    java.util.List<java.lang.String> values = new java.util.ArrayList<>();\n    if (instances != null)\n        for (de.gwdg.metadataqa.api.model.XmlFieldInstance instance : instances)\n            values.add(instance.getValue());\n\n\n    return values;\n}",
    "method_name": "extractList"
}